diff --git a/home/whalien/codebase/cpp/mergebot/eva/output/art/183ef2e9-9f9413b0-4e97dd87/runtime@runtime.no_comments_mergebot.cc b/home/whalien/codebase/cpp/mergebot/eva/output/art/183ef2e9-9f9413b0-4e97dd87/runtime@runtime.no_comments_merged.cc
index 37336ab..f4cc81c 100644
--- a/home/whalien/codebase/cpp/mergebot/eva/output/art/183ef2e9-9f9413b0-4e97dd87/runtime@runtime.no_comments_mergebot.cc
+++ b/home/whalien/codebase/cpp/mergebot/eva/output/art/183ef2e9-9f9413b0-4e97dd87/runtime@runtime.no_comments_merged.cc
@@ -159 +158,0 @@
-#include "well_known_classes.h"
@@ -176 +175,2 @@ static constexpr double kNormalMaxLoadFactor = 0.7;
-void Runtime::EndThreadBirth() struct TraceConfig {
+Runtime* Runtime::instance_ = nullptr;
+struct TraceConfig {
@@ -274,3 +274,2 @@ Runtime::Runtime()
-  static_assert(
-      Runtime::kCalleeSaveSize == static_cast<uint32_t>(CalleeSaveType::kLastCalleeSaveType),
-      "Unexpected size");
+  static_assert(Runtime::kCalleeSaveSize ==
+                    static_cast<uint32_t>(CalleeSaveType::kLastCalleeSaveType), "Unexpected size");
@@ -317,2 +316,3 @@ Runtime::~Runtime() {
-    LOG_STREAM(INFO) << "GC CPU time " << PrettyDuration(gc_cpu_time) << " out of process CPU time "
-                     << PrettyDuration(process_cpu_time) << " (" << ratio << ")"
+    LOG_STREAM(INFO) << "GC CPU time " << PrettyDuration(gc_cpu_time)
+        << " out of process CPU time " << PrettyDuration(process_cpu_time)
+        << " (" << ratio << ")"
@@ -326,2 +326,2 @@ Runtime::~Runtime() {
-                     << static_cast<uint64_t>(pre_gc_weighted_allocated_bytes) << " ("
-                     << PrettySize(pre_gc_weighted_allocated_bytes) << ")";
+        << static_cast<uint64_t>(pre_gc_weighted_allocated_bytes)
+        << " (" << PrettySize(pre_gc_weighted_allocated_bytes) << ")";
@@ -329,2 +329,2 @@ Runtime::~Runtime() {
-                     << static_cast<uint64_t>(post_gc_weighted_allocated_bytes) << " ("
-                     << PrettySize(post_gc_weighted_allocated_bytes) << ")"
+        << static_cast<uint64_t>(post_gc_weighted_allocated_bytes)
+        << " (" << PrettySize(post_gc_weighted_allocated_bytes) << ")"
@@ -477 +477,2 @@ struct AbortState {
-             << (tscl_already_held ? "" : " thread_suspend_count_lock") << "\n";
+             << (tscl_already_held ? "" : " thread_suspend_count_lock")
+             << "\n";
@@ -556,2 +557,3 @@ class UpdateMethodsPreFirstForkVisitor : public ClassVisitor {
-          if (method.IsCriticalNative() ? class_linker_->IsJniDlsymLookupCriticalStub(existing) :
-                                          class_linker_->IsJniDlsymLookupStub(existing)) {
+          if (method.IsCriticalNative()
+                  ? class_linker_->IsJniDlsymLookupCriticalStub(existing)
+                  : class_linker_->IsJniDlsymLookupStub(existing)) {
@@ -600,3 +602,3 @@ void Runtime::PostZygoteFork() {
-      jit->GetThreadPool()->CheckPthreadPriority(IsZygote() ?
-                                                     jit->GetZygoteThreadPoolPthreadPriority() :
-                                                     jit->GetThreadPoolPthreadPriority());
+      jit->GetThreadPool()->CheckPthreadPriority(
+          IsZygote() ? jit->GetZygoteThreadPoolPthreadPriority()
+                     : jit->GetThreadPoolPthreadPriority());
@@ -638 +640 @@ bool Runtime::ParseOptions(const RuntimeOptions& raw_options,
-{
+static bool IsSafeToCallAbort() NO_THREAD_SAFETY_ANALYSIS {
@@ -765,2 +767,3 @@ bool Runtime::Start() {
-    NativeBridgeAction action =
-        force_native_bridge_ ? NativeBridgeAction::kInitialize : NativeBridgeAction::kUnload;
+    NativeBridgeAction action = force_native_bridge_
+        ? NativeBridgeAction::kInitialize
+        : NativeBridgeAction::kUnload;
@@ -822 +825,2 @@ void Runtime::EndThreadBirth() REQUIRES(Locks::runtime_shutdown_lock_) {
-void Runtime::InitNonZygoteOrPostFork(JNIEnv* env,
+void Runtime::InitNonZygoteOrPostFork(
+    JNIEnv* env,
@@ -875 +879,2 @@ void Runtime::InitNonZygoteOrPostFork(JNIEnv* env,
-    metrics::ReportingConfig metrics_config = metrics::ReportingConfig::FromFlags(is_system_server);
+    metrics::ReportingConfig metrics_config =
+        metrics::ReportingConfig::FromFlags(is_system_server);
@@ -972 +977,3 @@ void Runtime::SetSentinel(ObjPtr<mirror::Object> sentinel) {
-GcRoot<mirror::Object> Runtime::GetSentinel() { return sentinel_; }
+GcRoot<mirror::Object> Runtime::GetSentinel() {
+  return sentinel_;
+}
@@ -984,2 +991,2 @@ static inline void CreatePreAllocatedException(Thread* self,
-  ObjPtr<mirror::Throwable> exception_object =
-      ObjPtr<mirror::Throwable>::DownCast(klass->Alloc(self, allocator_type));
+  ObjPtr<mirror::Throwable> exception_object = ObjPtr<mirror::Throwable>::DownCast(
+      klass->Alloc(self, allocator_type));
@@ -1031,2 +1038,3 @@ std::string Runtime::GetApexVersions(ArrayRef<const std::string> boot_class_path
-      uint64_t version = info->second->hasLastUpdateMillis() ? info->second->getLastUpdateMillis() :
-                                                               info->second->getVersionCode();
+      uint64_t version = info->second->hasLastUpdateMillis()
+          ? info->second->getLastUpdateMillis()
+          : info->second->getVersionCode();
@@ -1045 +1053,3 @@ void Runtime::InitializeApexVersions() {
-void Runtime::ReloadAllFlags(const std::string& caller) { FlagBase::ReloadAllFlags(caller); }
+void Runtime::ReloadAllFlags(const std::string& caller) {
+  FlagBase::ReloadAllFlags(caller);
+}
@@ -1166,2 +1176 @@ bool Runtime::Init(RuntimeArgumentMap&& runtime_options_in) {
-              << (core_platform_api_policy_ == hiddenapi::EnforcementPolicy::kEnabled ? "true" :
-                                                                                        "false");
+        << (core_platform_api_policy_ == hiddenapi::EnforcementPolicy::kEnabled ? "true" : "false");
@@ -1199,3 +1208,3 @@ bool Runtime::Init(RuntimeArgumentMap&& runtime_options_in) {
-      gUseReadBarrier ? BackgroundGcOption(gc::kCollectorTypeCCBackground) :
-                        (gUseUserfaultfd ? BackgroundGcOption(xgc_option.collector_type_) :
-                                           runtime_options.GetOrDefault(Opt::BackgroundGc));
+      gUseReadBarrier ? BackgroundGcOption(gc::kCollectorTypeCCBackground)
+                      : (gUseUserfaultfd ? BackgroundGcOption(xgc_option.collector_type_)
+                                         : runtime_options.GetOrDefault(Opt::BackgroundGc));
@@ -1247,2 +1256,2 @@ bool Runtime::Init(RuntimeArgumentMap&& runtime_options_in) {
-  jdwp_provider_ =
-      CanonicalizeJdwpProvider(runtime_options.GetOrDefault(Opt::JdwpProvider), IsJavaDebuggable());
+  jdwp_provider_ = CanonicalizeJdwpProvider(runtime_options.GetOrDefault(Opt::JdwpProvider),
+                                            IsJavaDebuggable());
@@ -1267,2 +1276,2 @@ bool Runtime::Init(RuntimeArgumentMap&& runtime_options_in) {
-      constexpr const char* plugin_name =
-          kIsDebugBuild ? "libadbconnectiond.so" : "libadbconnection.so";
+      constexpr const char* plugin_name = kIsDebugBuild ? "libadbconnectiond.so"
+                                                        : "libadbconnection.so";
@@ -1355 +1364,2 @@ bool Runtime::Init(RuntimeArgumentMap&& runtime_options_in) {
-    class_linker_ = new ClassLinker(intern_table_,
+    class_linker_ = new ClassLinker(
+        intern_table_,
@@ -1385,4 +1395,3 @@ bool Runtime::Init(RuntimeArgumentMap&& runtime_options_in) {
-        ArrayRef<const int> bcp_fds =
-            start < GetBootClassPathFds().size() ?
-                ArrayRef<const int>(GetBootClassPathFds()).SubArray(start) :
-                ArrayRef<const int>();
+        ArrayRef<const int> bcp_fds = start < GetBootClassPathFds().size()
+            ? ArrayRef<const int>(GetBootClassPathFds()).SubArray(start)
+            : ArrayRef<const int>();
@@ -1425,2 +1434,2 @@ bool Runtime::Init(RuntimeArgumentMap&& runtime_options_in) {
-  boot_class_path_checksums_ =
-      gc::space::ImageSpace::GetBootClassPathChecksums(image_spaces, bcp_dex_files);
+  boot_class_path_checksums_ = gc::space::ImageSpace::GetBootClassPathChecksums(image_spaces,
+                                                                                bcp_dex_files);
@@ -1447,2 +1456 @@ bool Runtime::Init(RuntimeArgumentMap&& runtime_options_in) {
-    DCHECK(pre_allocated_OutOfMemoryError_when_throwing_exception_.Read()
-               ->GetClass()
+    DCHECK(pre_allocated_OutOfMemoryError_when_throwing_exception_.Read()->GetClass()
@@ -1452,2 +1460,2 @@ bool Runtime::Init(RuntimeArgumentMap&& runtime_options_in) {
-    DCHECK(pre_allocated_OutOfMemoryError_when_throwing_oome_.Read()->GetClass()->DescriptorEquals(
-        "Ljava/lang/OutOfMemoryError;"));
+    DCHECK(pre_allocated_OutOfMemoryError_when_throwing_oome_.Read()->GetClass()
+               ->DescriptorEquals("Ljava/lang/OutOfMemoryError;"));
@@ -1456,2 +1464 @@ bool Runtime::Init(RuntimeArgumentMap&& runtime_options_in) {
-    DCHECK(pre_allocated_OutOfMemoryError_when_handling_stack_overflow_.Read()
-               ->GetClass()
+    DCHECK(pre_allocated_OutOfMemoryError_when_handling_stack_overflow_.Read()->GetClass()
@@ -1461,2 +1468,2 @@ bool Runtime::Init(RuntimeArgumentMap&& runtime_options_in) {
-    DCHECK(pre_allocated_NoClassDefFoundError_.Read()->GetClass()->DescriptorEquals(
-        "Ljava/lang/NoClassDefFoundError;"));
+    DCHECK(pre_allocated_NoClassDefFoundError_.Read()->GetClass()
+               ->DescriptorEquals("Ljava/lang/NoClassDefFoundError;"));
@@ -1531,2 +1538,2 @@ bool Runtime::Init(RuntimeArgumentMap&& runtime_options_in) {
-    constexpr const char* plugin_name =
-        kIsDebugBuild ? "libperfetto_hprofd.so" : "libperfetto_hprof.so";
+    constexpr const char* plugin_name = kIsDebugBuild ?
+        "libperfetto_hprofd.so" : "libperfetto_hprof.so";
@@ -1561,2 +1568,2 @@ bool Runtime::EnsurePerfettoPlugin(std::string* error_msg) {
-  constexpr const char* plugin_name =
-      kIsDebugBuild ? "libperfetto_hprofd.so" : "libperfetto_hprof.so";
+  constexpr const char* plugin_name = kIsDebugBuild ?
+    "libperfetto_hprofd.so" : "libperfetto_hprof.so";
@@ -1565 +1572,2 @@ bool Runtime::EnsurePerfettoPlugin(std::string* error_msg) {
-static bool EnsureJvmtiPlugin(Runtime* runtime, std::string* error_msg) {
+static bool EnsureJvmtiPlugin(Runtime* runtime,
+                              std::string* error_msg) {
@@ -1608 +1616,2 @@ void Runtime::InitNativeMethods() {
-    if (!java_vm_->LoadNativeLibrary(env, "libicu_jni.so", nullptr, java_lang_Object, &error_msg)) {
+    if (!java_vm_->LoadNativeLibrary(
+          env, "libicu_jni.so", nullptr, java_lang_Object, &error_msg)) {
@@ -1620 +1629,3 @@ void Runtime::InitNativeMethods() {
-    constexpr const char* kOpenJdkLibrary = kIsDebugBuild ? "libopenjdkd.so" : "libopenjdk.so";
+    constexpr const char* kOpenJdkLibrary = kIsDebugBuild
+                                                ? "libopenjdkd.so"
+                                                : "libopenjdk.so";
@@ -1622 +1633,2 @@ void Runtime::InitNativeMethods() {
-    if (!java_vm_->LoadNativeLibrary(env, kOpenJdkLibrary, nullptr, java_lang_Object, &error_msg)) {
+    if (!java_vm_->LoadNativeLibrary(
+          env, kOpenJdkLibrary, nullptr, java_lang_Object, &error_msg)) {
@@ -1630 +1642,3 @@ void Runtime::InitNativeMethods() {
-void Runtime::ReclaimArenaPoolMemory() { arena_pool_->LockReclaimMemory(); }
+void Runtime::ReclaimArenaPoolMemory() {
+  arena_pool_->LockReclaimMemory();
+}
@@ -1706,2 +1720,5 @@ void Runtime::DumpDeoptimizations(std::ostream& os) {
-      os << "Number of " << GetDeoptimizationKindName(static_cast<DeoptimizationKind>(i))
-         << " deoptimizations: " << deoptimization_counts_[i] << "\n";
+      os << "Number of "
+         << GetDeoptimizationKindName(static_cast<DeoptimizationKind>(i))
+         << " deoptimizations: "
+         << deoptimization_counts_[i]
+         << "\n";
@@ -1803,5 +1820,2 @@ void Runtime::BlockSignals() {
-bool Runtime::AttachCurrentThread(const char* thread_name,
-                                  bool as_daemon,
-                                  jobject thread_group,
-                                  bool create_peer,
-                                  bool should_run_callbacks) {
+bool Runtime::AttachCurrentThread(const char* thread_name, bool as_daemon, jobject thread_group,
+                                  bool create_peer, bool should_run_callbacks) {
@@ -1809,2 +1823,5 @@ bool Runtime::AttachCurrentThread(const char* thread_name,
-  Thread* self =
-      Thread::Attach(thread_name, as_daemon, thread_group, create_peer, should_run_callbacks);
+  Thread* self = Thread::Attach(thread_name,
+                                as_daemon,
+                                thread_group,
+                                create_peer,
+                                should_run_callbacks);
@@ -1895,6 +1912,6 @@ void Runtime::VisitNonThreadRoots(RootVisitor* visitor) {
-  pre_allocated_OutOfMemoryError_when_throwing_exception_.VisitRootIfNonNull(
-      visitor, RootInfo(kRootVMInternal));
-  pre_allocated_OutOfMemoryError_when_throwing_oome_.VisitRootIfNonNull(visitor,
-                                                                        RootInfo(kRootVMInternal));
-  pre_allocated_OutOfMemoryError_when_handling_stack_overflow_.VisitRootIfNonNull(
-      visitor, RootInfo(kRootVMInternal));
+  pre_allocated_OutOfMemoryError_when_throwing_exception_
+      .VisitRootIfNonNull(visitor, RootInfo(kRootVMInternal));
+  pre_allocated_OutOfMemoryError_when_throwing_oome_
+      .VisitRootIfNonNull(visitor, RootInfo(kRootVMInternal));
+  pre_allocated_OutOfMemoryError_when_handling_stack_overflow_
+      .VisitRootIfNonNull(visitor, RootInfo(kRootVMInternal));
@@ -1947,2 +1964,4 @@ static ArtMethod* CreateRuntimeMethod(ClassLinker* class_linker, LinearAlloc* li
-  LengthPrefixedArray<ArtMethod>* method_array =
-      class_linker->AllocArtMethodArray(Thread::Current(), linear_alloc, 1);
+  LengthPrefixedArray<ArtMethod>* method_array = class_linker->AllocArtMethodArray(
+      Thread::Current(),
+      linear_alloc,
+      1);
@@ -2048 +2067,3 @@ void Runtime::SetInstructionSet(InstructionSet instruction_set) {
-void Runtime::ClearInstructionSet() { instruction_set_ = InstructionSet::kNone; }
+void Runtime::ClearInstructionSet() {
+  instruction_set_ = InstructionSet::kNone;
+}
@@ -2064 +2085,2 @@ void Runtime::RegisterAppInfo(const std::string& package_name,
-  app_info_.RegisterAppInfo(package_name,
+  app_info_.RegisterAppInfo(
+      package_name,
@@ -2075,2 +2097,2 @@ void Runtime::RegisterAppInfo(const std::string& package_name,
-  VLOG(profiler) << "Register app with " << profile_output_filename << " "
-                 << android::base::Join(code_paths, ':');
+  VLOG(profiler) << "Register app with " << profile_output_filename
+      << " " << android::base::Join(code_paths, ':');
@@ -2236 +2258,2 @@ void Runtime::RecordWeakStringRemoval(ObjPtr<mirror::String> s) {
-void Runtime::RecordResolveString(ObjPtr<mirror::DexCache> dex_cache, dex::StringIndex string_idx) {
+void Runtime::RecordResolveString(ObjPtr<mirror::DexCache> dex_cache,
+                                  dex::StringIndex string_idx) {
@@ -2261 +2284,2 @@ std::string Runtime::GetFaultMessage() {
-void Runtime::AddCurrentRuntimeFeaturesAsDex2OatArguments(std::vector<std::string>* argv) const {
+void Runtime::AddCurrentRuntimeFeaturesAsDex2OatArguments(std::vector<std::string>* argv)
+    const {
@@ -2310 +2334,3 @@ void Runtime::CreateJit() {
-bool Runtime::CanRelocate() const { return !IsAotCompiler(); }
+bool Runtime::CanRelocate() const {
+  return !IsAotCompiler();
+}
@@ -2337 +2363,3 @@ void Runtime::FixupConflictTables() {
-void Runtime::DisableVerifier() { verify_ = verifier::VerifyMode::kNone; }
+void Runtime::DisableVerifier() {
+  verify_ = verifier::VerifyMode::kNone;
+}
@@ -2339 +2367,5 @@ bool Runtime::IsVerificationEnabled() const {
-  return verify_ == verifier::VerifyMode::kEnable || verify_ == verifier::VerifyMode::kSoftFail;
+  return verify_ == verifier::VerifyMode::kEnable ||
+      verify_ == verifier::VerifyMode::kSoftFail;
+}
+bool Runtime::IsVerificationSoftFail() const {
+  return verify_ == verifier::VerifyMode::kSoftFail;
@@ -2341 +2372,0 @@ bool Runtime::IsVerificationEnabled() const {
-bool Runtime::IsVerificationSoftFail() const { return verify_ == verifier::VerifyMode::kSoftFail; }
@@ -2357,2 +2388,3 @@ LinearAlloc* Runtime::CreateLinearAlloc() {
-  return pool != nullptr ? new LinearAlloc(pool, gUseUserfaultfd) :
-                           new LinearAlloc(arena_pool_.get(), false);
+  return pool != nullptr
+      ? new LinearAlloc(pool, gUseUserfaultfd)
+      : new LinearAlloc(arena_pool_.get(), false);
@@ -2399,2 +2431,6 @@ void Runtime::UpdateProcessState(ProcessState process_state) {
-void Runtime::RegisterSensitiveThread() const { Thread::SetJitSensitiveThread(); }
-bool Runtime::UseJitCompilation() const { return (jit_ != nullptr) && jit_->UseJitCompilation(); }
+void Runtime::RegisterSensitiveThread() const {
+  Thread::SetJitSensitiveThread();
+}
+bool Runtime::UseJitCompilation() const {
+  return (jit_ != nullptr) && jit_->UseJitCompilation();
+}
@@ -2412 +2448,3 @@ void Runtime::EnvSnapshot::TakeSnapshot() {
-char** Runtime::EnvSnapshot::GetSnapshot() const { return c_env_vector_.get(); }
+char** Runtime::EnvSnapshot::GetSnapshot() const {
+  return c_env_vector_.get();
+}
@@ -2428 +2466,3 @@ void Runtime::RemoveSystemWeakHolder(gc::AbstractSystemWeakHolder* holder) {
-RuntimeCallbacks* Runtime::GetRuntimeCallbacks() { return callbacks_.get(); }
+RuntimeCallbacks* Runtime::GetRuntimeCallbacks() {
+  return callbacks_.get();
+}
@@ -2443 +2483,2 @@ class UpdateEntryPointsClassVisitor : public ClassVisitor {
-          (!m.IsNative() || deoptimize_native_methods) && !m.IsProxyMethod()) {
+          (!m.IsNative() || deoptimize_native_methods) &&
+          !m.IsProxyMethod()) {
@@ -2531 +2572,3 @@ bool Runtime::GetStartupCompleted() const {
-void Runtime::SetSignalHookDebuggable(bool value) { SkipAddSignalHandler(value); }
+void Runtime::SetSignalHookDebuggable(bool value) {
+  SkipAddSignalHandler(value);
+}
@@ -2565,2 +2608,4 @@ void Runtime::MadviseFileForRange(size_t madvise_size_limit_bytes,
-    ScopedTrace madvising_trace("madvising " + file_name +
-                                " size=" + std::to_string(target_size_bytes));
+    ScopedTrace madvising_trace("madvising "
+                                + file_name
+                                + " size="
+                                + std::to_string(target_size_bytes));
@@ -2571 +2616,2 @@ void Runtime::MadviseFileForRange(size_t madvise_size_limit_bytes,
-    for (const uint8_t* madvise_start = map_begin; madvise_start < target_pos;
+    for (const uint8_t* madvise_start = map_begin;
+         madvise_start < target_pos;
@@ -2574,2 +2620,2 @@ void Runtime::MadviseFileForRange(size_t madvise_size_limit_bytes,
-      size_t madvise_length =
-          std::min(kIdealIoTransferSizeBytes, static_cast<size_t>(target_pos - madvise_start));
+      size_t madvise_length = std::min(kIdealIoTransferSizeBytes,
+                                       static_cast<size_t>(target_pos - madvise_start));
@@ -2599,0 +2646,23 @@ void Runtime::AppendToBootClassPath(const std::string& filename, const std::stri
+void Runtime::AppendToBootClassPath(
+    const std::string& filename,
+    const std::string& location,
+    const std::vector<std::unique_ptr<const art::DexFile>>& dex_files) {
+  AppendToBootClassPath(filename, location);
+  ScopedObjectAccess soa(Thread::Current());
+  for (const std::unique_ptr<const art::DexFile>& dex_file : dex_files) {
+    DCHECK_NE(DexFileLoader::IsMultiDexLocation(dex_file->GetLocation().c_str()),
+              dex_file.get() == dex_files.begin()->get());
+    GetClassLinker()->AppendToBootClassPath(Thread::Current(), dex_file.get());
+  }
+}
+void Runtime::AppendToBootClassPath(const std::string& filename,
+                                    const std::string& location,
+                                    const std::vector<const art::DexFile*>& dex_files) {
+  AppendToBootClassPath(filename, location);
+  ScopedObjectAccess soa(Thread::Current());
+  for (const art::DexFile* dex_file : dex_files) {
+    DCHECK_NE(DexFileLoader::IsMultiDexLocation(dex_file->GetLocation().c_str()),
+              dex_file == *dex_files.begin());
+    GetClassLinker()->AppendToBootClassPath(Thread::Current(), dex_file);
+  }
+}
