diff --git a/home/whalien/codebase/cpp/mergebot/eva/output/duckdb/484ac52a-7bdaddf8-30d444e4/tools@pythonpkg@src@pandas@scan.no_comments_mergebot.cpp b/home/whalien/codebase/cpp/mergebot/eva/output/duckdb/484ac52a-7bdaddf8-30d444e4/tools@pythonpkg@src@pandas@scan.no_comments_merged.cpp
index da1dc90..7171b79 100644
--- a/home/whalien/codebase/cpp/mergebot/eva/output/duckdb/484ac52a-7bdaddf8-30d444e4/tools@pythonpkg@src@pandas@scan.no_comments_mergebot.cpp
+++ b/home/whalien/codebase/cpp/mergebot/eva/output/duckdb/484ac52a-7bdaddf8-30d444e4/tools@pythonpkg@src@pandas@scan.no_comments_merged.cpp
@@ -1,2 +0,0 @@
-#include "duckdb_python/pandas_scan.hpp"
-#include "duckdb_python/array_wrapper.hpp"
@@ -6 +3,0 @@
-#include "duckdb_python/vector_conversion.hpp"
@@ -9,0 +7 @@
+#include "duckdb_python/numpy/numpy_bind.hpp"
@@ -25 +23 @@ struct PandasScanFunctionData : public PyTableFunctionData {
- () = delete;{
+ ~PandasScanFunctionData() override {
@@ -50 +48,2 @@ PandasScanFunction::PandasScanFunction()
-    : TableFunction("pandas_scan", {
+    : TableFunction("pandas_scan", {LogicalType::POINTER}, PandasScanFunc, PandasScanBind, PandasScanInitGlobal,
+                    PandasScanInitLocal) {
@@ -56,208 +55,5 @@ PandasScanFunction::PandasScanFunction()
-py::object PandasScanFunction::PandasReplaceCopiedNames(const py::object &original_df) {
- auto copy_df = original_df.attr("copy")(false);
- unordered_map<string, idx_t> name_map;
- unordered_set<string> columns_seen;
- py::list column_name_list;
- auto df_columns = py::list(original_df.attr("columns"));
- for (auto &column_name_py : df_columns) {
-  string column_name = py::str(column_name_py);
-  auto column_name_low = StringUtil::Lower(column_name);
-  name_map[column_name_low] = 1;
- }
- for (auto &column_name_py : df_columns) {
-  const string column_name = py::str(column_name_py);
-  auto column_name_low = StringUtil::Lower(column_name);
-  if (columns_seen.find(column_name_low) == columns_seen.end()) {
-   column_name_list.append(column_name);
-   columns_seen.insert(column_name_low);
-  } else {
-   string new_column_name = column_name + "_" + std::to_string(name_map[column_name_low]);
-   auto new_column_name_low = StringUtil::Lower(new_column_name);
-   while (name_map.find(new_column_name_low) != name_map.end()) {
-    name_map[column_name_low]++;
-    new_column_name = column_name + "_" + std::to_string(name_map[column_name_low]);
-    new_column_name_low = StringUtil::Lower(new_column_name);
-   }
-   column_name_list.append(new_column_name);
-   columns_seen.insert(new_column_name_low);
-   name_map[column_name_low]++;
-  }
- }
- copy_df.attr("columns") = column_name_list;
- return copy_df;
-}
-py::object PandasScanFunction::PandasReplaceCopiedNames(const py::object &original_df) {
- auto copy_df = original_df.attr("copy")(false);
- unordered_map<string, idx_t> name_map;
- unordered_set<string> columns_seen;
- py::list column_name_list;
- auto df_columns = py::list(original_df.attr("columns"));
- for (auto &column_name_py : df_columns) {
-  string column_name = py::str(column_name_py);
-  auto column_name_low = StringUtil::Lower(column_name);
-  name_map[column_name_low] = 1;
- }
- for (auto &column_name_py : df_columns) {
-  const string column_name = py::str(column_name_py);
-  auto column_name_low = StringUtil::Lower(column_name);
-  if (columns_seen.find(column_name_low) == columns_seen.end()) {
-   column_name_list.append(column_name);
-   columns_seen.insert(column_name_low);
-  } else {
-   string new_column_name = column_name + "_" + std::to_string(name_map[column_name_low]);
-   auto new_column_name_low = StringUtil::Lower(new_column_name);
-   while (name_map.find(new_column_name_low) != name_map.end()) {
-    name_map[column_name_low]++;
-    new_column_name = column_name + "_" + std::to_string(name_map[column_name_low]);
-    new_column_name_low = StringUtil::Lower(new_column_name);
-   }
-   column_name_list.append(new_column_name);
-   columns_seen.insert(new_column_name_low);
-   name_map[column_name_low]++;
-  }
- }
- copy_df.attr("columns") = column_name_list;
- return copy_df;
-}
-py::object PandasScanFunction::PandasReplaceCopiedNames(const py::object &original_df) {
- auto copy_df = original_df.attr("copy")(false);
- unordered_map<string, idx_t> name_map;
- unordered_set<string> columns_seen;
- py::list column_name_list;
- auto df_columns = py::list(original_df.attr("columns"));
- for (auto &column_name_py : df_columns) {
-  string column_name = py::str(column_name_py);
-  auto column_name_low = StringUtil::Lower(column_name);
-  name_map[column_name_low] = 1;
- }
- for (auto &column_name_py : df_columns) {
-  const string column_name = py::str(column_name_py);
-  auto column_name_low = StringUtil::Lower(column_name);
-  if (columns_seen.find(column_name_low) == columns_seen.end()) {
-   column_name_list.append(column_name);
-   columns_seen.insert(column_name_low);
-  } else {
-   string new_column_name = column_name + "_" + std::to_string(name_map[column_name_low]);
-   auto new_column_name_low = StringUtil::Lower(new_column_name);
-   while (name_map.find(new_column_name_low) != name_map.end()) {
-    name_map[column_name_low]++;
-    new_column_name = column_name + "_" + std::to_string(name_map[column_name_low]);
-    new_column_name_low = StringUtil::Lower(new_column_name);
-   }
-   column_name_list.append(new_column_name);
-   columns_seen.insert(new_column_name_low);
-   name_map[column_name_low]++;
-  }
- }
- copy_df.attr("columns") = column_name_list;
- return copy_df;
-}
-py::object PandasScanFunction::PandasReplaceCopiedNames(const py::object &original_df) {
- auto copy_df = original_df.attr("copy")(false);
- unordered_map<string, idx_t> name_map;
- unordered_set<string> columns_seen;
- py::list column_name_list;
- auto df_columns = py::list(original_df.attr("columns"));
- for (auto &column_name_py : df_columns) {
-  string column_name = py::str(column_name_py);
-  auto column_name_low = StringUtil::Lower(column_name);
-  name_map[column_name_low] = 1;
- }
- for (auto &column_name_py : df_columns) {
-  const string column_name = py::str(column_name_py);
-  auto column_name_low = StringUtil::Lower(column_name);
-  if (columns_seen.find(column_name_low) == columns_seen.end()) {
-   column_name_list.append(column_name);
-   columns_seen.insert(column_name_low);
-  } else {
-   string new_column_name = column_name + "_" + std::to_string(name_map[column_name_low]);
-   auto new_column_name_low = StringUtil::Lower(new_column_name);
-   while (name_map.find(new_column_name_low) != name_map.end()) {
-    name_map[column_name_low]++;
-    new_column_name = column_name + "_" + std::to_string(name_map[column_name_low]);
-    new_column_name_low = StringUtil::Lower(new_column_name);
-   }
-   column_name_list.append(new_column_name);
-   columns_seen.insert(new_column_name_low);
-   name_map[column_name_low]++;
-  }
- }
- copy_df.attr("columns") = column_name_list;
- return copy_df;
-}
-py::object PandasScanFunction::PandasReplaceCopiedNames(const py::object &original_df) {
- auto copy_df = original_df.attr("copy")(false);
- unordered_map<string, idx_t> name_map;
- unordered_set<string> columns_seen;
- py::list column_name_list;
- auto df_columns = py::list(original_df.attr("columns"));
- for (auto &column_name_py : df_columns) {
-  string column_name = py::str(column_name_py);
-  auto column_name_low = StringUtil::Lower(column_name);
-  name_map[column_name_low] = 1;
- }
- for (auto &column_name_py : df_columns) {
-  const string column_name = py::str(column_name_py);
-  auto column_name_low = StringUtil::Lower(column_name);
-  if (columns_seen.find(column_name_low) == columns_seen.end()) {
-   column_name_list.append(column_name);
-   columns_seen.insert(column_name_low);
-  } else {
-   string new_column_name = column_name + "_" + std::to_string(name_map[column_name_low]);
-   auto new_column_name_low = StringUtil::Lower(new_column_name);
-   while (name_map.find(new_column_name_low) != name_map.end()) {
-    name_map[column_name_low]++;
-    new_column_name = column_name + "_" + std::to_string(name_map[column_name_low]);
-    new_column_name_low = StringUtil::Lower(new_column_name);
-   }
-   column_name_list.append(new_column_name);
-   columns_seen.insert(new_column_name_low);
-   name_map[column_name_low]++;
-  }
- }
- copy_df.attr("columns") = column_name_list;
- return copy_df;
-}
-py::object PandasScanFunction::PandasReplaceCopiedNames(const py::object &original_df) {
- auto copy_df = original_df.attr("copy")(false);
- unordered_map<string, idx_t> name_map;
- unordered_set<string> columns_seen;
- py::list column_name_list;
- auto df_columns = py::list(original_df.attr("columns"));
- for (auto &column_name_py : df_columns) {
-  string column_name = py::str(column_name_py);
-  auto column_name_low = StringUtil::Lower(column_name);
-  name_map[column_name_low] = 1;
- }
- for (auto &column_name_py : df_columns) {
-  const string column_name = py::str(column_name_py);
-  auto column_name_low = StringUtil::Lower(column_name);
-  if (columns_seen.find(column_name_low) == columns_seen.end()) {
-   column_name_list.append(column_name);
-   columns_seen.insert(column_name_low);
-  } else {
-   string new_column_name = column_name + "_" + std::to_string(name_map[column_name_low]);
-   auto new_column_name_low = StringUtil::Lower(new_column_name);
-   while (name_map.find(new_column_name_low) != name_map.end()) {
-    name_map[column_name_low]++;
-    new_column_name = column_name + "_" + std::to_string(name_map[column_name_low]);
-    new_column_name_low = StringUtil::Lower(new_column_name);
-   }
-   column_name_list.append(new_column_name);
-   columns_seen.insert(new_column_name_low);
-   name_map[column_name_low]++;
-  }
- }
- copy_df.attr("columns") = column_name_list;
- return copy_df;
-}
-py::object PandasScanFunction::PandasReplaceCopiedNames(const py::object &original_df) {
- auto copy_df = original_df.attr("copy")(false);
- unordered_map<string, idx_t> name_map;
- unordered_set<string> columns_seen;
- py::list column_name_list;
- auto df_columns = py::list(original_df.attr("columns"));
- for (auto &column_name_py : df_columns) {
-  string column_name = py::str(column_name_py);
-  auto column_name_low = StringUtil::Lower(column_name);
-  name_map[column_name_low] = 1;
+idx_t PandasScanFunction::PandasScanGetBatchIndex(ClientContext &context, const FunctionData *bind_data_p,
+                                                  LocalTableFunctionState *local_state,
+                                                  GlobalTableFunctionState *global_state) {
+ auto &data = local_state->Cast<PandasScanLocalState>();
+ return data.batch_index;
@@ -265,39 +61,8 @@ py::object PandasScanFunction::PandasReplaceCopiedNames(const py::object &origin
- for (auto &column_name_py : df_columns) {
-  const string column_name = py::str(column_name_py);
-  auto column_name_low = StringUtil::Lower(column_name);
-  if (columns_seen.find(column_name_low) == columns_seen.end()) {
-   column_name_list.append(column_name);
-   columns_seen.insert(column_name_low);
-  } else {
-   string new_column_name = column_name + "_" + std::to_string(name_map[column_name_low]);
-   auto new_column_name_low = StringUtil::Lower(new_column_name);
-   while (name_map.find(new_column_name_low) != name_map.end()) {
-    name_map[column_name_low]++;
-    new_column_name = column_name + "_" + std::to_string(name_map[column_name_low]);
-    new_column_name_low = StringUtil::Lower(new_column_name);
-   }
-   column_name_list.append(new_column_name);
-   columns_seen.insert(new_column_name_low);
-   name_map[column_name_low]++;
-  }
- }
- copy_df.attr("columns") = column_name_list;
- return copy_df;
-}
-py::object PandasScanFunction::PandasReplaceCopiedNames(const py::object &original_df) {
- auto copy_df = original_df.attr("copy")(false);
- unordered_map<string, idx_t> name_map;
- unordered_set<string> columns_seen;
- py::list column_name_list;
- auto df_columns = py::list(original_df.attr("columns"));
- for (auto &column_name_py : df_columns) {
-  string column_name = py::str(column_name_py);
-  auto column_name_low = StringUtil::Lower(column_name);
-  name_map[column_name_low] = 1;
- }
- for (auto &column_name_py : df_columns) {
-  const string column_name = py::str(column_name_py);
-  auto column_name_low = StringUtil::Lower(column_name);
-  if (columns_seen.find(column_name_low) == columns_seen.end()) {
-   column_name_list.append(column_name);
-   columns_seen.insert(column_name_low);
+unique_ptr<FunctionData> PandasScanFunction::PandasScanBind(ClientContext &context, TableFunctionBindInput &input,
+                                                            vector<LogicalType> &return_types, vector<string> &names) {
+ py::gil_scoped_acquire acquire;
+ py::handle df((PyObject *)(input.inputs[0].GetPointer()));
+ vector<PandasColumnBindData> pandas_bind_data;
+ auto is_py_dict = py::isinstance<py::dict>(df);
+ if (is_py_dict) {
+  NumpyBind::Bind(context, df, pandas_bind_data, return_types, names);
@@ -305,32 +70,84 @@ py::object PandasScanFunction::PandasReplaceCopiedNames(const py::object &origin
-   string new_column_name = column_name + "_" + std::to_string(name_map[column_name_low]);
-   auto new_column_name_low = StringUtil::Lower(new_column_name);
-   while (name_map.find(new_column_name_low) != name_map.end()) {
-    name_map[column_name_low]++;
-    new_column_name = column_name + "_" + std::to_string(name_map[column_name_low]);
-    new_column_name_low = StringUtil::Lower(new_column_name);
-   }
-   column_name_list.append(new_column_name);
-   columns_seen.insert(new_column_name_low);
-   name_map[column_name_low]++;
-  }
- }
- copy_df.attr("columns") = column_name_list;
- return copy_df;
-}
-py::object PandasScanFunction::PandasReplaceCopiedNames(const py::object &original_df) {
- auto copy_df = original_df.attr("copy")(false);
- unordered_map<string, idx_t> name_map;
- unordered_set<string> columns_seen;
- py::list column_name_list;
- auto df_columns = py::list(original_df.attr("columns"));
- for (auto &column_name_py : df_columns) {
-  string column_name = py::str(column_name_py);
-  auto column_name_low = StringUtil::Lower(column_name);
-  name_map[column_name_low] = 1;
- }
- for (auto &column_name_py : df_columns) {
-  const string column_name = py::str(column_name_py);
-  auto column_name_low = StringUtil::Lower(column_name);
-  if (columns_seen.find(column_name_low) == columns_seen.end()) {
-   column_name_list.append(column_name);
-   columns_seen.insert(column_name_low);
+  Pandas::Bind(context, df, pandas_bind_data, return_types, names);
+ }
+ auto df_columns = py::list(df.attr("keys")());
+ auto get_fun = df.attr("__getitem__");
+ idx_t row_count = py::len(get_fun(df_columns[0]));
+ return make_uniq<PandasScanFunctionData>(df, row_count, std::move(pandas_bind_data), return_types);
+}
+unique_ptr<GlobalTableFunctionState> PandasScanFunction::PandasScanInitGlobal(ClientContext &context,
+                                                                              TableFunctionInitInput &input) {
+ if (PyGILState_Check()) {
+  throw InvalidInputException("PandasScan called but GIL was already held!");
+ }
+ return make_uniq<PandasScanGlobalState>(PandasScanMaxThreads(context, input.bind_data));
+}
+unique_ptr<LocalTableFunctionState> PandasScanFunction::PandasScanInitLocal(ExecutionContext &context,
+                                                                            TableFunctionInitInput &input,
+                                                                            GlobalTableFunctionState *gstate) {
+ auto result = make_uniq<PandasScanLocalState>(0, 0);
+ result->column_ids = input.column_ids;
+ PandasScanParallelStateNext(context.client, input.bind_data, result.get(), gstate);
+ return std::move(result);
+}
+idx_t PandasScanFunction::PandasScanMaxThreads(ClientContext &context, const FunctionData *bind_data_p) {
+ if (ClientConfig::GetConfig(context).verify_parallelism) {
+  return context.db->NumberOfThreads();
+ }
+ auto &bind_data = (const PandasScanFunctionData &)*bind_data_p;
+ return bind_data.row_count / PANDAS_PARTITION_COUNT + 1;
+}
+bool PandasScanFunction::PandasScanParallelStateNext(ClientContext &context, const FunctionData *bind_data_p,
+                                                     LocalTableFunctionState *lstate,
+                                                     GlobalTableFunctionState *gstate) {
+ auto &bind_data = (const PandasScanFunctionData &)*bind_data_p;
+ auto &parallel_state = gstate->Cast<PandasScanGlobalState>();
+ auto &state = lstate->Cast<PandasScanLocalState>();
+ lock_guard<mutex> parallel_lock(parallel_state.lock);
+ if (parallel_state.position >= bind_data.row_count) {
+  return false;
+ }
+ state.start = parallel_state.position;
+ parallel_state.position += PANDAS_PARTITION_COUNT;
+ if (parallel_state.position > bind_data.row_count) {
+  parallel_state.position = bind_data.row_count;
+ }
+ state.end = parallel_state.position;
+ state.batch_index = parallel_state.batch_index++;
+ return true;
+}
+double PandasScanFunction::PandasProgress(ClientContext &context, const FunctionData *bind_data_p,
+                                          const GlobalTableFunctionState *gstate) {
+ auto &bind_data = (const PandasScanFunctionData &)*bind_data_p;
+ if (bind_data.row_count == 0) {
+  return 100;
+ }
+ auto percentage = (bind_data.lines_read * 100.0) / bind_data.row_count;
+ return percentage;
+}
+void PandasScanFunction::PandasBackendScanSwitch(PandasColumnBindData &bind_data, idx_t count, idx_t offset,
+                                                 Vector &out) {
+ auto backend = bind_data.numpy_col->Backend();
+ switch (backend) {
+ case PandasColumnBackend::NUMPY: {
+  NumpyScan::Scan(bind_data, count, offset, out);
+  break;
+ }
+ default: {
+  throw NotImplementedException("Type not implemented for PandasColumnBackend");
+ }
+ }
+}
+void PandasScanFunction::PandasScanFunc(ClientContext &context, TableFunctionInput &data_p, DataChunk &output) {
+ auto &data = (PandasScanFunctionData &)*data_p.bind_data;
+ auto &state = data_p.local_state->Cast<PandasScanLocalState>();
+ if (state.start >= state.end) {
+  if (!PandasScanParallelStateNext(context, data_p.bind_data, data_p.local_state, data_p.global_state)) {
+   return;
+  }
+ }
+ idx_t this_count = std::min((idx_t)STANDARD_VECTOR_SIZE, state.end - state.start);
+ output.SetCardinality(this_count);
+ for (idx_t idx = 0; idx < state.column_ids.size(); idx++) {
+  auto col_idx = state.column_ids[idx];
+  if (col_idx == COLUMN_IDENTIFIER_ROW_ID) {
+   output.data[idx].Sequence(state.start, 1, this_count);
@@ -338,6 +155 @@ py::object PandasScanFunction::PandasReplaceCopiedNames(const py::object &origin
-   string new_column_name = column_name + "_" + std::to_string(name_map[column_name_low]);
-   auto new_column_name_low = StringUtil::Lower(new_column_name);
-   while (name_map.find(new_column_name_low) != name_map.end()) {
-    name_map[column_name_low]++;
-    new_column_name = column_name + "_" + std::to_string(name_map[column_name_low]);
-    new_column_name_low = StringUtil::Lower(new_column_name);
+   PandasBackendScanSwitch(data.pandas_bind_data[col_idx], this_count, state.start, output.data[idx]);
@@ -345,3 +156,0 @@ py::object PandasScanFunction::PandasReplaceCopiedNames(const py::object &origin
-   column_name_list.append(new_column_name);
-   columns_seen.insert(new_column_name_low);
-   name_map[column_name_low]++;
@@ -348,0 +158,2 @@ py::object PandasScanFunction::PandasReplaceCopiedNames(const py::object &origin
+ state.start += this_count;
+ data.lines_read += this_count;
@@ -350,2 +161,4 @@ py::object PandasScanFunction::PandasReplaceCopiedNames(const py::object &origin
- copy_df.attr("columns") = column_name_list;
- return copy_df;
+unique_ptr<NodeStatistics> PandasScanFunction::PandasScanCardinality(ClientContext &context,
+                                                                     const FunctionData *bind_data) {
+ auto &data = (PandasScanFunctionData &)*bind_data;
+ return make_uniq<NodeStatistics>(data.row_count, data.row_count);
