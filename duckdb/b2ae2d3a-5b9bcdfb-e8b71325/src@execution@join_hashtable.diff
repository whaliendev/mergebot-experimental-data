diff --git a/home/whalien/codebase/cpp/mergebot/eva/output/duckdb/b2ae2d3a-5b9bcdfb-e8b71325/src@execution@join_hashtable.no_comments_mergebot.cpp b/home/whalien/codebase/cpp/mergebot/eva/output/duckdb/b2ae2d3a-5b9bcdfb-e8b71325/src@execution@join_hashtable.no_comments_merged.cpp
index 39a362f..8539908 100644
--- a/home/whalien/codebase/cpp/mergebot/eva/output/duckdb/b2ae2d3a-5b9bcdfb-e8b71325/src@execution@join_hashtable.no_comments_mergebot.cpp
+++ b/home/whalien/codebase/cpp/mergebot/eva/output/duckdb/b2ae2d3a-5b9bcdfb-e8b71325/src@execution@join_hashtable.no_comments_merged.cpp
@@ -4,3 +3,0 @@
-#include "duckdb/common/types/column_data_collection_segment.hpp"
-#include "duckdb/common/types/row_data_collection.hpp"
-#include "duckdb/common/types/row_data_collection_scanner.hpp"
@@ -47,2 +44 @@ JoinHashTable::JoinHashTable(BufferManager &buffer_manager_p, const vector<JoinC
-<<<<<<< HEAD
- data_collection = make_unique<TupleDataCollection>(buffer_manager, layout);
+ data_collection = make_uniq<TupleDataCollection>(buffer_manager, layout);
@@ -50,14 +46 @@ JoinHashTable::JoinHashTable(BufferManager &buffer_manager_p, const vector<JoinC
-     make_unique<RadixPartitionedTupleData>(buffer_manager, layout, radix_bits, layout.ColumnCount() - 1);
-|||||||
- idx_t block_capacity = Storage::BLOCK_SIZE / entry_size;
- block_collection = make_unique<RowDataCollection>(buffer_manager, block_capacity, entry_size);
- string_heap = make_unique<RowDataCollection>(buffer_manager, (idx_t)Storage::BLOCK_SIZE, 1, true);
- swizzled_block_collection = block_collection->CloneEmpty();
- swizzled_string_heap = string_heap->CloneEmpty();
-=======
- idx_t block_capacity = Storage::BLOCK_SIZE / entry_size;
- block_collection = make_uniq<RowDataCollection>(buffer_manager, block_capacity, entry_size);
- string_heap = make_uniq<RowDataCollection>(buffer_manager, (idx_t)Storage::BLOCK_SIZE, 1, true);
- swizzled_block_collection = block_collection->CloneEmpty();
- swizzled_string_heap = string_heap->CloneEmpty();
->>>>>>> 5b9bcdfbd9ba800dc7cd42ceb7a3ec9c9968e387
+     make_uniq<RadixPartitionedTupleData>(buffer_manager, layout, radix_bits, layout.ColumnCount() - 1);
@@ -645,0 +629,88 @@ void JoinHashTable::ScanFullOuter(JoinHTScanState &state, Vector &addresses, Dat
+idx_t JoinHashTable::FillWithHTOffsets(JoinHTScanState &state, Vector &addresses) {
+ auto key_locations = FlatVector::GetData<data_ptr_t>(addresses);
+ idx_t key_count = 0;
+ auto &iterator = state.iterator;
+ const auto row_locations = iterator.GetRowLocations();
+ do {
+  const auto count = iterator.GetCount();
+  for (idx_t i = 0; i < count; i++) {
+   key_locations[key_count + i] = row_locations[i];
+  }
+  key_count += count;
+ } while (iterator.Next());
+ return key_count;
+}
+bool JoinHashTable::RequiresExternalJoin(ClientConfig &config, vector<unique_ptr<JoinHashTable>> &local_hts) {
+ total_count = 0;
+ idx_t data_size = 0;
+ for (auto &ht : local_hts) {
+  auto &local_sink_collection = ht->GetSinkCollection();
+  total_count += local_sink_collection.Count();
+  data_size += local_sink_collection.SizeInBytes();
+ }
+ if (total_count == 0) {
+  return false;
+ }
+ if (config.force_external) {
+  auto data_size_per_round = (data_size + 2) / 3;
+  auto count_per_round = (total_count + 2) / 3;
+  max_ht_size = data_size_per_round + PointerTableSize(count_per_round);
+  external = true;
+ } else {
+  auto ht_size = data_size + PointerTableSize(total_count);
+  external = ht_size > max_ht_size;
+ }
+ return external;
+}
+void JoinHashTable::Unpartition() {
+ for (auto &partition : sink_collection->GetPartitions()) {
+  data_collection->Combine(*partition);
+ }
+}
+bool JoinHashTable::RequiresPartitioning(ClientConfig &config, vector<unique_ptr<JoinHashTable>> &local_hts) {
+ D_ASSERT(total_count != 0);
+ D_ASSERT(external);
+ idx_t num_partitions = RadixPartitioning::NumberOfPartitions(radix_bits);
+ vector<idx_t> partition_counts(num_partitions, 0);
+ vector<idx_t> partition_sizes(num_partitions, 0);
+ for (auto &ht : local_hts) {
+  const auto &local_partitions = ht->GetSinkCollection().GetPartitions();
+  for (idx_t partition_idx = 0; partition_idx < num_partitions; partition_idx++) {
+   auto &local_partition = local_partitions[partition_idx];
+   partition_counts[partition_idx] += local_partition->Count();
+   partition_sizes[partition_idx] += local_partition->SizeInBytes();
+  }
+ }
+ idx_t max_partition_idx = 0;
+ idx_t max_partition_size = 0;
+ for (idx_t partition_idx = 0; partition_idx < num_partitions; partition_idx++) {
+  const auto &partition_count = partition_counts[partition_idx];
+  const auto &partition_size = partition_sizes[partition_idx];
+  auto partition_ht_size = partition_size + PointerTableSize(partition_count);
+  if (partition_ht_size > max_partition_size) {
+   max_partition_size = partition_ht_size;
+   max_partition_idx = partition_idx;
+  }
+ }
+ if (config.force_external || max_partition_size > max_ht_size) {
+  const auto partition_count = partition_counts[max_partition_idx];
+  const auto partition_size = partition_sizes[max_partition_idx];
+  const auto max_added_bits = 8 - radix_bits;
+  idx_t added_bits;
+  for (added_bits = 1; added_bits < max_added_bits; added_bits++) {
+   double partition_multiplier = RadixPartitioning::NumberOfPartitions(added_bits);
+   auto new_estimated_count = double(partition_count) / partition_multiplier;
+   auto new_estimated_size = double(partition_size) / partition_multiplier;
+   auto new_estimated_ht_size = new_estimated_size + PointerTableSize(new_estimated_count);
+   if (new_estimated_ht_size <= double(max_ht_size) / 4) {
+    break;
+   }
+  }
+  radix_bits += added_bits;
+  sink_collection =
+      make_uniq<RadixPartitionedTupleData>(buffer_manager, layout, radix_bits, layout.ColumnCount() - 1);
+  return true;
+ } else {
+  return false;
+ }
+}
@@ -648 +719 @@ void JoinHashTable::Partition(JoinHashTable &global_ht) {
-     make_unique<RadixPartitionedTupleData>(buffer_manager, layout, global_ht.radix_bits, layout.ColumnCount() - 1);
+     make_uniq<RadixPartitionedTupleData>(buffer_manager, layout, global_ht.radix_bits, layout.ColumnCount() - 1);
@@ -817,88 +887,0 @@ void ProbeSpill::PrepareNextProbe() {
-idx_t JoinHashTable::FillWithHTOffsets(JoinHTScanState &state, Vector &addresses) {
- auto key_locations = FlatVector::GetData<data_ptr_t>(addresses);
- idx_t key_count = 0;
- auto &iterator = state.iterator;
- const auto row_locations = iterator.GetRowLocations();
- do {
-  const auto count = iterator.GetCount();
-  for (idx_t i = 0; i < count; i++) {
-   key_locations[key_count + i] = row_locations[i];
-  }
-  key_count += count;
- } while (iterator.Next());
- return key_count;
-}
-bool JoinHashTable::RequiresExternalJoin(ClientConfig &config, vector<unique_ptr<JoinHashTable>> &local_hts) {
- total_count = 0;
- idx_t data_size = 0;
- for (auto &ht : local_hts) {
-  auto &local_sink_collection = ht->GetSinkCollection();
-  total_count += local_sink_collection.Count();
-  data_size += local_sink_collection.SizeInBytes();
- }
- if (total_count == 0) {
-  return false;
- }
- if (config.force_external) {
-  auto data_size_per_round = (data_size + 2) / 3;
-  auto count_per_round = (total_count + 2) / 3;
-  max_ht_size = data_size_per_round + PointerTableSize(count_per_round);
-  external = true;
- } else {
-  auto ht_size = data_size + PointerTableSize(total_count);
-  external = ht_size > max_ht_size;
- }
- return external;
-}
-void JoinHashTable::Unpartition() {
- for (auto &partition : sink_collection->GetPartitions()) {
-  data_collection->Combine(*partition);
- }
-}
-bool JoinHashTable::RequiresPartitioning(ClientConfig &config, vector<unique_ptr<JoinHashTable>> &local_hts) {
- D_ASSERT(total_count != 0);
- D_ASSERT(external);
- idx_t num_partitions = RadixPartitioning::NumberOfPartitions(radix_bits);
- vector<idx_t> partition_counts(num_partitions, 0);
- vector<idx_t> partition_sizes(num_partitions, 0);
- for (auto &ht : local_hts) {
-  const auto &local_partitions = ht->GetSinkCollection().GetPartitions();
-  for (idx_t partition_idx = 0; partition_idx < num_partitions; partition_idx++) {
-   auto &local_partition = local_partitions[partition_idx];
-   partition_counts[partition_idx] += local_partition->Count();
-   partition_sizes[partition_idx] += local_partition->SizeInBytes();
-  }
- }
- idx_t max_partition_idx = 0;
- idx_t max_partition_size = 0;
- for (idx_t partition_idx = 0; partition_idx < num_partitions; partition_idx++) {
-  const auto &partition_count = partition_counts[partition_idx];
-  const auto &partition_size = partition_sizes[partition_idx];
-  auto partition_ht_size = partition_size + PointerTableSize(partition_count);
-  if (partition_ht_size > max_partition_size) {
-   max_partition_size = partition_ht_size;
-   max_partition_idx = partition_idx;
-  }
- }
- if (config.force_external || max_partition_size > max_ht_size) {
-  const auto partition_count = partition_counts[max_partition_idx];
-  const auto partition_size = partition_sizes[max_partition_idx];
-  const auto max_added_bits = 8 - radix_bits;
-  idx_t added_bits;
-  for (added_bits = 1; added_bits < max_added_bits; added_bits++) {
-   double partition_multiplier = RadixPartitioning::NumberOfPartitions(added_bits);
-   auto new_estimated_count = double(partition_count) / partition_multiplier;
-   auto new_estimated_size = double(partition_size) / partition_multiplier;
-   auto new_estimated_ht_size = new_estimated_size + PointerTableSize(new_estimated_count);
-   if (new_estimated_ht_size <= double(max_ht_size) / 4) {
-    break;
-   }
-  }
-  radix_bits += added_bits;
-  sink_collection =
-      make_unique<RadixPartitionedTupleData>(buffer_manager, layout, radix_bits, layout.ColumnCount() - 1);
-  return true;
- } else {
-  return false;
- }
-}
