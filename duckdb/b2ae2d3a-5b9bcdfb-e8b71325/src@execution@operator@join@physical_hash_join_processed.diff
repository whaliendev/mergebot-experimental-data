--- a/home/whalien/codebase/cpp/mergebot/eva/output/duckdb/b2ae2d3a-5b9bcdfb-e8b71325/src@execution@operator@join@physical_hash_join.no_comments_mergebot.cpp
+++ b/home/whalien/codebase/cpp/mergebot/eva/output/duckdb/b2ae2d3a-5b9bcdfb-e8b71325/src@execution@operator@join@physical_hash_join.no_comments_merged.cpp
@@ -13 +12,0 @@
-#include "duckdb/common/types/column_data_collection.hpp"
@@ -35 +34,5 @@ PhysicalHashJoin::PhysicalHashJoin(LogicalOperator &op, unique_ptr<PhysicalOpera
-PhysicalHashJoin::PhysicalHashJoin(LogicalOperator &op, unique_ptr<PhysicalOperator> left, unique_ptr<PhysicalOperator> right, vector<JoinCondition> cond, JoinType join_type, idx_t estimated_cardinality, PerfectHashJoinStats perfect_join_state): PhysicalHashJoin(op, std::move(left), std::move(right), std::move(cond), join_type, {
+PhysicalHashJoin::PhysicalHashJoin(LogicalOperator &op, unique_ptr<PhysicalOperator> left,
+                                   unique_ptr<PhysicalOperator> right, vector<JoinCondition> cond, JoinType join_type,
+                                   idx_t estimated_cardinality, PerfectHashJoinStats perfect_join_state)
+    : PhysicalHashJoin(op, std::move(left), std::move(right), std::move(cond), join_type, {}, {}, {},
+                       estimated_cardinality, std::move(perfect_join_state)) {
@@ -39 +41,0 @@ public:
- ClientContext &context;
@@ -51,0 +54,2 @@ public:
+public:
+ ClientContext &context;
@@ -64 +67,0 @@ public:
- PartitionedTupleDataAppendState append_state;
@@ -76,0 +80,2 @@ public:
+public:
+ PartitionedTupleDataAppendState append_state;
@@ -84,6 +88,0 @@ unique_ptr<JoinHashTable> PhysicalHashJoin::InitializeHashTable(ClientContext &c
-<<<<<<< HEAD
-     make_unique<JoinHashTable>(BufferManager::GetBufferManager(context), conditions, build_types, join_type);
- result->max_ht_size = double(BufferManager::GetBufferManager(context).GetMaxMemory()) * 0.6;
-|||||||
-     make_unique<JoinHashTable>(BufferManager::GetBufferManager(context), conditions, build_types, join_type);
-=======
@@ -91 +90 @@ unique_ptr<JoinHashTable> PhysicalHashJoin::InitializeHashTable(ClientContext &c
->>>>>>> 5b9bcdfbd9ba800dc7cd42ceb7a3ec9c9968e387
+ result->max_ht_size = double(BufferManager::GetBufferManager(context).GetMaxMemory()) * 0.6;
@@ -185,0 +185 @@ public:
+public:
@@ -194,7 +194 @@ public:
-<<<<<<< HEAD
-       make_unique<HashJoinFinalizeTask>(shared_from_this(), context, sink, 0, chunk_count, false));
-|||||||
-       make_unique<HashJoinFinalizeTask>(shared_from_this(), context, sink, 0, num_blocks, false));
-=======
-       make_uniq<HashJoinFinalizeTask>(shared_from_this(), context, sink, 0, num_blocks, false));
->>>>>>> 5b9bcdfbd9ba800dc7cd42ceb7a3ec9c9968e387
+       make_uniq<HashJoinFinalizeTask>(shared_from_this(), context, sink, 0, chunk_count, false));
@@ -205 +198,0 @@ public:
-<<<<<<< HEAD
@@ -208 +201 @@ public:
-    finalize_tasks.push_back(make_unique<HashJoinFinalizeTask>(shared_from_this(), context, sink,
+    finalize_tasks.push_back(make_uniq<HashJoinFinalizeTask>(shared_from_this(), context, sink,
@@ -212,15 +204,0 @@ public:
-|||||||
-    auto block_idx_start = block_idx;
-    auto block_idx_end = MinValue<idx_t>(block_idx_start + blocks_per_thread, num_blocks);
-    finalize_tasks.push_back(make_unique<HashJoinFinalizeTask>(shared_from_this(), context, sink,
-                                                               block_idx_start, block_idx_end, true));
-    block_idx = block_idx_end;
-    if (block_idx == num_blocks) {
-=======
-    auto block_idx_start = block_idx;
-    auto block_idx_end = MinValue<idx_t>(block_idx_start + blocks_per_thread, num_blocks);
-    finalize_tasks.push_back(make_uniq<HashJoinFinalizeTask>(shared_from_this(), context, sink,
-                                                             block_idx_start, block_idx_end, true));
-    block_idx = block_idx_end;
-    if (block_idx == num_blocks) {
->>>>>>> 5b9bcdfbd9ba800dc7cd42ceb7a3ec9c9968e387
@@ -277,0 +256 @@ public:
+public:
@@ -347,0 +327 @@ public:
+public:
@@ -426,0 +407 @@ public:
+public:
@@ -450,0 +432 @@ public:
+public:
@@ -681 +663 @@ void HashJoinLocalSourceState::ExternalScanHT(HashJoinGlobalSinkState &sink, Has
-  full_outer_scan_state = make_unique<JoinHTScanState>(sink.hash_table->GetDataCollection(),
+  full_outer_scan_state = make_uniq<JoinHTScanState>(sink.hash_table->GetDataCollection(),
