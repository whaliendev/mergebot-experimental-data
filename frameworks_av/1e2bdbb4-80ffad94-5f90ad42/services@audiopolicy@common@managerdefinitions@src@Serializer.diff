diff --git a/home/whalien/codebase/cpp/mergebot/eva/output/frameworks_av/1e2bdbb4-80ffad94-5f90ad42/services@audiopolicy@common@managerdefinitions@src@Serializer.no_comments_mergebot.cpp b/home/whalien/codebase/cpp/mergebot/eva/output/frameworks_av/1e2bdbb4-80ffad94-5f90ad42/services@audiopolicy@common@managerdefinitions@src@Serializer.no_comments_merged.cpp
index 743e5b7..347a075 100644
--- a/home/whalien/codebase/cpp/mergebot/eva/output/frameworks_av/1e2bdbb4-80ffad94-5f90ad42/services@audiopolicy@common@managerdefinitions@src@Serializer.no_comments_mergebot.cpp
+++ b/home/whalien/codebase/cpp/mergebot/eva/output/frameworks_av/1e2bdbb4-80ffad94-5f90ad42/services@audiopolicy@common@managerdefinitions@src@Serializer.no_comments_merged.cpp
@@ -25,2 +25 @@ struct AndroidCollectionTraits {
-  static status_t addElementToCollection(const Element &element,
-                                         Collection *collection) {
+    static status_t addElementToCollection(const Element &element, Collection *collection) {
@@ -35,2 +34 @@ struct StdCollectionTraits {
-  static status_t addElementToCollection(const Element &element,
-                                         Collection *collection) {
+    static status_t addElementToCollection(const Element &element, Collection *collection) {
@@ -41 +39,2 @@ struct StdCollectionTraits {
-struct AudioGainTraits : public AndroidCollectionTraits<AudioGain, AudioGains> {
+struct AudioGainTraits : public AndroidCollectionTraits<AudioGain, AudioGains>
+{
@@ -44 +43,2 @@ struct AudioGainTraits : public AndroidCollectionTraits<AudioGain, AudioGains> {
-  struct Attributes {
+    struct Attributes
+    {
@@ -47,4 +47,2 @@ struct AudioGainTraits : public AndroidCollectionTraits<AudioGain, AudioGains> {
-    static constexpr const char *minValueMB =
-        "minValueMB";
-    static constexpr const char *maxValueMB =
-        "maxValueMB";
+        static constexpr const char *minValueMB = "minValueMB";
+        static constexpr const char *maxValueMB = "maxValueMB";
@@ -52,2 +50 @@ struct AudioGainTraits : public AndroidCollectionTraits<AudioGain, AudioGains> {
-    static constexpr const char *stepValueMB =
-        "stepValueMB";
+        static constexpr const char *stepValueMB = "stepValueMB";
@@ -58,2 +55 @@ struct AudioGainTraits : public AndroidCollectionTraits<AudioGain, AudioGains> {
-  static Return<Element> deserialize(const xmlNode *cur,
-                                     PtrSerializingCtx serializingContext);
+    static Return<Element> deserialize(const xmlNode *cur, PtrSerializingCtx serializingContext);
@@ -61,2 +57,2 @@ struct AudioGainTraits : public AndroidCollectionTraits<AudioGain, AudioGains> {
-struct AudioProfileTraits
-    : public AndroidCollectionTraits<AudioProfile, AudioProfileVector> {
+struct AudioProfileTraits : public AndroidCollectionTraits<AudioProfile, AudioProfileVector>
+{
@@ -65 +61,2 @@ struct AudioProfileTraits
-  struct Attributes {
+    struct Attributes
+    {
@@ -70,2 +67 @@ struct AudioProfileTraits
-  static Return<Element> deserialize(const xmlNode *cur,
-                                     PtrSerializingCtx serializingContext);
+    static Return<Element> deserialize(const xmlNode *cur, PtrSerializingCtx serializingContext);
@@ -73,2 +69,2 @@ struct AudioProfileTraits
-struct MixPortTraits
-    : public AndroidCollectionTraits<IOProfile, IOProfileCollection> {
+struct MixPortTraits : public AndroidCollectionTraits<IOProfile, IOProfileCollection>
+{
@@ -77 +73,2 @@ struct MixPortTraits
-  struct Attributes {
+    struct Attributes
+    {
@@ -80,2 +77 @@ struct MixPortTraits
-    static constexpr const char *roleSource =
-        "source";
+        static constexpr const char *roleSource = "source";
@@ -86,2 +82 @@ struct MixPortTraits
-  static Return<Element> deserialize(const xmlNode *cur,
-                                     PtrSerializingCtx serializingContext);
+    static Return<Element> deserialize(const xmlNode *cur, PtrSerializingCtx serializingContext);
@@ -89,2 +84,2 @@ struct MixPortTraits
-struct DevicePortTraits
-    : public AndroidCollectionTraits<DeviceDescriptor, DeviceVector> {
+struct DevicePortTraits : public AndroidCollectionTraits<DeviceDescriptor, DeviceVector>
+{
@@ -93 +88,2 @@ struct DevicePortTraits
-  struct Attributes {
+    struct Attributes
+    {
@@ -96,4 +92,2 @@ struct DevicePortTraits
-    static constexpr const char *role =
-        "role";
-    static constexpr const char *roleSource =
-        "source";
+        static constexpr const char *role = "role";
+        static constexpr const char *roleSource = "source";
@@ -103,2 +97 @@ struct DevicePortTraits
-  static Return<Element> deserialize(const xmlNode *cur,
-                                     PtrSerializingCtx serializingContext);
+    static Return<Element> deserialize(const xmlNode *cur, PtrSerializingCtx serializingContext);
@@ -106,2 +99,2 @@ struct DevicePortTraits
-struct RouteTraits
-    : public AndroidCollectionTraits<AudioRoute, AudioRouteVector> {
+struct RouteTraits : public AndroidCollectionTraits<AudioRoute, AudioRouteVector>
+{
@@ -110,7 +103,5 @@ struct RouteTraits
-  struct Attributes {
-    static constexpr const char *type =
-        "type";
-    static constexpr const char *typeMix =
-        "mix";
-    static constexpr const char *sink =
-        "sink";
+    struct Attributes
+    {
+        static constexpr const char *type = "type";
+        static constexpr const char *typeMix = "mix";
+        static constexpr const char *sink = "sink";
@@ -120,2 +111 @@ struct RouteTraits
-  static Return<Element> deserialize(const xmlNode *cur,
-                                     PtrSerializingCtx serializingContext);
+    static Return<Element> deserialize(const xmlNode *cur, PtrSerializingCtx serializingContext);
@@ -123,2 +113,2 @@ struct RouteTraits
-struct ModuleTraits
-    : public AndroidCollectionTraits<HwModule, HwModuleCollection> {
+struct ModuleTraits : public AndroidCollectionTraits<HwModule, HwModuleCollection>
+{
@@ -129,3 +119,3 @@ struct ModuleTraits
-  static constexpr const char *childDefaultOutputDeviceTag =
-      "defaultOutputDevice";
-  struct Attributes {
+    static constexpr const char *childDefaultOutputDeviceTag = "defaultOutputDevice";
+    struct Attributes
+    {
@@ -136,2 +126 @@ struct ModuleTraits
-  static Return<Element> deserialize(const xmlNode *cur,
-                                     PtrSerializingCtx serializingContext);
+    static Return<Element> deserialize(const xmlNode *cur, PtrSerializingCtx serializingContext);
@@ -139 +128,2 @@ struct ModuleTraits
-struct GlobalConfigTraits {
+struct GlobalConfigTraits
+{
@@ -141 +131,2 @@ struct GlobalConfigTraits {
-  struct Attributes {
+    struct Attributes
+    {
@@ -143,2 +134 @@ struct GlobalConfigTraits {
-    static constexpr const char *callScreenModeSupported =
-        "call_screen_mode_supported";
+        static constexpr const char *callScreenModeSupported= "call_screen_mode_supported";
@@ -148 +138,2 @@ struct GlobalConfigTraits {
-struct SurroundSoundTraits {
+struct SurroundSoundTraits
+{
@@ -152,2 +143,2 @@ struct SurroundSoundTraits {
-struct SurroundSoundFormatTraits
-    : public StdCollectionTraits<AudioPolicyConfig::SurroundFormats> {
+struct SurroundSoundFormatTraits : public StdCollectionTraits<AudioPolicyConfig::SurroundFormats>
+{
@@ -156 +147,2 @@ struct SurroundSoundFormatTraits
-  struct Attributes {
+    struct Attributes
+    {
@@ -160,2 +152 @@ struct SurroundSoundFormatTraits
-  static Return<Element> deserialize(const xmlNode *cur,
-                                     PtrSerializingCtx serializingContext);
+    static Return<Element> deserialize(const xmlNode *cur, PtrSerializingCtx serializingContext);
@@ -163 +154,2 @@ struct SurroundSoundFormatTraits
-class PolicySerializer {
+class PolicySerializer
+{
@@ -165 +157,2 @@ class PolicySerializer {
-  PolicySerializer() : mVersion {
+    PolicySerializer() : mVersion{std::to_string(gMajor) + "." + std::to_string(gMinor)}
+    {
@@ -172,4 +165,2 @@ class PolicySerializer {
-  static constexpr uint32_t gMajor =
-      1;
-  static constexpr uint32_t gMinor =
-      0;
+    static constexpr uint32_t gMajor = 1;
+    static constexpr uint32_t gMinor = 0;
@@ -179,0 +171,6 @@ template <class T>
+constexpr void (*xmlDeleter)(T* t);
+template <>
+constexpr auto xmlDeleter<xmlDoc> = xmlFreeDoc;
+template <>
+auto xmlDeleter<xmlChar> = [](xmlChar *s) { xmlFree(s); };
+template <class T>
@@ -184,3 +181,3 @@ constexpr auto make_xmlUnique(T *t) {
-std::string getXmlAttribute(const xmlNode *cur, const char *attribute) {
-  auto xmlValue = make_xmlUnique(
-      xmlGetProp(cur, reinterpret_cast<const xmlChar *>(attribute)));
+std::string getXmlAttribute(const xmlNode *cur, const char *attribute)
+{
+    auto xmlValue = make_xmlUnique(xmlGetProp(cur, reinterpret_cast<const xmlChar*>(attribute)));
@@ -194 +191,2 @@ template <class Trait>
-const xmlNode *getReference(const xmlNode *cur, const std::string &refName) {
+const xmlNode* getReference(const xmlNode *cur, const std::string &refName)
+{
@@ -196,8 +194,5 @@ const xmlNode *getReference(const xmlNode *cur, const std::string &refName) {
-    if (!xmlStrcmp(cur->name,
-                   reinterpret_cast<const xmlChar *>(Trait::collectionTag))) {
-      for (const xmlNode *child = cur->children; child != NULL;
-           child = child->next) {
-        if ((!xmlStrcmp(child->name, reinterpret_cast<const xmlChar *>(
-                                         Trait::referenceTag)))) {
-          std::string name =
-              getXmlAttribute(child, Trait::Attributes::referenceName);
+        if (!xmlStrcmp(cur->name, reinterpret_cast<const xmlChar*>(Trait::collectionTag))) {
+            for (const xmlNode *child = cur->children; child != NULL; child = child->next) {
+                if ((!xmlStrcmp(child->name,
+                                        reinterpret_cast<const xmlChar*>(Trait::referenceTag)))) {
+                    std::string name = getXmlAttribute(child, Trait::Attributes::referenceName);
@@ -214,3 +209,4 @@ template <class Trait>
-status_t deserializeCollection(
-    const xmlNode *cur, typename Trait::Collection *collection,
-    typename Trait::PtrSerializingCtx serializingContext) {
+status_t deserializeCollection(const xmlNode *cur,
+        typename Trait::Collection *collection,
+        typename Trait::PtrSerializingCtx serializingContext)
+{
@@ -219,2 +215 @@ status_t deserializeCollection(
-    if (!xmlStrcmp(cur->name,
-                   reinterpret_cast<const xmlChar *>(Trait::collectionTag))) {
+        if (!xmlStrcmp(cur->name, reinterpret_cast<const xmlChar*>(Trait::collectionTag))) {
@@ -222,2 +217 @@ status_t deserializeCollection(
-    } else if (!xmlStrcmp(cur->name,
-                          reinterpret_cast<const xmlChar *>(Trait::tag))) {
+        } else if (!xmlStrcmp(cur->name, reinterpret_cast<const xmlChar*>(Trait::tag))) {
@@ -227,2 +221 @@ status_t deserializeCollection(
-      if (!xmlStrcmp(child->name,
-                     reinterpret_cast<const xmlChar *>(Trait::tag))) {
+            if (!xmlStrcmp(child->name, reinterpret_cast<const xmlChar*>(Trait::tag))) {
@@ -248,2 +241,3 @@ status_t deserializeCollection(
-Return<AudioGainTraits::Element> AudioGainTraits::deserialize(
-    const xmlNode *cur, PtrSerializingCtx ) {
+Return<AudioGainTraits::Element> AudioGainTraits::deserialize(const xmlNode *cur,
+        PtrSerializingCtx )
+{
@@ -270,2 +264 @@ Return<AudioGainTraits::Element> AudioGainTraits::deserialize(
-  std::string defaultValueMBLiteral =
-      getXmlAttribute(cur, Attributes::defaultValueMB);
+    std::string defaultValueMBLiteral = getXmlAttribute(cur, Attributes::defaultValueMB);
@@ -273,2 +266 @@ Return<AudioGainTraits::Element> AudioGainTraits::deserialize(
-  if (!defaultValueMBLiteral.empty() &&
-      convertTo(defaultValueMBLiteral, defaultValueMB)) {
+    if (!defaultValueMBLiteral.empty() && convertTo(defaultValueMBLiteral, defaultValueMB)) {
@@ -277,2 +269 @@ Return<AudioGainTraits::Element> AudioGainTraits::deserialize(
-  std::string stepValueMBLiteral =
-      getXmlAttribute(cur, Attributes::stepValueMB);
+    std::string stepValueMBLiteral = getXmlAttribute(cur, Attributes::stepValueMB);
@@ -280,2 +271 @@ Return<AudioGainTraits::Element> AudioGainTraits::deserialize(
-  if (!stepValueMBLiteral.empty() &&
-      convertTo(stepValueMBLiteral, stepValueMB)) {
+    if (!stepValueMBLiteral.empty() && convertTo(stepValueMBLiteral, stepValueMB)) {
@@ -294,2 +284 @@ Return<AudioGainTraits::Element> AudioGainTraits::deserialize(
-  std::string useForVolumeLiteral =
-      getXmlAttribute(cur, Attributes::useForVolume);
+    std::string useForVolumeLiteral = getXmlAttribute(cur, Attributes::useForVolume);
@@ -297,2 +286 @@ Return<AudioGainTraits::Element> AudioGainTraits::deserialize(
-  if (!useForVolumeLiteral.empty() &&
-      convertTo(useForVolumeLiteral, useForVolume)) {
+    if (!useForVolumeLiteral.empty() && convertTo(useForVolumeLiteral, useForVolume)) {
@@ -301,5 +289,3 @@ Return<AudioGainTraits::Element> AudioGainTraits::deserialize(
-  ALOGV(
-      "%s: adding new gain mode %08x channel mask %08x min mB %d max mB %d "
-      "UseForVolume: %d",
-      __func__, gain->getMode(), gain->getChannelMask(),
-      gain->getMinValueInMb(), gain->getMaxValueInMb(), useForVolume);
+    ALOGV("%s: adding new gain mode %08x channel mask %08x min mB %d max mB %d UseForVolume: %d",
+          __func__, gain->getMode(), gain->getChannelMask(), gain->getMinValueInMb(),
+          gain->getMaxValueInMb(), useForVolume);
@@ -312,2 +298,3 @@ Return<AudioGainTraits::Element> AudioGainTraits::deserialize(
-Return<AudioProfileTraits::Element> AudioProfileTraits::deserialize(
-    const xmlNode *cur, PtrSerializingCtx ) {
+Return<AudioProfileTraits::Element> AudioProfileTraits::deserialize(const xmlNode *cur,
+        PtrSerializingCtx )
+{
@@ -317,2 +304 @@ Return<AudioProfileTraits::Element> AudioProfileTraits::deserialize(
-  Element profile =
-      new AudioProfile(formatFromString(format, gDynamicFormat),
+    Element profile = new AudioProfile(formatFromString(format, gDynamicFormat),
@@ -326,2 +312,3 @@ Return<AudioProfileTraits::Element> AudioProfileTraits::deserialize(
-Return<MixPortTraits::Element> MixPortTraits::deserialize(
-    const xmlNode *child, PtrSerializingCtx ) {
+Return<MixPortTraits::Element> MixPortTraits::deserialize(const xmlNode *child,
+        PtrSerializingCtx )
+{
@@ -340,3 +327,2 @@ Return<MixPortTraits::Element> MixPortTraits::deserialize(
-  audio_port_role_t portRole = (role == Attributes::roleSource)
-                                   ? AUDIO_PORT_ROLE_SOURCE
-                                   : AUDIO_PORT_ROLE_SINK;
+    audio_port_role_t portRole = (role == Attributes::roleSource) ?
+            AUDIO_PORT_ROLE_SOURCE : AUDIO_PORT_ROLE_SINK;
@@ -345,2 +331 @@ Return<MixPortTraits::Element> MixPortTraits::deserialize(
-  status_t status =
-      deserializeCollection<AudioProfileTraits>(child, &profiles, NULL);
+    status_t status = deserializeCollection<AudioProfileTraits>(child, &profiles, NULL);
@@ -367,2 +352 @@ Return<MixPortTraits::Element> MixPortTraits::deserialize(
-  std::string maxActiveCount =
-      getXmlAttribute(child, Attributes::maxActiveCount);
+    std::string maxActiveCount = getXmlAttribute(child, Attributes::maxActiveCount);
@@ -380,2 +364,3 @@ Return<MixPortTraits::Element> MixPortTraits::deserialize(
-Return<DevicePortTraits::Element> DevicePortTraits::deserialize(
-    const xmlNode *cur, PtrSerializingCtx ) {
+Return<DevicePortTraits::Element> DevicePortTraits::deserialize(const xmlNode *cur,
+        PtrSerializingCtx )
+{
@@ -400,3 +385,2 @@ Return<DevicePortTraits::Element> DevicePortTraits::deserialize(
-  audio_port_role_t portRole = (role == Attributes::roleSource)
-                                   ? AUDIO_PORT_ROLE_SOURCE
-                                   : AUDIO_PORT_ROLE_SINK;
+    audio_port_role_t portRole = (role == Attributes::roleSource) ?
+                AUDIO_PORT_ROLE_SOURCE : AUDIO_PORT_ROLE_SINK;
@@ -410,4 +394,2 @@ Return<DevicePortTraits::Element> DevicePortTraits::deserialize(
-  std::string encodedFormatsLiteral =
-      getXmlAttribute(cur, Attributes::encodedFormats);
-  ALOGV("%s: %s %s=%s", __func__, tag, Attributes::encodedFormats,
-        encodedFormatsLiteral.c_str());
+    std::string encodedFormatsLiteral = getXmlAttribute(cur, Attributes::encodedFormats);
+    ALOGV("%s: %s %s=%s", __func__, tag, Attributes::encodedFormats, encodedFormatsLiteral.c_str());
@@ -419,14 +401 @@ Return<DevicePortTraits::Element> DevicePortTraits::deserialize(
-<<<<<<< HEAD
-  Element deviceDesc =
-      new DeviceDescriptor(type, name, address, encodedFormats);
-||||||| 5f90ad4290
-  if (!address.empty()) {
-    ALOGV("%s: address=%s for %s", __func__, address.c_str(), name.c_str());
-    deviceDesc->setAddress(String8(address.c_str()));
-  }
-=======
-  if (!address.empty()) {
-    ALOGV("%s: address=%s for %s", __func__, address.c_str(), name.c_str());
-    deviceDesc->setAddress(address);
-  }
->>>>>>> 80ffad94f2b41098bad4f35f2399eb05e8c5ee34
+    Element deviceDesc = new DeviceDescriptor(type, name, address, encodedFormats);
@@ -434,2 +403 @@ Return<DevicePortTraits::Element> DevicePortTraits::deserialize(
-  status_t status =
-      deserializeCollection<AudioProfileTraits>(cur, &profiles, NULL);
+    status_t status = deserializeCollection<AudioProfileTraits>(cur, &profiles, NULL);
@@ -444,2 +412 @@ Return<DevicePortTraits::Element> DevicePortTraits::deserialize(
-  status =
-      deserializeCollection<AudioGainTraits>(cur, &deviceDesc->mGains, NULL);
+    status = deserializeCollection<AudioGainTraits>(cur, &deviceDesc->mGains, NULL);
@@ -453,2 +420,2 @@ Return<DevicePortTraits::Element> DevicePortTraits::deserialize(
-Return<RouteTraits::Element> RouteTraits::deserialize(const xmlNode *cur,
-                                                      PtrSerializingCtx ctx) {
+Return<RouteTraits::Element> RouteTraits::deserialize(const xmlNode *cur, PtrSerializingCtx ctx)
+{
@@ -460,2 +427,2 @@ Return<RouteTraits::Element> RouteTraits::deserialize(const xmlNode *cur,
-  audio_route_type_t routeType =
-      (type == Attributes::typeMix) ? AUDIO_ROUTE_MIX : AUDIO_ROUTE_MUX;
+    audio_route_type_t routeType = (type == Attributes::typeMix) ?
+                AUDIO_ROUTE_MIX : AUDIO_ROUTE_MUX;
@@ -481,2 +448,2 @@ Return<RouteTraits::Element> RouteTraits::deserialize(const xmlNode *cur,
-  std::unique_ptr<char[]> sourcesLiteral{
-      strndup(sourcesAttr.c_str(), strlen(sourcesAttr.c_str()))};
+    std::unique_ptr<char[]> sourcesLiteral{strndup(
+                sourcesAttr.c_str(), strlen(sourcesAttr.c_str()))};
@@ -503,2 +470,2 @@ Return<RouteTraits::Element> RouteTraits::deserialize(const xmlNode *cur,
-Return<ModuleTraits::Element> ModuleTraits::deserialize(const xmlNode *cur,
-                                                        PtrSerializingCtx ctx) {
+Return<ModuleTraits::Element> ModuleTraits::deserialize(const xmlNode *cur, PtrSerializingCtx ctx)
+{
@@ -514,2 +481,2 @@ Return<ModuleTraits::Element> ModuleTraits::deserialize(const xmlNode *cur,
-    ALOGV("%s: mHalVersion = major %u minor %u", __func__, versionMajor,
-          versionMajor);
+        ALOGV("%s: mHalVersion = major %u minor %u", __func__,
+              versionMajor, versionMajor);
@@ -539,2 +506 @@ Return<ModuleTraits::Element> ModuleTraits::deserialize(const xmlNode *cur,
-    if (!xmlStrcmp(children->name, reinterpret_cast<const xmlChar *>(
-                                       childAttachedDevicesTag))) {
+        if (!xmlStrcmp(children->name, reinterpret_cast<const xmlChar*>(childAttachedDevicesTag))) {
@@ -544,4 +510,4 @@ Return<ModuleTraits::Element> ModuleTraits::deserialize(const xmlNode *cur,
-        if (!xmlStrcmp(child->name, reinterpret_cast<const xmlChar *>(
-                                        childAttachedDeviceTag))) {
-          auto attachedDevice = make_xmlUnique(
-              xmlNodeListGetString(child->doc, child->xmlChildrenNode, 1));
+                if (!xmlStrcmp(child->name,
+                                reinterpret_cast<const xmlChar*>(childAttachedDeviceTag))) {
+                    auto attachedDevice = make_xmlUnique(xmlNodeListGetString(
+                                    child->doc, child->xmlChildrenNode, 1));
@@ -551,3 +517,3 @@ Return<ModuleTraits::Element> ModuleTraits::deserialize(const xmlNode *cur,
-            sp<DeviceDescriptor> device =
-                module->getDeclaredDevices().getDeviceFromTagName(std::string(
-                    reinterpret_cast<const char *>(attachedDevice.get())));
+                        sp<DeviceDescriptor> device = module->getDeclaredDevices().
+                                getDeviceFromTagName(std::string(reinterpret_cast<const char*>(
+                                                        attachedDevice.get())));
@@ -559,4 +525,4 @@ Return<ModuleTraits::Element> ModuleTraits::deserialize(const xmlNode *cur,
-    if (!xmlStrcmp(children->name, reinterpret_cast<const xmlChar *>(
-                                       childDefaultOutputDeviceTag))) {
-      auto defaultOutputDevice = make_xmlUnique(
-          xmlNodeListGetString(children->doc, children->xmlChildrenNode, 1));
+        if (!xmlStrcmp(children->name,
+                        reinterpret_cast<const xmlChar*>(childDefaultOutputDeviceTag))) {
+            auto defaultOutputDevice = make_xmlUnique(xmlNodeListGetString(
+                            children->doc, children->xmlChildrenNode, 1));
@@ -566,3 +532,2 @@ Return<ModuleTraits::Element> ModuleTraits::deserialize(const xmlNode *cur,
-        sp<DeviceDescriptor> device =
-            module->getDeclaredDevices().getDeviceFromTagName(std::string(
-                reinterpret_cast<const char *>(defaultOutputDevice.get())));
+                sp<DeviceDescriptor> device = module->getDeclaredDevices().getDeviceFromTagName(
+                        std::string(reinterpret_cast<const char*>(defaultOutputDevice.get())));
@@ -571,2 +536,2 @@ Return<ModuleTraits::Element> ModuleTraits::deserialize(const xmlNode *cur,
-          ALOGV("%s: default is %08x", __func__,
-                ctx->getDefaultOutputDevice()->type());
+                    ALOGV("%s: default is %08x",
+                            __func__, ctx->getDefaultOutputDevice()->type());
@@ -579,4 +544,3 @@ Return<ModuleTraits::Element> ModuleTraits::deserialize(const xmlNode *cur,
-status_t GlobalConfigTraits::deserialize(const xmlNode *root,
-                                         AudioPolicyConfig *config) {
-  for (const xmlNode *cur = root->xmlChildrenNode; cur != NULL;
-       cur = cur->next) {
+status_t GlobalConfigTraits::deserialize(const xmlNode *root, AudioPolicyConfig *config)
+{
+    for (const xmlNode *cur = root->xmlChildrenNode; cur != NULL; cur = cur->next) {
@@ -586 +550,2 @@ status_t GlobalConfigTraits::deserialize(const xmlNode *root,
-      if (!attr.empty() && convertTo<std::string, bool>(attr, value)) {
+            if (!attr.empty() &&
+                    convertTo<std::string, bool>(attr, value)) {
@@ -590 +555,2 @@ status_t GlobalConfigTraits::deserialize(const xmlNode *root,
-      if (!attr.empty() && convertTo<std::string, bool>(attr, value)) {
+            if (!attr.empty() &&
+                    convertTo<std::string, bool>(attr, value)) {
@@ -597,2 +563,2 @@ status_t GlobalConfigTraits::deserialize(const xmlNode *root,
-status_t SurroundSoundTraits::deserialize(const xmlNode *root,
-                                          AudioPolicyConfig *config) {
+status_t SurroundSoundTraits::deserialize(const xmlNode *root, AudioPolicyConfig *config)
+{
@@ -600,2 +566 @@ status_t SurroundSoundTraits::deserialize(const xmlNode *root,
-  for (const xmlNode *cur = root->xmlChildrenNode; cur != NULL;
-       cur = cur->next) {
+    for (const xmlNode *cur = root->xmlChildrenNode; cur != NULL; cur = cur->next) {
@@ -614,3 +579,3 @@ status_t SurroundSoundTraits::deserialize(const xmlNode *root,
-Return<SurroundSoundFormatTraits::Element>
-SurroundSoundFormatTraits::deserialize(
-    const xmlNode *cur, PtrSerializingCtx ) {
+Return<SurroundSoundFormatTraits::Element> SurroundSoundFormatTraits::deserialize(
+        const xmlNode *cur, PtrSerializingCtx )
+{
@@ -634,2 +599 @@ SurroundSoundFormatTraits::deserialize(
-      ALOGE("%s: could not add subformat %x to collection", __func__,
-            subformat);
+            ALOGE("%s: could not add subformat %x to collection", __func__, subformat);
@@ -641,2 +605,2 @@ SurroundSoundFormatTraits::deserialize(
-status_t PolicySerializer::deserialize(const char *configFile,
-                                       AudioPolicyConfig *config) {
+status_t PolicySerializer::deserialize(const char *configFile, AudioPolicyConfig *config)
+{
@@ -654,2 +618 @@ status_t PolicySerializer::deserialize(const char *configFile,
-    ALOGE("%s: libxml failed to resolve XIncludes on %s document.", __func__,
-          configFile);
+        ALOGE("%s: libxml failed to resolve XIncludes on %s document.", __func__, configFile);
@@ -668,2 +631,2 @@ status_t PolicySerializer::deserialize(const char *configFile,
-    ALOGE("%s: Version does not match; expect %s got %s", __func__,
-          mVersion.c_str(), version.c_str());
+        ALOGE("%s: Version does not match; expect %s got %s", __func__, mVersion.c_str(),
+              version.c_str());
@@ -683,2 +646,2 @@ status_t PolicySerializer::deserialize(const char *configFile,
-status_t deserializeAudioPolicyFile(const char *fileName,
-                                    AudioPolicyConfig *config) {
+status_t deserializeAudioPolicyFile(const char *fileName, AudioPolicyConfig *config)
+{
