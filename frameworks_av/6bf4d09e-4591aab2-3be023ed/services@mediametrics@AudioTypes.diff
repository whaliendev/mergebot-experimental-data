diff --git a/home/whalien/codebase/cpp/mergebot/eva/output/frameworks_av/6bf4d09e-4591aab2-3be023ed/services@mediametrics@AudioTypes.no_comments_mergebot.cpp b/home/whalien/codebase/cpp/mergebot/eva/output/frameworks_av/6bf4d09e-4591aab2-3be023ed/services@mediametrics@AudioTypes.no_comments_merged.cpp
index 8478c3f..b3c8698 100644
--- a/home/whalien/codebase/cpp/mergebot/eva/output/frameworks_av/6bf4d09e-4591aab2-3be023ed/services@mediametrics@AudioTypes.no_comments_mergebot.cpp
+++ b/home/whalien/codebase/cpp/mergebot/eva/output/frameworks_av/6bf4d09e-4591aab2-3be023ed/services@mediametrics@AudioTypes.no_comments_merged.cpp
@@ -137,70 +137,35 @@ const std::unordered_map<std::string, int32_t>& getAudioDeviceInfoTypeMap() {
-            {"unknown",
-             util::MEDIAMETRICS_SPATIALIZER_DEVICE_ENABLED_REPORTED__TYPE__AUDIO_DEVICE_INFO_TYPE_UNKNOWN},
-            {"earpiece",
-             util::MEDIAMETRICS_SPATIALIZER_DEVICE_ENABLED_REPORTED__TYPE__AUDIO_DEVICE_INFO_TYPE_BUILTIN_EARPIECE},
-            {"speaker",
-             util::MEDIAMETRICS_SPATIALIZER_DEVICE_ENABLED_REPORTED__TYPE__AUDIO_DEVICE_INFO_TYPE_BUILTIN_SPEAKER},
-            {"headset",
-             util::MEDIAMETRICS_SPATIALIZER_DEVICE_ENABLED_REPORTED__TYPE__AUDIO_DEVICE_INFO_TYPE_WIRED_HEADSET},
-            {"headphone",
-             util::MEDIAMETRICS_SPATIALIZER_DEVICE_ENABLED_REPORTED__TYPE__AUDIO_DEVICE_INFO_TYPE_WIRED_HEADPHONES},
-            {"bt_sco",
-             util::MEDIAMETRICS_SPATIALIZER_DEVICE_ENABLED_REPORTED__TYPE__AUDIO_DEVICE_INFO_TYPE_BLUETOOTH_SCO},
-            {"bt_sco_hs",
-             util::MEDIAMETRICS_SPATIALIZER_DEVICE_ENABLED_REPORTED__TYPE__AUDIO_DEVICE_INFO_TYPE_BLUETOOTH_SCO},
-            {"bt_sco_carkit",
-             util::MEDIAMETRICS_SPATIALIZER_DEVICE_ENABLED_REPORTED__TYPE__AUDIO_DEVICE_INFO_TYPE_BLUETOOTH_SCO},
-            {"bt_a2dp",
-             util::MEDIAMETRICS_SPATIALIZER_DEVICE_ENABLED_REPORTED__TYPE__AUDIO_DEVICE_INFO_TYPE_BLUETOOTH_A2DP},
-            {"bt_a2dp_hp",
-             util::MEDIAMETRICS_SPATIALIZER_DEVICE_ENABLED_REPORTED__TYPE__AUDIO_DEVICE_INFO_TYPE_BLUETOOTH_A2DP},
-            {"bt_a2dp_spk",
-             util::MEDIAMETRICS_SPATIALIZER_DEVICE_ENABLED_REPORTED__TYPE__AUDIO_DEVICE_INFO_TYPE_BLUETOOTH_A2DP},
-            {"aux_digital",
-             util::MEDIAMETRICS_SPATIALIZER_DEVICE_ENABLED_REPORTED__TYPE__AUDIO_DEVICE_INFO_TYPE_HDMI},
-            {"hdmi",
-             util::MEDIAMETRICS_SPATIALIZER_DEVICE_ENABLED_REPORTED__TYPE__AUDIO_DEVICE_INFO_TYPE_HDMI},
-            {"analog_dock",
-             util::MEDIAMETRICS_SPATIALIZER_DEVICE_ENABLED_REPORTED__TYPE__AUDIO_DEVICE_INFO_TYPE_DOCK},
-            {"digital_dock",
-             util::MEDIAMETRICS_SPATIALIZER_DEVICE_ENABLED_REPORTED__TYPE__AUDIO_DEVICE_INFO_TYPE_DOCK},
-            {"usb_accessory",
-             util::MEDIAMETRICS_SPATIALIZER_DEVICE_ENABLED_REPORTED__TYPE__AUDIO_DEVICE_INFO_TYPE_USB_ACCESSORY},
-            {"usb_device",
-             util::MEDIAMETRICS_SPATIALIZER_DEVICE_ENABLED_REPORTED__TYPE__AUDIO_DEVICE_INFO_TYPE_USB_DEVICE},
-            {"usb_headset",
-             util::MEDIAMETRICS_SPATIALIZER_DEVICE_ENABLED_REPORTED__TYPE__AUDIO_DEVICE_INFO_TYPE_USB_HEADSET},
-            {"remote_submix",
-             util::MEDIAMETRICS_SPATIALIZER_DEVICE_ENABLED_REPORTED__TYPE__AUDIO_DEVICE_INFO_TYPE_REMOTE_SUBMIX},
-            {"telephony_tx",
-             util::MEDIAMETRICS_SPATIALIZER_DEVICE_ENABLED_REPORTED__TYPE__AUDIO_DEVICE_INFO_TYPE_TELEPHONY},
-            {"line",
-             util::MEDIAMETRICS_SPATIALIZER_DEVICE_ENABLED_REPORTED__TYPE__AUDIO_DEVICE_INFO_TYPE_LINE_ANALOG},
-            {"hdmi_arc",
-             util::MEDIAMETRICS_SPATIALIZER_DEVICE_ENABLED_REPORTED__TYPE__AUDIO_DEVICE_INFO_TYPE_HDMI_ARC},
-            {"hdmi_earc",
-             util::MEDIAMETRICS_SPATIALIZER_DEVICE_ENABLED_REPORTED__TYPE__AUDIO_DEVICE_INFO_TYPE_HDMI_EARC},
-            {"spdif",
-             util::MEDIAMETRICS_SPATIALIZER_DEVICE_ENABLED_REPORTED__TYPE__AUDIO_DEVICE_INFO_TYPE_LINE_DIGITAL},
-            {"fm_transmitter",
-             util::MEDIAMETRICS_SPATIALIZER_DEVICE_ENABLED_REPORTED__TYPE__AUDIO_DEVICE_INFO_TYPE_FM},
-            {"aux_line",
-             util::MEDIAMETRICS_SPATIALIZER_DEVICE_ENABLED_REPORTED__TYPE__AUDIO_DEVICE_INFO_TYPE_AUX_LINE},
-            {"speaker_safe",
-             util::MEDIAMETRICS_SPATIALIZER_DEVICE_ENABLED_REPORTED__TYPE__AUDIO_DEVICE_INFO_TYPE_BUILTIN_SPEAKER_SAFE},
-            {"ip",
-             util::MEDIAMETRICS_SPATIALIZER_DEVICE_ENABLED_REPORTED__TYPE__AUDIO_DEVICE_INFO_TYPE_IP},
-            {"bus",
-             util::MEDIAMETRICS_SPATIALIZER_DEVICE_ENABLED_REPORTED__TYPE__AUDIO_DEVICE_INFO_TYPE_BUS},
-            {"proxy",
-             util::MEDIAMETRICS_SPATIALIZER_DEVICE_ENABLED_REPORTED__TYPE__AUDIO_DEVICE_INFO_TYPE_UNKNOWN },
-            {"hearing_aid_out",
-             util::MEDIAMETRICS_SPATIALIZER_DEVICE_ENABLED_REPORTED__TYPE__AUDIO_DEVICE_INFO_TYPE_HEARING_AID},
-            {"echo_canceller",
-             util::MEDIAMETRICS_SPATIALIZER_DEVICE_ENABLED_REPORTED__TYPE__AUDIO_DEVICE_INFO_TYPE_ECHO_REFERENCE},
-            {"ble_headset",
-             util::MEDIAMETRICS_SPATIALIZER_DEVICE_ENABLED_REPORTED__TYPE__AUDIO_DEVICE_INFO_TYPE_BLE_HEADSET},
-            {"ble_speaker",
-             util::MEDIAMETRICS_SPATIALIZER_DEVICE_ENABLED_REPORTED__TYPE__AUDIO_DEVICE_INFO_TYPE_BLE_SPEAKER},
-            {"ble_broadcast",
-             util::MEDIAMETRICS_SPATIALIZER_DEVICE_ENABLED_REPORTED__TYPE__AUDIO_DEVICE_INFO_TYPE_BLE_BROADCAST},
+        {"unknown", util::MEDIAMETRICS_SPATIALIZER_DEVICE_ENABLED_REPORTED__TYPE__AUDIO_DEVICE_INFO_TYPE_UNKNOWN},
+        {"earpiece", util::MEDIAMETRICS_SPATIALIZER_DEVICE_ENABLED_REPORTED__TYPE__AUDIO_DEVICE_INFO_TYPE_BUILTIN_EARPIECE},
+        {"speaker", util::MEDIAMETRICS_SPATIALIZER_DEVICE_ENABLED_REPORTED__TYPE__AUDIO_DEVICE_INFO_TYPE_BUILTIN_SPEAKER},
+        {"headset", util::MEDIAMETRICS_SPATIALIZER_DEVICE_ENABLED_REPORTED__TYPE__AUDIO_DEVICE_INFO_TYPE_WIRED_HEADSET},
+        {"headphone", util::MEDIAMETRICS_SPATIALIZER_DEVICE_ENABLED_REPORTED__TYPE__AUDIO_DEVICE_INFO_TYPE_WIRED_HEADPHONES},
+        {"bt_sco", util::MEDIAMETRICS_SPATIALIZER_DEVICE_ENABLED_REPORTED__TYPE__AUDIO_DEVICE_INFO_TYPE_BLUETOOTH_SCO},
+        {"bt_sco_hs", util::MEDIAMETRICS_SPATIALIZER_DEVICE_ENABLED_REPORTED__TYPE__AUDIO_DEVICE_INFO_TYPE_BLUETOOTH_SCO},
+        {"bt_sco_carkit", util::MEDIAMETRICS_SPATIALIZER_DEVICE_ENABLED_REPORTED__TYPE__AUDIO_DEVICE_INFO_TYPE_BLUETOOTH_SCO},
+        {"bt_a2dp", util::MEDIAMETRICS_SPATIALIZER_DEVICE_ENABLED_REPORTED__TYPE__AUDIO_DEVICE_INFO_TYPE_BLUETOOTH_A2DP},
+        {"bt_a2dp_hp", util::MEDIAMETRICS_SPATIALIZER_DEVICE_ENABLED_REPORTED__TYPE__AUDIO_DEVICE_INFO_TYPE_BLUETOOTH_A2DP},
+        {"bt_a2dp_spk", util::MEDIAMETRICS_SPATIALIZER_DEVICE_ENABLED_REPORTED__TYPE__AUDIO_DEVICE_INFO_TYPE_BLUETOOTH_A2DP},
+        {"aux_digital", util::MEDIAMETRICS_SPATIALIZER_DEVICE_ENABLED_REPORTED__TYPE__AUDIO_DEVICE_INFO_TYPE_HDMI},
+        {"hdmi", util::MEDIAMETRICS_SPATIALIZER_DEVICE_ENABLED_REPORTED__TYPE__AUDIO_DEVICE_INFO_TYPE_HDMI},
+        {"analog_dock", util::MEDIAMETRICS_SPATIALIZER_DEVICE_ENABLED_REPORTED__TYPE__AUDIO_DEVICE_INFO_TYPE_DOCK},
+        {"digital_dock", util::MEDIAMETRICS_SPATIALIZER_DEVICE_ENABLED_REPORTED__TYPE__AUDIO_DEVICE_INFO_TYPE_DOCK},
+        {"usb_accessory", util::MEDIAMETRICS_SPATIALIZER_DEVICE_ENABLED_REPORTED__TYPE__AUDIO_DEVICE_INFO_TYPE_USB_ACCESSORY},
+        {"usb_device", util::MEDIAMETRICS_SPATIALIZER_DEVICE_ENABLED_REPORTED__TYPE__AUDIO_DEVICE_INFO_TYPE_USB_DEVICE},
+        {"usb_headset", util::MEDIAMETRICS_SPATIALIZER_DEVICE_ENABLED_REPORTED__TYPE__AUDIO_DEVICE_INFO_TYPE_USB_HEADSET},
+        {"remote_submix", util::MEDIAMETRICS_SPATIALIZER_DEVICE_ENABLED_REPORTED__TYPE__AUDIO_DEVICE_INFO_TYPE_REMOTE_SUBMIX},
+        {"telephony_tx", util::MEDIAMETRICS_SPATIALIZER_DEVICE_ENABLED_REPORTED__TYPE__AUDIO_DEVICE_INFO_TYPE_TELEPHONY},
+        {"line", util::MEDIAMETRICS_SPATIALIZER_DEVICE_ENABLED_REPORTED__TYPE__AUDIO_DEVICE_INFO_TYPE_LINE_ANALOG},
+        {"hdmi_arc", util::MEDIAMETRICS_SPATIALIZER_DEVICE_ENABLED_REPORTED__TYPE__AUDIO_DEVICE_INFO_TYPE_HDMI_ARC},
+        {"hdmi_earc", util::MEDIAMETRICS_SPATIALIZER_DEVICE_ENABLED_REPORTED__TYPE__AUDIO_DEVICE_INFO_TYPE_HDMI_EARC},
+        {"spdif", util::MEDIAMETRICS_SPATIALIZER_DEVICE_ENABLED_REPORTED__TYPE__AUDIO_DEVICE_INFO_TYPE_LINE_DIGITAL},
+        {"fm_transmitter", util::MEDIAMETRICS_SPATIALIZER_DEVICE_ENABLED_REPORTED__TYPE__AUDIO_DEVICE_INFO_TYPE_FM},
+        {"aux_line", util::MEDIAMETRICS_SPATIALIZER_DEVICE_ENABLED_REPORTED__TYPE__AUDIO_DEVICE_INFO_TYPE_AUX_LINE},
+        {"speaker_safe", util::MEDIAMETRICS_SPATIALIZER_DEVICE_ENABLED_REPORTED__TYPE__AUDIO_DEVICE_INFO_TYPE_BUILTIN_SPEAKER_SAFE},
+        {"ip", util::MEDIAMETRICS_SPATIALIZER_DEVICE_ENABLED_REPORTED__TYPE__AUDIO_DEVICE_INFO_TYPE_IP},
+        {"bus", util::MEDIAMETRICS_SPATIALIZER_DEVICE_ENABLED_REPORTED__TYPE__AUDIO_DEVICE_INFO_TYPE_BUS},
+        {"proxy", util::MEDIAMETRICS_SPATIALIZER_DEVICE_ENABLED_REPORTED__TYPE__AUDIO_DEVICE_INFO_TYPE_UNKNOWN },
+        {"hearing_aid_out", util::MEDIAMETRICS_SPATIALIZER_DEVICE_ENABLED_REPORTED__TYPE__AUDIO_DEVICE_INFO_TYPE_HEARING_AID},
+        {"echo_canceller", util::MEDIAMETRICS_SPATIALIZER_DEVICE_ENABLED_REPORTED__TYPE__AUDIO_DEVICE_INFO_TYPE_ECHO_REFERENCE},
+        {"ble_headset", util::MEDIAMETRICS_SPATIALIZER_DEVICE_ENABLED_REPORTED__TYPE__AUDIO_DEVICE_INFO_TYPE_BLE_HEADSET},
+        {"ble_speaker", util::MEDIAMETRICS_SPATIALIZER_DEVICE_ENABLED_REPORTED__TYPE__AUDIO_DEVICE_INFO_TYPE_BLE_SPEAKER},
+        {"ble_broadcast", util::MEDIAMETRICS_SPATIALIZER_DEVICE_ENABLED_REPORTED__TYPE__AUDIO_DEVICE_INFO_TYPE_BLE_BROADCAST},
@@ -277 +242,2 @@ const std::unordered_map<std::string, int32_t>& getStatusMap() {
-            {"", util::MEDIAMETRICS_AUDIO_TRACK_STATUS_REPORTED__STATUS__NO_ERROR},
+        {"",
+            util::MEDIAMETRICS_AUDIO_TRACK_STATUS_REPORTED__STATUS__NO_ERROR},
@@ -298 +264,2 @@ template <typename Traits>
-int32_t int32FromFlags(const std::string& flags) {
+int32_t int32FromFlags(const std::string &flags)
+{
@@ -311 +278,2 @@ template <typename Traits>
-std::string stringFromFlags(const std::string& flags, size_t len) {
+std::string stringFromFlags(const std::string &flags, size_t len)
+{
@@ -326 +294,2 @@ template <typename M>
-std::string validateStringFromMap(const std::string& str, const M& map) {
+std::string validateStringFromMap(const std::string &str, const M& map)
+{
@@ -339 +308,2 @@ template <typename M>
-typename M::mapped_type flagsFromMap(const std::string& str, const M& map) {
+typename M::mapped_type flagsFromMap(const std::string &str, const M& map)
+{
@@ -350,2 +320,3 @@ typename M::mapped_type flagsFromMap(const std::string& str, const M& map) {
-std::vector<int32_t> vectorFromMap(const std::string& str,
-                                   const std::unordered_map<std::string, int32_t>& map) {
+std::vector<int32_t> vectorFromMap(
+        const std::string &str, const std::unordered_map<std::string, int32_t>& map)
+{
@@ -362 +333,2 @@ std::vector<int32_t> vectorFromMap(const std::string& str,
-std::vector<int64_t> channelMaskVectorFromString(const std::string& s) {
+std::vector<int64_t> channelMaskVectorFromString(const std::string &s)
+{
@@ -372,5 +344,5 @@ template <>
-int32_t lookup<AAUDIO_SHARING_MODE>(const std::string& sharingMode) {
-    auto& map = getAAudioSharingMode();
-    auto it = map.find(sharingMode);
-    if (it == map.end()) {
-        return 0;
+int32_t lookup<CONTENT_TYPE>(const std::string &contentType)
+{
+    AudioContentTraits::Type value;
+    if (!TypeConverter<AudioContentTraits>::fromString(contentType, value)) {
+        value = AUDIO_CONTENT_TYPE_UNKNOWN;
@@ -378 +350 @@ int32_t lookup<AAUDIO_SHARING_MODE>(const std::string& sharingMode) {
-    return it->second;
+    return (int32_t)value;
@@ -381,5 +353,5 @@ template <>
-int32_t lookup<AAUDIO_SHARING_MODE>(const std::string& sharingMode) {
-    auto& map = getAAudioSharingMode();
-    auto it = map.find(sharingMode);
-    if (it == map.end()) {
-        return 0;
+std::string lookup<CONTENT_TYPE>(const std::string &contentType)
+{
+    AudioContentTraits::Type value;
+    if (!TypeConverter<AudioContentTraits>::fromString(contentType, value)) {
+        return "";
@@ -387 +359 @@ int32_t lookup<AAUDIO_SHARING_MODE>(const std::string& sharingMode) {
-    return it->second;
+    return contentType.c_str() + sizeof("AUDIO_CONTENT_TYPE");
@@ -390,5 +362,5 @@ template <>
-int32_t lookup<AAUDIO_SHARING_MODE>(const std::string& sharingMode) {
-    auto& map = getAAudioSharingMode();
-    auto it = map.find(sharingMode);
-    if (it == map.end()) {
-        return 0;
+int32_t lookup<ENCODING>(const std::string &encoding)
+{
+    FormatTraits::Type value;
+    if (!TypeConverter<FormatTraits>::fromString(encoding, value)) {
+        value = AUDIO_FORMAT_INVALID;
@@ -396 +368 @@ int32_t lookup<AAUDIO_SHARING_MODE>(const std::string& sharingMode) {
-    return it->second;
+    return (int32_t)value;
@@ -399,5 +371,5 @@ template <>
-int32_t lookup<AAUDIO_SHARING_MODE>(const std::string& sharingMode) {
-    auto& map = getAAudioSharingMode();
-    auto it = map.find(sharingMode);
-    if (it == map.end()) {
-        return 0;
+std::string lookup<ENCODING>(const std::string &encoding)
+{
+    FormatTraits::Type value;
+    if (!TypeConverter<FormatTraits>::fromString(encoding, value)) {
+        return "";
@@ -405 +377 @@ int32_t lookup<AAUDIO_SHARING_MODE>(const std::string& sharingMode) {
-    return it->second;
+    return encoding.c_str() + sizeof("AUDIO_FORMAT");
@@ -408,7 +380,3 @@ template <>
-int32_t lookup<AAUDIO_SHARING_MODE>(const std::string& sharingMode) {
-    auto& map = getAAudioSharingMode();
-    auto it = map.find(sharingMode);
-    if (it == map.end()) {
-        return 0;
-    }
-    return it->second;
+int32_t lookup<INPUT_FLAG>(const std::string &inputFlag)
+{
+    return int32FromFlags<InputFlagTraits>(inputFlag);
@@ -417,7 +385,3 @@ template <>
-int32_t lookup<AAUDIO_SHARING_MODE>(const std::string& sharingMode) {
-    auto& map = getAAudioSharingMode();
-    auto it = map.find(sharingMode);
-    if (it == map.end()) {
-        return 0;
-    }
-    return it->second;
+std::string lookup<INPUT_FLAG>(const std::string &inputFlag)
+{
+    return stringFromFlags<InputFlagTraits>(inputFlag, sizeof("AUDIO_INPUT_FLAG"));
@@ -426,7 +390,3 @@ template <>
-int32_t lookup<AAUDIO_SHARING_MODE>(const std::string& sharingMode) {
-    auto& map = getAAudioSharingMode();
-    auto it = map.find(sharingMode);
-    if (it == map.end()) {
-        return 0;
-    }
-    return it->second;
+int32_t lookup<OUTPUT_FLAG>(const std::string &outputFlag)
+{
+    return int32FromFlags<OutputFlagTraits>(outputFlag);
@@ -435,7 +395,3 @@ template <>
-int32_t lookup<AAUDIO_SHARING_MODE>(const std::string& sharingMode) {
-    auto& map = getAAudioSharingMode();
-    auto it = map.find(sharingMode);
-    if (it == map.end()) {
-        return 0;
-    }
-    return it->second;
+std::string lookup<OUTPUT_FLAG>(const std::string &outputFlag)
+{
+    return stringFromFlags<OutputFlagTraits>(outputFlag, sizeof("AUDIO_OUTPUT_FLAG"));
@@ -444,5 +400,5 @@ template <>
-int32_t lookup<AAUDIO_SHARING_MODE>(const std::string& sharingMode) {
-    auto& map = getAAudioSharingMode();
-    auto it = map.find(sharingMode);
-    if (it == map.end()) {
-        return 0;
+int32_t lookup<SOURCE_TYPE>(const std::string &sourceType)
+{
+    SourceTraits::Type value;
+    if (!TypeConverter<SourceTraits>::fromString(sourceType, value)) {
+        value = AUDIO_SOURCE_DEFAULT;
@@ -450 +406 @@ int32_t lookup<AAUDIO_SHARING_MODE>(const std::string& sharingMode) {
-    return it->second;
+    return (int32_t)value;
@@ -453,5 +409,5 @@ template <>
-int32_t lookup<AAUDIO_SHARING_MODE>(const std::string& sharingMode) {
-    auto& map = getAAudioSharingMode();
-    auto it = map.find(sharingMode);
-    if (it == map.end()) {
-        return 0;
+std::string lookup<SOURCE_TYPE>(const std::string &sourceType)
+{
+    SourceTraits::Type value;
+    if (!TypeConverter<SourceTraits>::fromString(sourceType, value)) {
+        return "";
@@ -459 +415 @@ int32_t lookup<AAUDIO_SHARING_MODE>(const std::string& sharingMode) {
-    return it->second;
+    return sourceType.c_str() + sizeof("AUDIO_SOURCE");
@@ -462,5 +418,5 @@ template <>
-int32_t lookup<AAUDIO_SHARING_MODE>(const std::string& sharingMode) {
-    auto& map = getAAudioSharingMode();
-    auto it = map.find(sharingMode);
-    if (it == map.end()) {
-        return 0;
+int32_t lookup<STREAM_TYPE>(const std::string &streamType)
+{
+    StreamTraits::Type value;
+    if (!TypeConverter<StreamTraits>::fromString(streamType, value)) {
+        value = AUDIO_STREAM_DEFAULT;
@@ -468 +424 @@ int32_t lookup<AAUDIO_SHARING_MODE>(const std::string& sharingMode) {
-    return it->second;
+    return (int32_t)value;
@@ -471,5 +427,5 @@ template <>
-int32_t lookup<AAUDIO_SHARING_MODE>(const std::string& sharingMode) {
-    auto& map = getAAudioSharingMode();
-    auto it = map.find(sharingMode);
-    if (it == map.end()) {
-        return 0;
+std::string lookup<STREAM_TYPE>(const std::string &streamType)
+{
+    StreamTraits::Type value;
+    if (!TypeConverter<StreamTraits>::fromString(streamType, value)) {
+        return "";
@@ -477 +433 @@ int32_t lookup<AAUDIO_SHARING_MODE>(const std::string& sharingMode) {
-    return it->second;
+    return streamType.c_str() + sizeof("AUDIO_STREAM");
@@ -480,5 +436,5 @@ template <>
-int32_t lookup<AAUDIO_SHARING_MODE>(const std::string& sharingMode) {
-    auto& map = getAAudioSharingMode();
-    auto it = map.find(sharingMode);
-    if (it == map.end()) {
-        return 0;
+int32_t lookup<USAGE>(const std::string &usage)
+{
+    UsageTraits::Type value;
+    if (!TypeConverter<UsageTraits>::fromString(usage, value)) {
+        value = AUDIO_USAGE_UNKNOWN;
@@ -486 +442 @@ int32_t lookup<AAUDIO_SHARING_MODE>(const std::string& sharingMode) {
-    return it->second;
+    return (int32_t)value;
@@ -489,5 +445,5 @@ template <>
-int32_t lookup<AAUDIO_SHARING_MODE>(const std::string& sharingMode) {
-    auto& map = getAAudioSharingMode();
-    auto it = map.find(sharingMode);
-    if (it == map.end()) {
-        return 0;
+std::string lookup<USAGE>(const std::string &usage)
+{
+    UsageTraits::Type value;
+    if (!TypeConverter<UsageTraits>::fromString(usage, value)) {
+        return "";
@@ -495 +451 @@ int32_t lookup<AAUDIO_SHARING_MODE>(const std::string& sharingMode) {
-    return it->second;
+    return usage.c_str() + sizeof("AUDIO_USAGE");
@@ -498,7 +454,3 @@ template <>
-int32_t lookup<AAUDIO_SHARING_MODE>(const std::string& sharingMode) {
-    auto& map = getAAudioSharingMode();
-    auto it = map.find(sharingMode);
-    if (it == map.end()) {
-        return 0;
-    }
-    return it->second;
+int64_t lookup<INPUT_DEVICE>(const std::string &inputDevice)
+{
+    return flagsFromMap(inputDevice, getAudioDeviceInMap());
@@ -507,7 +459,3 @@ template <>
-int32_t lookup<AAUDIO_SHARING_MODE>(const std::string& sharingMode) {
-    auto& map = getAAudioSharingMode();
-    auto it = map.find(sharingMode);
-    if (it == map.end()) {
-        return 0;
-    }
-    return it->second;
+std::string lookup<INPUT_DEVICE>(const std::string &inputDevice)
+{
+    return stringFromFlags<InputDeviceTraits>(inputDevice, sizeof("AUDIO_DEVICE_IN"));
@@ -516,5 +464,3 @@ template <>
-int32_t lookup<AAUDIO_SHARING_MODE>(const std::string& sharingMode) {
-    auto& map = getAAudioSharingMode();
-    auto it = map.find(sharingMode);
-    if (it == map.end()) {
-        return 0;
+int64_t lookup<OUTPUT_DEVICE>(const std::string &outputDevice)
+{
+    return flagsFromMap(outputDevice, getAudioDeviceOutMap());
@@ -522 +468,4 @@ int32_t lookup<AAUDIO_SHARING_MODE>(const std::string& sharingMode) {
-    return it->second;
+template <>
+std::string lookup<OUTPUT_DEVICE>(const std::string &outputDevice)
+{
+    return stringFromFlags<OutputDeviceTraits>(outputDevice, sizeof("AUDIO_DEVICE_OUT"));
@@ -525,3 +474,4 @@ template <>
-int32_t lookup<AAUDIO_SHARING_MODE>(const std::string& sharingMode) {
-    auto& map = getAAudioSharingMode();
-    auto it = map.find(sharingMode);
+int32_t lookup<AUDIO_DEVICE_INFO_TYPE>(const std::string& audioDeviceInfoType)
+{
+    auto& map = getAudioDeviceInfoTypeMap();
+    auto it = map.find(audioDeviceInfoType);
@@ -534,3 +484,4 @@ template <>
-int32_t lookup<AAUDIO_SHARING_MODE>(const std::string& sharingMode) {
-    auto& map = getAAudioSharingMode();
-    auto it = map.find(sharingMode);
+int32_t lookup<CALLER_NAME>(const std::string &callerName)
+{
+    auto& map = getAudioCallerNameMap();
+    auto it = map.find(callerName);
@@ -543,3 +494,4 @@ template <>
-int32_t lookup<AAUDIO_SHARING_MODE>(const std::string& sharingMode) {
-    auto& map = getAAudioSharingMode();
-    auto it = map.find(sharingMode);
+std::string lookup<CALLER_NAME>(const std::string &callerName)
+{
+    auto& map = getAudioCallerNameMap();
+    auto it = map.find(callerName);
@@ -547 +499 @@ int32_t lookup<AAUDIO_SHARING_MODE>(const std::string& sharingMode) {
-        return 0;
+        return "";
@@ -549 +501 @@ int32_t lookup<AAUDIO_SHARING_MODE>(const std::string& sharingMode) {
-    return it->second;
+    return callerName;
@@ -552,3 +504,4 @@ template <>
-int32_t lookup<AAUDIO_SHARING_MODE>(const std::string& sharingMode) {
-    auto& map = getAAudioSharingMode();
-    auto it = map.find(sharingMode);
+int32_t lookup<HEAD_TRACKING_MODE>(const std::string& headTrackingMode)
+{
+    auto& map = getHeadTrackingModeMap();
+    auto it = map.find(headTrackingMode);
@@ -561,3 +514,4 @@ template <>
-int32_t lookup<AAUDIO_SHARING_MODE>(const std::string& sharingMode) {
-    auto& map = getAAudioSharingMode();
-    auto it = map.find(sharingMode);
+int32_t lookup<SPATIALIZER_LEVEL>(const std::string& spatializerLevel)
+{
+    auto& map = getSpatializerLevelMap();
+    auto it = map.find(spatializerLevel);
@@ -570,3 +524,4 @@ template <>
-int32_t lookup<AAUDIO_SHARING_MODE>(const std::string& sharingMode) {
-    auto& map = getAAudioSharingMode();
-    auto it = map.find(sharingMode);
+int32_t lookup<SPATIALIZER_MODE>(const std::string& spatializerMode)
+{
+    auto& map = getSpatializerModeMap();
+    auto it = map.find(spatializerMode);
@@ -579,3 +534,4 @@ template <>
-int32_t lookup<AAUDIO_SHARING_MODE>(const std::string& sharingMode) {
-    auto& map = getAAudioSharingMode();
-    auto it = map.find(sharingMode);
+int32_t lookup<STATUS>(const std::string &status)
+{
+    auto& map = getStatusMap();
+    auto it = map.find(status);
@@ -583 +539 @@ int32_t lookup<AAUDIO_SHARING_MODE>(const std::string& sharingMode) {
-        return 0;
+        return util::MEDIAMETRICS_AUDIO_TRACK_STATUS_REPORTED__STATUS__ERROR_UNKNOWN;
@@ -588,3 +544,4 @@ template <>
-int32_t lookup<AAUDIO_SHARING_MODE>(const std::string& sharingMode) {
-    auto& map = getAAudioSharingMode();
-    auto it = map.find(sharingMode);
+int32_t lookup<THREAD_TYPE>(const std::string &threadType)
+{
+    auto& map = getAudioThreadTypeMap();
+    auto it = map.find(threadType);
@@ -592 +549 @@ int32_t lookup<AAUDIO_SHARING_MODE>(const std::string& sharingMode) {
-        return 0;
+        return -1;
@@ -597,3 +554,4 @@ template <>
-int32_t lookup<AAUDIO_SHARING_MODE>(const std::string& sharingMode) {
-    auto& map = getAAudioSharingMode();
-    auto it = map.find(sharingMode);
+std::string lookup<THREAD_TYPE>(const std::string &threadType)
+{
+    auto& map = getAudioThreadTypeMap();
+    auto it = map.find(threadType);
@@ -601 +559 @@ int32_t lookup<AAUDIO_SHARING_MODE>(const std::string& sharingMode) {
-        return 0;
+        return "";
@@ -603 +561 @@ int32_t lookup<AAUDIO_SHARING_MODE>(const std::string& sharingMode) {
-    return it->second;
+    return threadType;
@@ -605 +563,2 @@ int32_t lookup<AAUDIO_SHARING_MODE>(const std::string& sharingMode) {
-bool isInputThreadType(const std::string& threadType) {
+bool isInputThreadType(const std::string &threadType)
+{
@@ -609,7 +568,3 @@ template <>
-int32_t lookup<AAUDIO_SHARING_MODE>(const std::string& sharingMode) {
-    auto& map = getAAudioSharingMode();
-    auto it = map.find(sharingMode);
-    if (it == map.end()) {
-        return 0;
-    }
-    return it->second;
+std::string lookup<TRACK_TRAITS>(const std::string &traits)
+{
+    return validateStringFromMap(traits, getAudioTrackTraitsMap());
@@ -618,7 +573,3 @@ template <>
-int32_t lookup<AAUDIO_SHARING_MODE>(const std::string& sharingMode) {
-    auto& map = getAAudioSharingMode();
-    auto it = map.find(sharingMode);
-    if (it == map.end()) {
-        return 0;
-    }
-    return it->second;
+int32_t lookup<TRACK_TRAITS>(const std::string &traits)
+{
+    return flagsFromMap(traits, getAudioTrackTraitsMap());
@@ -627,3 +578,4 @@ template <>
-int32_t lookup<AAUDIO_SHARING_MODE>(const std::string& sharingMode) {
-    auto& map = getAAudioSharingMode();
-    auto it = map.find(sharingMode);
+std::string lookup<AAUDIO_DIRECTION>(const std::string &direction)
+{
+    auto& map = getAAudioDirection();
+    auto it = map.find(direction);
@@ -631 +583 @@ int32_t lookup<AAUDIO_SHARING_MODE>(const std::string& sharingMode) {
-        return 0;
+        return "";
@@ -633 +585 @@ int32_t lookup<AAUDIO_SHARING_MODE>(const std::string& sharingMode) {
-    return it->second;
+    return direction;
@@ -636,3 +588,4 @@ template <>
-int32_t lookup<AAUDIO_SHARING_MODE>(const std::string& sharingMode) {
-    auto& map = getAAudioSharingMode();
-    auto it = map.find(sharingMode);
+int32_t lookup<AAUDIO_DIRECTION>(const std::string &direction)
+{
+    auto& map = getAAudioDirection();
+    auto it = map.find(direction);
@@ -645,3 +598,4 @@ template <>
-int32_t lookup<AAUDIO_SHARING_MODE>(const std::string& sharingMode) {
-    auto& map = getAAudioSharingMode();
-    auto it = map.find(sharingMode);
+std::string lookup<AAUDIO_PERFORMANCE_MODE>(const std::string &performanceMode)
+{
+    auto& map = getAAudioPerformanceMode();
+    auto it = map.find(performanceMode);
@@ -649 +603 @@ int32_t lookup<AAUDIO_SHARING_MODE>(const std::string& sharingMode) {
-        return 0;
+        return "";
@@ -651 +605 @@ int32_t lookup<AAUDIO_SHARING_MODE>(const std::string& sharingMode) {
-    return it->second;
+    return performanceMode;
@@ -654,3 +608,4 @@ template <>
-int32_t lookup<AAUDIO_SHARING_MODE>(const std::string& sharingMode) {
-    auto& map = getAAudioSharingMode();
-    auto it = map.find(sharingMode);
+int32_t lookup<AAUDIO_PERFORMANCE_MODE>(const std::string &performanceMode)
+{
+    auto& map = getAAudioPerformanceMode();
+    auto it = map.find(performanceMode);
@@ -663 +618,2 @@ template <>
-int32_t lookup<AAUDIO_SHARING_MODE>(const std::string& sharingMode) {
+std::string lookup<AAUDIO_SHARING_MODE>(const std::string &sharingMode)
+{
@@ -667 +623 @@ int32_t lookup<AAUDIO_SHARING_MODE>(const std::string& sharingMode) {
-        return 0;
+        return "";
@@ -669 +625 @@ int32_t lookup<AAUDIO_SHARING_MODE>(const std::string& sharingMode) {
-    return it->second;
+    return sharingMode;
@@ -672 +628,2 @@ template <>
-int32_t lookup<AAUDIO_SHARING_MODE>(const std::string& sharingMode) {
+int32_t lookup<AAUDIO_SHARING_MODE>(const std::string &sharingMode)
+{
