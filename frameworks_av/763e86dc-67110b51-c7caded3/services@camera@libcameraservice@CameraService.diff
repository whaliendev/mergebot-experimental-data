diff --git a/home/whalien/codebase/cpp/mergebot/eva/output/frameworks_av/763e86dc-67110b51-c7caded3/services@camera@libcameraservice@CameraService.no_comments_mergebot.h b/home/whalien/codebase/cpp/mergebot/eva/output/frameworks_av/763e86dc-67110b51-c7caded3/services@camera@libcameraservice@CameraService.no_comments_merged.h
index 20a2486..a03d129 100644
--- a/home/whalien/codebase/cpp/mergebot/eva/output/frameworks_av/763e86dc-67110b51-c7caded3/services@camera@libcameraservice@CameraService.no_comments_mergebot.h
+++ b/home/whalien/codebase/cpp/mergebot/eva/output/frameworks_av/763e86dc-67110b51-c7caded3/services@camera@libcameraservice@CameraService.no_comments_merged.h
@@ -35 +35 @@ namespace android {
-volatile int32_t gLogLevel = 0;
+extern volatile int32_t gLogLevel;
@@ -38 +38,2 @@ class MediaPlayer;
-class CameraService : public BinderService<CameraService>,
+class CameraService :
+    public BinderService<CameraService>,
@@ -41 +42,2 @@ class CameraService : public BinderService<CameraService>,
-                      public virtual CameraProviderManager::StatusListener {
+    public virtual CameraProviderManager::StatusListener
+{
@@ -46,93 +48,2 @@ class CameraService : public BinderService<CameraService>,
-  class Client : public hardware::BnCamera, public BasicClient {
-   public:
-    typedef hardware::ICameraClient TCamCallbacks;
-    virtual binder::Status disconnect();
-    virtual status_t connect(const sp<hardware::ICameraClient>& client) = 0;
-    virtual status_t lock() = 0;
-    virtual status_t unlock() = 0;
-    virtual status_t setPreviewTarget(
-        const sp<IGraphicBufferProducer>& bufferProducer) = 0;
-    virtual void setPreviewCallbackFlag(int flag) = 0;
-    virtual status_t setPreviewCallbackTarget(
-        const sp<IGraphicBufferProducer>& callbackProducer) = 0;
-    virtual status_t startPreview() = 0;
-    virtual void stopPreview() = 0;
-    virtual bool previewEnabled() = 0;
-    virtual status_t setVideoBufferMode(int32_t videoBufferMode) = 0;
-    virtual status_t startRecording() = 0;
-    virtual void stopRecording() = 0;
-    virtual bool recordingEnabled() = 0;
-    virtual void releaseRecordingFrame(const sp<IMemory>& mem) = 0;
-    virtual status_t autoFocus() = 0;
-    virtual status_t cancelAutoFocus() = 0;
-    virtual status_t takePicture(int msgType) = 0;
-    virtual status_t setParameters(const String8& params) = 0;
-    virtual String8 getParameters() const = 0;
-    virtual status_t sendCommand(int32_t cmd, int32_t arg1, int32_t arg2) = 0;
-    virtual status_t setVideoTarget(
-        const sp<IGraphicBufferProducer>& bufferProducer) = 0;
-    Client(const sp<CameraService>& cameraService,
-           const sp<hardware::ICameraClient>& cameraClient,
-           const String16& clientPackageName, const String8& cameraIdStr,
-           int api1CameraId, int cameraFacing, int clientPid, uid_t clientUid,
-           int servicePid);
-    ~Client();
-    const sp<hardware::ICameraClient>& getRemoteCallback() {
-      return mRemoteCallback;
-    }
-    virtual sp<IBinder> asBinderWrapper() { return asBinder(this); }
-    virtual void notifyError(int32_t errorCode,
-                             const CaptureResultExtras& resultExtras);
-    virtual bool canCastToApiClient(apiLevel level) const;
-   protected:
-    sp<hardware::ICameraClient> mRemoteCallback;
-    int mCameraId;
-  };
-  class BasicClient : public virtual RefBase {
-   public:
-    virtual status_t initialize(sp<CameraProviderManager> manager,
-                                const String8& monitorTags) = 0;
-    virtual binder::Status disconnect();
-    virtual sp<IBinder> asBinderWrapper() = 0;
-    sp<IBinder> getRemote() { return mRemoteBinder; }
-    virtual status_t dump(int fd, const Vector<String16>& args);
-    virtual status_t dumpClient(int fd, const Vector<String16>& args) = 0;
-    virtual String16 getPackageName() const;
-    virtual void notifyError(int32_t errorCode,
-                             const CaptureResultExtras& resultExtras) = 0;
-    virtual uid_t getClientUid() const;
-    virtual int getClientPid() const;
-    virtual bool canCastToApiClient(apiLevel level) const;
-    virtual void block();
-   protected:
-    BasicClient(const sp<CameraService>& cameraService,
-                const sp<IBinder>& remoteCallback,
-                const String16& clientPackageName, const String8& cameraIdStr,
-                int cameraFacing, int clientPid, uid_t clientUid,
-                int servicePid);
-    virtual ~BasicClient();
-    bool mDestructionStarted;
-    static sp<CameraService> sCameraService;
-    const String8 mCameraIdStr;
-    const int mCameraFacing;
-    String16 mClientPackageName;
-    pid_t mClientPid;
-    const uid_t mClientUid;
-    const pid_t mServicePid;
-    bool mDisconnected;
-    sp<IBinder> mRemoteBinder;
-    status_t startCameraOps();
-    status_t finishCameraOps();
-   private:
-    std::unique_ptr<AppOpsManager> mAppOpsManager = nullptr;
-    class OpsCallback : public BnAppOpsCallback {
-     public:
-      explicit OpsCallback(wp<BasicClient> client);
-      virtual void opChanged(int32_t op, const String16& packageName);
-     private:
-      wp<BasicClient> mClient;
-    };
-    sp<OpsCallback> mOpsCallback;
-    bool mOpsActive;
-    virtual void opChanged(int32_t op, const String16& packageName);
-  };
+    class Client;
+    class BasicClient;
@@ -140 +51,4 @@ class CameraService : public BinderService<CameraService>,
-  enum apiLevel { API_1 = 1, API_2 = 2 };
+    enum apiLevel {
+        API_1 = 1,
+        API_2 = 2
+    };
@@ -148,2 +62 @@ class CameraService : public BinderService<CameraService>,
-  virtual void onDeviceStatusChanged(
-      const String8& cameraId,
+    virtual void onDeviceStatusChanged(const String8 &cameraId,
@@ -151,2 +64,2 @@ class CameraService : public BinderService<CameraService>,
-  virtual void onDeviceStatusChanged(
-      const String8& cameraId, const String8& physicalCameraId,
+    virtual void onDeviceStatusChanged(const String8 &cameraId,
+            const String8 &physicalCameraId,
@@ -154,2 +67 @@ class CameraService : public BinderService<CameraService>,
-  virtual void onTorchStatusChanged(
-      const String8& cameraId,
+    virtual void onTorchStatusChanged(const String8& cameraId,
@@ -167,3 +79,3 @@ class CameraService : public BinderService<CameraService>,
-  virtual binder::Status connect(
-      const sp<hardware::ICameraClient>& cameraClient, int32_t cameraId,
-      const String16& clientPackageName, int32_t clientUid, int clientPid,
+    virtual binder::Status connect(const sp<hardware::ICameraClient>& cameraClient,
+            int32_t cameraId, const String16& clientPackageName,
+            int32_t clientUid, int clientPid,
@@ -171,3 +83,3 @@ class CameraService : public BinderService<CameraService>,
-  virtual binder::Status connectLegacy(
-      const sp<hardware::ICameraClient>& cameraClient, int32_t cameraId,
-      int32_t halVersion, const String16& clientPackageName, int32_t clientUid,
+    virtual binder::Status connectLegacy(const sp<hardware::ICameraClient>& cameraClient,
+            int32_t cameraId, int32_t halVersion,
+            const String16& clientPackageName, int32_t clientUid,
@@ -176,3 +88,3 @@ class CameraService : public BinderService<CameraService>,
-      const sp<hardware::camera2::ICameraDeviceCallbacks>& cameraCb,
-      const String16& cameraId, const String16& clientPackageName,
-      const std::unique_ptr<String16>& clientFeatureId, int32_t clientUid,
+            const sp<hardware::camera2::ICameraDeviceCallbacks>& cameraCb, const String16& cameraId,
+            const String16& clientPackageName, const std::unique_ptr<String16>& clientFeatureId,
+            int32_t clientUid,
@@ -180,2 +92 @@ class CameraService : public BinderService<CameraService>,
-  virtual binder::Status addListener(
-      const sp<hardware::ICameraServiceListener>& listener,
+    virtual binder::Status addListener(const sp<hardware::ICameraServiceListener>& listener,
@@ -186,2 +97 @@ class CameraService : public BinderService<CameraService>,
-      std::vector<hardware::camera2::utils::ConcurrentCameraIdCombination>*
-          concurrentCameraIds);
+        std::vector<hardware::camera2::utils::ConcurrentCameraIdCombination>* concurrentCameraIds);
@@ -189,2 +99 @@ class CameraService : public BinderService<CameraService>,
-      const std::vector<
-          hardware::camera2::utils::CameraIdAndSessionConfiguration>& sessions,
+        const std::vector<hardware::camera2::utils::CameraIdAndSessionConfiguration>& sessions,
@@ -192 +101,2 @@ class CameraService : public BinderService<CameraService>,
-  virtual binder::Status getLegacyParameters(int32_t cameraId,
+    virtual binder::Status getLegacyParameters(
+            int32_t cameraId,
@@ -199,2 +109,2 @@ class CameraService : public BinderService<CameraService>,
-  virtual binder::Status supportsCameraApi(const String16& cameraId,
-                                           int32_t apiVersion,
+    virtual binder::Status supportsCameraApi(
+            const String16& cameraId, int32_t apiVersion,
@@ -202 +112,2 @@ class CameraService : public BinderService<CameraService>,
-  virtual binder::Status isHiddenPhysicalCamera(const String16& cameraId,
+    virtual binder::Status isHiddenPhysicalCamera(
+            const String16& cameraId,
@@ -204,2 +115,2 @@ class CameraService : public BinderService<CameraService>,
-  virtual status_t onTransact(uint32_t code, const Parcel& data, Parcel* reply,
-                              uint32_t flags);
+    virtual status_t onTransact(uint32_t code, const Parcel& data,
+                                   Parcel* reply, uint32_t flags);
@@ -207,6 +118,3 @@ class CameraService : public BinderService<CameraService>,
-  virtual status_t shellCommand(int in, int out, int err,
-                                const Vector<String16>& args);
-  binder::Status addListenerHelper(
-      const sp<hardware::ICameraServiceListener>& listener,
-      std::vector<hardware::CameraStatus>* cameraStatuses,
-      bool isVendor = false);
+    virtual status_t shellCommand(int in, int out, int err, const Vector<String16>& args);
+    binder::Status addListenerHelper(const sp<hardware::ICameraServiceListener>& listener,
+            std::vector<hardware::CameraStatus>* cameraStatuses, bool isVendor = false);
@@ -225,2 +133,5 @@ class CameraService : public BinderService<CameraService>,
-  static void updateProxyDeviceState(int newState, const String8& cameraId,
-                                     int facing, const String16& clientName,
+    static void updateProxyDeviceState(
+            int newState,
+            const String8& cameraId,
+            int facing,
+            const String16& clientName,
@@ -236 +147,3 @@ class CameraService : public BinderService<CameraService>,
-    sp<IBinder> getRemote() { return mRemoteBinder; }
+        sp<IBinder> getRemote() {
+            return mRemoteBinder;
+        }
@@ -245,0 +159,5 @@ class CameraService : public BinderService<CameraService>,
+        virtual status_t setAudioRestriction(int32_t mode);
+        virtual int32_t getServiceAudioRestriction() const;
+        virtual int32_t getAudioRestriction() const;
+        static bool isValidAudioRestriction(int32_t mode);
+        virtual status_t setRotateAndCropOverride(uint8_t rotateAndCrop) = 0;
@@ -249,2 +167,6 @@ class CameraService : public BinderService<CameraService>,
-                const String16& clientPackageName, const String8& cameraIdStr,
-                int cameraFacing, int clientPid, uid_t clientUid,
+                const String16& clientPackageName,
+                const std::unique_ptr<String16>& clientFeatureId,
+                const String8& cameraIdStr,
+                int cameraFacing,
+                int clientPid,
+                uid_t clientUid,
@@ -257,0 +180 @@ class CameraService : public BinderService<CameraService>,
+        std::unique_ptr<String16> mClientFeatureId;
@@ -261,0 +185,2 @@ class CameraService : public BinderService<CameraService>,
+        mutable Mutex mAudioRestrictionLock;
+        int32_t mAudioRestriction;
@@ -263,3 +188,2 @@ class CameraService : public BinderService<CameraService>,
-    status_t startCameraOps();
-    status_t finishCameraOps();
-   private:
+        virtual status_t startCameraOps();
+        virtual status_t finishCameraOps();
@@ -278 +202,2 @@ class CameraService : public BinderService<CameraService>,
-  class Client : public hardware::BnCamera, public BasicClient {
+    class Client : public hardware::BnCamera, public BasicClient
+    {
@@ -285,2 +210 @@ class CameraService : public BinderService<CameraService>,
-    virtual status_t setPreviewTarget(
-        const sp<IGraphicBufferProducer>& bufferProducer) = 0;
+        virtual status_t setPreviewTarget(const sp<IGraphicBufferProducer>& bufferProducer)=0;
@@ -304,2 +228 @@ class CameraService : public BinderService<CameraService>,
-    virtual status_t setVideoTarget(
-        const sp<IGraphicBufferProducer>& bufferProducer) = 0;
+        virtual status_t setVideoTarget(const sp<IGraphicBufferProducer>& bufferProducer) = 0;
@@ -308,2 +231,7 @@ class CameraService : public BinderService<CameraService>,
-           const String16& clientPackageName, const String8& cameraIdStr,
-           int api1CameraId, int cameraFacing, int clientPid, uid_t clientUid,
+                const String16& clientPackageName,
+                const std::unique_ptr<String16>& clientFeatureId,
+                const String8& cameraIdStr,
+                int api1CameraId,
+                int cameraFacing,
+                int clientPid,
+                uid_t clientUid,
@@ -315 +243,3 @@ class CameraService : public BinderService<CameraService>,
-    virtual sp<IBinder> asBinderWrapper() { return asBinder(this); }
+        virtual sp<IBinder> asBinderWrapper() {
+            return asBinder(this);
+        }
@@ -325,4 +255,4 @@ class CameraService : public BinderService<CameraService>,
-    void onClientAdded(const resource_policy::ClientDescriptor<
-                       String8, sp<CameraService::BasicClient>>& descriptor);
-    void onClientRemoved(const resource_policy::ClientDescriptor<
-                         String8, sp<CameraService::BasicClient>>& descriptor);
+        void onClientAdded(const resource_policy::ClientDescriptor<String8,
+                sp<CameraService::BasicClient>>& descriptor);
+        void onClientRemoved(const resource_policy::ClientDescriptor<String8,
+                sp<CameraService::BasicClient>>& descriptor);
@@ -330,6 +260,4 @@ class CameraService : public BinderService<CameraService>,
-  typedef std::shared_ptr<resource_policy::ClientDescriptor<
-      String8, sp<CameraService::BasicClient>>>
-      DescriptorPtr;
-  class CameraClientManager
-      : public resource_policy::ClientManager<
-            String8, sp<CameraService::BasicClient>, ClientEventListener> {
+    typedef std::shared_ptr<resource_policy::ClientDescriptor<String8,
+            sp<CameraService::BasicClient>>> DescriptorPtr;
+    class CameraClientManager : public resource_policy::ClientManager<String8,
+            sp<CameraService::BasicClient>, ClientEventListener> {
@@ -341,3 +269,2 @@ class CameraService : public BinderService<CameraService>,
-    static DescriptorPtr makeClientDescriptor(
-        const String8& key, const sp<BasicClient>& value, int32_t cost,
-        const std::set<String8>& conflictingKeys, int32_t score,
+        static DescriptorPtr makeClientDescriptor(const String8& key, const sp<BasicClient>& value,
+                int32_t cost, const std::set<String8>& conflictingKeys, int32_t score,
@@ -345,2 +272 @@ class CameraService : public BinderService<CameraService>,
-    static DescriptorPtr makeClientDescriptor(
-        const sp<BasicClient>& value,
+        static DescriptorPtr makeClientDescriptor(const sp<BasicClient>& value,
@@ -357,4 +283,2 @@ class CameraService : public BinderService<CameraService>,
-    NOT_AVAILABLE = static_cast<int32_t>(
-        hardware::ICameraServiceListener::STATUS_NOT_AVAILABLE),
-    UNKNOWN =
-        static_cast<int32_t>(hardware::ICameraServiceListener::STATUS_UNKNOWN)
+        NOT_AVAILABLE = static_cast<int32_t>(hardware::ICameraServiceListener::STATUS_NOT_AVAILABLE),
+        UNKNOWN = static_cast<int32_t>(hardware::ICameraServiceListener::STATUS_UNKNOWN)
@@ -364,2 +288 @@ class CameraService : public BinderService<CameraService>,
-    CameraState(const String8& id, int cost,
-                const std::set<String8>& conflicting,
+        CameraState(const String8& id, int cost, const std::set<String8>& conflicting,
@@ -370 +293,2 @@ class CameraService : public BinderService<CameraService>,
-    void updateStatus(StatusInternal status, const String8& cameraId,
+        void updateStatus(StatusInternal status,
+                const String8& cameraId,
@@ -392,2 +316 @@ class CameraService : public BinderService<CameraService>,
-  class UidPolicy : public BnUidObserver,
-                    public virtual IBinder::DeathRecipient {
+    class UidPolicy : public BnUidObserver, public virtual IBinder::DeathRecipient {
@@ -414,2 +337 @@ class CameraService : public BinderService<CameraService>,
-    void updateOverrideUid(uid_t uid, String16 callingPackage, bool active,
-                           bool insert);
+        void updateOverrideUid(uid_t uid, String16 callingPackage, bool active, bool insert);
@@ -447,12 +369,6 @@ class CameraService : public BinderService<CameraService>,
-  binder::Status validateConnectLocked(const String8& cameraId,
-                                       const String8& clientName8,
-                                                 int& clientUid,
-                                                 int& clientPid,
-                                               int& originalClientPid) const;
-  binder::Status validateClientPermissionsLocked(
-      const String8& cameraId, const String8& clientName8,
-                int& clientUid, int& clientPid,
-              int& originalClientPid) const;
-  status_t handleEvictionsLocked(
-      const String8& cameraId, int clientPid, apiLevel effectiveApiLevel,
-      const sp<IBinder>& remoteCallback, const String8& packageName,
+    binder::Status validateConnectLocked(const String8& cameraId, const String8& clientName8,
+                     int& clientUid, int& clientPid, int& originalClientPid) const;
+    binder::Status validateClientPermissionsLocked(const String8& cameraId, const String8& clientName8,
+                     int& clientUid, int& clientPid, int& originalClientPid) const;
+    status_t handleEvictionsLocked(const String8& cameraId, int clientPid,
+        apiLevel effectiveApiLevel, const sp<IBinder>& remoteCallback, const String8& packageName,
@@ -460,3 +376 @@ class CameraService : public BinderService<CameraService>,
-      std::shared_ptr<
-          resource_policy::ClientDescriptor<String8, sp<BasicClient>>>*
-          partial);
+        std::shared_ptr<resource_policy::ClientDescriptor<String8, sp<BasicClient>>>* partial);
@@ -464,7 +378,9 @@ class CameraService : public BinderService<CameraService>,
-  static bool shouldSkipStatusUpdates(SystemCameraKind systemCameraKind,
-                                      bool isVendorListener, int clientPid,
-                                      int clientUid);
-  status_t getSystemCameraKind(const String8& cameraId,
-                               SystemCameraKind* kind) const;
-  void filterAPI1SystemCameraLocked(
-      const std::vector<std::string>& normalDeviceIds);
+    static bool shouldSkipStatusUpdates(SystemCameraKind systemCameraKind, bool isVendorListener,
+            int clientPid, int clientUid);
+    status_t getSystemCameraKind(const String8& cameraId, SystemCameraKind *kind) const;
+    void filterAPI1SystemCameraLocked(const std::vector<std::string> &normalDeviceIds);
+    template<class CALLBACK, class CLIENT>
+    binder::Status connectHelper(const sp<CALLBACK>& cameraCb, const String8& cameraId,
+            int api1CameraId, int halVersion, const String16& clientPackageName,
+            const std::unique_ptr<String16>& clientFeatureId, int clientUid, int clientPid,
+            apiLevel effectiveApiLevel, bool shimUpdateOnly, sp<CLIENT>& device);
@@ -481,2 +397 @@ class CameraService : public BinderService<CameraService>,
-  std::shared_ptr<CameraService::CameraState> getCameraState(
-      const String8& cameraId) const;
+    std::shared_ptr<CameraService::CameraState> getCameraState(const String8& cameraId) const;
@@ -485,2 +400 @@ class CameraService : public BinderService<CameraService>,
-  void finishConnectLocked(const sp<BasicClient>& client,
-                           const DescriptorPtr& desc);
+    void finishConnectLocked(const sp<BasicClient>& client, const DescriptorPtr& desc);
@@ -492,4 +406,2 @@ class CameraService : public BinderService<CameraService>,
-  void logDisconnected(const char* cameraId, int clientPid,
-                       const char* clientPackage);
-  void logDisconnectedOffline(const char* cameraId, int clientPid,
-                              const char* clientPackage);
+    void logDisconnected(const char* cameraId, int clientPid, const char* clientPackage);
+    void logDisconnectedOffline(const char* cameraId, int clientPid, const char* clientPackage);
@@ -498,6 +410,4 @@ class CameraService : public BinderService<CameraService>,
-  void logConnected(const char* cameraId, int clientPid,
-                    const char* clientPackage);
-  void logRejected(const char* cameraId, int clientPid,
-                   const char* clientPackage, const char* reason);
-  void logTorchEvent(const char* cameraId, const char* torchState,
-                     int clientPid);
+    void logConnected(const char* cameraId, int clientPid, const char* clientPackage);
+    void logRejected(const char* cameraId, int clientPid, const char* clientPackage,
+            const char* reason);
+    void logTorchEvent(const char* cameraId, const char *torchState, int clientPid);
@@ -524,9 +434,3 @@ class CameraService : public BinderService<CameraService>,
-    ServiceListener(sp<CameraService> parent,
-                    sp<hardware::ICameraServiceListener> listener,
-<<<<<<< HEAD
-                    int uid, int pid, bool isVendorClient,
-                    bool openCloseCallbackAllowed)
-        : mParent(parent),
-          mListener(listener),
-          mListenerUid(uid),
-          mListenerPid(pid),
+            ServiceListener(sp<CameraService> parent, sp<hardware::ICameraServiceListener> listener,
+                    int uid, int pid, bool isVendorClient, bool openCloseCallbackAllowed)
+                    : mParent(parent), mListener(listener), mListenerUid(uid), mListenerPid(pid),
@@ -535,11 +438,0 @@ class CameraService : public BinderService<CameraService>,
-||||||| c7caded36e
-                    int uid)
-        : mParent(parent), mListener(listener), mListenerUid(uid) {}
-=======
-                    int uid, int pid, bool openCloseCallbackAllowed)
-        : mParent(parent),
-          mListener(listener),
-          mListenerUid(uid),
-          mListenerPid(pid),
-          mOpenCloseCallbackAllowed(openCloseCallbackAllowed) {}
->>>>>>> 67110b519a9c80e1bd9a7d6a45b91f1f478cee81
@@ -558 +450,0 @@ class CameraService : public BinderService<CameraService>,
-<<<<<<< HEAD
@@ -561,4 +452,0 @@ class CameraService : public BinderService<CameraService>,
-||||||| c7caded36e
-=======
-    bool isOpenCloseCallbackAllowed() { return mOpenCloseCallbackAllowed; }
->>>>>>> 67110b519a9c80e1bd9a7d6a45b91f1f478cee81
@@ -568 +455,0 @@ class CameraService : public BinderService<CameraService>,
-<<<<<<< HEAD
@@ -573,7 +459,0 @@ class CameraService : public BinderService<CameraService>,
-||||||| c7caded36e
-    int mListenerUid;
-=======
-    int mListenerUid;
-    int mListenerPid;
-    bool mOpenCloseCallbackAllowed = false;
->>>>>>> 67110b519a9c80e1bd9a7d6a45b91f1f478cee81
@@ -583,5 +463,7 @@ class CameraService : public BinderService<CameraService>,
-  void updateStatus(StatusInternal status, const String8& cameraId,
-                    std::initializer_list<StatusInternal> rejectedSourceStates);
-  void updateStatus(StatusInternal status, const String8& cameraId);
-  void updateOpenCloseStatus(const String8& cameraId, bool open,
-                             const String16& packageName);
+    void updateStatus(StatusInternal status,
+            const String8& cameraId,
+            std::initializer_list<StatusInternal>
+                rejectedSourceStates);
+    void updateStatus(StatusInternal status,
+            const String8& cameraId);
+    void updateOpenCloseStatus(const String8& cameraId, bool open, const String16& packageName);
@@ -597,2 +479 @@ class CameraService : public BinderService<CameraService>,
-  void onTorchStatusChangedLocked(
-      const String8& cameraId,
+    void onTorchStatusChangedLocked(const String8& cameraId,
@@ -600,2 +481 @@ class CameraService : public BinderService<CameraService>,
-  status_t getTorchStatusLocked(
-      const String8& cameraId,
+    status_t getTorchStatusLocked(const String8 &cameraId,
@@ -603,2 +483 @@ class CameraService : public BinderService<CameraService>,
-  status_t setTorchStatusLocked(
-      const String8& cameraId,
+    status_t setTorchStatusLocked(const String8 &cameraId,
@@ -606,2 +485 @@ class CameraService : public BinderService<CameraService>,
-  void notifyPhysicalCameraStatusLocked(int32_t status,
-                                        const String8& cameraId);
+    void notifyPhysicalCameraStatusLocked(int32_t status, const String8& cameraId);
@@ -610,2 +488 @@ class CameraService : public BinderService<CameraService>,
-  binder::Status getLegacyParametersLazy(int cameraId,
-                                                 CameraParameters* parameters);
+    binder::Status getLegacyParametersLazy(int cameraId, CameraParameters* parameters);
@@ -621,6 +498,5 @@ class CameraService : public BinderService<CameraService>,
-  static binder::Status makeClient(
-      const sp<CameraService>& cameraService, const sp<IInterface>& cameraCb,
-      const String16& packageName, const std::unique_ptr<String16>& featureId,
-      const String8& cameraId, int api1CameraId, int facing, int clientPid,
-      uid_t clientUid, int servicePid, int halVersion, int deviceVersion,
-      apiLevel effectiveApiLevel,
+    static binder::Status makeClient(const sp<CameraService>& cameraService,
+            const sp<IInterface>& cameraCb, const String16& packageName,
+            const std::unique_ptr<String16>& featureId, const String8& cameraId, int api1CameraId,
+            int facing, int clientPid, uid_t clientUid, int servicePid, int halVersion,
+            int deviceVersion, apiLevel effectiveApiLevel,
@@ -630,4 +506,2 @@ class CameraService : public BinderService<CameraService>,
-  static int32_t mapToInterface(
-      hardware::camera::common::V1_0::TorchModeStatus status);
-  static StatusInternal mapToInternal(
-      hardware::camera::common::V1_0::CameraDeviceStatus status);
+    static int32_t mapToInterface(hardware::camera::common::V1_0::TorchModeStatus status);
+    static StatusInternal mapToInternal(hardware::camera::common::V1_0::CameraDeviceStatus status);
@@ -639,2 +513 @@ class CameraService : public BinderService<CameraService>,
-  void broadcastTorchModeStatus(
-      const String8& cameraId,
+    void broadcastTorchModeStatus(const String8& cameraId,
