diff --git a/home/whalien/codebase/cpp/mergebot/eva/output/frameworks_av/d2572133-decaebce-11060fbe/services@audioflinger@Threads.no_comments_mergebot.h b/home/whalien/codebase/cpp/mergebot/eva/output/frameworks_av/d2572133-decaebce-11060fbe/services@audioflinger@Threads.no_comments_merged.h
index 2903fc7..7ec3a16 100644
--- a/home/whalien/codebase/cpp/mergebot/eva/output/frameworks_av/d2572133-decaebce-11060fbe/services@audioflinger@Threads.no_comments_mergebot.h
+++ b/home/whalien/codebase/cpp/mergebot/eva/output/frameworks_av/d2572133-decaebce-11060fbe/services@audioflinger@Threads.no_comments_merged.h
@@ -5,0 +6 @@ class ThreadBase : public Thread {
+#include "TrackBase.h"
@@ -44,2 +45 @@ class ThreadBase : public Thread {
-    bool
-        mRequiresSystemReady;
+        bool mRequiresSystemReady;
@@ -48,6 +48,3 @@ class ThreadBase : public Thread {
-    explicit ConfigEvent(int type, bool requiresSystemReady = false)
-        : mType(type),
-          mStatus(NO_ERROR),
-          mWaitStatus(false),
-          mRequiresSystemReady(requiresSystemReady),
-          mData(NULL) {}
+        explicit ConfigEvent(int type, bool requiresSystemReady = false) :
+            mType(type), mStatus(NO_ERROR), mWaitStatus(false),
+            mRequiresSystemReady(requiresSystemReady), mData(NULL) {}
@@ -58,2 +55,2 @@ class ThreadBase : public Thread {
-                      audio_port_handle_t portId)
-        : mEvent(event), mPid(pid), mPortId(portId) {}
+                          audio_port_handle_t portId) :
+            mEvent(event), mPid(pid), mPortId(portId) {}
@@ -69,3 +66,2 @@ class ThreadBase : public Thread {
-    IoConfigEvent(audio_io_config_event event, pid_t pid,
-                  audio_port_handle_t portId)
-        : ConfigEvent(CFG_EVENT_IO) {
+        IoConfigEvent(audio_io_config_event event, pid_t pid, audio_port_handle_t portId) :
+            ConfigEvent(CFG_EVENT_IO) {
@@ -78,2 +74,2 @@ class ThreadBase : public Thread {
-    PrioConfigEventData(pid_t pid, pid_t tid, int32_t prio, bool forApp)
-        : mPid(pid), mTid(tid), mPrio(prio), mForApp(forApp) {}
+        PrioConfigEventData(pid_t pid, pid_t tid, int32_t prio, bool forApp) :
+            mPid(pid), mTid(tid), mPrio(prio), mForApp(forApp) {}
@@ -81,3 +77,2 @@ class ThreadBase : public Thread {
-      snprintf(buffer, size,
-               "Prio event: pid %d, tid %d, prio %d, for app? %d\n", mPid, mTid,
-               mPrio, mForApp);
+            snprintf(buffer, size, "Prio event: pid %d, tid %d, prio %d, for app? %d\n",
+                    mPid, mTid, mPrio, mForApp);
@@ -92,2 +87,2 @@ class ThreadBase : public Thread {
-    PrioConfigEvent(pid_t pid, pid_t tid, int32_t prio, bool forApp)
-        : ConfigEvent(CFG_EVENT_PRIO, true) {
+        PrioConfigEvent(pid_t pid, pid_t tid, int32_t prio, bool forApp) :
+            ConfigEvent(CFG_EVENT_PRIO, true) {
@@ -100,2 +95,2 @@ class ThreadBase : public Thread {
-    explicit SetParameterConfigEventData(String8 keyValuePairs)
-        : mKeyValuePairs(keyValuePairs) {}
+        explicit SetParameterConfigEventData(String8 keyValuePairs) :
+            mKeyValuePairs(keyValuePairs) {}
@@ -109,2 +104,2 @@ class ThreadBase : public Thread {
-    explicit SetParameterConfigEvent(String8 keyValuePairs)
-        : ConfigEvent(CFG_EVENT_SET_PARAMETER) {
+        explicit SetParameterConfigEvent(String8 keyValuePairs) :
+            ConfigEvent(CFG_EVENT_SET_PARAMETER) {
@@ -119,2 +114,2 @@ class ThreadBase : public Thread {
-                                    audio_patch_handle_t handle)
-        : mPatch(patch), mHandle(handle) {}
+                                        audio_patch_handle_t handle) :
+            mPatch(patch), mHandle(handle) {}
@@ -130,2 +125,2 @@ class ThreadBase : public Thread {
-                                audio_patch_handle_t handle)
-        : ConfigEvent(CFG_EVENT_CREATE_AUDIO_PATCH) {
+                                    audio_patch_handle_t handle) :
+            ConfigEvent(CFG_EVENT_CREATE_AUDIO_PATCH) {
@@ -139,2 +134,2 @@ class ThreadBase : public Thread {
-    explicit ReleaseAudioPatchConfigEventData(const audio_patch_handle_t handle)
-        : mHandle(handle) {}
+        explicit ReleaseAudioPatchConfigEventData(const audio_patch_handle_t handle) :
+            mHandle(handle) {}
@@ -148,2 +143,2 @@ class ThreadBase : public Thread {
-    explicit ReleaseAudioPatchConfigEvent(const audio_patch_handle_t handle)
-        : ConfigEvent(CFG_EVENT_RELEASE_AUDIO_PATCH) {
+        explicit ReleaseAudioPatchConfigEvent(const audio_patch_handle_t handle) :
+            ConfigEvent(CFG_EVENT_RELEASE_AUDIO_PATCH) {
@@ -157,3 +152,2 @@ class ThreadBase : public Thread {
-    explicit UpdateOutDevicesConfigEventData(
-        const DeviceDescriptorBaseVector& outDevices)
-        : mOutDevices(outDevices) {}
+        explicit UpdateOutDevicesConfigEventData(const DeviceDescriptorBaseVector& outDevices) :
+            mOutDevices(outDevices) {}
@@ -161,2 +155 @@ class ThreadBase : public Thread {
-      snprintf(buffer, size, "Devices: %s",
-               android::toString(mOutDevices).c_str());
+            snprintf(buffer, size, "Devices: %s", android::toString(mOutDevices).c_str());
@@ -168,3 +161,2 @@ class ThreadBase : public Thread {
-    explicit UpdateOutDevicesConfigEvent(
-        const DeviceDescriptorBaseVector& outDevices)
-        : ConfigEvent(CFG_EVENT_UPDATE_OUT_DEVICE) {
+        explicit UpdateOutDevicesConfigEvent(const DeviceDescriptorBaseVector& outDevices) :
+            ConfigEvent(CFG_EVENT_UPDATE_OUT_DEVICE) {
@@ -200,2 +192 @@ class ThreadBase : public Thread {
-  virtual void ioConfigChanged(
-      audio_io_config_event event, pid_t pid = 0,
+    virtual void ioConfigChanged(audio_io_config_event event, pid_t pid = 0,
@@ -227 +218 @@ class ThreadBase : public Thread {
-  audio_devices_t inDevice() const { return mInDeviceTypeAddr.mType; }
+                audio_devices_t inDeviceType() const { return mInDeviceTypeAddr.mType; }
@@ -239 +230,2 @@ class ThreadBase : public Thread {
-  sp<EffectHandle> createEffect_l(const sp<AudioFlinger::Client>& client,
+                sp<EffectHandle> createEffect_l(
+                                    const sp<AudioFlinger::Client>& client,
@@ -241,3 +233,6 @@ class ThreadBase : public Thread {
-                                  int32_t priority, audio_session_t sessionId,
-                                  effect_descriptor_t* desc, int* enabled,
-                                  status_t* status , bool pinned);
+                                    int32_t priority,
+                                    audio_session_t sessionId,
+                                    effect_descriptor_t *desc,
+                                    int *enabled,
+                                    status_t *status ,
+                                    bool pinned);
@@ -258,4 +253,2 @@ class ThreadBase : public Thread {
-  sp<AudioFlinger::EffectModule> getEffect(audio_session_t sessionId,
-                                           int effectId);
-  sp<AudioFlinger::EffectModule> getEffect_l(audio_session_t sessionId,
-                                             int effectId);
+                sp<AudioFlinger::EffectModule> getEffect(audio_session_t sessionId, int effectId);
+                sp<AudioFlinger::EffectModule> getEffect_l(audio_session_t sessionId, int effectId);
@@ -279,2 +272,2 @@ class ThreadBase : public Thread {
-      if (sessionId == track->sessionId() &&
-          !track->isInvalid()
+                        if (sessionId == track->sessionId()
+                                && !track->isInvalid()
@@ -291,9 +284,10 @@ class ThreadBase : public Thread {
-  virtual uint32_t getStrategyForSession_l(audio_session_t sessionId __unused) {
-    return 0;
-  }
-  void checkSuspendOnEffectEnabled(
-      const sp<EffectModule>& effect, bool enabled,
-      audio_session_t sessionId = AUDIO_SESSION_OUTPUT_MIX);
-  void checkSuspendOnEffectEnabled_l(
-      const sp<EffectModule>& effect, bool enabled,
-      audio_session_t sessionId = AUDIO_SESSION_OUTPUT_MIX);
+                virtual uint32_t getStrategyForSession_l(audio_session_t sessionId __unused)
+                        { return 0; }
+                void checkSuspendOnEffectEnabled(const sp<EffectModule>& effect,
+                                                 bool enabled,
+                                                 audio_session_t sessionId =
+                                                        AUDIO_SESSION_OUTPUT_MIX);
+                void checkSuspendOnEffectEnabled_l(const sp<EffectModule>& effect,
+                                                   bool enabled,
+                                                   audio_session_t sessionId =
+                                                        AUDIO_SESSION_OUTPUT_MIX);
@@ -326 +320,2 @@ class ThreadBase : public Thread {
-  void setEffectSuspended_l(const effect_uuid_t* type, bool suspend,
+                void setEffectSuspended_l(const effect_uuid_t *type,
+                                          bool suspend,
@@ -328 +323,2 @@ class ThreadBase : public Thread {
-  void updateSuspendedSessions_l(const effect_uuid_t* type, bool suspend,
+                void updateSuspendedSessions_l(const effect_uuid_t *type,
+                                                      bool suspend,
@@ -340,5 +336,3 @@ class ThreadBase : public Thread {
-  virtual void dumpInternals_l(int fd __unused,
-                               const Vector<String16>& args __unused) {}
-  virtual void dumpTracks_l(int fd __unused,
-                            const Vector<String16>& args __unused) {}
- private:
+    virtual void dumpInternals_l(int fd __unused, const Vector<String16>& args __unused)
+                            { }
+    virtual void dumpTracks_l(int fd __unused, const Vector<String16>& args __unused) { }
@@ -346 +339,0 @@ class ThreadBase : public Thread {
- protected:
@@ -358,2 +351 @@ class ThreadBase : public Thread {
-  AudioDeviceTypeAddrVector
-      mOutDeviceTypeAddrs;
+                AudioDeviceTypeAddrVector mOutDeviceTypeAddrs;
@@ -380,2 +372 @@ class ThreadBase : public Thread {
-      int64_t , int64_t >
-      mTimestampVerifier;
+                        int64_t , int64_t > mTimestampVerifier;
@@ -399,3 +390,4 @@ class ThreadBase : public Thread {
-        : mActiveTracksGeneration(0),
-          mLastActiveTracksGeneration(0),
-          mLocalLog(localLog) {}
+                        : mActiveTracksGeneration(0)
+                        , mLastActiveTracksGeneration(0)
+                        , mLocalLog(localLog)
+                    { }
@@ -406 +398,3 @@ class ThreadBase : public Thread {
-    sp<T> getLatest() { return mLatestActiveTrack.promote(); }
+                    sp<T> getLatest() {
+                        return mLatestActiveTrack.promote();
+                    }
@@ -409,4 +403,12 @@ class ThreadBase : public Thread {
-    size_t size() const { return mActiveTracks.size(); }
-    bool isEmpty() const { return mActiveTracks.isEmpty(); }
-    ssize_t indexOf(const sp<T>& item) { return mActiveTracks.indexOf(item); }
-    sp<T> operator[](size_t index) const { return mActiveTracks[index]; }
+                    size_t size() const {
+                        return mActiveTracks.size();
+                    }
+                    bool isEmpty() const {
+                        return mActiveTracks.isEmpty();
+                    }
+                    ssize_t indexOf(const sp<T>& item) {
+                        return mActiveTracks.indexOf(item);
+                    }
+                    sp<T> operator[](size_t index) const {
+                        return mActiveTracks[index];
+                    }
@@ -416 +418,3 @@ class ThreadBase : public Thread {
-    typename SortedVector<sp<T>>::iterator end() { return mActiveTracks.end(); }
+                    typename SortedVector<sp<T>>::iterator end() {
+                        return mActiveTracks.end();
+                    }
@@ -452,2 +456 @@ class VolumeInterface {
-class PlaybackThread : public ThreadBase,
-                       public StreamOutHalInterfaceCallback,
+class PlaybackThread : public ThreadBase, public StreamOutHalInterfaceCallback,
@@ -455,0 +459 @@ class PlaybackThread : public ThreadBase,
+#include "PlaybackTracks.h"
@@ -506,3 +510 @@ class PlaybackThread : public ThreadBase,
-  virtual status_t initCheck() const {
-    return (mOutput == NULL) ? NO_INIT : NO_ERROR;
-  }
+    virtual status_t initCheck() const { return (mOutput == NULL) ? NO_INIT : NO_ERROR; }
@@ -519,8 +521,18 @@ class PlaybackThread : public ThreadBase,
-      const sp<AudioFlinger::Client>& client, audio_stream_type_t streamType,
-      const audio_attributes_t& attr, uint32_t* sampleRate,
-      audio_format_t format, audio_channel_mask_t channelMask,
-      size_t* pFrameCount, size_t* pNotificationFrameCount,
-      uint32_t notificationsPerBuffer, float speed,
-      const sp<IMemory>& sharedBuffer, audio_session_t sessionId,
-      audio_output_flags_t* flags, pid_t creatorPid, pid_t tid, uid_t uid,
-      status_t* status , audio_port_handle_t portId);
+                                const sp<AudioFlinger::Client>& client,
+                                audio_stream_type_t streamType,
+                                const audio_attributes_t& attr,
+                                uint32_t *sampleRate,
+                                audio_format_t format,
+                                audio_channel_mask_t channelMask,
+                                size_t *pFrameCount,
+                                size_t *pNotificationFrameCount,
+                                uint32_t notificationsPerBuffer,
+                                float speed,
+                                const sp<IMemory>& sharedBuffer,
+                                audio_session_t sessionId,
+                                audio_output_flags_t *flags,
+                                pid_t creatorPid,
+                                pid_t tid,
+                                uid_t uid,
+                                status_t *status ,
+                                audio_port_handle_t portId);
@@ -531 +543,2 @@ class PlaybackThread : public ThreadBase,
-  void restore() {
+                void restore()
+                                {
@@ -536,3 +549,2 @@ class PlaybackThread : public ThreadBase,
-  bool isSuspended() const {
-    return android_atomic_acquire_load(&mSuspended) > 0;
-  }
+                bool isSuspended() const
+                                { return android_atomic_acquire_load(&mSuspended) > 0; }
@@ -540,2 +552 @@ class PlaybackThread : public ThreadBase,
-  virtual void ioConfigChanged(
-      audio_io_config_event event, pid_t pid = 0,
+    virtual void ioConfigChanged(audio_io_config_event event, pid_t pid = 0,
@@ -545,2 +556 @@ class PlaybackThread : public ThreadBase,
-    return reinterpret_cast<effect_buffer_t*>(mSinkBuffer);
-  }
+                    return reinterpret_cast<effect_buffer_t *>(mSinkBuffer); };
@@ -550,2 +560,2 @@ class PlaybackThread : public ThreadBase,
-  status_t attachAuxEffect_l(
-      const sp<AudioFlinger::PlaybackThread::Track>& track, int EffectId);
+                status_t attachAuxEffect_l(const sp<AudioFlinger::PlaybackThread::Track>& track,
+                        int EffectId);
@@ -569 +579,2 @@ class PlaybackThread : public ThreadBase,
-  virtual bool isTrackAllowed_l(audio_channel_mask_t channelMask __unused,
+    virtual bool isTrackAllowed_l(
+                                    audio_channel_mask_t channelMask __unused,
@@ -573,2 +584,2 @@ class PlaybackThread : public ThreadBase,
-    return trackCountForUid_l(uid) < PlaybackThread::kMaxTracksPerUid &&
-           mTracks.size() < PlaybackThread::kMaxTracks;
+                                return trackCountForUid_l(uid) < PlaybackThread::kMaxTracksPerUid
+                                       && mTracks.size() < PlaybackThread::kMaxTracks;
@@ -577,2 +588,2 @@ class PlaybackThread : public ThreadBase,
-    return audio_is_output_devices(mTimestampCorrectedDevice) &&
-           outDeviceTypes().count(mTimestampCorrectedDevice) != 0;
+                                return audio_is_output_devices(mTimestampCorrectedDevice)
+                                        && outDeviceTypes().count(mTimestampCorrectedDevice) != 0;
@@ -608,2 +619 @@ class PlaybackThread : public ThreadBase,
-  virtual uint32_t activeSleepTimeUs()
-      const;
+    virtual uint32_t activeSleepTimeUs() const;
@@ -611,2 +621 @@ class PlaybackThread : public ThreadBase,
-  virtual uint32_t suspendSleepTimeUs()
-      const = 0;
+    virtual uint32_t suspendSleepTimeUs() const = 0;
@@ -621,4 +630,3 @@ class PlaybackThread : public ThreadBase,
-  bool usesHwAvSync() const {
-    return (mType == DIRECT) && (mOutput != NULL) && mHwSupportsPause &&
-           (mOutput->flags & AUDIO_OUTPUT_FLAG_HW_AV_SYNC);
-  }
+                bool usesHwAvSync() const { return (mType == DIRECT) && (mOutput != NULL)
+                                    && mHwSupportsPause
+                                    && (mOutput->flags & AUDIO_OUTPUT_FLAG_HW_AV_SYNC); }
@@ -634,2 +642 @@ class PlaybackThread : public ThreadBase,
-  virtual void sendMetadataToBackend_l(
-      const StreamOutHalInterface::SourceMetadata& metadata);
+    virtual void sendMetadataToBackend_l(const StreamOutHalInterface::SourceMetadata& metadata);
@@ -639,2 +646,2 @@ class PlaybackThread : public ThreadBase,
-    Tracks(bool saveDeletedTrackIds)
-        : mSaveDeletedTrackIds(saveDeletedTrackIds) {}
+        Tracks(bool saveDeletedTrackIds) :
+            mSaveDeletedTrackIds(saveDeletedTrackIds) { }
@@ -647,6 +654,18 @@ class PlaybackThread : public ThreadBase,
-    size_t size() const { return mTracks.size(); }
-    bool isEmpty() const { return mTracks.isEmpty(); }
-    ssize_t indexOf(const sp<T>& item) { return mTracks.indexOf(item); }
-    sp<T> operator[](size_t index) const { return mTracks[index]; }
-    typename SortedVector<sp<T>>::iterator begin() { return mTracks.begin(); }
-    typename SortedVector<sp<T>>::iterator end() { return mTracks.end(); }
+        size_t size() const {
+            return mTracks.size();
+        }
+        bool isEmpty() const {
+            return mTracks.isEmpty();
+        }
+        ssize_t indexOf(const sp<T> &item) {
+            return mTracks.indexOf(item);
+        }
+        sp<T> operator[](size_t index) const {
+            return mTracks[index];
+        }
+        typename SortedVector<sp<T>>::iterator begin() {
+            return mTracks.begin();
+        }
+        typename SortedVector<sp<T>>::iterator end() {
+            return mTracks.end();
+        }
@@ -690,0 +710 @@ class PlaybackThread : public ThreadBase,
+private:
@@ -700,5 +720,2 @@ class PlaybackThread : public ThreadBase,
-  virtual FastTrackUnderruns getFastTrackUnderruns(
-      size_t fastIndex __unused) const {
-    FastTrackUnderruns dummy;
-    return dummy;
-  }
+    virtual FastTrackUnderruns getFastTrackUnderruns(size_t fastIndex __unused) const
+                                { FastTrackUnderruns dummy; return dummy; }
@@ -715,2 +732,5 @@ class MixerThread : public PlaybackThread {
-  MixerThread(const sp<AudioFlinger>& audioFlinger, AudioStreamOut* output,
-              audio_io_handle_t id, bool systemReady, type_t type = MIXER);
+    MixerThread(const sp<AudioFlinger>& audioFlinger,
+                AudioStreamOut* output,
+                audio_io_handle_t id,
+                bool systemReady,
+                type_t type = MIXER);
@@ -720,4 +740,3 @@ class MixerThread : public PlaybackThread {
-  virtual bool isTrackAllowed_l(audio_channel_mask_t channelMask,
-                                audio_format_t format,
-                                audio_session_t sessionId,
-                                uid_t uid) const override;
+    virtual bool isTrackAllowed_l(
+                                    audio_channel_mask_t channelMask, audio_format_t format,
+                                    audio_session_t sessionId, uid_t uid) const override;
@@ -748,2 +767 @@ class MixerThread : public PlaybackThread {
-  sp<AudioWatchdog>
-      mAudioWatchdog;
+                sp<AudioWatchdog> mAudioWatchdog;
@@ -778,3 +796 @@ class MixerThread : public PlaybackThread {
-  virtual bool requireMonoBlend() {
-    return mMasterMono.load() && !hasFastMixer();
-  }
+    virtual bool requireMonoBlend() { return mMasterMono.load() && !hasFastMixer(); }
@@ -790,5 +806,3 @@ class DirectOutputThread : public PlaybackThread {
-  DirectOutputThread(const sp<AudioFlinger>& audioFlinger,
-                     AudioStreamOut* output, audio_io_handle_t id,
-                     audio_devices_t device, bool systemReady)
-      : DirectOutputThread(audioFlinger, output, id, device, DIRECT,
-                           systemReady) {}
+    DirectOutputThread(const sp<AudioFlinger>& audioFlinger, AudioStreamOut* output,
+                       audio_io_handle_t id, bool systemReady)
+        : DirectOutputThread(audioFlinger, output, id, DIRECT, systemReady) { }
@@ -814,3 +828,2 @@ class DirectOutputThread : public PlaybackThread {
-  DirectOutputThread(const sp<AudioFlinger>& audioFlinger,
-                     AudioStreamOut* output, audio_io_handle_t id,
-                     ThreadBase::type_t type, bool systemReady);
+    DirectOutputThread(const sp<AudioFlinger>& audioFlinger, AudioStreamOut* output,
+                       audio_io_handle_t id, ThreadBase::type_t type, bool systemReady);
@@ -825,2 +838 @@ class DirectOutputThread : public PlaybackThread {
-  status_t threadloop_getHalTimestamp_l(
-      ExtendedTimestamp* timestamp) const override {
+    status_t threadloop_getHalTimestamp_l(ExtendedTimestamp *timestamp) const override {
@@ -830,5 +842,6 @@ class DirectOutputThread : public PlaybackThread {
-      if (mOutput->getPresentationPosition(&uposition64, &time) == OK) {
-        timestamp->mPosition[ExtendedTimestamp::LOCATION_KERNEL] =
-            (int64_t)uposition64;
-        timestamp->mTimeNs[ExtendedTimestamp::LOCATION_KERNEL] =
-            audio_utils_ns_from_timespec(&time);
+                        if (mOutput->getPresentationPosition(
+                                &uposition64, &time) == OK) {
+                            timestamp->mPosition[ExtendedTimestamp::LOCATION_KERNEL]
+                                    = (int64_t)uposition64;
+                            timestamp->mTimeNs[ExtendedTimestamp::LOCATION_KERNEL]
+                                    = audio_utils_ns_from_timespec(&time);
@@ -845 +858 @@ class OffloadThread : public DirectOutputThread {
-  virtual ~OffloadThread() {}
+    virtual ~OffloadThread() {};
@@ -853,3 +866 @@ class OffloadThread : public DirectOutputThread {
-  virtual bool keepWakeLock() const {
-    return (mKeepWakeLock || (mDrainSequence & 1));
-  }
+    virtual bool keepWakeLock() const { return (mKeepWakeLock || (mDrainSequence & 1)); }
@@ -858,2 +869 @@ class OffloadThread : public DirectOutputThread {
-  size_t
-      mPausedBytesRemaining;
+    size_t mPausedBytesRemaining;
@@ -861,2 +871 @@ class OffloadThread : public DirectOutputThread {
-  uint64_t
-      mOffloadUnderrunPosition;
+    uint64_t mOffloadUnderrunPosition;
@@ -886,3 +895,2 @@ class DuplicatingThread : public MixerThread {
-  DuplicatingThread(const sp<AudioFlinger>& audioFlinger,
-                    MixerThread* mainThread, audio_io_handle_t id,
-                    bool systemReady);
+    DuplicatingThread(const sp<AudioFlinger>& audioFlinger, MixerThread* mainThread,
+                      audio_io_handle_t id, bool systemReady);
@@ -933 +941,2 @@ class DuplicatingThread : public MixerThread {
-class RecordThread : public ThreadBase {
+class RecordThread : public ThreadBase
+{
@@ -936 +945,2 @@ class RecordThread : public ThreadBase {
-  class ResamplerBufferProvider : public AudioBufferProvider {
+    class ResamplerBufferProvider : public AudioBufferProvider
+    {
@@ -938,2 +948,3 @@ class RecordThread : public ThreadBase {
-    explicit ResamplerBufferProvider(RecordTrack* recordTrack)
-        : mRecordTrack(recordTrack), mRsmpInUnrel(0), mRsmpInFront(0) {}
+        explicit ResamplerBufferProvider(RecordTrack* recordTrack) :
+            mRecordTrack(recordTrack),
+            mRsmpInUnrel(0), mRsmpInFront(0) { }
@@ -950,2 +961,6 @@ class RecordThread : public ThreadBase {
-  RecordThread(const sp<AudioFlinger>& audioFlinger, AudioStreamIn* input,
-               audio_io_handle_t id, bool systemReady);
+#include "RecordTracks.h"
+            RecordThread(const sp<AudioFlinger>& audioFlinger,
+                    AudioStreamIn *input,
+                    audio_io_handle_t id,
+                    bool systemReady
+                    );
@@ -958,3 +973 @@ class RecordThread : public ThreadBase {
-  virtual status_t initCheck() const {
-    return (mInput == NULL) ? NO_INIT : NO_ERROR;
-  }
+    virtual status_t initCheck() const { return (mInput == NULL) ? NO_INIT : NO_ERROR; }
@@ -964,6 +977,14 @@ class RecordThread : public ThreadBase {
-      const sp<AudioFlinger::Client>& client, const audio_attributes_t& attr,
-      uint32_t* pSampleRate, audio_format_t format,
-      audio_channel_mask_t channelMask, size_t* pFrameCount,
-      audio_session_t sessionId, size_t* pNotificationFrameCount,
-      pid_t creatorPid, uid_t uid, audio_input_flags_t* flags, pid_t tid,
-      status_t* status , audio_port_handle_t portId,
+                    const sp<AudioFlinger::Client>& client,
+                    const audio_attributes_t& attr,
+                    uint32_t *pSampleRate,
+                    audio_format_t format,
+                    audio_channel_mask_t channelMask,
+                    size_t *pFrameCount,
+                    audio_session_t sessionId,
+                    size_t *pNotificationFrameCount,
+                    pid_t creatorPid,
+                    uid_t uid,
+                    audio_input_flags_t *flags,
+                    pid_t tid,
+                    status_t *status ,
+                    audio_port_handle_t portId,
@@ -971 +992,2 @@ class RecordThread : public ThreadBase {
-  status_t start(RecordTrack* recordTrack, AudioSystem::sync_event_t event,
+            status_t start(RecordTrack* recordTrack,
+                              AudioSystem::sync_event_t event,
@@ -980,2 +1002 @@ class RecordThread : public ThreadBase {
-  virtual void ioConfigChanged(
-      audio_io_config_event event, pid_t pid = 0,
+    virtual void ioConfigChanged(audio_io_config_event event, pid_t pid = 0,
@@ -1012,4 +1033,2 @@ class RecordThread : public ThreadBase {
-  status_t getActiveMicrophones(
-      std::vector<media::MicrophoneInfo>* activeMicrophones);
-  status_t setPreferredMicrophoneDirection(
-      audio_microphone_direction_t direction);
+            status_t getActiveMicrophones(std::vector<media::MicrophoneInfo>* activeMicrophones);
+            status_t setPreferredMicrophoneDirection(audio_microphone_direction_t direction);
@@ -1020,2 +1039,2 @@ class RecordThread : public ThreadBase {
-    return audio_is_input_device(mTimestampCorrectedDevice) &&
-           inDeviceType() == mTimestampCorrectedDevice;
+                            return audio_is_input_device(mTimestampCorrectedDevice)
+                                    && inDeviceType() == mTimestampCorrectedDevice;
@@ -1059 +1078,2 @@ class RecordThread : public ThreadBase {
-class MmapThread : public ThreadBase {
+class MmapThread : public ThreadBase
+{
@@ -1060,0 +1081 @@ class MmapThread : public ThreadBase {
+#include "MmapTracks.h"
@@ -1062,2 +1083 @@ class MmapThread : public ThreadBase {
-             AudioHwDevice* hwDev, sp<StreamHalInterface> stream,
-             bool systemReady);
+               AudioHwDevice *hwDev, sp<StreamHalInterface> stream, bool systemReady);
@@ -1084,3 +1104 @@ class MmapThread : public ThreadBase {
-  virtual status_t initCheck() const {
-    return (mHalStream == 0) ? NO_INIT : NO_ERROR;
-  }
+    virtual status_t initCheck() const { return (mHalStream == 0) ? NO_INIT : NO_ERROR; }
@@ -1091,2 +1109 @@ class MmapThread : public ThreadBase {
-  virtual void ioConfigChanged(
-      audio_io_config_event event, pid_t pid = 0,
+    virtual void ioConfigChanged(audio_io_config_event event, pid_t pid = 0,
@@ -1133 +1150,2 @@ class MmapThread : public ThreadBase {
-class MmapPlaybackThread : public MmapThread, public VolumeInterface {
+class MmapPlaybackThread : public MmapThread, public VolumeInterface
+{
@@ -1136,2 +1154 @@ class MmapPlaybackThread : public MmapThread, public VolumeInterface {
-                     AudioHwDevice* hwDev, AudioStreamOut* output,
-                     bool systemReady);
+                       AudioHwDevice *hwDev, AudioStreamOut *output, bool systemReady);
@@ -1168 +1185,2 @@ class MmapPlaybackThread : public MmapThread, public VolumeInterface {
-class MmapCaptureThread : public MmapThread {
+class MmapCaptureThread : public MmapThread
+{
@@ -1171,2 +1189 @@ class MmapCaptureThread : public MmapThread {
-                    AudioHwDevice* hwDev, AudioStreamIn* input,
-                    bool systemReady);
+                      AudioHwDevice *hwDev, AudioStreamIn *input, bool systemReady);
@@ -1179 +1196,2 @@ class MmapCaptureThread : public MmapThread {
-  void setRecordSilenced(audio_port_handle_t portId, bool silenced) override;
+                void setRecordSilenced(audio_port_handle_t portId,
+                                                 bool silenced) override;
