--- a/home/whalien/codebase/cpp/mergebot/eva/output/frameworks_av/fdb3ca4f-f17bebe8-6eb188e8/media@libheadtracking@HeadTrackingProcessor.no_comments_mergebot.cpp
+++ b/home/whalien/codebase/cpp/mergebot/eva/output/frameworks_av/fdb3ca4f-f17bebe8-6eb188e8/media@libheadtracking@HeadTrackingProcessor.no_comments_merged.cpp
@@ -8 +7,0 @@
-#include "QuaternionUtil.h"
@@ -23,2 +22,17 @@ public:
-                  .defaultValue {}
-    void setDesiredMode(HeadTrackingMode mode) override { mModeSelector.setDesiredMode(mode){ mModeSelector.setDesiredMode(mode); }
+                  .defaultValue = false,
+                  .windowDuration = options.autoRecenterWindowDuration,
+                  .translationalThreshold = options.autoRecenterTranslationalThreshold,
+                  .rotationalThreshold = options.autoRecenterRotationalThreshold,
+          }),
+          mScreenStillnessDetector(StillnessDetector::Options{
+                  .defaultValue = true,
+                  .windowDuration = options.screenStillnessWindowDuration,
+                  .translationalThreshold = options.screenStillnessTranslationalThreshold,
+                  .rotationalThreshold = options.screenStillnessRotationalThreshold,
+          }),
+          mModeSelector(ModeSelector::Options{.freshnessTimeout = options.freshnessTimeout},
+                        initialMode),
+          mRateLimiter(PoseRateLimiter::Options{
+                  .maxTranslationalVelocity = options.maxTranslationalVelocity,
+                  .maxRotationalVelocity = options.maxRotationalVelocity}) {}
+    void setDesiredMode(HeadTrackingMode mode) override { mModeSelector.setDesiredMode(mode); }
@@ -87 +101 @@ public:
-    HeadTrackingMode getActualMode() const override { return mModeSelector.getActualMode(){ return mModeSelector.getActualMode(); }
+    HeadTrackingMode getActualMode() const override { return mModeSelector.getActualMode(); }
@@ -172 +186,2 @@ std::string toString(HeadTrackingMode mode) {
-}std::string toString(PosePredictorType posePredictorType) {
+};
+std::string toString(PosePredictorType posePredictorType) {
