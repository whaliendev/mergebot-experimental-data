diff --git a/home/whalien/codebase/cpp/mergebot/eva/output/grpc/d7311d7d-729af3a4-694f491e/src@core@ext@upb-generated@validate@validate.upb.no_comments_mergebot.h b/home/whalien/codebase/cpp/mergebot/eva/output/grpc/d7311d7d-729af3a4-694f491e/src@core@ext@upb-generated@validate@validate.upb.no_comments_merged.h
index dc360ab..9e5b206 100644
--- a/home/whalien/codebase/cpp/mergebot/eva/output/grpc/d7311d7d-729af3a4-694f491e/src@core@ext@upb-generated@validate@validate.upb.no_comments_mergebot.h
+++ b/home/whalien/codebase/cpp/mergebot/eva/output/grpc/d7311d7d-729af3a4-694f491e/src@core@ext@upb-generated@validate@validate.upb.no_comments_merged.h
@@ -0,0 +1 @@
+#ifndef VALIDATE_VALIDATE_PROTO_UPB_H_
@@ -1,0 +3,7 @@
+#include "upb/msg.h"
+#include "upb/decode.h"
+#include "upb/encode.h"
+#include "upb/port_def.inc"
+#ifdef __cplusplus
+extern "C" {
+#endif
@@ -81,2 +89 @@ UPB_INLINE validate_FieldRules* validate_FieldRules_new(upb_arena* arena) {
-  return (validate_FieldRules*)_upb_msg_new(&validate_FieldRules_msginit,
-                                            arena);
+  return (validate_FieldRules *)_upb_msg_new(&validate_FieldRules_msginit, arena);
@@ -84,2 +91 @@ UPB_INLINE validate_FieldRules* validate_FieldRules_new(upb_arena* arena) {
-UPB_INLINE validate_FieldRules* validate_FieldRules_parse(const char* buf,
-                                                          size_t size,
+UPB_INLINE validate_FieldRules *validate_FieldRules_parse(const char *buf, size_t size,
@@ -88,4 +94 @@ UPB_INLINE validate_FieldRules* validate_FieldRules_parse(const char* buf,
-  return (ret &&
-          upb_decode(buf, size, ret, &validate_FieldRules_msginit, arena))
-             ? ret
-             : NULL;
+  return (ret && upb_decode(buf, size, ret, &validate_FieldRules_msginit, arena)) ? ret : NULL;
@@ -93,2 +96 @@ UPB_INLINE validate_FieldRules* validate_FieldRules_parse(const char* buf,
-UPB_INLINE char* validate_FieldRules_serialize(const validate_FieldRules* msg,
-                                               upb_arena* arena, size_t* len) {
+UPB_INLINE char *validate_FieldRules_serialize(const validate_FieldRules *msg, upb_arena *arena, size_t *len) {
@@ -121,195 +123,50 @@ typedef enum {
-UPB_INLINE validate_FieldRules_type_oneofcases
-validate_FieldRules_type_case(const validate_FieldRules* msg) {
-  return (validate_FieldRules_type_oneofcases)UPB_FIELD_AT(msg, int32_t,
-                                                           UPB_SIZE(12, 24));
-}
-UPB_INLINE bool validate_FieldRules_has_float(const validate_FieldRules* msg) {
-  return _upb_has_oneof_field(msg, UPB_SIZE(12, 24), 1);
-}
-UPB_INLINE const validate_FloatRules* validate_FieldRules_float(
-    const validate_FieldRules* msg) {
-  return UPB_READ_ONEOF(msg, const validate_FloatRules*, UPB_SIZE(8, 16),
-                        UPB_SIZE(12, 24), 1, NULL);
-}
-UPB_INLINE bool validate_FieldRules_has_double(const validate_FieldRules* msg) {
-  return _upb_has_oneof_field(msg, UPB_SIZE(12, 24), 2);
-}
-UPB_INLINE const validate_DoubleRules* validate_FieldRules_double(
-    const validate_FieldRules* msg) {
-  return UPB_READ_ONEOF(msg, const validate_DoubleRules*, UPB_SIZE(8, 16),
-                        UPB_SIZE(12, 24), 2, NULL);
-}
-UPB_INLINE bool validate_FieldRules_has_int32(const validate_FieldRules* msg) {
-  return _upb_has_oneof_field(msg, UPB_SIZE(12, 24), 3);
-}
-UPB_INLINE const validate_Int32Rules* validate_FieldRules_int32(
-    const validate_FieldRules* msg) {
-  return UPB_READ_ONEOF(msg, const validate_Int32Rules*, UPB_SIZE(8, 16),
-                        UPB_SIZE(12, 24), 3, NULL);
-}
-UPB_INLINE bool validate_FieldRules_has_int64(const validate_FieldRules* msg) {
-  return _upb_has_oneof_field(msg, UPB_SIZE(12, 24), 4);
-}
-UPB_INLINE const validate_Int64Rules* validate_FieldRules_int64(
-    const validate_FieldRules* msg) {
-  return UPB_READ_ONEOF(msg, const validate_Int64Rules*, UPB_SIZE(8, 16),
-                        UPB_SIZE(12, 24), 4, NULL);
-}
-UPB_INLINE bool validate_FieldRules_has_uint32(const validate_FieldRules* msg) {
-  return _upb_has_oneof_field(msg, UPB_SIZE(12, 24), 5);
-}
-UPB_INLINE const validate_UInt32Rules* validate_FieldRules_uint32(
-    const validate_FieldRules* msg) {
-  return UPB_READ_ONEOF(msg, const validate_UInt32Rules*, UPB_SIZE(8, 16),
-                        UPB_SIZE(12, 24), 5, NULL);
-}
-UPB_INLINE bool validate_FieldRules_has_uint64(const validate_FieldRules* msg) {
-  return _upb_has_oneof_field(msg, UPB_SIZE(12, 24), 6);
-}
-UPB_INLINE const validate_UInt64Rules* validate_FieldRules_uint64(
-    const validate_FieldRules* msg) {
-  return UPB_READ_ONEOF(msg, const validate_UInt64Rules*, UPB_SIZE(8, 16),
-                        UPB_SIZE(12, 24), 6, NULL);
-}
-UPB_INLINE bool validate_FieldRules_has_sint32(const validate_FieldRules* msg) {
-  return _upb_has_oneof_field(msg, UPB_SIZE(12, 24), 7);
-}
-UPB_INLINE const validate_SInt32Rules* validate_FieldRules_sint32(
-    const validate_FieldRules* msg) {
-  return UPB_READ_ONEOF(msg, const validate_SInt32Rules*, UPB_SIZE(8, 16),
-                        UPB_SIZE(12, 24), 7, NULL);
-}
-UPB_INLINE bool validate_FieldRules_has_sint64(const validate_FieldRules* msg) {
-  return _upb_has_oneof_field(msg, UPB_SIZE(12, 24), 8);
-}
-UPB_INLINE const validate_SInt64Rules* validate_FieldRules_sint64(
-    const validate_FieldRules* msg) {
-  return UPB_READ_ONEOF(msg, const validate_SInt64Rules*, UPB_SIZE(8, 16),
-                        UPB_SIZE(12, 24), 8, NULL);
-}
-UPB_INLINE bool validate_FieldRules_has_fixed32(
-    const validate_FieldRules* msg) {
-  return _upb_has_oneof_field(msg, UPB_SIZE(12, 24), 9);
-}
-UPB_INLINE const validate_Fixed32Rules* validate_FieldRules_fixed32(
-    const validate_FieldRules* msg) {
-  return UPB_READ_ONEOF(msg, const validate_Fixed32Rules*, UPB_SIZE(8, 16),
-                        UPB_SIZE(12, 24), 9, NULL);
-}
-UPB_INLINE bool validate_FieldRules_has_fixed64(
-    const validate_FieldRules* msg) {
-  return _upb_has_oneof_field(msg, UPB_SIZE(12, 24), 10);
-}
-UPB_INLINE const validate_Fixed64Rules* validate_FieldRules_fixed64(
-    const validate_FieldRules* msg) {
-  return UPB_READ_ONEOF(msg, const validate_Fixed64Rules*, UPB_SIZE(8, 16),
-                        UPB_SIZE(12, 24), 10, NULL);
-}
-UPB_INLINE bool validate_FieldRules_has_sfixed32(
-    const validate_FieldRules* msg) {
-  return _upb_has_oneof_field(msg, UPB_SIZE(12, 24), 11);
-}
-UPB_INLINE const validate_SFixed32Rules* validate_FieldRules_sfixed32(
-    const validate_FieldRules* msg) {
-  return UPB_READ_ONEOF(msg, const validate_SFixed32Rules*, UPB_SIZE(8, 16),
-                        UPB_SIZE(12, 24), 11, NULL);
-}
-UPB_INLINE bool validate_FieldRules_has_sfixed64(
-    const validate_FieldRules* msg) {
-  return _upb_has_oneof_field(msg, UPB_SIZE(12, 24), 12);
-}
-UPB_INLINE const validate_SFixed64Rules* validate_FieldRules_sfixed64(
-    const validate_FieldRules* msg) {
-  return UPB_READ_ONEOF(msg, const validate_SFixed64Rules*, UPB_SIZE(8, 16),
-                        UPB_SIZE(12, 24), 12, NULL);
-}
-UPB_INLINE bool validate_FieldRules_has_bool(const validate_FieldRules* msg) {
-  return _upb_has_oneof_field(msg, UPB_SIZE(12, 24), 13);
-}
-UPB_INLINE const validate_BoolRules* validate_FieldRules_bool(
-    const validate_FieldRules* msg) {
-  return UPB_READ_ONEOF(msg, const validate_BoolRules*, UPB_SIZE(8, 16),
-                        UPB_SIZE(12, 24), 13, NULL);
-}
-UPB_INLINE bool validate_FieldRules_has_string(const validate_FieldRules* msg) {
-  return _upb_has_oneof_field(msg, UPB_SIZE(12, 24), 14);
-}
-UPB_INLINE const validate_StringRules* validate_FieldRules_string(
-    const validate_FieldRules* msg) {
-  return UPB_READ_ONEOF(msg, const validate_StringRules*, UPB_SIZE(8, 16),
-                        UPB_SIZE(12, 24), 14, NULL);
-}
-UPB_INLINE bool validate_FieldRules_has_bytes(const validate_FieldRules* msg) {
-  return _upb_has_oneof_field(msg, UPB_SIZE(12, 24), 15);
-}
-UPB_INLINE const validate_BytesRules* validate_FieldRules_bytes(
-    const validate_FieldRules* msg) {
-  return UPB_READ_ONEOF(msg, const validate_BytesRules*, UPB_SIZE(8, 16),
-                        UPB_SIZE(12, 24), 15, NULL);
-}
-UPB_INLINE bool validate_FieldRules_has_enum(const validate_FieldRules* msg) {
-  return _upb_has_oneof_field(msg, UPB_SIZE(12, 24), 16);
-}
-UPB_INLINE const validate_EnumRules* validate_FieldRules_enum(
-    const validate_FieldRules* msg) {
-  return UPB_READ_ONEOF(msg, const validate_EnumRules*, UPB_SIZE(8, 16),
-                        UPB_SIZE(12, 24), 16, NULL);
-}
-UPB_INLINE bool validate_FieldRules_has_message(
-    const validate_FieldRules* msg) {
-  return _upb_has_field(msg, 1);
-}
-UPB_INLINE const validate_MessageRules* validate_FieldRules_message(
-    const validate_FieldRules* msg) {
-  return UPB_FIELD_AT(msg, const validate_MessageRules*, UPB_SIZE(4, 8));
-}
-UPB_INLINE bool validate_FieldRules_has_repeated(
-    const validate_FieldRules* msg) {
-  return _upb_has_oneof_field(msg, UPB_SIZE(12, 24), 18);
-}
-UPB_INLINE const validate_RepeatedRules* validate_FieldRules_repeated(
-    const validate_FieldRules* msg) {
-  return UPB_READ_ONEOF(msg, const validate_RepeatedRules*, UPB_SIZE(8, 16),
-                        UPB_SIZE(12, 24), 18, NULL);
-}
-UPB_INLINE bool validate_FieldRules_has_map(const validate_FieldRules* msg) {
-  return _upb_has_oneof_field(msg, UPB_SIZE(12, 24), 19);
-}
-UPB_INLINE const validate_MapRules* validate_FieldRules_map(
-    const validate_FieldRules* msg) {
-  return UPB_READ_ONEOF(msg, const validate_MapRules*, UPB_SIZE(8, 16),
-                        UPB_SIZE(12, 24), 19, NULL);
-}
-UPB_INLINE bool validate_FieldRules_has_any(const validate_FieldRules* msg) {
-  return _upb_has_oneof_field(msg, UPB_SIZE(12, 24), 20);
-}
-UPB_INLINE const validate_AnyRules* validate_FieldRules_any(
-    const validate_FieldRules* msg) {
-  return UPB_READ_ONEOF(msg, const validate_AnyRules*, UPB_SIZE(8, 16),
-                        UPB_SIZE(12, 24), 20, NULL);
-}
-UPB_INLINE bool validate_FieldRules_has_duration(
-    const validate_FieldRules* msg) {
-  return _upb_has_oneof_field(msg, UPB_SIZE(12, 24), 21);
-}
-UPB_INLINE const validate_DurationRules* validate_FieldRules_duration(
-    const validate_FieldRules* msg) {
-  return UPB_READ_ONEOF(msg, const validate_DurationRules*, UPB_SIZE(8, 16),
-                        UPB_SIZE(12, 24), 21, NULL);
-}
-UPB_INLINE bool validate_FieldRules_has_timestamp(
-    const validate_FieldRules* msg) {
-  return _upb_has_oneof_field(msg, UPB_SIZE(12, 24), 22);
-}
-UPB_INLINE const validate_TimestampRules* validate_FieldRules_timestamp(
-    const validate_FieldRules* msg) {
-  return UPB_READ_ONEOF(msg, const validate_TimestampRules*, UPB_SIZE(8, 16),
-                        UPB_SIZE(12, 24), 22, NULL);
-}
-UPB_WRITE_ONEOF(msg, validate_FloatRules*, UPB_SIZE(8, 16), value,
-                UPB_SIZE(12, 24), 1);
-}
-UPB_INLINE struct validate_FloatRules* validate_FieldRules_mutable_float(
-    validate_FieldRules* msg, upb_arena* arena) {
-  struct validate_FloatRules* sub =
-      (struct validate_FloatRules*)validate_FieldRules_float(msg);
+UPB_INLINE validate_FieldRules_type_oneofcases validate_FieldRules_type_case(const validate_FieldRules* msg) { return (validate_FieldRules_type_oneofcases)UPB_FIELD_AT(msg, int32_t, UPB_SIZE(12, 24)); }
+UPB_INLINE bool validate_FieldRules_has_float(const validate_FieldRules *msg) { return _upb_has_oneof_field(msg, UPB_SIZE(12, 24), 1); }
+UPB_INLINE const validate_FloatRules* validate_FieldRules_float(const validate_FieldRules *msg) { return UPB_READ_ONEOF(msg, const validate_FloatRules*, UPB_SIZE(8, 16), UPB_SIZE(12, 24), 1, NULL); }
+UPB_INLINE bool validate_FieldRules_has_double(const validate_FieldRules *msg) { return _upb_has_oneof_field(msg, UPB_SIZE(12, 24), 2); }
+UPB_INLINE const validate_DoubleRules* validate_FieldRules_double(const validate_FieldRules *msg) { return UPB_READ_ONEOF(msg, const validate_DoubleRules*, UPB_SIZE(8, 16), UPB_SIZE(12, 24), 2, NULL); }
+UPB_INLINE bool validate_FieldRules_has_int32(const validate_FieldRules *msg) { return _upb_has_oneof_field(msg, UPB_SIZE(12, 24), 3); }
+UPB_INLINE const validate_Int32Rules* validate_FieldRules_int32(const validate_FieldRules *msg) { return UPB_READ_ONEOF(msg, const validate_Int32Rules*, UPB_SIZE(8, 16), UPB_SIZE(12, 24), 3, NULL); }
+UPB_INLINE bool validate_FieldRules_has_int64(const validate_FieldRules *msg) { return _upb_has_oneof_field(msg, UPB_SIZE(12, 24), 4); }
+UPB_INLINE const validate_Int64Rules* validate_FieldRules_int64(const validate_FieldRules *msg) { return UPB_READ_ONEOF(msg, const validate_Int64Rules*, UPB_SIZE(8, 16), UPB_SIZE(12, 24), 4, NULL); }
+UPB_INLINE bool validate_FieldRules_has_uint32(const validate_FieldRules *msg) { return _upb_has_oneof_field(msg, UPB_SIZE(12, 24), 5); }
+UPB_INLINE const validate_UInt32Rules* validate_FieldRules_uint32(const validate_FieldRules *msg) { return UPB_READ_ONEOF(msg, const validate_UInt32Rules*, UPB_SIZE(8, 16), UPB_SIZE(12, 24), 5, NULL); }
+UPB_INLINE bool validate_FieldRules_has_uint64(const validate_FieldRules *msg) { return _upb_has_oneof_field(msg, UPB_SIZE(12, 24), 6); }
+UPB_INLINE const validate_UInt64Rules* validate_FieldRules_uint64(const validate_FieldRules *msg) { return UPB_READ_ONEOF(msg, const validate_UInt64Rules*, UPB_SIZE(8, 16), UPB_SIZE(12, 24), 6, NULL); }
+UPB_INLINE bool validate_FieldRules_has_sint32(const validate_FieldRules *msg) { return _upb_has_oneof_field(msg, UPB_SIZE(12, 24), 7); }
+UPB_INLINE const validate_SInt32Rules* validate_FieldRules_sint32(const validate_FieldRules *msg) { return UPB_READ_ONEOF(msg, const validate_SInt32Rules*, UPB_SIZE(8, 16), UPB_SIZE(12, 24), 7, NULL); }
+UPB_INLINE bool validate_FieldRules_has_sint64(const validate_FieldRules *msg) { return _upb_has_oneof_field(msg, UPB_SIZE(12, 24), 8); }
+UPB_INLINE const validate_SInt64Rules* validate_FieldRules_sint64(const validate_FieldRules *msg) { return UPB_READ_ONEOF(msg, const validate_SInt64Rules*, UPB_SIZE(8, 16), UPB_SIZE(12, 24), 8, NULL); }
+UPB_INLINE bool validate_FieldRules_has_fixed32(const validate_FieldRules *msg) { return _upb_has_oneof_field(msg, UPB_SIZE(12, 24), 9); }
+UPB_INLINE const validate_Fixed32Rules* validate_FieldRules_fixed32(const validate_FieldRules *msg) { return UPB_READ_ONEOF(msg, const validate_Fixed32Rules*, UPB_SIZE(8, 16), UPB_SIZE(12, 24), 9, NULL); }
+UPB_INLINE bool validate_FieldRules_has_fixed64(const validate_FieldRules *msg) { return _upb_has_oneof_field(msg, UPB_SIZE(12, 24), 10); }
+UPB_INLINE const validate_Fixed64Rules* validate_FieldRules_fixed64(const validate_FieldRules *msg) { return UPB_READ_ONEOF(msg, const validate_Fixed64Rules*, UPB_SIZE(8, 16), UPB_SIZE(12, 24), 10, NULL); }
+UPB_INLINE bool validate_FieldRules_has_sfixed32(const validate_FieldRules *msg) { return _upb_has_oneof_field(msg, UPB_SIZE(12, 24), 11); }
+UPB_INLINE const validate_SFixed32Rules* validate_FieldRules_sfixed32(const validate_FieldRules *msg) { return UPB_READ_ONEOF(msg, const validate_SFixed32Rules*, UPB_SIZE(8, 16), UPB_SIZE(12, 24), 11, NULL); }
+UPB_INLINE bool validate_FieldRules_has_sfixed64(const validate_FieldRules *msg) { return _upb_has_oneof_field(msg, UPB_SIZE(12, 24), 12); }
+UPB_INLINE const validate_SFixed64Rules* validate_FieldRules_sfixed64(const validate_FieldRules *msg) { return UPB_READ_ONEOF(msg, const validate_SFixed64Rules*, UPB_SIZE(8, 16), UPB_SIZE(12, 24), 12, NULL); }
+UPB_INLINE bool validate_FieldRules_has_bool(const validate_FieldRules *msg) { return _upb_has_oneof_field(msg, UPB_SIZE(12, 24), 13); }
+UPB_INLINE const validate_BoolRules* validate_FieldRules_bool(const validate_FieldRules *msg) { return UPB_READ_ONEOF(msg, const validate_BoolRules*, UPB_SIZE(8, 16), UPB_SIZE(12, 24), 13, NULL); }
+UPB_INLINE bool validate_FieldRules_has_string(const validate_FieldRules *msg) { return _upb_has_oneof_field(msg, UPB_SIZE(12, 24), 14); }
+UPB_INLINE const validate_StringRules* validate_FieldRules_string(const validate_FieldRules *msg) { return UPB_READ_ONEOF(msg, const validate_StringRules*, UPB_SIZE(8, 16), UPB_SIZE(12, 24), 14, NULL); }
+UPB_INLINE bool validate_FieldRules_has_bytes(const validate_FieldRules *msg) { return _upb_has_oneof_field(msg, UPB_SIZE(12, 24), 15); }
+UPB_INLINE const validate_BytesRules* validate_FieldRules_bytes(const validate_FieldRules *msg) { return UPB_READ_ONEOF(msg, const validate_BytesRules*, UPB_SIZE(8, 16), UPB_SIZE(12, 24), 15, NULL); }
+UPB_INLINE bool validate_FieldRules_has_enum(const validate_FieldRules *msg) { return _upb_has_oneof_field(msg, UPB_SIZE(12, 24), 16); }
+UPB_INLINE const validate_EnumRules* validate_FieldRules_enum(const validate_FieldRules *msg) { return UPB_READ_ONEOF(msg, const validate_EnumRules*, UPB_SIZE(8, 16), UPB_SIZE(12, 24), 16, NULL); }
+UPB_INLINE bool validate_FieldRules_has_message(const validate_FieldRules *msg) { return _upb_has_field(msg, 1); }
+UPB_INLINE const validate_MessageRules* validate_FieldRules_message(const validate_FieldRules *msg) { return UPB_FIELD_AT(msg, const validate_MessageRules*, UPB_SIZE(4, 8)); }
+UPB_INLINE bool validate_FieldRules_has_repeated(const validate_FieldRules *msg) { return _upb_has_oneof_field(msg, UPB_SIZE(12, 24), 18); }
+UPB_INLINE const validate_RepeatedRules* validate_FieldRules_repeated(const validate_FieldRules *msg) { return UPB_READ_ONEOF(msg, const validate_RepeatedRules*, UPB_SIZE(8, 16), UPB_SIZE(12, 24), 18, NULL); }
+UPB_INLINE bool validate_FieldRules_has_map(const validate_FieldRules *msg) { return _upb_has_oneof_field(msg, UPB_SIZE(12, 24), 19); }
+UPB_INLINE const validate_MapRules* validate_FieldRules_map(const validate_FieldRules *msg) { return UPB_READ_ONEOF(msg, const validate_MapRules*, UPB_SIZE(8, 16), UPB_SIZE(12, 24), 19, NULL); }
+UPB_INLINE bool validate_FieldRules_has_any(const validate_FieldRules *msg) { return _upb_has_oneof_field(msg, UPB_SIZE(12, 24), 20); }
+UPB_INLINE const validate_AnyRules* validate_FieldRules_any(const validate_FieldRules *msg) { return UPB_READ_ONEOF(msg, const validate_AnyRules*, UPB_SIZE(8, 16), UPB_SIZE(12, 24), 20, NULL); }
+UPB_INLINE bool validate_FieldRules_has_duration(const validate_FieldRules *msg) { return _upb_has_oneof_field(msg, UPB_SIZE(12, 24), 21); }
+UPB_INLINE const validate_DurationRules* validate_FieldRules_duration(const validate_FieldRules *msg) { return UPB_READ_ONEOF(msg, const validate_DurationRules*, UPB_SIZE(8, 16), UPB_SIZE(12, 24), 21, NULL); }
+UPB_INLINE bool validate_FieldRules_has_timestamp(const validate_FieldRules *msg) { return _upb_has_oneof_field(msg, UPB_SIZE(12, 24), 22); }
+UPB_INLINE const validate_TimestampRules* validate_FieldRules_timestamp(const validate_FieldRules *msg) { return UPB_READ_ONEOF(msg, const validate_TimestampRules*, UPB_SIZE(8, 16), UPB_SIZE(12, 24), 22, NULL); }
+UPB_INLINE void validate_FieldRules_set_float(validate_FieldRules *msg, validate_FloatRules* value) {
+  UPB_WRITE_ONEOF(msg, validate_FloatRules*, UPB_SIZE(8, 16), value, UPB_SIZE(12, 24), 1);
+}
+UPB_INLINE struct validate_FloatRules* validate_FieldRules_mutable_float(validate_FieldRules *msg, upb_arena *arena) {
+  struct validate_FloatRules* sub = (struct validate_FloatRules*)validate_FieldRules_float(msg);
@@ -317,2 +174 @@ UPB_INLINE struct validate_FloatRules* validate_FieldRules_mutable_float(
-    sub = (struct validate_FloatRules*)_upb_msg_new(
-        &validate_FloatRules_msginit, arena);
+    sub = (struct validate_FloatRules*)_upb_msg_new(&validate_FloatRules_msginit, arena);
@@ -324,2 +180,2 @@ UPB_INLINE struct validate_FloatRules* validate_FieldRules_mutable_float(
-UPB_WRITE_ONEOF(msg, validate_DoubleRules*, UPB_SIZE(8, 16), value,
-                UPB_SIZE(12, 24), 2);
+UPB_INLINE void validate_FieldRules_set_double(validate_FieldRules *msg, validate_DoubleRules* value) {
+  UPB_WRITE_ONEOF(msg, validate_DoubleRules*, UPB_SIZE(8, 16), value, UPB_SIZE(12, 24), 2);
@@ -327,4 +183,2 @@ UPB_WRITE_ONEOF(msg, validate_DoubleRules*, UPB_SIZE(8, 16), value,
-UPB_INLINE struct validate_DoubleRules* validate_FieldRules_mutable_double(
-    validate_FieldRules* msg, upb_arena* arena) {
-  struct validate_DoubleRules* sub =
-      (struct validate_DoubleRules*)validate_FieldRules_double(msg);
+UPB_INLINE struct validate_DoubleRules* validate_FieldRules_mutable_double(validate_FieldRules *msg, upb_arena *arena) {
+  struct validate_DoubleRules* sub = (struct validate_DoubleRules*)validate_FieldRules_double(msg);
@@ -332,2 +186 @@ UPB_INLINE struct validate_DoubleRules* validate_FieldRules_mutable_double(
-    sub = (struct validate_DoubleRules*)_upb_msg_new(
-        &validate_DoubleRules_msginit, arena);
+    sub = (struct validate_DoubleRules*)_upb_msg_new(&validate_DoubleRules_msginit, arena);
@@ -339,2 +192,2 @@ UPB_INLINE struct validate_DoubleRules* validate_FieldRules_mutable_double(
-UPB_WRITE_ONEOF(msg, validate_Int32Rules*, UPB_SIZE(8, 16), value,
-                UPB_SIZE(12, 24), 3);
+UPB_INLINE void validate_FieldRules_set_int32(validate_FieldRules *msg, validate_Int32Rules* value) {
+  UPB_WRITE_ONEOF(msg, validate_Int32Rules*, UPB_SIZE(8, 16), value, UPB_SIZE(12, 24), 3);
@@ -342,4 +195,2 @@ UPB_WRITE_ONEOF(msg, validate_Int32Rules*, UPB_SIZE(8, 16), value,
-UPB_INLINE struct validate_Int32Rules* validate_FieldRules_mutable_int32(
-    validate_FieldRules* msg, upb_arena* arena) {
-  struct validate_Int32Rules* sub =
-      (struct validate_Int32Rules*)validate_FieldRules_int32(msg);
+UPB_INLINE struct validate_Int32Rules* validate_FieldRules_mutable_int32(validate_FieldRules *msg, upb_arena *arena) {
+  struct validate_Int32Rules* sub = (struct validate_Int32Rules*)validate_FieldRules_int32(msg);
@@ -347,2 +198 @@ UPB_INLINE struct validate_Int32Rules* validate_FieldRules_mutable_int32(
-    sub = (struct validate_Int32Rules*)_upb_msg_new(
-        &validate_Int32Rules_msginit, arena);
+    sub = (struct validate_Int32Rules*)_upb_msg_new(&validate_Int32Rules_msginit, arena);
@@ -354,2 +204,2 @@ UPB_INLINE struct validate_Int32Rules* validate_FieldRules_mutable_int32(
-UPB_WRITE_ONEOF(msg, validate_Int64Rules*, UPB_SIZE(8, 16), value,
-                UPB_SIZE(12, 24), 4);
+UPB_INLINE void validate_FieldRules_set_int64(validate_FieldRules *msg, validate_Int64Rules* value) {
+  UPB_WRITE_ONEOF(msg, validate_Int64Rules*, UPB_SIZE(8, 16), value, UPB_SIZE(12, 24), 4);
@@ -357,4 +207,2 @@ UPB_WRITE_ONEOF(msg, validate_Int64Rules*, UPB_SIZE(8, 16), value,
-UPB_INLINE struct validate_Int64Rules* validate_FieldRules_mutable_int64(
-    validate_FieldRules* msg, upb_arena* arena) {
-  struct validate_Int64Rules* sub =
-      (struct validate_Int64Rules*)validate_FieldRules_int64(msg);
+UPB_INLINE struct validate_Int64Rules* validate_FieldRules_mutable_int64(validate_FieldRules *msg, upb_arena *arena) {
+  struct validate_Int64Rules* sub = (struct validate_Int64Rules*)validate_FieldRules_int64(msg);
@@ -362,2 +210 @@ UPB_INLINE struct validate_Int64Rules* validate_FieldRules_mutable_int64(
-    sub = (struct validate_Int64Rules*)_upb_msg_new(
-        &validate_Int64Rules_msginit, arena);
+    sub = (struct validate_Int64Rules*)_upb_msg_new(&validate_Int64Rules_msginit, arena);
@@ -369,2 +216,2 @@ UPB_INLINE struct validate_Int64Rules* validate_FieldRules_mutable_int64(
-UPB_WRITE_ONEOF(msg, validate_UInt32Rules*, UPB_SIZE(8, 16), value,
-                UPB_SIZE(12, 24), 5);
+UPB_INLINE void validate_FieldRules_set_uint32(validate_FieldRules *msg, validate_UInt32Rules* value) {
+  UPB_WRITE_ONEOF(msg, validate_UInt32Rules*, UPB_SIZE(8, 16), value, UPB_SIZE(12, 24), 5);
@@ -372,4 +219,2 @@ UPB_WRITE_ONEOF(msg, validate_UInt32Rules*, UPB_SIZE(8, 16), value,
-UPB_INLINE struct validate_UInt32Rules* validate_FieldRules_mutable_uint32(
-    validate_FieldRules* msg, upb_arena* arena) {
-  struct validate_UInt32Rules* sub =
-      (struct validate_UInt32Rules*)validate_FieldRules_uint32(msg);
+UPB_INLINE struct validate_UInt32Rules* validate_FieldRules_mutable_uint32(validate_FieldRules *msg, upb_arena *arena) {
+  struct validate_UInt32Rules* sub = (struct validate_UInt32Rules*)validate_FieldRules_uint32(msg);
@@ -377,2 +222 @@ UPB_INLINE struct validate_UInt32Rules* validate_FieldRules_mutable_uint32(
-    sub = (struct validate_UInt32Rules*)_upb_msg_new(
-        &validate_UInt32Rules_msginit, arena);
+    sub = (struct validate_UInt32Rules*)_upb_msg_new(&validate_UInt32Rules_msginit, arena);
@@ -384,2 +228,2 @@ UPB_INLINE struct validate_UInt32Rules* validate_FieldRules_mutable_uint32(
-UPB_WRITE_ONEOF(msg, validate_UInt64Rules*, UPB_SIZE(8, 16), value,
-                UPB_SIZE(12, 24), 6);
+UPB_INLINE void validate_FieldRules_set_uint64(validate_FieldRules *msg, validate_UInt64Rules* value) {
+  UPB_WRITE_ONEOF(msg, validate_UInt64Rules*, UPB_SIZE(8, 16), value, UPB_SIZE(12, 24), 6);
@@ -387,4 +231,2 @@ UPB_WRITE_ONEOF(msg, validate_UInt64Rules*, UPB_SIZE(8, 16), value,
-UPB_INLINE struct validate_UInt64Rules* validate_FieldRules_mutable_uint64(
-    validate_FieldRules* msg, upb_arena* arena) {
-  struct validate_UInt64Rules* sub =
-      (struct validate_UInt64Rules*)validate_FieldRules_uint64(msg);
+UPB_INLINE struct validate_UInt64Rules* validate_FieldRules_mutable_uint64(validate_FieldRules *msg, upb_arena *arena) {
+  struct validate_UInt64Rules* sub = (struct validate_UInt64Rules*)validate_FieldRules_uint64(msg);
@@ -392,2 +234 @@ UPB_INLINE struct validate_UInt64Rules* validate_FieldRules_mutable_uint64(
-    sub = (struct validate_UInt64Rules*)_upb_msg_new(
-        &validate_UInt64Rules_msginit, arena);
+    sub = (struct validate_UInt64Rules*)_upb_msg_new(&validate_UInt64Rules_msginit, arena);
@@ -399,2 +240,2 @@ UPB_INLINE struct validate_UInt64Rules* validate_FieldRules_mutable_uint64(
-UPB_WRITE_ONEOF(msg, validate_SInt32Rules*, UPB_SIZE(8, 16), value,
-                UPB_SIZE(12, 24), 7);
+UPB_INLINE void validate_FieldRules_set_sint32(validate_FieldRules *msg, validate_SInt32Rules* value) {
+  UPB_WRITE_ONEOF(msg, validate_SInt32Rules*, UPB_SIZE(8, 16), value, UPB_SIZE(12, 24), 7);
@@ -402,4 +243,2 @@ UPB_WRITE_ONEOF(msg, validate_SInt32Rules*, UPB_SIZE(8, 16), value,
-UPB_INLINE struct validate_SInt32Rules* validate_FieldRules_mutable_sint32(
-    validate_FieldRules* msg, upb_arena* arena) {
-  struct validate_SInt32Rules* sub =
-      (struct validate_SInt32Rules*)validate_FieldRules_sint32(msg);
+UPB_INLINE struct validate_SInt32Rules* validate_FieldRules_mutable_sint32(validate_FieldRules *msg, upb_arena *arena) {
+  struct validate_SInt32Rules* sub = (struct validate_SInt32Rules*)validate_FieldRules_sint32(msg);
@@ -407,2 +246 @@ UPB_INLINE struct validate_SInt32Rules* validate_FieldRules_mutable_sint32(
-    sub = (struct validate_SInt32Rules*)_upb_msg_new(
-        &validate_SInt32Rules_msginit, arena);
+    sub = (struct validate_SInt32Rules*)_upb_msg_new(&validate_SInt32Rules_msginit, arena);
@@ -414,2 +252,2 @@ UPB_INLINE struct validate_SInt32Rules* validate_FieldRules_mutable_sint32(
-UPB_WRITE_ONEOF(msg, validate_SInt64Rules*, UPB_SIZE(8, 16), value,
-                UPB_SIZE(12, 24), 8);
+UPB_INLINE void validate_FieldRules_set_sint64(validate_FieldRules *msg, validate_SInt64Rules* value) {
+  UPB_WRITE_ONEOF(msg, validate_SInt64Rules*, UPB_SIZE(8, 16), value, UPB_SIZE(12, 24), 8);
@@ -417,4 +255,2 @@ UPB_WRITE_ONEOF(msg, validate_SInt64Rules*, UPB_SIZE(8, 16), value,
-UPB_INLINE struct validate_SInt64Rules* validate_FieldRules_mutable_sint64(
-    validate_FieldRules* msg, upb_arena* arena) {
-  struct validate_SInt64Rules* sub =
-      (struct validate_SInt64Rules*)validate_FieldRules_sint64(msg);
+UPB_INLINE struct validate_SInt64Rules* validate_FieldRules_mutable_sint64(validate_FieldRules *msg, upb_arena *arena) {
+  struct validate_SInt64Rules* sub = (struct validate_SInt64Rules*)validate_FieldRules_sint64(msg);
@@ -422,2 +258 @@ UPB_INLINE struct validate_SInt64Rules* validate_FieldRules_mutable_sint64(
-    sub = (struct validate_SInt64Rules*)_upb_msg_new(
-        &validate_SInt64Rules_msginit, arena);
+    sub = (struct validate_SInt64Rules*)_upb_msg_new(&validate_SInt64Rules_msginit, arena);
@@ -429,2 +264,2 @@ UPB_INLINE struct validate_SInt64Rules* validate_FieldRules_mutable_sint64(
-UPB_WRITE_ONEOF(msg, validate_Fixed32Rules*, UPB_SIZE(8, 16), value,
-                UPB_SIZE(12, 24), 9);
+UPB_INLINE void validate_FieldRules_set_fixed32(validate_FieldRules *msg, validate_Fixed32Rules* value) {
+  UPB_WRITE_ONEOF(msg, validate_Fixed32Rules*, UPB_SIZE(8, 16), value, UPB_SIZE(12, 24), 9);
@@ -432,4 +267,2 @@ UPB_WRITE_ONEOF(msg, validate_Fixed32Rules*, UPB_SIZE(8, 16), value,
-UPB_INLINE struct validate_Fixed32Rules* validate_FieldRules_mutable_fixed32(
-    validate_FieldRules* msg, upb_arena* arena) {
-  struct validate_Fixed32Rules* sub =
-      (struct validate_Fixed32Rules*)validate_FieldRules_fixed32(msg);
+UPB_INLINE struct validate_Fixed32Rules* validate_FieldRules_mutable_fixed32(validate_FieldRules *msg, upb_arena *arena) {
+  struct validate_Fixed32Rules* sub = (struct validate_Fixed32Rules*)validate_FieldRules_fixed32(msg);
@@ -437,2 +270 @@ UPB_INLINE struct validate_Fixed32Rules* validate_FieldRules_mutable_fixed32(
-    sub = (struct validate_Fixed32Rules*)_upb_msg_new(
-        &validate_Fixed32Rules_msginit, arena);
+    sub = (struct validate_Fixed32Rules*)_upb_msg_new(&validate_Fixed32Rules_msginit, arena);
@@ -444,2 +276,2 @@ UPB_INLINE struct validate_Fixed32Rules* validate_FieldRules_mutable_fixed32(
-UPB_WRITE_ONEOF(msg, validate_Fixed64Rules*, UPB_SIZE(8, 16), value,
-                UPB_SIZE(12, 24), 10);
+UPB_INLINE void validate_FieldRules_set_fixed64(validate_FieldRules *msg, validate_Fixed64Rules* value) {
+  UPB_WRITE_ONEOF(msg, validate_Fixed64Rules*, UPB_SIZE(8, 16), value, UPB_SIZE(12, 24), 10);
@@ -447,4 +279,2 @@ UPB_WRITE_ONEOF(msg, validate_Fixed64Rules*, UPB_SIZE(8, 16), value,
-UPB_INLINE struct validate_Fixed64Rules* validate_FieldRules_mutable_fixed64(
-    validate_FieldRules* msg, upb_arena* arena) {
-  struct validate_Fixed64Rules* sub =
-      (struct validate_Fixed64Rules*)validate_FieldRules_fixed64(msg);
+UPB_INLINE struct validate_Fixed64Rules* validate_FieldRules_mutable_fixed64(validate_FieldRules *msg, upb_arena *arena) {
+  struct validate_Fixed64Rules* sub = (struct validate_Fixed64Rules*)validate_FieldRules_fixed64(msg);
@@ -452,2 +282 @@ UPB_INLINE struct validate_Fixed64Rules* validate_FieldRules_mutable_fixed64(
-    sub = (struct validate_Fixed64Rules*)_upb_msg_new(
-        &validate_Fixed64Rules_msginit, arena);
+    sub = (struct validate_Fixed64Rules*)_upb_msg_new(&validate_Fixed64Rules_msginit, arena);
@@ -459,2 +288,2 @@ UPB_INLINE struct validate_Fixed64Rules* validate_FieldRules_mutable_fixed64(
-UPB_WRITE_ONEOF(msg, validate_SFixed32Rules*, UPB_SIZE(8, 16), value,
-                UPB_SIZE(12, 24), 11);
+UPB_INLINE void validate_FieldRules_set_sfixed32(validate_FieldRules *msg, validate_SFixed32Rules* value) {
+  UPB_WRITE_ONEOF(msg, validate_SFixed32Rules*, UPB_SIZE(8, 16), value, UPB_SIZE(12, 24), 11);
@@ -462,4 +291,2 @@ UPB_WRITE_ONEOF(msg, validate_SFixed32Rules*, UPB_SIZE(8, 16), value,
-UPB_INLINE struct validate_SFixed32Rules* validate_FieldRules_mutable_sfixed32(
-    validate_FieldRules* msg, upb_arena* arena) {
-  struct validate_SFixed32Rules* sub =
-      (struct validate_SFixed32Rules*)validate_FieldRules_sfixed32(msg);
+UPB_INLINE struct validate_SFixed32Rules* validate_FieldRules_mutable_sfixed32(validate_FieldRules *msg, upb_arena *arena) {
+  struct validate_SFixed32Rules* sub = (struct validate_SFixed32Rules*)validate_FieldRules_sfixed32(msg);
@@ -467,2 +294 @@ UPB_INLINE struct validate_SFixed32Rules* validate_FieldRules_mutable_sfixed32(
-    sub = (struct validate_SFixed32Rules*)_upb_msg_new(
-        &validate_SFixed32Rules_msginit, arena);
+    sub = (struct validate_SFixed32Rules*)_upb_msg_new(&validate_SFixed32Rules_msginit, arena);
@@ -474,2 +300,2 @@ UPB_INLINE struct validate_SFixed32Rules* validate_FieldRules_mutable_sfixed32(
-UPB_WRITE_ONEOF(msg, validate_SFixed64Rules*, UPB_SIZE(8, 16), value,
-                UPB_SIZE(12, 24), 12);
+UPB_INLINE void validate_FieldRules_set_sfixed64(validate_FieldRules *msg, validate_SFixed64Rules* value) {
+  UPB_WRITE_ONEOF(msg, validate_SFixed64Rules*, UPB_SIZE(8, 16), value, UPB_SIZE(12, 24), 12);
@@ -477,4 +303,2 @@ UPB_WRITE_ONEOF(msg, validate_SFixed64Rules*, UPB_SIZE(8, 16), value,
-UPB_INLINE struct validate_SFixed64Rules* validate_FieldRules_mutable_sfixed64(
-    validate_FieldRules* msg, upb_arena* arena) {
-  struct validate_SFixed64Rules* sub =
-      (struct validate_SFixed64Rules*)validate_FieldRules_sfixed64(msg);
+UPB_INLINE struct validate_SFixed64Rules* validate_FieldRules_mutable_sfixed64(validate_FieldRules *msg, upb_arena *arena) {
+  struct validate_SFixed64Rules* sub = (struct validate_SFixed64Rules*)validate_FieldRules_sfixed64(msg);
@@ -482,2 +306 @@ UPB_INLINE struct validate_SFixed64Rules* validate_FieldRules_mutable_sfixed64(
-    sub = (struct validate_SFixed64Rules*)_upb_msg_new(
-        &validate_SFixed64Rules_msginit, arena);
+    sub = (struct validate_SFixed64Rules*)_upb_msg_new(&validate_SFixed64Rules_msginit, arena);
@@ -489,2 +312,2 @@ UPB_INLINE struct validate_SFixed64Rules* validate_FieldRules_mutable_sfixed64(
-UPB_WRITE_ONEOF(msg, validate_BoolRules*, UPB_SIZE(8, 16), value,
-                UPB_SIZE(12, 24), 13);
+UPB_INLINE void validate_FieldRules_set_bool(validate_FieldRules *msg, validate_BoolRules* value) {
+  UPB_WRITE_ONEOF(msg, validate_BoolRules*, UPB_SIZE(8, 16), value, UPB_SIZE(12, 24), 13);
@@ -492,4 +315,2 @@ UPB_WRITE_ONEOF(msg, validate_BoolRules*, UPB_SIZE(8, 16), value,
-UPB_INLINE struct validate_BoolRules* validate_FieldRules_mutable_bool(
-    validate_FieldRules* msg, upb_arena* arena) {
-  struct validate_BoolRules* sub =
-      (struct validate_BoolRules*)validate_FieldRules_bool(msg);
+UPB_INLINE struct validate_BoolRules* validate_FieldRules_mutable_bool(validate_FieldRules *msg, upb_arena *arena) {
+  struct validate_BoolRules* sub = (struct validate_BoolRules*)validate_FieldRules_bool(msg);
@@ -497,2 +318 @@ UPB_INLINE struct validate_BoolRules* validate_FieldRules_mutable_bool(
-    sub = (struct validate_BoolRules*)_upb_msg_new(&validate_BoolRules_msginit,
-                                                   arena);
+    sub = (struct validate_BoolRules*)_upb_msg_new(&validate_BoolRules_msginit, arena);
@@ -504,2 +324,2 @@ UPB_INLINE struct validate_BoolRules* validate_FieldRules_mutable_bool(
-UPB_WRITE_ONEOF(msg, validate_StringRules*, UPB_SIZE(8, 16), value,
-                UPB_SIZE(12, 24), 14);
+UPB_INLINE void validate_FieldRules_set_string(validate_FieldRules *msg, validate_StringRules* value) {
+  UPB_WRITE_ONEOF(msg, validate_StringRules*, UPB_SIZE(8, 16), value, UPB_SIZE(12, 24), 14);
@@ -507,4 +327,2 @@ UPB_WRITE_ONEOF(msg, validate_StringRules*, UPB_SIZE(8, 16), value,
-UPB_INLINE struct validate_StringRules* validate_FieldRules_mutable_string(
-    validate_FieldRules* msg, upb_arena* arena) {
-  struct validate_StringRules* sub =
-      (struct validate_StringRules*)validate_FieldRules_string(msg);
+UPB_INLINE struct validate_StringRules* validate_FieldRules_mutable_string(validate_FieldRules *msg, upb_arena *arena) {
+  struct validate_StringRules* sub = (struct validate_StringRules*)validate_FieldRules_string(msg);
@@ -512,2 +330 @@ UPB_INLINE struct validate_StringRules* validate_FieldRules_mutable_string(
-    sub = (struct validate_StringRules*)_upb_msg_new(
-        &validate_StringRules_msginit, arena);
+    sub = (struct validate_StringRules*)_upb_msg_new(&validate_StringRules_msginit, arena);
@@ -519,2 +336,2 @@ UPB_INLINE struct validate_StringRules* validate_FieldRules_mutable_string(
-UPB_WRITE_ONEOF(msg, validate_BytesRules*, UPB_SIZE(8, 16), value,
-                UPB_SIZE(12, 24), 15);
+UPB_INLINE void validate_FieldRules_set_bytes(validate_FieldRules *msg, validate_BytesRules* value) {
+  UPB_WRITE_ONEOF(msg, validate_BytesRules*, UPB_SIZE(8, 16), value, UPB_SIZE(12, 24), 15);
@@ -522,4 +339,2 @@ UPB_WRITE_ONEOF(msg, validate_BytesRules*, UPB_SIZE(8, 16), value,
-UPB_INLINE struct validate_BytesRules* validate_FieldRules_mutable_bytes(
-    validate_FieldRules* msg, upb_arena* arena) {
-  struct validate_BytesRules* sub =
-      (struct validate_BytesRules*)validate_FieldRules_bytes(msg);
+UPB_INLINE struct validate_BytesRules* validate_FieldRules_mutable_bytes(validate_FieldRules *msg, upb_arena *arena) {
+  struct validate_BytesRules* sub = (struct validate_BytesRules*)validate_FieldRules_bytes(msg);
@@ -527,2 +342 @@ UPB_INLINE struct validate_BytesRules* validate_FieldRules_mutable_bytes(
-    sub = (struct validate_BytesRules*)_upb_msg_new(
-        &validate_BytesRules_msginit, arena);
+    sub = (struct validate_BytesRules*)_upb_msg_new(&validate_BytesRules_msginit, arena);
@@ -534,2 +348,2 @@ UPB_INLINE struct validate_BytesRules* validate_FieldRules_mutable_bytes(
-UPB_WRITE_ONEOF(msg, validate_EnumRules*, UPB_SIZE(8, 16), value,
-                UPB_SIZE(12, 24), 16);
+UPB_INLINE void validate_FieldRules_set_enum(validate_FieldRules *msg, validate_EnumRules* value) {
+  UPB_WRITE_ONEOF(msg, validate_EnumRules*, UPB_SIZE(8, 16), value, UPB_SIZE(12, 24), 16);
@@ -537,4 +351,2 @@ UPB_WRITE_ONEOF(msg, validate_EnumRules*, UPB_SIZE(8, 16), value,
-UPB_INLINE struct validate_EnumRules* validate_FieldRules_mutable_enum(
-    validate_FieldRules* msg, upb_arena* arena) {
-  struct validate_EnumRules* sub =
-      (struct validate_EnumRules*)validate_FieldRules_enum(msg);
+UPB_INLINE struct validate_EnumRules* validate_FieldRules_mutable_enum(validate_FieldRules *msg, upb_arena *arena) {
+  struct validate_EnumRules* sub = (struct validate_EnumRules*)validate_FieldRules_enum(msg);
@@ -542,2 +354 @@ UPB_INLINE struct validate_EnumRules* validate_FieldRules_mutable_enum(
-    sub = (struct validate_EnumRules*)_upb_msg_new(&validate_EnumRules_msginit,
-                                                   arena);
+    sub = (struct validate_EnumRules*)_upb_msg_new(&validate_EnumRules_msginit, arena);
@@ -549,2 +360 @@ UPB_INLINE struct validate_EnumRules* validate_FieldRules_mutable_enum(
-UPB_INLINE void validate_FieldRules_set_message(validate_FieldRules* msg,
-                                                validate_MessageRules* value) {
+UPB_INLINE void validate_FieldRules_set_message(validate_FieldRules *msg, validate_MessageRules* value) {
@@ -554,4 +364,2 @@ UPB_INLINE void validate_FieldRules_set_message(validate_FieldRules* msg,
-UPB_INLINE struct validate_MessageRules* validate_FieldRules_mutable_message(
-    validate_FieldRules* msg, upb_arena* arena) {
-  struct validate_MessageRules* sub =
-      (struct validate_MessageRules*)validate_FieldRules_message(msg);
+UPB_INLINE struct validate_MessageRules* validate_FieldRules_mutable_message(validate_FieldRules *msg, upb_arena *arena) {
+  struct validate_MessageRules* sub = (struct validate_MessageRules*)validate_FieldRules_message(msg);
@@ -559,2 +367 @@ UPB_INLINE struct validate_MessageRules* validate_FieldRules_mutable_message(
-    sub = (struct validate_MessageRules*)_upb_msg_new(
-        &validate_MessageRules_msginit, arena);
+    sub = (struct validate_MessageRules*)_upb_msg_new(&validate_MessageRules_msginit, arena);
@@ -566,2 +373,2 @@ UPB_INLINE struct validate_MessageRules* validate_FieldRules_mutable_message(
-UPB_WRITE_ONEOF(msg, validate_RepeatedRules*, UPB_SIZE(8, 16), value,
-                UPB_SIZE(12, 24), 18);
+UPB_INLINE void validate_FieldRules_set_repeated(validate_FieldRules *msg, validate_RepeatedRules* value) {
+  UPB_WRITE_ONEOF(msg, validate_RepeatedRules*, UPB_SIZE(8, 16), value, UPB_SIZE(12, 24), 18);
@@ -569,4 +376,2 @@ UPB_WRITE_ONEOF(msg, validate_RepeatedRules*, UPB_SIZE(8, 16), value,
-UPB_INLINE struct validate_RepeatedRules* validate_FieldRules_mutable_repeated(
-    validate_FieldRules* msg, upb_arena* arena) {
-  struct validate_RepeatedRules* sub =
-      (struct validate_RepeatedRules*)validate_FieldRules_repeated(msg);
+UPB_INLINE struct validate_RepeatedRules* validate_FieldRules_mutable_repeated(validate_FieldRules *msg, upb_arena *arena) {
+  struct validate_RepeatedRules* sub = (struct validate_RepeatedRules*)validate_FieldRules_repeated(msg);
@@ -574,2 +379 @@ UPB_INLINE struct validate_RepeatedRules* validate_FieldRules_mutable_repeated(
-    sub = (struct validate_RepeatedRules*)_upb_msg_new(
-        &validate_RepeatedRules_msginit, arena);
+    sub = (struct validate_RepeatedRules*)_upb_msg_new(&validate_RepeatedRules_msginit, arena);
@@ -581,2 +385,2 @@ UPB_INLINE struct validate_RepeatedRules* validate_FieldRules_mutable_repeated(
-UPB_WRITE_ONEOF(msg, validate_MapRules*, UPB_SIZE(8, 16), value,
-                UPB_SIZE(12, 24), 19);
+UPB_INLINE void validate_FieldRules_set_map(validate_FieldRules *msg, validate_MapRules* value) {
+  UPB_WRITE_ONEOF(msg, validate_MapRules*, UPB_SIZE(8, 16), value, UPB_SIZE(12, 24), 19);
@@ -584,4 +388,2 @@ UPB_WRITE_ONEOF(msg, validate_MapRules*, UPB_SIZE(8, 16), value,
-UPB_INLINE struct validate_MapRules* validate_FieldRules_mutable_map(
-    validate_FieldRules* msg, upb_arena* arena) {
-  struct validate_MapRules* sub =
-      (struct validate_MapRules*)validate_FieldRules_map(msg);
+UPB_INLINE struct validate_MapRules* validate_FieldRules_mutable_map(validate_FieldRules *msg, upb_arena *arena) {
+  struct validate_MapRules* sub = (struct validate_MapRules*)validate_FieldRules_map(msg);
@@ -589,2 +391 @@ UPB_INLINE struct validate_MapRules* validate_FieldRules_mutable_map(
-    sub = (struct validate_MapRules*)_upb_msg_new(&validate_MapRules_msginit,
-                                                  arena);
+    sub = (struct validate_MapRules*)_upb_msg_new(&validate_MapRules_msginit, arena);
@@ -596,2 +397,2 @@ UPB_INLINE struct validate_MapRules* validate_FieldRules_mutable_map(
-UPB_WRITE_ONEOF(msg, validate_AnyRules*, UPB_SIZE(8, 16), value,
-                UPB_SIZE(12, 24), 20);
+UPB_INLINE void validate_FieldRules_set_any(validate_FieldRules *msg, validate_AnyRules* value) {
+  UPB_WRITE_ONEOF(msg, validate_AnyRules*, UPB_SIZE(8, 16), value, UPB_SIZE(12, 24), 20);
@@ -599,4 +400,2 @@ UPB_WRITE_ONEOF(msg, validate_AnyRules*, UPB_SIZE(8, 16), value,
-UPB_INLINE struct validate_AnyRules* validate_FieldRules_mutable_any(
-    validate_FieldRules* msg, upb_arena* arena) {
-  struct validate_AnyRules* sub =
-      (struct validate_AnyRules*)validate_FieldRules_any(msg);
+UPB_INLINE struct validate_AnyRules* validate_FieldRules_mutable_any(validate_FieldRules *msg, upb_arena *arena) {
+  struct validate_AnyRules* sub = (struct validate_AnyRules*)validate_FieldRules_any(msg);
@@ -604,2 +403 @@ UPB_INLINE struct validate_AnyRules* validate_FieldRules_mutable_any(
-    sub = (struct validate_AnyRules*)_upb_msg_new(&validate_AnyRules_msginit,
-                                                  arena);
+    sub = (struct validate_AnyRules*)_upb_msg_new(&validate_AnyRules_msginit, arena);
@@ -611,2 +409,2 @@ UPB_INLINE struct validate_AnyRules* validate_FieldRules_mutable_any(
-UPB_WRITE_ONEOF(msg, validate_DurationRules*, UPB_SIZE(8, 16), value,
-                UPB_SIZE(12, 24), 21);
+UPB_INLINE void validate_FieldRules_set_duration(validate_FieldRules *msg, validate_DurationRules* value) {
+  UPB_WRITE_ONEOF(msg, validate_DurationRules*, UPB_SIZE(8, 16), value, UPB_SIZE(12, 24), 21);
@@ -614,4 +412,2 @@ UPB_WRITE_ONEOF(msg, validate_DurationRules*, UPB_SIZE(8, 16), value,
-UPB_INLINE struct validate_DurationRules* validate_FieldRules_mutable_duration(
-    validate_FieldRules* msg, upb_arena* arena) {
-  struct validate_DurationRules* sub =
-      (struct validate_DurationRules*)validate_FieldRules_duration(msg);
+UPB_INLINE struct validate_DurationRules* validate_FieldRules_mutable_duration(validate_FieldRules *msg, upb_arena *arena) {
+  struct validate_DurationRules* sub = (struct validate_DurationRules*)validate_FieldRules_duration(msg);
@@ -619,2 +415 @@ UPB_INLINE struct validate_DurationRules* validate_FieldRules_mutable_duration(
-    sub = (struct validate_DurationRules*)_upb_msg_new(
-        &validate_DurationRules_msginit, arena);
+    sub = (struct validate_DurationRules*)_upb_msg_new(&validate_DurationRules_msginit, arena);
@@ -626,2 +421,2 @@ UPB_INLINE struct validate_DurationRules* validate_FieldRules_mutable_duration(
-UPB_WRITE_ONEOF(msg, validate_TimestampRules*, UPB_SIZE(8, 16), value,
-                UPB_SIZE(12, 24), 22);
+UPB_INLINE void validate_FieldRules_set_timestamp(validate_FieldRules *msg, validate_TimestampRules* value) {
+  UPB_WRITE_ONEOF(msg, validate_TimestampRules*, UPB_SIZE(8, 16), value, UPB_SIZE(12, 24), 22);
@@ -629,5 +424,2 @@ UPB_WRITE_ONEOF(msg, validate_TimestampRules*, UPB_SIZE(8, 16), value,
-UPB_INLINE struct validate_TimestampRules*
-validate_FieldRules_mutable_timestamp(validate_FieldRules* msg,
-                                      upb_arena* arena) {
-  struct validate_TimestampRules* sub =
-      (struct validate_TimestampRules*)validate_FieldRules_timestamp(msg);
+UPB_INLINE struct validate_TimestampRules* validate_FieldRules_mutable_timestamp(validate_FieldRules *msg, upb_arena *arena) {
+  struct validate_TimestampRules* sub = (struct validate_TimestampRules*)validate_FieldRules_timestamp(msg);
@@ -635,2 +427 @@ validate_FieldRules_mutable_timestamp(validate_FieldRules* msg,
-    sub = (struct validate_TimestampRules*)_upb_msg_new(
-        &validate_TimestampRules_msginit, arena);
+    sub = (struct validate_TimestampRules*)_upb_msg_new(&validate_TimestampRules_msginit, arena);
@@ -643,2 +434 @@ UPB_INLINE validate_FloatRules* validate_FloatRules_new(upb_arena* arena) {
-  return (validate_FloatRules*)_upb_msg_new(&validate_FloatRules_msginit,
-                                            arena);
+  return (validate_FloatRules *)_upb_msg_new(&validate_FloatRules_msginit, arena);
@@ -646,2 +436 @@ UPB_INLINE validate_FloatRules* validate_FloatRules_new(upb_arena* arena) {
-UPB_INLINE validate_FloatRules* validate_FloatRules_parse(const char* buf,
-                                                          size_t size,
+UPB_INLINE validate_FloatRules *validate_FloatRules_parse(const char *buf, size_t size,
@@ -650,4 +439 @@ UPB_INLINE validate_FloatRules* validate_FloatRules_parse(const char* buf,
-  return (ret &&
-          upb_decode(buf, size, ret, &validate_FloatRules_msginit, arena))
-             ? ret
-             : NULL;
+  return (ret && upb_decode(buf, size, ret, &validate_FloatRules_msginit, arena)) ? ret : NULL;
@@ -655,2 +441 @@ UPB_INLINE validate_FloatRules* validate_FloatRules_parse(const char* buf,
-UPB_INLINE char* validate_FloatRules_serialize(const validate_FloatRules* msg,
-                                               upb_arena* arena, size_t* len) {
+UPB_INLINE char *validate_FloatRules_serialize(const validate_FloatRules *msg, upb_arena *arena, size_t *len) {
@@ -659,40 +444,13 @@ UPB_INLINE char* validate_FloatRules_serialize(const validate_FloatRules* msg,
-UPB_INLINE bool validate_FloatRules_has_const(const validate_FloatRules* msg) {
-  return _upb_has_field(msg, 1);
-}
-UPB_INLINE float validate_FloatRules_const(const validate_FloatRules* msg) {
-  return UPB_FIELD_AT(msg, float, UPB_SIZE(4, 4));
-}
-UPB_INLINE bool validate_FloatRules_has_lt(const validate_FloatRules* msg) {
-  return _upb_has_field(msg, 2);
-}
-UPB_INLINE float validate_FloatRules_lt(const validate_FloatRules* msg) {
-  return UPB_FIELD_AT(msg, float, UPB_SIZE(8, 8));
-}
-UPB_INLINE bool validate_FloatRules_has_lte(const validate_FloatRules* msg) {
-  return _upb_has_field(msg, 3);
-}
-UPB_INLINE float validate_FloatRules_lte(const validate_FloatRules* msg) {
-  return UPB_FIELD_AT(msg, float, UPB_SIZE(12, 12));
-}
-UPB_INLINE bool validate_FloatRules_has_gt(const validate_FloatRules* msg) {
-  return _upb_has_field(msg, 4);
-}
-UPB_INLINE float validate_FloatRules_gt(const validate_FloatRules* msg) {
-  return UPB_FIELD_AT(msg, float, UPB_SIZE(16, 16));
-}
-UPB_INLINE bool validate_FloatRules_has_gte(const validate_FloatRules* msg) {
-  return _upb_has_field(msg, 5);
-}
-UPB_INLINE float validate_FloatRules_gte(const validate_FloatRules* msg) {
-  return UPB_FIELD_AT(msg, float, UPB_SIZE(20, 20));
-}
-UPB_INLINE float const* validate_FloatRules_in(const validate_FloatRules* msg,
-                                               size_t* len) {
-  return (float const*)_upb_array_accessor(msg, UPB_SIZE(24, 24), len);
-}
-UPB_INLINE float const* validate_FloatRules_not_in(
-    const validate_FloatRules* msg, size_t* len) {
-  return (float const*)_upb_array_accessor(msg, UPB_SIZE(28, 32), len);
-}
-UPB_INLINE void validate_FloatRules_set_const(validate_FloatRules* msg,
-                                              float value) {
+UPB_INLINE bool validate_FloatRules_has_const(const validate_FloatRules *msg) { return _upb_has_field(msg, 1); }
+UPB_INLINE float validate_FloatRules_const(const validate_FloatRules *msg) { return UPB_FIELD_AT(msg, float, UPB_SIZE(4, 4)); }
+UPB_INLINE bool validate_FloatRules_has_lt(const validate_FloatRules *msg) { return _upb_has_field(msg, 2); }
+UPB_INLINE float validate_FloatRules_lt(const validate_FloatRules *msg) { return UPB_FIELD_AT(msg, float, UPB_SIZE(8, 8)); }
+UPB_INLINE bool validate_FloatRules_has_lte(const validate_FloatRules *msg) { return _upb_has_field(msg, 3); }
+UPB_INLINE float validate_FloatRules_lte(const validate_FloatRules *msg) { return UPB_FIELD_AT(msg, float, UPB_SIZE(12, 12)); }
+UPB_INLINE bool validate_FloatRules_has_gt(const validate_FloatRules *msg) { return _upb_has_field(msg, 4); }
+UPB_INLINE float validate_FloatRules_gt(const validate_FloatRules *msg) { return UPB_FIELD_AT(msg, float, UPB_SIZE(16, 16)); }
+UPB_INLINE bool validate_FloatRules_has_gte(const validate_FloatRules *msg) { return _upb_has_field(msg, 5); }
+UPB_INLINE float validate_FloatRules_gte(const validate_FloatRules *msg) { return UPB_FIELD_AT(msg, float, UPB_SIZE(20, 20)); }
+UPB_INLINE float const* validate_FloatRules_in(const validate_FloatRules *msg, size_t *len) { return (float const*)_upb_array_accessor(msg, UPB_SIZE(24, 24), len); }
+UPB_INLINE float const* validate_FloatRules_not_in(const validate_FloatRules *msg, size_t *len) { return (float const*)_upb_array_accessor(msg, UPB_SIZE(28, 32), len); }
+UPB_INLINE void validate_FloatRules_set_const(validate_FloatRules *msg, float value) {
@@ -702,2 +460 @@ UPB_INLINE void validate_FloatRules_set_const(validate_FloatRules* msg,
-UPB_INLINE void validate_FloatRules_set_lt(validate_FloatRules* msg,
-                                           float value) {
+UPB_INLINE void validate_FloatRules_set_lt(validate_FloatRules *msg, float value) {
@@ -707,2 +464 @@ UPB_INLINE void validate_FloatRules_set_lt(validate_FloatRules* msg,
-UPB_INLINE void validate_FloatRules_set_lte(validate_FloatRules* msg,
-                                            float value) {
+UPB_INLINE void validate_FloatRules_set_lte(validate_FloatRules *msg, float value) {
@@ -712,2 +468 @@ UPB_INLINE void validate_FloatRules_set_lte(validate_FloatRules* msg,
-UPB_INLINE void validate_FloatRules_set_gt(validate_FloatRules* msg,
-                                           float value) {
+UPB_INLINE void validate_FloatRules_set_gt(validate_FloatRules *msg, float value) {
@@ -717,2 +472 @@ UPB_INLINE void validate_FloatRules_set_gt(validate_FloatRules* msg,
-UPB_INLINE void validate_FloatRules_set_gte(validate_FloatRules* msg,
-                                            float value) {
+UPB_INLINE void validate_FloatRules_set_gte(validate_FloatRules *msg, float value) {
@@ -722,2 +476 @@ UPB_INLINE void validate_FloatRules_set_gte(validate_FloatRules* msg,
-UPB_INLINE float* validate_FloatRules_mutable_in(validate_FloatRules* msg,
-                                                 size_t* len) {
+UPB_INLINE float* validate_FloatRules_mutable_in(validate_FloatRules *msg, size_t *len) {
@@ -726,4 +479,2 @@ UPB_INLINE float* validate_FloatRules_mutable_in(validate_FloatRules* msg,
-UPB_INLINE float* validate_FloatRules_resize_in(validate_FloatRules* msg,
-                                                size_t len, upb_arena* arena) {
-  return (float*)_upb_array_resize_accessor(msg, UPB_SIZE(24, 24), len,
-                                            UPB_TYPE_FLOAT, arena);
+UPB_INLINE float* validate_FloatRules_resize_in(validate_FloatRules *msg, size_t len, upb_arena *arena) {
+  return (float*)_upb_array_resize_accessor(msg, UPB_SIZE(24, 24), len, UPB_TYPE_FLOAT, arena);
@@ -731,4 +482,3 @@ UPB_INLINE float* validate_FloatRules_resize_in(validate_FloatRules* msg,
-UPB_INLINE bool validate_FloatRules_add_in(validate_FloatRules* msg, float val,
-                                           upb_arena* arena) {
-  return _upb_array_append_accessor(msg, UPB_SIZE(24, 24), UPB_SIZE(4, 4),
-                                    UPB_TYPE_FLOAT, &val, arena);
+UPB_INLINE bool validate_FloatRules_add_in(validate_FloatRules *msg, float val, upb_arena *arena) {
+  return _upb_array_append_accessor(msg, UPB_SIZE(24, 24), UPB_SIZE(4, 4), UPB_TYPE_FLOAT, &val,
+      arena);
@@ -736,2 +486 @@ UPB_INLINE bool validate_FloatRules_add_in(validate_FloatRules* msg, float val,
-UPB_INLINE float* validate_FloatRules_mutable_not_in(validate_FloatRules* msg,
-                                                     size_t* len) {
+UPB_INLINE float* validate_FloatRules_mutable_not_in(validate_FloatRules *msg, size_t *len) {
@@ -740,5 +489,2 @@ UPB_INLINE float* validate_FloatRules_mutable_not_in(validate_FloatRules* msg,
-UPB_INLINE float* validate_FloatRules_resize_not_in(validate_FloatRules* msg,
-                                                    size_t len,
-                                                    upb_arena* arena) {
-  return (float*)_upb_array_resize_accessor(msg, UPB_SIZE(28, 32), len,
-                                            UPB_TYPE_FLOAT, arena);
+UPB_INLINE float* validate_FloatRules_resize_not_in(validate_FloatRules *msg, size_t len, upb_arena *arena) {
+  return (float*)_upb_array_resize_accessor(msg, UPB_SIZE(28, 32), len, UPB_TYPE_FLOAT, arena);
@@ -746,4 +492,3 @@ UPB_INLINE float* validate_FloatRules_resize_not_in(validate_FloatRules* msg,
-UPB_INLINE bool validate_FloatRules_add_not_in(validate_FloatRules* msg,
-                                               float val, upb_arena* arena) {
-  return _upb_array_append_accessor(msg, UPB_SIZE(28, 32), UPB_SIZE(4, 4),
-                                    UPB_TYPE_FLOAT, &val, arena);
+UPB_INLINE bool validate_FloatRules_add_not_in(validate_FloatRules *msg, float val, upb_arena *arena) {
+  return _upb_array_append_accessor(msg, UPB_SIZE(28, 32), UPB_SIZE(4, 4), UPB_TYPE_FLOAT, &val,
+      arena);
@@ -752,2 +497 @@ UPB_INLINE validate_DoubleRules* validate_DoubleRules_new(upb_arena* arena) {
-  return (validate_DoubleRules*)_upb_msg_new(&validate_DoubleRules_msginit,
-                                             arena);
+  return (validate_DoubleRules *)_upb_msg_new(&validate_DoubleRules_msginit, arena);
@@ -755,2 +499 @@ UPB_INLINE validate_DoubleRules* validate_DoubleRules_new(upb_arena* arena) {
-UPB_INLINE validate_DoubleRules* validate_DoubleRules_parse(const char* buf,
-                                                            size_t size,
+UPB_INLINE validate_DoubleRules *validate_DoubleRules_parse(const char *buf, size_t size,
@@ -759,4 +502 @@ UPB_INLINE validate_DoubleRules* validate_DoubleRules_parse(const char* buf,
-  return (ret &&
-          upb_decode(buf, size, ret, &validate_DoubleRules_msginit, arena))
-             ? ret
-             : NULL;
+  return (ret && upb_decode(buf, size, ret, &validate_DoubleRules_msginit, arena)) ? ret : NULL;
@@ -764,2 +504 @@ UPB_INLINE validate_DoubleRules* validate_DoubleRules_parse(const char* buf,
-UPB_INLINE char* validate_DoubleRules_serialize(const validate_DoubleRules* msg,
-                                                upb_arena* arena, size_t* len) {
+UPB_INLINE char *validate_DoubleRules_serialize(const validate_DoubleRules *msg, upb_arena *arena, size_t *len) {
@@ -768,41 +507,13 @@ UPB_INLINE char* validate_DoubleRules_serialize(const validate_DoubleRules* msg,
-UPB_INLINE bool validate_DoubleRules_has_const(
-    const validate_DoubleRules* msg) {
-  return _upb_has_field(msg, 1);
-}
-UPB_INLINE double validate_DoubleRules_const(const validate_DoubleRules* msg) {
-  return UPB_FIELD_AT(msg, double, UPB_SIZE(8, 8));
-}
-UPB_INLINE bool validate_DoubleRules_has_lt(const validate_DoubleRules* msg) {
-  return _upb_has_field(msg, 2);
-}
-UPB_INLINE double validate_DoubleRules_lt(const validate_DoubleRules* msg) {
-  return UPB_FIELD_AT(msg, double, UPB_SIZE(16, 16));
-}
-UPB_INLINE bool validate_DoubleRules_has_lte(const validate_DoubleRules* msg) {
-  return _upb_has_field(msg, 3);
-}
-UPB_INLINE double validate_DoubleRules_lte(const validate_DoubleRules* msg) {
-  return UPB_FIELD_AT(msg, double, UPB_SIZE(24, 24));
-}
-UPB_INLINE bool validate_DoubleRules_has_gt(const validate_DoubleRules* msg) {
-  return _upb_has_field(msg, 4);
-}
-UPB_INLINE double validate_DoubleRules_gt(const validate_DoubleRules* msg) {
-  return UPB_FIELD_AT(msg, double, UPB_SIZE(32, 32));
-}
-UPB_INLINE bool validate_DoubleRules_has_gte(const validate_DoubleRules* msg) {
-  return _upb_has_field(msg, 5);
-}
-UPB_INLINE double validate_DoubleRules_gte(const validate_DoubleRules* msg) {
-  return UPB_FIELD_AT(msg, double, UPB_SIZE(40, 40));
-}
-UPB_INLINE double const* validate_DoubleRules_in(
-    const validate_DoubleRules* msg, size_t* len) {
-  return (double const*)_upb_array_accessor(msg, UPB_SIZE(48, 48), len);
-}
-UPB_INLINE double const* validate_DoubleRules_not_in(
-    const validate_DoubleRules* msg, size_t* len) {
-  return (double const*)_upb_array_accessor(msg, UPB_SIZE(52, 56), len);
-}
-UPB_INLINE void validate_DoubleRules_set_const(validate_DoubleRules* msg,
-                                               double value) {
+UPB_INLINE bool validate_DoubleRules_has_const(const validate_DoubleRules *msg) { return _upb_has_field(msg, 1); }
+UPB_INLINE double validate_DoubleRules_const(const validate_DoubleRules *msg) { return UPB_FIELD_AT(msg, double, UPB_SIZE(8, 8)); }
+UPB_INLINE bool validate_DoubleRules_has_lt(const validate_DoubleRules *msg) { return _upb_has_field(msg, 2); }
+UPB_INLINE double validate_DoubleRules_lt(const validate_DoubleRules *msg) { return UPB_FIELD_AT(msg, double, UPB_SIZE(16, 16)); }
+UPB_INLINE bool validate_DoubleRules_has_lte(const validate_DoubleRules *msg) { return _upb_has_field(msg, 3); }
+UPB_INLINE double validate_DoubleRules_lte(const validate_DoubleRules *msg) { return UPB_FIELD_AT(msg, double, UPB_SIZE(24, 24)); }
+UPB_INLINE bool validate_DoubleRules_has_gt(const validate_DoubleRules *msg) { return _upb_has_field(msg, 4); }
+UPB_INLINE double validate_DoubleRules_gt(const validate_DoubleRules *msg) { return UPB_FIELD_AT(msg, double, UPB_SIZE(32, 32)); }
+UPB_INLINE bool validate_DoubleRules_has_gte(const validate_DoubleRules *msg) { return _upb_has_field(msg, 5); }
+UPB_INLINE double validate_DoubleRules_gte(const validate_DoubleRules *msg) { return UPB_FIELD_AT(msg, double, UPB_SIZE(40, 40)); }
+UPB_INLINE double const* validate_DoubleRules_in(const validate_DoubleRules *msg, size_t *len) { return (double const*)_upb_array_accessor(msg, UPB_SIZE(48, 48), len); }
+UPB_INLINE double const* validate_DoubleRules_not_in(const validate_DoubleRules *msg, size_t *len) { return (double const*)_upb_array_accessor(msg, UPB_SIZE(52, 56), len); }
+UPB_INLINE void validate_DoubleRules_set_const(validate_DoubleRules *msg, double value) {
@@ -812,2 +523 @@ UPB_INLINE void validate_DoubleRules_set_const(validate_DoubleRules* msg,
-UPB_INLINE void validate_DoubleRules_set_lt(validate_DoubleRules* msg,
-                                            double value) {
+UPB_INLINE void validate_DoubleRules_set_lt(validate_DoubleRules *msg, double value) {
@@ -817,2 +527 @@ UPB_INLINE void validate_DoubleRules_set_lt(validate_DoubleRules* msg,
-UPB_INLINE void validate_DoubleRules_set_lte(validate_DoubleRules* msg,
-                                             double value) {
+UPB_INLINE void validate_DoubleRules_set_lte(validate_DoubleRules *msg, double value) {
@@ -822,2 +531 @@ UPB_INLINE void validate_DoubleRules_set_lte(validate_DoubleRules* msg,
-UPB_INLINE void validate_DoubleRules_set_gt(validate_DoubleRules* msg,
-                                            double value) {
+UPB_INLINE void validate_DoubleRules_set_gt(validate_DoubleRules *msg, double value) {
@@ -827,2 +535 @@ UPB_INLINE void validate_DoubleRules_set_gt(validate_DoubleRules* msg,
-UPB_INLINE void validate_DoubleRules_set_gte(validate_DoubleRules* msg,
-                                             double value) {
+UPB_INLINE void validate_DoubleRules_set_gte(validate_DoubleRules *msg, double value) {
@@ -832,2 +539 @@ UPB_INLINE void validate_DoubleRules_set_gte(validate_DoubleRules* msg,
-UPB_INLINE double* validate_DoubleRules_mutable_in(validate_DoubleRules* msg,
-                                                   size_t* len) {
+UPB_INLINE double* validate_DoubleRules_mutable_in(validate_DoubleRules *msg, size_t *len) {
@@ -836,5 +542,2 @@ UPB_INLINE double* validate_DoubleRules_mutable_in(validate_DoubleRules* msg,
-UPB_INLINE double* validate_DoubleRules_resize_in(validate_DoubleRules* msg,
-                                                  size_t len,
-                                                  upb_arena* arena) {
-  return (double*)_upb_array_resize_accessor(msg, UPB_SIZE(48, 48), len,
-                                             UPB_TYPE_DOUBLE, arena);
+UPB_INLINE double* validate_DoubleRules_resize_in(validate_DoubleRules *msg, size_t len, upb_arena *arena) {
+  return (double*)_upb_array_resize_accessor(msg, UPB_SIZE(48, 48), len, UPB_TYPE_DOUBLE, arena);
@@ -842,4 +545,3 @@ UPB_INLINE double* validate_DoubleRules_resize_in(validate_DoubleRules* msg,
-UPB_INLINE bool validate_DoubleRules_add_in(validate_DoubleRules* msg,
-                                            double val, upb_arena* arena) {
-  return _upb_array_append_accessor(msg, UPB_SIZE(48, 48), UPB_SIZE(8, 8),
-                                    UPB_TYPE_DOUBLE, &val, arena);
+UPB_INLINE bool validate_DoubleRules_add_in(validate_DoubleRules *msg, double val, upb_arena *arena) {
+  return _upb_array_append_accessor(msg, UPB_SIZE(48, 48), UPB_SIZE(8, 8), UPB_TYPE_DOUBLE, &val,
+      arena);
@@ -847,2 +549 @@ UPB_INLINE bool validate_DoubleRules_add_in(validate_DoubleRules* msg,
-UPB_INLINE double* validate_DoubleRules_mutable_not_in(
-    validate_DoubleRules* msg, size_t* len) {
+UPB_INLINE double* validate_DoubleRules_mutable_not_in(validate_DoubleRules *msg, size_t *len) {
@@ -851,5 +552,2 @@ UPB_INLINE double* validate_DoubleRules_mutable_not_in(
-UPB_INLINE double* validate_DoubleRules_resize_not_in(validate_DoubleRules* msg,
-                                                      size_t len,
-                                                      upb_arena* arena) {
-  return (double*)_upb_array_resize_accessor(msg, UPB_SIZE(52, 56), len,
-                                             UPB_TYPE_DOUBLE, arena);
+UPB_INLINE double* validate_DoubleRules_resize_not_in(validate_DoubleRules *msg, size_t len, upb_arena *arena) {
+  return (double*)_upb_array_resize_accessor(msg, UPB_SIZE(52, 56), len, UPB_TYPE_DOUBLE, arena);
@@ -857,4 +555,3 @@ UPB_INLINE double* validate_DoubleRules_resize_not_in(validate_DoubleRules* msg,
-UPB_INLINE bool validate_DoubleRules_add_not_in(validate_DoubleRules* msg,
-                                                double val, upb_arena* arena) {
-  return _upb_array_append_accessor(msg, UPB_SIZE(52, 56), UPB_SIZE(8, 8),
-                                    UPB_TYPE_DOUBLE, &val, arena);
+UPB_INLINE bool validate_DoubleRules_add_not_in(validate_DoubleRules *msg, double val, upb_arena *arena) {
+  return _upb_array_append_accessor(msg, UPB_SIZE(52, 56), UPB_SIZE(8, 8), UPB_TYPE_DOUBLE, &val,
+      arena);
@@ -863,2 +560 @@ UPB_INLINE validate_Int32Rules* validate_Int32Rules_new(upb_arena* arena) {
-  return (validate_Int32Rules*)_upb_msg_new(&validate_Int32Rules_msginit,
-                                            arena);
+  return (validate_Int32Rules *)_upb_msg_new(&validate_Int32Rules_msginit, arena);
@@ -866,2 +562 @@ UPB_INLINE validate_Int32Rules* validate_Int32Rules_new(upb_arena* arena) {
-UPB_INLINE validate_Int32Rules* validate_Int32Rules_parse(const char* buf,
-                                                          size_t size,
+UPB_INLINE validate_Int32Rules *validate_Int32Rules_parse(const char *buf, size_t size,
@@ -870,4 +565 @@ UPB_INLINE validate_Int32Rules* validate_Int32Rules_parse(const char* buf,
-  return (ret &&
-          upb_decode(buf, size, ret, &validate_Int32Rules_msginit, arena))
-             ? ret
-             : NULL;
+  return (ret && upb_decode(buf, size, ret, &validate_Int32Rules_msginit, arena)) ? ret : NULL;
@@ -875,2 +567 @@ UPB_INLINE validate_Int32Rules* validate_Int32Rules_parse(const char* buf,
-UPB_INLINE char* validate_Int32Rules_serialize(const validate_Int32Rules* msg,
-                                               upb_arena* arena, size_t* len) {
+UPB_INLINE char *validate_Int32Rules_serialize(const validate_Int32Rules *msg, upb_arena *arena, size_t *len) {
@@ -879,40 +570,13 @@ UPB_INLINE char* validate_Int32Rules_serialize(const validate_Int32Rules* msg,
-UPB_INLINE bool validate_Int32Rules_has_const(const validate_Int32Rules* msg) {
-  return _upb_has_field(msg, 1);
-}
-UPB_INLINE int32_t validate_Int32Rules_const(const validate_Int32Rules* msg) {
-  return UPB_FIELD_AT(msg, int32_t, UPB_SIZE(4, 4));
-}
-UPB_INLINE bool validate_Int32Rules_has_lt(const validate_Int32Rules* msg) {
-  return _upb_has_field(msg, 2);
-}
-UPB_INLINE int32_t validate_Int32Rules_lt(const validate_Int32Rules* msg) {
-  return UPB_FIELD_AT(msg, int32_t, UPB_SIZE(8, 8));
-}
-UPB_INLINE bool validate_Int32Rules_has_lte(const validate_Int32Rules* msg) {
-  return _upb_has_field(msg, 3);
-}
-UPB_INLINE int32_t validate_Int32Rules_lte(const validate_Int32Rules* msg) {
-  return UPB_FIELD_AT(msg, int32_t, UPB_SIZE(12, 12));
-}
-UPB_INLINE bool validate_Int32Rules_has_gt(const validate_Int32Rules* msg) {
-  return _upb_has_field(msg, 4);
-}
-UPB_INLINE int32_t validate_Int32Rules_gt(const validate_Int32Rules* msg) {
-  return UPB_FIELD_AT(msg, int32_t, UPB_SIZE(16, 16));
-}
-UPB_INLINE bool validate_Int32Rules_has_gte(const validate_Int32Rules* msg) {
-  return _upb_has_field(msg, 5);
-}
-UPB_INLINE int32_t validate_Int32Rules_gte(const validate_Int32Rules* msg) {
-  return UPB_FIELD_AT(msg, int32_t, UPB_SIZE(20, 20));
-}
-UPB_INLINE int32_t const* validate_Int32Rules_in(const validate_Int32Rules* msg,
-                                                 size_t* len) {
-  return (int32_t const*)_upb_array_accessor(msg, UPB_SIZE(24, 24), len);
-}
-UPB_INLINE int32_t const* validate_Int32Rules_not_in(
-    const validate_Int32Rules* msg, size_t* len) {
-  return (int32_t const*)_upb_array_accessor(msg, UPB_SIZE(28, 32), len);
-}
-UPB_INLINE void validate_Int32Rules_set_const(validate_Int32Rules* msg,
-                                              int32_t value) {
+UPB_INLINE bool validate_Int32Rules_has_const(const validate_Int32Rules *msg) { return _upb_has_field(msg, 1); }
+UPB_INLINE int32_t validate_Int32Rules_const(const validate_Int32Rules *msg) { return UPB_FIELD_AT(msg, int32_t, UPB_SIZE(4, 4)); }
+UPB_INLINE bool validate_Int32Rules_has_lt(const validate_Int32Rules *msg) { return _upb_has_field(msg, 2); }
+UPB_INLINE int32_t validate_Int32Rules_lt(const validate_Int32Rules *msg) { return UPB_FIELD_AT(msg, int32_t, UPB_SIZE(8, 8)); }
+UPB_INLINE bool validate_Int32Rules_has_lte(const validate_Int32Rules *msg) { return _upb_has_field(msg, 3); }
+UPB_INLINE int32_t validate_Int32Rules_lte(const validate_Int32Rules *msg) { return UPB_FIELD_AT(msg, int32_t, UPB_SIZE(12, 12)); }
+UPB_INLINE bool validate_Int32Rules_has_gt(const validate_Int32Rules *msg) { return _upb_has_field(msg, 4); }
+UPB_INLINE int32_t validate_Int32Rules_gt(const validate_Int32Rules *msg) { return UPB_FIELD_AT(msg, int32_t, UPB_SIZE(16, 16)); }
+UPB_INLINE bool validate_Int32Rules_has_gte(const validate_Int32Rules *msg) { return _upb_has_field(msg, 5); }
+UPB_INLINE int32_t validate_Int32Rules_gte(const validate_Int32Rules *msg) { return UPB_FIELD_AT(msg, int32_t, UPB_SIZE(20, 20)); }
+UPB_INLINE int32_t const* validate_Int32Rules_in(const validate_Int32Rules *msg, size_t *len) { return (int32_t const*)_upb_array_accessor(msg, UPB_SIZE(24, 24), len); }
+UPB_INLINE int32_t const* validate_Int32Rules_not_in(const validate_Int32Rules *msg, size_t *len) { return (int32_t const*)_upb_array_accessor(msg, UPB_SIZE(28, 32), len); }
+UPB_INLINE void validate_Int32Rules_set_const(validate_Int32Rules *msg, int32_t value) {
@@ -922,2 +586 @@ UPB_INLINE void validate_Int32Rules_set_const(validate_Int32Rules* msg,
-UPB_INLINE void validate_Int32Rules_set_lt(validate_Int32Rules* msg,
-                                           int32_t value) {
+UPB_INLINE void validate_Int32Rules_set_lt(validate_Int32Rules *msg, int32_t value) {
@@ -927,2 +590 @@ UPB_INLINE void validate_Int32Rules_set_lt(validate_Int32Rules* msg,
-UPB_INLINE void validate_Int32Rules_set_lte(validate_Int32Rules* msg,
-                                            int32_t value) {
+UPB_INLINE void validate_Int32Rules_set_lte(validate_Int32Rules *msg, int32_t value) {
@@ -932,2 +594 @@ UPB_INLINE void validate_Int32Rules_set_lte(validate_Int32Rules* msg,
-UPB_INLINE void validate_Int32Rules_set_gt(validate_Int32Rules* msg,
-                                           int32_t value) {
+UPB_INLINE void validate_Int32Rules_set_gt(validate_Int32Rules *msg, int32_t value) {
@@ -937,2 +598 @@ UPB_INLINE void validate_Int32Rules_set_gt(validate_Int32Rules* msg,
-UPB_INLINE void validate_Int32Rules_set_gte(validate_Int32Rules* msg,
-                                            int32_t value) {
+UPB_INLINE void validate_Int32Rules_set_gte(validate_Int32Rules *msg, int32_t value) {
@@ -942,2 +602 @@ UPB_INLINE void validate_Int32Rules_set_gte(validate_Int32Rules* msg,
-UPB_INLINE int32_t* validate_Int32Rules_mutable_in(validate_Int32Rules* msg,
-                                                   size_t* len) {
+UPB_INLINE int32_t* validate_Int32Rules_mutable_in(validate_Int32Rules *msg, size_t *len) {
@@ -946,5 +605,2 @@ UPB_INLINE int32_t* validate_Int32Rules_mutable_in(validate_Int32Rules* msg,
-UPB_INLINE int32_t* validate_Int32Rules_resize_in(validate_Int32Rules* msg,
-                                                  size_t len,
-                                                  upb_arena* arena) {
-  return (int32_t*)_upb_array_resize_accessor(msg, UPB_SIZE(24, 24), len,
-                                              UPB_TYPE_INT32, arena);
+UPB_INLINE int32_t* validate_Int32Rules_resize_in(validate_Int32Rules *msg, size_t len, upb_arena *arena) {
+  return (int32_t*)_upb_array_resize_accessor(msg, UPB_SIZE(24, 24), len, UPB_TYPE_INT32, arena);
@@ -952,4 +608,3 @@ UPB_INLINE int32_t* validate_Int32Rules_resize_in(validate_Int32Rules* msg,
-UPB_INLINE bool validate_Int32Rules_add_in(validate_Int32Rules* msg,
-                                           int32_t val, upb_arena* arena) {
-  return _upb_array_append_accessor(msg, UPB_SIZE(24, 24), UPB_SIZE(4, 4),
-                                    UPB_TYPE_INT32, &val, arena);
+UPB_INLINE bool validate_Int32Rules_add_in(validate_Int32Rules *msg, int32_t val, upb_arena *arena) {
+  return _upb_array_append_accessor(msg, UPB_SIZE(24, 24), UPB_SIZE(4, 4), UPB_TYPE_INT32, &val,
+      arena);
@@ -957,2 +612 @@ UPB_INLINE bool validate_Int32Rules_add_in(validate_Int32Rules* msg,
-UPB_INLINE int32_t* validate_Int32Rules_mutable_not_in(validate_Int32Rules* msg,
-                                                       size_t* len) {
+UPB_INLINE int32_t* validate_Int32Rules_mutable_not_in(validate_Int32Rules *msg, size_t *len) {
@@ -961,5 +615,2 @@ UPB_INLINE int32_t* validate_Int32Rules_mutable_not_in(validate_Int32Rules* msg,
-UPB_INLINE int32_t* validate_Int32Rules_resize_not_in(validate_Int32Rules* msg,
-                                                      size_t len,
-                                                      upb_arena* arena) {
-  return (int32_t*)_upb_array_resize_accessor(msg, UPB_SIZE(28, 32), len,
-                                              UPB_TYPE_INT32, arena);
+UPB_INLINE int32_t* validate_Int32Rules_resize_not_in(validate_Int32Rules *msg, size_t len, upb_arena *arena) {
+  return (int32_t*)_upb_array_resize_accessor(msg, UPB_SIZE(28, 32), len, UPB_TYPE_INT32, arena);
@@ -967,4 +618,3 @@ UPB_INLINE int32_t* validate_Int32Rules_resize_not_in(validate_Int32Rules* msg,
-UPB_INLINE bool validate_Int32Rules_add_not_in(validate_Int32Rules* msg,
-                                               int32_t val, upb_arena* arena) {
-  return _upb_array_append_accessor(msg, UPB_SIZE(28, 32), UPB_SIZE(4, 4),
-                                    UPB_TYPE_INT32, &val, arena);
+UPB_INLINE bool validate_Int32Rules_add_not_in(validate_Int32Rules *msg, int32_t val, upb_arena *arena) {
+  return _upb_array_append_accessor(msg, UPB_SIZE(28, 32), UPB_SIZE(4, 4), UPB_TYPE_INT32, &val,
+      arena);
@@ -973,2 +623 @@ UPB_INLINE validate_Int64Rules* validate_Int64Rules_new(upb_arena* arena) {
-  return (validate_Int64Rules*)_upb_msg_new(&validate_Int64Rules_msginit,
-                                            arena);
+  return (validate_Int64Rules *)_upb_msg_new(&validate_Int64Rules_msginit, arena);
@@ -976,2 +625 @@ UPB_INLINE validate_Int64Rules* validate_Int64Rules_new(upb_arena* arena) {
-UPB_INLINE validate_Int64Rules* validate_Int64Rules_parse(const char* buf,
-                                                          size_t size,
+UPB_INLINE validate_Int64Rules *validate_Int64Rules_parse(const char *buf, size_t size,
@@ -980,4 +628 @@ UPB_INLINE validate_Int64Rules* validate_Int64Rules_parse(const char* buf,
-  return (ret &&
-          upb_decode(buf, size, ret, &validate_Int64Rules_msginit, arena))
-             ? ret
-             : NULL;
+  return (ret && upb_decode(buf, size, ret, &validate_Int64Rules_msginit, arena)) ? ret : NULL;
@@ -985,2 +630 @@ UPB_INLINE validate_Int64Rules* validate_Int64Rules_parse(const char* buf,
-UPB_INLINE char* validate_Int64Rules_serialize(const validate_Int64Rules* msg,
-                                               upb_arena* arena, size_t* len) {
+UPB_INLINE char *validate_Int64Rules_serialize(const validate_Int64Rules *msg, upb_arena *arena, size_t *len) {
@@ -989,40 +633,13 @@ UPB_INLINE char* validate_Int64Rules_serialize(const validate_Int64Rules* msg,
-UPB_INLINE bool validate_Int64Rules_has_const(const validate_Int64Rules* msg) {
-  return _upb_has_field(msg, 1);
-}
-UPB_INLINE int64_t validate_Int64Rules_const(const validate_Int64Rules* msg) {
-  return UPB_FIELD_AT(msg, int64_t, UPB_SIZE(8, 8));
-}
-UPB_INLINE bool validate_Int64Rules_has_lt(const validate_Int64Rules* msg) {
-  return _upb_has_field(msg, 2);
-}
-UPB_INLINE int64_t validate_Int64Rules_lt(const validate_Int64Rules* msg) {
-  return UPB_FIELD_AT(msg, int64_t, UPB_SIZE(16, 16));
-}
-UPB_INLINE bool validate_Int64Rules_has_lte(const validate_Int64Rules* msg) {
-  return _upb_has_field(msg, 3);
-}
-UPB_INLINE int64_t validate_Int64Rules_lte(const validate_Int64Rules* msg) {
-  return UPB_FIELD_AT(msg, int64_t, UPB_SIZE(24, 24));
-}
-UPB_INLINE bool validate_Int64Rules_has_gt(const validate_Int64Rules* msg) {
-  return _upb_has_field(msg, 4);
-}
-UPB_INLINE int64_t validate_Int64Rules_gt(const validate_Int64Rules* msg) {
-  return UPB_FIELD_AT(msg, int64_t, UPB_SIZE(32, 32));
-}
-UPB_INLINE bool validate_Int64Rules_has_gte(const validate_Int64Rules* msg) {
-  return _upb_has_field(msg, 5);
-}
-UPB_INLINE int64_t validate_Int64Rules_gte(const validate_Int64Rules* msg) {
-  return UPB_FIELD_AT(msg, int64_t, UPB_SIZE(40, 40));
-}
-UPB_INLINE int64_t const* validate_Int64Rules_in(const validate_Int64Rules* msg,
-                                                 size_t* len) {
-  return (int64_t const*)_upb_array_accessor(msg, UPB_SIZE(48, 48), len);
-}
-UPB_INLINE int64_t const* validate_Int64Rules_not_in(
-    const validate_Int64Rules* msg, size_t* len) {
-  return (int64_t const*)_upb_array_accessor(msg, UPB_SIZE(52, 56), len);
-}
-UPB_INLINE void validate_Int64Rules_set_const(validate_Int64Rules* msg,
-                                              int64_t value) {
+UPB_INLINE bool validate_Int64Rules_has_const(const validate_Int64Rules *msg) { return _upb_has_field(msg, 1); }
+UPB_INLINE int64_t validate_Int64Rules_const(const validate_Int64Rules *msg) { return UPB_FIELD_AT(msg, int64_t, UPB_SIZE(8, 8)); }
+UPB_INLINE bool validate_Int64Rules_has_lt(const validate_Int64Rules *msg) { return _upb_has_field(msg, 2); }
+UPB_INLINE int64_t validate_Int64Rules_lt(const validate_Int64Rules *msg) { return UPB_FIELD_AT(msg, int64_t, UPB_SIZE(16, 16)); }
+UPB_INLINE bool validate_Int64Rules_has_lte(const validate_Int64Rules *msg) { return _upb_has_field(msg, 3); }
+UPB_INLINE int64_t validate_Int64Rules_lte(const validate_Int64Rules *msg) { return UPB_FIELD_AT(msg, int64_t, UPB_SIZE(24, 24)); }
+UPB_INLINE bool validate_Int64Rules_has_gt(const validate_Int64Rules *msg) { return _upb_has_field(msg, 4); }
+UPB_INLINE int64_t validate_Int64Rules_gt(const validate_Int64Rules *msg) { return UPB_FIELD_AT(msg, int64_t, UPB_SIZE(32, 32)); }
+UPB_INLINE bool validate_Int64Rules_has_gte(const validate_Int64Rules *msg) { return _upb_has_field(msg, 5); }
+UPB_INLINE int64_t validate_Int64Rules_gte(const validate_Int64Rules *msg) { return UPB_FIELD_AT(msg, int64_t, UPB_SIZE(40, 40)); }
+UPB_INLINE int64_t const* validate_Int64Rules_in(const validate_Int64Rules *msg, size_t *len) { return (int64_t const*)_upb_array_accessor(msg, UPB_SIZE(48, 48), len); }
+UPB_INLINE int64_t const* validate_Int64Rules_not_in(const validate_Int64Rules *msg, size_t *len) { return (int64_t const*)_upb_array_accessor(msg, UPB_SIZE(52, 56), len); }
+UPB_INLINE void validate_Int64Rules_set_const(validate_Int64Rules *msg, int64_t value) {
@@ -1032,2 +649 @@ UPB_INLINE void validate_Int64Rules_set_const(validate_Int64Rules* msg,
-UPB_INLINE void validate_Int64Rules_set_lt(validate_Int64Rules* msg,
-                                           int64_t value) {
+UPB_INLINE void validate_Int64Rules_set_lt(validate_Int64Rules *msg, int64_t value) {
@@ -1037,2 +653 @@ UPB_INLINE void validate_Int64Rules_set_lt(validate_Int64Rules* msg,
-UPB_INLINE void validate_Int64Rules_set_lte(validate_Int64Rules* msg,
-                                            int64_t value) {
+UPB_INLINE void validate_Int64Rules_set_lte(validate_Int64Rules *msg, int64_t value) {
@@ -1042,2 +657 @@ UPB_INLINE void validate_Int64Rules_set_lte(validate_Int64Rules* msg,
-UPB_INLINE void validate_Int64Rules_set_gt(validate_Int64Rules* msg,
-                                           int64_t value) {
+UPB_INLINE void validate_Int64Rules_set_gt(validate_Int64Rules *msg, int64_t value) {
@@ -1047,2 +661 @@ UPB_INLINE void validate_Int64Rules_set_gt(validate_Int64Rules* msg,
-UPB_INLINE void validate_Int64Rules_set_gte(validate_Int64Rules* msg,
-                                            int64_t value) {
+UPB_INLINE void validate_Int64Rules_set_gte(validate_Int64Rules *msg, int64_t value) {
@@ -1052,2 +665 @@ UPB_INLINE void validate_Int64Rules_set_gte(validate_Int64Rules* msg,
-UPB_INLINE int64_t* validate_Int64Rules_mutable_in(validate_Int64Rules* msg,
-                                                   size_t* len) {
+UPB_INLINE int64_t* validate_Int64Rules_mutable_in(validate_Int64Rules *msg, size_t *len) {
@@ -1056,5 +668,2 @@ UPB_INLINE int64_t* validate_Int64Rules_mutable_in(validate_Int64Rules* msg,
-UPB_INLINE int64_t* validate_Int64Rules_resize_in(validate_Int64Rules* msg,
-                                                  size_t len,
-                                                  upb_arena* arena) {
-  return (int64_t*)_upb_array_resize_accessor(msg, UPB_SIZE(48, 48), len,
-                                              UPB_TYPE_INT64, arena);
+UPB_INLINE int64_t* validate_Int64Rules_resize_in(validate_Int64Rules *msg, size_t len, upb_arena *arena) {
+  return (int64_t*)_upb_array_resize_accessor(msg, UPB_SIZE(48, 48), len, UPB_TYPE_INT64, arena);
@@ -1062,4 +671,3 @@ UPB_INLINE int64_t* validate_Int64Rules_resize_in(validate_Int64Rules* msg,
-UPB_INLINE bool validate_Int64Rules_add_in(validate_Int64Rules* msg,
-                                           int64_t val, upb_arena* arena) {
-  return _upb_array_append_accessor(msg, UPB_SIZE(48, 48), UPB_SIZE(8, 8),
-                                    UPB_TYPE_INT64, &val, arena);
+UPB_INLINE bool validate_Int64Rules_add_in(validate_Int64Rules *msg, int64_t val, upb_arena *arena) {
+  return _upb_array_append_accessor(msg, UPB_SIZE(48, 48), UPB_SIZE(8, 8), UPB_TYPE_INT64, &val,
+      arena);
@@ -1067,2 +675 @@ UPB_INLINE bool validate_Int64Rules_add_in(validate_Int64Rules* msg,
-UPB_INLINE int64_t* validate_Int64Rules_mutable_not_in(validate_Int64Rules* msg,
-                                                       size_t* len) {
+UPB_INLINE int64_t* validate_Int64Rules_mutable_not_in(validate_Int64Rules *msg, size_t *len) {
@@ -1071,5 +678,2 @@ UPB_INLINE int64_t* validate_Int64Rules_mutable_not_in(validate_Int64Rules* msg,
-UPB_INLINE int64_t* validate_Int64Rules_resize_not_in(validate_Int64Rules* msg,
-                                                      size_t len,
-                                                      upb_arena* arena) {
-  return (int64_t*)_upb_array_resize_accessor(msg, UPB_SIZE(52, 56), len,
-                                              UPB_TYPE_INT64, arena);
+UPB_INLINE int64_t* validate_Int64Rules_resize_not_in(validate_Int64Rules *msg, size_t len, upb_arena *arena) {
+  return (int64_t*)_upb_array_resize_accessor(msg, UPB_SIZE(52, 56), len, UPB_TYPE_INT64, arena);
@@ -1077,4 +681,3 @@ UPB_INLINE int64_t* validate_Int64Rules_resize_not_in(validate_Int64Rules* msg,
-UPB_INLINE bool validate_Int64Rules_add_not_in(validate_Int64Rules* msg,
-                                               int64_t val, upb_arena* arena) {
-  return _upb_array_append_accessor(msg, UPB_SIZE(52, 56), UPB_SIZE(8, 8),
-                                    UPB_TYPE_INT64, &val, arena);
+UPB_INLINE bool validate_Int64Rules_add_not_in(validate_Int64Rules *msg, int64_t val, upb_arena *arena) {
+  return _upb_array_append_accessor(msg, UPB_SIZE(52, 56), UPB_SIZE(8, 8), UPB_TYPE_INT64, &val,
+      arena);
@@ -1083,2 +686 @@ UPB_INLINE validate_UInt32Rules* validate_UInt32Rules_new(upb_arena* arena) {
-  return (validate_UInt32Rules*)_upb_msg_new(&validate_UInt32Rules_msginit,
-                                             arena);
+  return (validate_UInt32Rules *)_upb_msg_new(&validate_UInt32Rules_msginit, arena);
@@ -1086,2 +688 @@ UPB_INLINE validate_UInt32Rules* validate_UInt32Rules_new(upb_arena* arena) {
-UPB_INLINE validate_UInt32Rules* validate_UInt32Rules_parse(const char* buf,
-                                                            size_t size,
+UPB_INLINE validate_UInt32Rules *validate_UInt32Rules_parse(const char *buf, size_t size,
@@ -1090,4 +691 @@ UPB_INLINE validate_UInt32Rules* validate_UInt32Rules_parse(const char* buf,
-  return (ret &&
-          upb_decode(buf, size, ret, &validate_UInt32Rules_msginit, arena))
-             ? ret
-             : NULL;
+  return (ret && upb_decode(buf, size, ret, &validate_UInt32Rules_msginit, arena)) ? ret : NULL;
@@ -1095,2 +693 @@ UPB_INLINE validate_UInt32Rules* validate_UInt32Rules_parse(const char* buf,
-UPB_INLINE char* validate_UInt32Rules_serialize(const validate_UInt32Rules* msg,
-                                                upb_arena* arena, size_t* len) {
+UPB_INLINE char *validate_UInt32Rules_serialize(const validate_UInt32Rules *msg, upb_arena *arena, size_t *len) {
@@ -1099,42 +696,13 @@ UPB_INLINE char* validate_UInt32Rules_serialize(const validate_UInt32Rules* msg,
-UPB_INLINE bool validate_UInt32Rules_has_const(
-    const validate_UInt32Rules* msg) {
-  return _upb_has_field(msg, 1);
-}
-UPB_INLINE uint32_t
-validate_UInt32Rules_const(const validate_UInt32Rules* msg) {
-  return UPB_FIELD_AT(msg, uint32_t, UPB_SIZE(4, 4));
-}
-UPB_INLINE bool validate_UInt32Rules_has_lt(const validate_UInt32Rules* msg) {
-  return _upb_has_field(msg, 2);
-}
-UPB_INLINE uint32_t validate_UInt32Rules_lt(const validate_UInt32Rules* msg) {
-  return UPB_FIELD_AT(msg, uint32_t, UPB_SIZE(8, 8));
-}
-UPB_INLINE bool validate_UInt32Rules_has_lte(const validate_UInt32Rules* msg) {
-  return _upb_has_field(msg, 3);
-}
-UPB_INLINE uint32_t validate_UInt32Rules_lte(const validate_UInt32Rules* msg) {
-  return UPB_FIELD_AT(msg, uint32_t, UPB_SIZE(12, 12));
-}
-UPB_INLINE bool validate_UInt32Rules_has_gt(const validate_UInt32Rules* msg) {
-  return _upb_has_field(msg, 4);
-}
-UPB_INLINE uint32_t validate_UInt32Rules_gt(const validate_UInt32Rules* msg) {
-  return UPB_FIELD_AT(msg, uint32_t, UPB_SIZE(16, 16));
-}
-UPB_INLINE bool validate_UInt32Rules_has_gte(const validate_UInt32Rules* msg) {
-  return _upb_has_field(msg, 5);
-}
-UPB_INLINE uint32_t validate_UInt32Rules_gte(const validate_UInt32Rules* msg) {
-  return UPB_FIELD_AT(msg, uint32_t, UPB_SIZE(20, 20));
-}
-UPB_INLINE uint32_t const* validate_UInt32Rules_in(
-    const validate_UInt32Rules* msg, size_t* len) {
-  return (uint32_t const*)_upb_array_accessor(msg, UPB_SIZE(24, 24), len);
-}
-UPB_INLINE uint32_t const* validate_UInt32Rules_not_in(
-    const validate_UInt32Rules* msg, size_t* len) {
-  return (uint32_t const*)_upb_array_accessor(msg, UPB_SIZE(28, 32), len);
-}
-UPB_INLINE void validate_UInt32Rules_set_const(validate_UInt32Rules* msg,
-                                               uint32_t value) {
+UPB_INLINE bool validate_UInt32Rules_has_const(const validate_UInt32Rules *msg) { return _upb_has_field(msg, 1); }
+UPB_INLINE uint32_t validate_UInt32Rules_const(const validate_UInt32Rules *msg) { return UPB_FIELD_AT(msg, uint32_t, UPB_SIZE(4, 4)); }
+UPB_INLINE bool validate_UInt32Rules_has_lt(const validate_UInt32Rules *msg) { return _upb_has_field(msg, 2); }
+UPB_INLINE uint32_t validate_UInt32Rules_lt(const validate_UInt32Rules *msg) { return UPB_FIELD_AT(msg, uint32_t, UPB_SIZE(8, 8)); }
+UPB_INLINE bool validate_UInt32Rules_has_lte(const validate_UInt32Rules *msg) { return _upb_has_field(msg, 3); }
+UPB_INLINE uint32_t validate_UInt32Rules_lte(const validate_UInt32Rules *msg) { return UPB_FIELD_AT(msg, uint32_t, UPB_SIZE(12, 12)); }
+UPB_INLINE bool validate_UInt32Rules_has_gt(const validate_UInt32Rules *msg) { return _upb_has_field(msg, 4); }
+UPB_INLINE uint32_t validate_UInt32Rules_gt(const validate_UInt32Rules *msg) { return UPB_FIELD_AT(msg, uint32_t, UPB_SIZE(16, 16)); }
+UPB_INLINE bool validate_UInt32Rules_has_gte(const validate_UInt32Rules *msg) { return _upb_has_field(msg, 5); }
+UPB_INLINE uint32_t validate_UInt32Rules_gte(const validate_UInt32Rules *msg) { return UPB_FIELD_AT(msg, uint32_t, UPB_SIZE(20, 20)); }
+UPB_INLINE uint32_t const* validate_UInt32Rules_in(const validate_UInt32Rules *msg, size_t *len) { return (uint32_t const*)_upb_array_accessor(msg, UPB_SIZE(24, 24), len); }
+UPB_INLINE uint32_t const* validate_UInt32Rules_not_in(const validate_UInt32Rules *msg, size_t *len) { return (uint32_t const*)_upb_array_accessor(msg, UPB_SIZE(28, 32), len); }
+UPB_INLINE void validate_UInt32Rules_set_const(validate_UInt32Rules *msg, uint32_t value) {
@@ -1144,2 +712 @@ UPB_INLINE void validate_UInt32Rules_set_const(validate_UInt32Rules* msg,
-UPB_INLINE void validate_UInt32Rules_set_lt(validate_UInt32Rules* msg,
-                                            uint32_t value) {
+UPB_INLINE void validate_UInt32Rules_set_lt(validate_UInt32Rules *msg, uint32_t value) {
@@ -1149,2 +716 @@ UPB_INLINE void validate_UInt32Rules_set_lt(validate_UInt32Rules* msg,
-UPB_INLINE void validate_UInt32Rules_set_lte(validate_UInt32Rules* msg,
-                                             uint32_t value) {
+UPB_INLINE void validate_UInt32Rules_set_lte(validate_UInt32Rules *msg, uint32_t value) {
@@ -1154,2 +720 @@ UPB_INLINE void validate_UInt32Rules_set_lte(validate_UInt32Rules* msg,
-UPB_INLINE void validate_UInt32Rules_set_gt(validate_UInt32Rules* msg,
-                                            uint32_t value) {
+UPB_INLINE void validate_UInt32Rules_set_gt(validate_UInt32Rules *msg, uint32_t value) {
@@ -1159,2 +724 @@ UPB_INLINE void validate_UInt32Rules_set_gt(validate_UInt32Rules* msg,
-UPB_INLINE void validate_UInt32Rules_set_gte(validate_UInt32Rules* msg,
-                                             uint32_t value) {
+UPB_INLINE void validate_UInt32Rules_set_gte(validate_UInt32Rules *msg, uint32_t value) {
@@ -1164,2 +728 @@ UPB_INLINE void validate_UInt32Rules_set_gte(validate_UInt32Rules* msg,
-UPB_INLINE uint32_t* validate_UInt32Rules_mutable_in(validate_UInt32Rules* msg,
-                                                     size_t* len) {
+UPB_INLINE uint32_t* validate_UInt32Rules_mutable_in(validate_UInt32Rules *msg, size_t *len) {
@@ -1168,5 +731,2 @@ UPB_INLINE uint32_t* validate_UInt32Rules_mutable_in(validate_UInt32Rules* msg,
-UPB_INLINE uint32_t* validate_UInt32Rules_resize_in(validate_UInt32Rules* msg,
-                                                    size_t len,
-                                                    upb_arena* arena) {
-  return (uint32_t*)_upb_array_resize_accessor(msg, UPB_SIZE(24, 24), len,
-                                               UPB_TYPE_UINT32, arena);
+UPB_INLINE uint32_t* validate_UInt32Rules_resize_in(validate_UInt32Rules *msg, size_t len, upb_arena *arena) {
+  return (uint32_t*)_upb_array_resize_accessor(msg, UPB_SIZE(24, 24), len, UPB_TYPE_UINT32, arena);
@@ -1174,4 +734,3 @@ UPB_INLINE uint32_t* validate_UInt32Rules_resize_in(validate_UInt32Rules* msg,
-UPB_INLINE bool validate_UInt32Rules_add_in(validate_UInt32Rules* msg,
-                                            uint32_t val, upb_arena* arena) {
-  return _upb_array_append_accessor(msg, UPB_SIZE(24, 24), UPB_SIZE(4, 4),
-                                    UPB_TYPE_UINT32, &val, arena);
+UPB_INLINE bool validate_UInt32Rules_add_in(validate_UInt32Rules *msg, uint32_t val, upb_arena *arena) {
+  return _upb_array_append_accessor(msg, UPB_SIZE(24, 24), UPB_SIZE(4, 4), UPB_TYPE_UINT32, &val,
+      arena);
@@ -1179,2 +738 @@ UPB_INLINE bool validate_UInt32Rules_add_in(validate_UInt32Rules* msg,
-UPB_INLINE uint32_t* validate_UInt32Rules_mutable_not_in(
-    validate_UInt32Rules* msg, size_t* len) {
+UPB_INLINE uint32_t* validate_UInt32Rules_mutable_not_in(validate_UInt32Rules *msg, size_t *len) {
@@ -1183,4 +741,2 @@ UPB_INLINE uint32_t* validate_UInt32Rules_mutable_not_in(
-UPB_INLINE uint32_t* validate_UInt32Rules_resize_not_in(
-    validate_UInt32Rules* msg, size_t len, upb_arena* arena) {
-  return (uint32_t*)_upb_array_resize_accessor(msg, UPB_SIZE(28, 32), len,
-                                               UPB_TYPE_UINT32, arena);
+UPB_INLINE uint32_t* validate_UInt32Rules_resize_not_in(validate_UInt32Rules *msg, size_t len, upb_arena *arena) {
+  return (uint32_t*)_upb_array_resize_accessor(msg, UPB_SIZE(28, 32), len, UPB_TYPE_UINT32, arena);
@@ -1188,5 +744,3 @@ UPB_INLINE uint32_t* validate_UInt32Rules_resize_not_in(
-UPB_INLINE bool validate_UInt32Rules_add_not_in(validate_UInt32Rules* msg,
-                                                uint32_t val,
-                                                upb_arena* arena) {
-  return _upb_array_append_accessor(msg, UPB_SIZE(28, 32), UPB_SIZE(4, 4),
-                                    UPB_TYPE_UINT32, &val, arena);
+UPB_INLINE bool validate_UInt32Rules_add_not_in(validate_UInt32Rules *msg, uint32_t val, upb_arena *arena) {
+  return _upb_array_append_accessor(msg, UPB_SIZE(28, 32), UPB_SIZE(4, 4), UPB_TYPE_UINT32, &val,
+      arena);
@@ -1195,2 +749 @@ UPB_INLINE validate_UInt64Rules* validate_UInt64Rules_new(upb_arena* arena) {
-  return (validate_UInt64Rules*)_upb_msg_new(&validate_UInt64Rules_msginit,
-                                             arena);
+  return (validate_UInt64Rules *)_upb_msg_new(&validate_UInt64Rules_msginit, arena);
@@ -1198,2 +751 @@ UPB_INLINE validate_UInt64Rules* validate_UInt64Rules_new(upb_arena* arena) {
-UPB_INLINE validate_UInt64Rules* validate_UInt64Rules_parse(const char* buf,
-                                                            size_t size,
+UPB_INLINE validate_UInt64Rules *validate_UInt64Rules_parse(const char *buf, size_t size,
@@ -1202,4 +754 @@ UPB_INLINE validate_UInt64Rules* validate_UInt64Rules_parse(const char* buf,
-  return (ret &&
-          upb_decode(buf, size, ret, &validate_UInt64Rules_msginit, arena))
-             ? ret
-             : NULL;
+  return (ret && upb_decode(buf, size, ret, &validate_UInt64Rules_msginit, arena)) ? ret : NULL;
@@ -1207,2 +756 @@ UPB_INLINE validate_UInt64Rules* validate_UInt64Rules_parse(const char* buf,
-UPB_INLINE char* validate_UInt64Rules_serialize(const validate_UInt64Rules* msg,
-                                                upb_arena* arena, size_t* len) {
+UPB_INLINE char *validate_UInt64Rules_serialize(const validate_UInt64Rules *msg, upb_arena *arena, size_t *len) {
@@ -1211,42 +759,13 @@ UPB_INLINE char* validate_UInt64Rules_serialize(const validate_UInt64Rules* msg,
-UPB_INLINE bool validate_UInt64Rules_has_const(
-    const validate_UInt64Rules* msg) {
-  return _upb_has_field(msg, 1);
-}
-UPB_INLINE uint64_t
-validate_UInt64Rules_const(const validate_UInt64Rules* msg) {
-  return UPB_FIELD_AT(msg, uint64_t, UPB_SIZE(8, 8));
-}
-UPB_INLINE bool validate_UInt64Rules_has_lt(const validate_UInt64Rules* msg) {
-  return _upb_has_field(msg, 2);
-}
-UPB_INLINE uint64_t validate_UInt64Rules_lt(const validate_UInt64Rules* msg) {
-  return UPB_FIELD_AT(msg, uint64_t, UPB_SIZE(16, 16));
-}
-UPB_INLINE bool validate_UInt64Rules_has_lte(const validate_UInt64Rules* msg) {
-  return _upb_has_field(msg, 3);
-}
-UPB_INLINE uint64_t validate_UInt64Rules_lte(const validate_UInt64Rules* msg) {
-  return UPB_FIELD_AT(msg, uint64_t, UPB_SIZE(24, 24));
-}
-UPB_INLINE bool validate_UInt64Rules_has_gt(const validate_UInt64Rules* msg) {
-  return _upb_has_field(msg, 4);
-}
-UPB_INLINE uint64_t validate_UInt64Rules_gt(const validate_UInt64Rules* msg) {
-  return UPB_FIELD_AT(msg, uint64_t, UPB_SIZE(32, 32));
-}
-UPB_INLINE bool validate_UInt64Rules_has_gte(const validate_UInt64Rules* msg) {
-  return _upb_has_field(msg, 5);
-}
-UPB_INLINE uint64_t validate_UInt64Rules_gte(const validate_UInt64Rules* msg) {
-  return UPB_FIELD_AT(msg, uint64_t, UPB_SIZE(40, 40));
-}
-UPB_INLINE uint64_t const* validate_UInt64Rules_in(
-    const validate_UInt64Rules* msg, size_t* len) {
-  return (uint64_t const*)_upb_array_accessor(msg, UPB_SIZE(48, 48), len);
-}
-UPB_INLINE uint64_t const* validate_UInt64Rules_not_in(
-    const validate_UInt64Rules* msg, size_t* len) {
-  return (uint64_t const*)_upb_array_accessor(msg, UPB_SIZE(52, 56), len);
-}
-UPB_INLINE void validate_UInt64Rules_set_const(validate_UInt64Rules* msg,
-                                               uint64_t value) {
+UPB_INLINE bool validate_UInt64Rules_has_const(const validate_UInt64Rules *msg) { return _upb_has_field(msg, 1); }
+UPB_INLINE uint64_t validate_UInt64Rules_const(const validate_UInt64Rules *msg) { return UPB_FIELD_AT(msg, uint64_t, UPB_SIZE(8, 8)); }
+UPB_INLINE bool validate_UInt64Rules_has_lt(const validate_UInt64Rules *msg) { return _upb_has_field(msg, 2); }
+UPB_INLINE uint64_t validate_UInt64Rules_lt(const validate_UInt64Rules *msg) { return UPB_FIELD_AT(msg, uint64_t, UPB_SIZE(16, 16)); }
+UPB_INLINE bool validate_UInt64Rules_has_lte(const validate_UInt64Rules *msg) { return _upb_has_field(msg, 3); }
+UPB_INLINE uint64_t validate_UInt64Rules_lte(const validate_UInt64Rules *msg) { return UPB_FIELD_AT(msg, uint64_t, UPB_SIZE(24, 24)); }
+UPB_INLINE bool validate_UInt64Rules_has_gt(const validate_UInt64Rules *msg) { return _upb_has_field(msg, 4); }
+UPB_INLINE uint64_t validate_UInt64Rules_gt(const validate_UInt64Rules *msg) { return UPB_FIELD_AT(msg, uint64_t, UPB_SIZE(32, 32)); }
+UPB_INLINE bool validate_UInt64Rules_has_gte(const validate_UInt64Rules *msg) { return _upb_has_field(msg, 5); }
+UPB_INLINE uint64_t validate_UInt64Rules_gte(const validate_UInt64Rules *msg) { return UPB_FIELD_AT(msg, uint64_t, UPB_SIZE(40, 40)); }
+UPB_INLINE uint64_t const* validate_UInt64Rules_in(const validate_UInt64Rules *msg, size_t *len) { return (uint64_t const*)_upb_array_accessor(msg, UPB_SIZE(48, 48), len); }
+UPB_INLINE uint64_t const* validate_UInt64Rules_not_in(const validate_UInt64Rules *msg, size_t *len) { return (uint64_t const*)_upb_array_accessor(msg, UPB_SIZE(52, 56), len); }
+UPB_INLINE void validate_UInt64Rules_set_const(validate_UInt64Rules *msg, uint64_t value) {
@@ -1256,2 +775 @@ UPB_INLINE void validate_UInt64Rules_set_const(validate_UInt64Rules* msg,
-UPB_INLINE void validate_UInt64Rules_set_lt(validate_UInt64Rules* msg,
-                                            uint64_t value) {
+UPB_INLINE void validate_UInt64Rules_set_lt(validate_UInt64Rules *msg, uint64_t value) {
@@ -1261,2 +779 @@ UPB_INLINE void validate_UInt64Rules_set_lt(validate_UInt64Rules* msg,
-UPB_INLINE void validate_UInt64Rules_set_lte(validate_UInt64Rules* msg,
-                                             uint64_t value) {
+UPB_INLINE void validate_UInt64Rules_set_lte(validate_UInt64Rules *msg, uint64_t value) {
@@ -1266,2 +783 @@ UPB_INLINE void validate_UInt64Rules_set_lte(validate_UInt64Rules* msg,
-UPB_INLINE void validate_UInt64Rules_set_gt(validate_UInt64Rules* msg,
-                                            uint64_t value) {
+UPB_INLINE void validate_UInt64Rules_set_gt(validate_UInt64Rules *msg, uint64_t value) {
@@ -1271,2 +787 @@ UPB_INLINE void validate_UInt64Rules_set_gt(validate_UInt64Rules* msg,
-UPB_INLINE void validate_UInt64Rules_set_gte(validate_UInt64Rules* msg,
-                                             uint64_t value) {
+UPB_INLINE void validate_UInt64Rules_set_gte(validate_UInt64Rules *msg, uint64_t value) {
@@ -1276,2 +791 @@ UPB_INLINE void validate_UInt64Rules_set_gte(validate_UInt64Rules* msg,
-UPB_INLINE uint64_t* validate_UInt64Rules_mutable_in(validate_UInt64Rules* msg,
-                                                     size_t* len) {
+UPB_INLINE uint64_t* validate_UInt64Rules_mutable_in(validate_UInt64Rules *msg, size_t *len) {
@@ -1280,5 +794,2 @@ UPB_INLINE uint64_t* validate_UInt64Rules_mutable_in(validate_UInt64Rules* msg,
-UPB_INLINE uint64_t* validate_UInt64Rules_resize_in(validate_UInt64Rules* msg,
-                                                    size_t len,
-                                                    upb_arena* arena) {
-  return (uint64_t*)_upb_array_resize_accessor(msg, UPB_SIZE(48, 48), len,
-                                               UPB_TYPE_UINT64, arena);
+UPB_INLINE uint64_t* validate_UInt64Rules_resize_in(validate_UInt64Rules *msg, size_t len, upb_arena *arena) {
+  return (uint64_t*)_upb_array_resize_accessor(msg, UPB_SIZE(48, 48), len, UPB_TYPE_UINT64, arena);
@@ -1286,4 +797,3 @@ UPB_INLINE uint64_t* validate_UInt64Rules_resize_in(validate_UInt64Rules* msg,
-UPB_INLINE bool validate_UInt64Rules_add_in(validate_UInt64Rules* msg,
-                                            uint64_t val, upb_arena* arena) {
-  return _upb_array_append_accessor(msg, UPB_SIZE(48, 48), UPB_SIZE(8, 8),
-                                    UPB_TYPE_UINT64, &val, arena);
+UPB_INLINE bool validate_UInt64Rules_add_in(validate_UInt64Rules *msg, uint64_t val, upb_arena *arena) {
+  return _upb_array_append_accessor(msg, UPB_SIZE(48, 48), UPB_SIZE(8, 8), UPB_TYPE_UINT64, &val,
+      arena);
@@ -1291,2 +801 @@ UPB_INLINE bool validate_UInt64Rules_add_in(validate_UInt64Rules* msg,
-UPB_INLINE uint64_t* validate_UInt64Rules_mutable_not_in(
-    validate_UInt64Rules* msg, size_t* len) {
+UPB_INLINE uint64_t* validate_UInt64Rules_mutable_not_in(validate_UInt64Rules *msg, size_t *len) {
@@ -1295,4 +804,2 @@ UPB_INLINE uint64_t* validate_UInt64Rules_mutable_not_in(
-UPB_INLINE uint64_t* validate_UInt64Rules_resize_not_in(
-    validate_UInt64Rules* msg, size_t len, upb_arena* arena) {
-  return (uint64_t*)_upb_array_resize_accessor(msg, UPB_SIZE(52, 56), len,
-                                               UPB_TYPE_UINT64, arena);
+UPB_INLINE uint64_t* validate_UInt64Rules_resize_not_in(validate_UInt64Rules *msg, size_t len, upb_arena *arena) {
+  return (uint64_t*)_upb_array_resize_accessor(msg, UPB_SIZE(52, 56), len, UPB_TYPE_UINT64, arena);
@@ -1300,5 +807,3 @@ UPB_INLINE uint64_t* validate_UInt64Rules_resize_not_in(
-UPB_INLINE bool validate_UInt64Rules_add_not_in(validate_UInt64Rules* msg,
-                                                uint64_t val,
-                                                upb_arena* arena) {
-  return _upb_array_append_accessor(msg, UPB_SIZE(52, 56), UPB_SIZE(8, 8),
-                                    UPB_TYPE_UINT64, &val, arena);
+UPB_INLINE bool validate_UInt64Rules_add_not_in(validate_UInt64Rules *msg, uint64_t val, upb_arena *arena) {
+  return _upb_array_append_accessor(msg, UPB_SIZE(52, 56), UPB_SIZE(8, 8), UPB_TYPE_UINT64, &val,
+      arena);
@@ -1307,2 +812 @@ UPB_INLINE validate_SInt32Rules* validate_SInt32Rules_new(upb_arena* arena) {
-  return (validate_SInt32Rules*)_upb_msg_new(&validate_SInt32Rules_msginit,
-                                             arena);
+  return (validate_SInt32Rules *)_upb_msg_new(&validate_SInt32Rules_msginit, arena);
@@ -1310,2 +814 @@ UPB_INLINE validate_SInt32Rules* validate_SInt32Rules_new(upb_arena* arena) {
-UPB_INLINE validate_SInt32Rules* validate_SInt32Rules_parse(const char* buf,
-                                                            size_t size,
+UPB_INLINE validate_SInt32Rules *validate_SInt32Rules_parse(const char *buf, size_t size,
@@ -1314,4 +817 @@ UPB_INLINE validate_SInt32Rules* validate_SInt32Rules_parse(const char* buf,
-  return (ret &&
-          upb_decode(buf, size, ret, &validate_SInt32Rules_msginit, arena))
-             ? ret
-             : NULL;
+  return (ret && upb_decode(buf, size, ret, &validate_SInt32Rules_msginit, arena)) ? ret : NULL;
@@ -1319,2 +819 @@ UPB_INLINE validate_SInt32Rules* validate_SInt32Rules_parse(const char* buf,
-UPB_INLINE char* validate_SInt32Rules_serialize(const validate_SInt32Rules* msg,
-                                                upb_arena* arena, size_t* len) {
+UPB_INLINE char *validate_SInt32Rules_serialize(const validate_SInt32Rules *msg, upb_arena *arena, size_t *len) {
@@ -1323,41 +822,13 @@ UPB_INLINE char* validate_SInt32Rules_serialize(const validate_SInt32Rules* msg,
-UPB_INLINE bool validate_SInt32Rules_has_const(
-    const validate_SInt32Rules* msg) {
-  return _upb_has_field(msg, 1);
-}
-UPB_INLINE int32_t validate_SInt32Rules_const(const validate_SInt32Rules* msg) {
-  return UPB_FIELD_AT(msg, int32_t, UPB_SIZE(4, 4));
-}
-UPB_INLINE bool validate_SInt32Rules_has_lt(const validate_SInt32Rules* msg) {
-  return _upb_has_field(msg, 2);
-}
-UPB_INLINE int32_t validate_SInt32Rules_lt(const validate_SInt32Rules* msg) {
-  return UPB_FIELD_AT(msg, int32_t, UPB_SIZE(8, 8));
-}
-UPB_INLINE bool validate_SInt32Rules_has_lte(const validate_SInt32Rules* msg) {
-  return _upb_has_field(msg, 3);
-}
-UPB_INLINE int32_t validate_SInt32Rules_lte(const validate_SInt32Rules* msg) {
-  return UPB_FIELD_AT(msg, int32_t, UPB_SIZE(12, 12));
-}
-UPB_INLINE bool validate_SInt32Rules_has_gt(const validate_SInt32Rules* msg) {
-  return _upb_has_field(msg, 4);
-}
-UPB_INLINE int32_t validate_SInt32Rules_gt(const validate_SInt32Rules* msg) {
-  return UPB_FIELD_AT(msg, int32_t, UPB_SIZE(16, 16));
-}
-UPB_INLINE bool validate_SInt32Rules_has_gte(const validate_SInt32Rules* msg) {
-  return _upb_has_field(msg, 5);
-}
-UPB_INLINE int32_t validate_SInt32Rules_gte(const validate_SInt32Rules* msg) {
-  return UPB_FIELD_AT(msg, int32_t, UPB_SIZE(20, 20));
-}
-UPB_INLINE int32_t const* validate_SInt32Rules_in(
-    const validate_SInt32Rules* msg, size_t* len) {
-  return (int32_t const*)_upb_array_accessor(msg, UPB_SIZE(24, 24), len);
-}
-UPB_INLINE int32_t const* validate_SInt32Rules_not_in(
-    const validate_SInt32Rules* msg, size_t* len) {
-  return (int32_t const*)_upb_array_accessor(msg, UPB_SIZE(28, 32), len);
-}
-UPB_INLINE void validate_SInt32Rules_set_const(validate_SInt32Rules* msg,
-                                               int32_t value) {
+UPB_INLINE bool validate_SInt32Rules_has_const(const validate_SInt32Rules *msg) { return _upb_has_field(msg, 1); }
+UPB_INLINE int32_t validate_SInt32Rules_const(const validate_SInt32Rules *msg) { return UPB_FIELD_AT(msg, int32_t, UPB_SIZE(4, 4)); }
+UPB_INLINE bool validate_SInt32Rules_has_lt(const validate_SInt32Rules *msg) { return _upb_has_field(msg, 2); }
+UPB_INLINE int32_t validate_SInt32Rules_lt(const validate_SInt32Rules *msg) { return UPB_FIELD_AT(msg, int32_t, UPB_SIZE(8, 8)); }
+UPB_INLINE bool validate_SInt32Rules_has_lte(const validate_SInt32Rules *msg) { return _upb_has_field(msg, 3); }
+UPB_INLINE int32_t validate_SInt32Rules_lte(const validate_SInt32Rules *msg) { return UPB_FIELD_AT(msg, int32_t, UPB_SIZE(12, 12)); }
+UPB_INLINE bool validate_SInt32Rules_has_gt(const validate_SInt32Rules *msg) { return _upb_has_field(msg, 4); }
+UPB_INLINE int32_t validate_SInt32Rules_gt(const validate_SInt32Rules *msg) { return UPB_FIELD_AT(msg, int32_t, UPB_SIZE(16, 16)); }
+UPB_INLINE bool validate_SInt32Rules_has_gte(const validate_SInt32Rules *msg) { return _upb_has_field(msg, 5); }
+UPB_INLINE int32_t validate_SInt32Rules_gte(const validate_SInt32Rules *msg) { return UPB_FIELD_AT(msg, int32_t, UPB_SIZE(20, 20)); }
+UPB_INLINE int32_t const* validate_SInt32Rules_in(const validate_SInt32Rules *msg, size_t *len) { return (int32_t const*)_upb_array_accessor(msg, UPB_SIZE(24, 24), len); }
+UPB_INLINE int32_t const* validate_SInt32Rules_not_in(const validate_SInt32Rules *msg, size_t *len) { return (int32_t const*)_upb_array_accessor(msg, UPB_SIZE(28, 32), len); }
+UPB_INLINE void validate_SInt32Rules_set_const(validate_SInt32Rules *msg, int32_t value) {
@@ -1367,2 +838 @@ UPB_INLINE void validate_SInt32Rules_set_const(validate_SInt32Rules* msg,
-UPB_INLINE void validate_SInt32Rules_set_lt(validate_SInt32Rules* msg,
-                                            int32_t value) {
+UPB_INLINE void validate_SInt32Rules_set_lt(validate_SInt32Rules *msg, int32_t value) {
@@ -1372,2 +842 @@ UPB_INLINE void validate_SInt32Rules_set_lt(validate_SInt32Rules* msg,
-UPB_INLINE void validate_SInt32Rules_set_lte(validate_SInt32Rules* msg,
-                                             int32_t value) {
+UPB_INLINE void validate_SInt32Rules_set_lte(validate_SInt32Rules *msg, int32_t value) {
@@ -1377,2 +846 @@ UPB_INLINE void validate_SInt32Rules_set_lte(validate_SInt32Rules* msg,
-UPB_INLINE void validate_SInt32Rules_set_gt(validate_SInt32Rules* msg,
-                                            int32_t value) {
+UPB_INLINE void validate_SInt32Rules_set_gt(validate_SInt32Rules *msg, int32_t value) {
@@ -1382,2 +850 @@ UPB_INLINE void validate_SInt32Rules_set_gt(validate_SInt32Rules* msg,
-UPB_INLINE void validate_SInt32Rules_set_gte(validate_SInt32Rules* msg,
-                                             int32_t value) {
+UPB_INLINE void validate_SInt32Rules_set_gte(validate_SInt32Rules *msg, int32_t value) {
@@ -1387,2 +854 @@ UPB_INLINE void validate_SInt32Rules_set_gte(validate_SInt32Rules* msg,
-UPB_INLINE int32_t* validate_SInt32Rules_mutable_in(validate_SInt32Rules* msg,
-                                                    size_t* len) {
+UPB_INLINE int32_t* validate_SInt32Rules_mutable_in(validate_SInt32Rules *msg, size_t *len) {
@@ -1391,5 +857,2 @@ UPB_INLINE int32_t* validate_SInt32Rules_mutable_in(validate_SInt32Rules* msg,
-UPB_INLINE int32_t* validate_SInt32Rules_resize_in(validate_SInt32Rules* msg,
-                                                   size_t len,
-                                                   upb_arena* arena) {
-  return (int32_t*)_upb_array_resize_accessor(msg, UPB_SIZE(24, 24), len,
-                                              UPB_TYPE_INT32, arena);
+UPB_INLINE int32_t* validate_SInt32Rules_resize_in(validate_SInt32Rules *msg, size_t len, upb_arena *arena) {
+  return (int32_t*)_upb_array_resize_accessor(msg, UPB_SIZE(24, 24), len, UPB_TYPE_INT32, arena);
@@ -1397,4 +860,3 @@ UPB_INLINE int32_t* validate_SInt32Rules_resize_in(validate_SInt32Rules* msg,
-UPB_INLINE bool validate_SInt32Rules_add_in(validate_SInt32Rules* msg,
-                                            int32_t val, upb_arena* arena) {
-  return _upb_array_append_accessor(msg, UPB_SIZE(24, 24), UPB_SIZE(4, 4),
-                                    UPB_TYPE_INT32, &val, arena);
+UPB_INLINE bool validate_SInt32Rules_add_in(validate_SInt32Rules *msg, int32_t val, upb_arena *arena) {
+  return _upb_array_append_accessor(msg, UPB_SIZE(24, 24), UPB_SIZE(4, 4), UPB_TYPE_INT32, &val,
+      arena);
@@ -1402,2 +864 @@ UPB_INLINE bool validate_SInt32Rules_add_in(validate_SInt32Rules* msg,
-UPB_INLINE int32_t* validate_SInt32Rules_mutable_not_in(
-    validate_SInt32Rules* msg, size_t* len) {
+UPB_INLINE int32_t* validate_SInt32Rules_mutable_not_in(validate_SInt32Rules *msg, size_t *len) {
@@ -1406,4 +867,2 @@ UPB_INLINE int32_t* validate_SInt32Rules_mutable_not_in(
-UPB_INLINE int32_t* validate_SInt32Rules_resize_not_in(
-    validate_SInt32Rules* msg, size_t len, upb_arena* arena) {
-  return (int32_t*)_upb_array_resize_accessor(msg, UPB_SIZE(28, 32), len,
-                                              UPB_TYPE_INT32, arena);
+UPB_INLINE int32_t* validate_SInt32Rules_resize_not_in(validate_SInt32Rules *msg, size_t len, upb_arena *arena) {
+  return (int32_t*)_upb_array_resize_accessor(msg, UPB_SIZE(28, 32), len, UPB_TYPE_INT32, arena);
@@ -1411,4 +870,3 @@ UPB_INLINE int32_t* validate_SInt32Rules_resize_not_in(
-UPB_INLINE bool validate_SInt32Rules_add_not_in(validate_SInt32Rules* msg,
-                                                int32_t val, upb_arena* arena) {
-  return _upb_array_append_accessor(msg, UPB_SIZE(28, 32), UPB_SIZE(4, 4),
-                                    UPB_TYPE_INT32, &val, arena);
+UPB_INLINE bool validate_SInt32Rules_add_not_in(validate_SInt32Rules *msg, int32_t val, upb_arena *arena) {
+  return _upb_array_append_accessor(msg, UPB_SIZE(28, 32), UPB_SIZE(4, 4), UPB_TYPE_INT32, &val,
+      arena);
@@ -1417,2 +875 @@ UPB_INLINE validate_SInt64Rules* validate_SInt64Rules_new(upb_arena* arena) {
-  return (validate_SInt64Rules*)_upb_msg_new(&validate_SInt64Rules_msginit,
-                                             arena);
+  return (validate_SInt64Rules *)_upb_msg_new(&validate_SInt64Rules_msginit, arena);
@@ -1420,2 +877 @@ UPB_INLINE validate_SInt64Rules* validate_SInt64Rules_new(upb_arena* arena) {
-UPB_INLINE validate_SInt64Rules* validate_SInt64Rules_parse(const char* buf,
-                                                            size_t size,
+UPB_INLINE validate_SInt64Rules *validate_SInt64Rules_parse(const char *buf, size_t size,
@@ -1424,4 +880 @@ UPB_INLINE validate_SInt64Rules* validate_SInt64Rules_parse(const char* buf,
-  return (ret &&
-          upb_decode(buf, size, ret, &validate_SInt64Rules_msginit, arena))
-             ? ret
-             : NULL;
+  return (ret && upb_decode(buf, size, ret, &validate_SInt64Rules_msginit, arena)) ? ret : NULL;
@@ -1429,2 +882 @@ UPB_INLINE validate_SInt64Rules* validate_SInt64Rules_parse(const char* buf,
-UPB_INLINE char* validate_SInt64Rules_serialize(const validate_SInt64Rules* msg,
-                                                upb_arena* arena, size_t* len) {
+UPB_INLINE char *validate_SInt64Rules_serialize(const validate_SInt64Rules *msg, upb_arena *arena, size_t *len) {
@@ -1433,41 +885,13 @@ UPB_INLINE char* validate_SInt64Rules_serialize(const validate_SInt64Rules* msg,
-UPB_INLINE bool validate_SInt64Rules_has_const(
-    const validate_SInt64Rules* msg) {
-  return _upb_has_field(msg, 1);
-}
-UPB_INLINE int64_t validate_SInt64Rules_const(const validate_SInt64Rules* msg) {
-  return UPB_FIELD_AT(msg, int64_t, UPB_SIZE(8, 8));
-}
-UPB_INLINE bool validate_SInt64Rules_has_lt(const validate_SInt64Rules* msg) {
-  return _upb_has_field(msg, 2);
-}
-UPB_INLINE int64_t validate_SInt64Rules_lt(const validate_SInt64Rules* msg) {
-  return UPB_FIELD_AT(msg, int64_t, UPB_SIZE(16, 16));
-}
-UPB_INLINE bool validate_SInt64Rules_has_lte(const validate_SInt64Rules* msg) {
-  return _upb_has_field(msg, 3);
-}
-UPB_INLINE int64_t validate_SInt64Rules_lte(const validate_SInt64Rules* msg) {
-  return UPB_FIELD_AT(msg, int64_t, UPB_SIZE(24, 24));
-}
-UPB_INLINE bool validate_SInt64Rules_has_gt(const validate_SInt64Rules* msg) {
-  return _upb_has_field(msg, 4);
-}
-UPB_INLINE int64_t validate_SInt64Rules_gt(const validate_SInt64Rules* msg) {
-  return UPB_FIELD_AT(msg, int64_t, UPB_SIZE(32, 32));
-}
-UPB_INLINE bool validate_SInt64Rules_has_gte(const validate_SInt64Rules* msg) {
-  return _upb_has_field(msg, 5);
-}
-UPB_INLINE int64_t validate_SInt64Rules_gte(const validate_SInt64Rules* msg) {
-  return UPB_FIELD_AT(msg, int64_t, UPB_SIZE(40, 40));
-}
-UPB_INLINE int64_t const* validate_SInt64Rules_in(
-    const validate_SInt64Rules* msg, size_t* len) {
-  return (int64_t const*)_upb_array_accessor(msg, UPB_SIZE(48, 48), len);
-}
-UPB_INLINE int64_t const* validate_SInt64Rules_not_in(
-    const validate_SInt64Rules* msg, size_t* len) {
-  return (int64_t const*)_upb_array_accessor(msg, UPB_SIZE(52, 56), len);
-}
-UPB_INLINE void validate_SInt64Rules_set_const(validate_SInt64Rules* msg,
-                                               int64_t value) {
+UPB_INLINE bool validate_SInt64Rules_has_const(const validate_SInt64Rules *msg) { return _upb_has_field(msg, 1); }
+UPB_INLINE int64_t validate_SInt64Rules_const(const validate_SInt64Rules *msg) { return UPB_FIELD_AT(msg, int64_t, UPB_SIZE(8, 8)); }
+UPB_INLINE bool validate_SInt64Rules_has_lt(const validate_SInt64Rules *msg) { return _upb_has_field(msg, 2); }
+UPB_INLINE int64_t validate_SInt64Rules_lt(const validate_SInt64Rules *msg) { return UPB_FIELD_AT(msg, int64_t, UPB_SIZE(16, 16)); }
+UPB_INLINE bool validate_SInt64Rules_has_lte(const validate_SInt64Rules *msg) { return _upb_has_field(msg, 3); }
+UPB_INLINE int64_t validate_SInt64Rules_lte(const validate_SInt64Rules *msg) { return UPB_FIELD_AT(msg, int64_t, UPB_SIZE(24, 24)); }
+UPB_INLINE bool validate_SInt64Rules_has_gt(const validate_SInt64Rules *msg) { return _upb_has_field(msg, 4); }
+UPB_INLINE int64_t validate_SInt64Rules_gt(const validate_SInt64Rules *msg) { return UPB_FIELD_AT(msg, int64_t, UPB_SIZE(32, 32)); }
+UPB_INLINE bool validate_SInt64Rules_has_gte(const validate_SInt64Rules *msg) { return _upb_has_field(msg, 5); }
+UPB_INLINE int64_t validate_SInt64Rules_gte(const validate_SInt64Rules *msg) { return UPB_FIELD_AT(msg, int64_t, UPB_SIZE(40, 40)); }
+UPB_INLINE int64_t const* validate_SInt64Rules_in(const validate_SInt64Rules *msg, size_t *len) { return (int64_t const*)_upb_array_accessor(msg, UPB_SIZE(48, 48), len); }
+UPB_INLINE int64_t const* validate_SInt64Rules_not_in(const validate_SInt64Rules *msg, size_t *len) { return (int64_t const*)_upb_array_accessor(msg, UPB_SIZE(52, 56), len); }
+UPB_INLINE void validate_SInt64Rules_set_const(validate_SInt64Rules *msg, int64_t value) {
@@ -1477,2 +901 @@ UPB_INLINE void validate_SInt64Rules_set_const(validate_SInt64Rules* msg,
-UPB_INLINE void validate_SInt64Rules_set_lt(validate_SInt64Rules* msg,
-                                            int64_t value) {
+UPB_INLINE void validate_SInt64Rules_set_lt(validate_SInt64Rules *msg, int64_t value) {
@@ -1482,2 +905 @@ UPB_INLINE void validate_SInt64Rules_set_lt(validate_SInt64Rules* msg,
-UPB_INLINE void validate_SInt64Rules_set_lte(validate_SInt64Rules* msg,
-                                             int64_t value) {
+UPB_INLINE void validate_SInt64Rules_set_lte(validate_SInt64Rules *msg, int64_t value) {
@@ -1487,2 +909 @@ UPB_INLINE void validate_SInt64Rules_set_lte(validate_SInt64Rules* msg,
-UPB_INLINE void validate_SInt64Rules_set_gt(validate_SInt64Rules* msg,
-                                            int64_t value) {
+UPB_INLINE void validate_SInt64Rules_set_gt(validate_SInt64Rules *msg, int64_t value) {
@@ -1492,2 +913 @@ UPB_INLINE void validate_SInt64Rules_set_gt(validate_SInt64Rules* msg,
-UPB_INLINE void validate_SInt64Rules_set_gte(validate_SInt64Rules* msg,
-                                             int64_t value) {
+UPB_INLINE void validate_SInt64Rules_set_gte(validate_SInt64Rules *msg, int64_t value) {
@@ -1497,2 +917 @@ UPB_INLINE void validate_SInt64Rules_set_gte(validate_SInt64Rules* msg,
-UPB_INLINE int64_t* validate_SInt64Rules_mutable_in(validate_SInt64Rules* msg,
-                                                    size_t* len) {
+UPB_INLINE int64_t* validate_SInt64Rules_mutable_in(validate_SInt64Rules *msg, size_t *len) {
@@ -1501,5 +920,2 @@ UPB_INLINE int64_t* validate_SInt64Rules_mutable_in(validate_SInt64Rules* msg,
-UPB_INLINE int64_t* validate_SInt64Rules_resize_in(validate_SInt64Rules* msg,
-                                                   size_t len,
-                                                   upb_arena* arena) {
-  return (int64_t*)_upb_array_resize_accessor(msg, UPB_SIZE(48, 48), len,
-                                              UPB_TYPE_INT64, arena);
+UPB_INLINE int64_t* validate_SInt64Rules_resize_in(validate_SInt64Rules *msg, size_t len, upb_arena *arena) {
+  return (int64_t*)_upb_array_resize_accessor(msg, UPB_SIZE(48, 48), len, UPB_TYPE_INT64, arena);
@@ -1507,4 +923,3 @@ UPB_INLINE int64_t* validate_SInt64Rules_resize_in(validate_SInt64Rules* msg,
-UPB_INLINE bool validate_SInt64Rules_add_in(validate_SInt64Rules* msg,
-                                            int64_t val, upb_arena* arena) {
-  return _upb_array_append_accessor(msg, UPB_SIZE(48, 48), UPB_SIZE(8, 8),
-                                    UPB_TYPE_INT64, &val, arena);
+UPB_INLINE bool validate_SInt64Rules_add_in(validate_SInt64Rules *msg, int64_t val, upb_arena *arena) {
+  return _upb_array_append_accessor(msg, UPB_SIZE(48, 48), UPB_SIZE(8, 8), UPB_TYPE_INT64, &val,
+      arena);
@@ -1512,2 +927 @@ UPB_INLINE bool validate_SInt64Rules_add_in(validate_SInt64Rules* msg,
-UPB_INLINE int64_t* validate_SInt64Rules_mutable_not_in(
-    validate_SInt64Rules* msg, size_t* len) {
+UPB_INLINE int64_t* validate_SInt64Rules_mutable_not_in(validate_SInt64Rules *msg, size_t *len) {
@@ -1516,4 +930,2 @@ UPB_INLINE int64_t* validate_SInt64Rules_mutable_not_in(
-UPB_INLINE int64_t* validate_SInt64Rules_resize_not_in(
-    validate_SInt64Rules* msg, size_t len, upb_arena* arena) {
-  return (int64_t*)_upb_array_resize_accessor(msg, UPB_SIZE(52, 56), len,
-                                              UPB_TYPE_INT64, arena);
+UPB_INLINE int64_t* validate_SInt64Rules_resize_not_in(validate_SInt64Rules *msg, size_t len, upb_arena *arena) {
+  return (int64_t*)_upb_array_resize_accessor(msg, UPB_SIZE(52, 56), len, UPB_TYPE_INT64, arena);
@@ -1521,4 +933,3 @@ UPB_INLINE int64_t* validate_SInt64Rules_resize_not_in(
-UPB_INLINE bool validate_SInt64Rules_add_not_in(validate_SInt64Rules* msg,
-                                                int64_t val, upb_arena* arena) {
-  return _upb_array_append_accessor(msg, UPB_SIZE(52, 56), UPB_SIZE(8, 8),
-                                    UPB_TYPE_INT64, &val, arena);
+UPB_INLINE bool validate_SInt64Rules_add_not_in(validate_SInt64Rules *msg, int64_t val, upb_arena *arena) {
+  return _upb_array_append_accessor(msg, UPB_SIZE(52, 56), UPB_SIZE(8, 8), UPB_TYPE_INT64, &val,
+      arena);
@@ -1527,2 +938 @@ UPB_INLINE validate_Fixed32Rules* validate_Fixed32Rules_new(upb_arena* arena) {
-  return (validate_Fixed32Rules*)_upb_msg_new(&validate_Fixed32Rules_msginit,
-                                              arena);
+  return (validate_Fixed32Rules *)_upb_msg_new(&validate_Fixed32Rules_msginit, arena);
@@ -1530,2 +940,2 @@ UPB_INLINE validate_Fixed32Rules* validate_Fixed32Rules_new(upb_arena* arena) {
-UPB_INLINE validate_Fixed32Rules* validate_Fixed32Rules_parse(
-    const char* buf, size_t size, upb_arena* arena) {
+UPB_INLINE validate_Fixed32Rules *validate_Fixed32Rules_parse(const char *buf, size_t size,
+                        upb_arena *arena) {
@@ -1533,4 +943 @@ UPB_INLINE validate_Fixed32Rules* validate_Fixed32Rules_parse(
-  return (ret &&
-          upb_decode(buf, size, ret, &validate_Fixed32Rules_msginit, arena))
-             ? ret
-             : NULL;
+  return (ret && upb_decode(buf, size, ret, &validate_Fixed32Rules_msginit, arena)) ? ret : NULL;
@@ -1538,2 +945 @@ UPB_INLINE validate_Fixed32Rules* validate_Fixed32Rules_parse(
-UPB_INLINE char* validate_Fixed32Rules_serialize(
-    const validate_Fixed32Rules* msg, upb_arena* arena, size_t* len) {
+UPB_INLINE char *validate_Fixed32Rules_serialize(const validate_Fixed32Rules *msg, upb_arena *arena, size_t *len) {
@@ -1542,46 +948,13 @@ UPB_INLINE char* validate_Fixed32Rules_serialize(
-UPB_INLINE bool validate_Fixed32Rules_has_const(
-    const validate_Fixed32Rules* msg) {
-  return _upb_has_field(msg, 1);
-}
-UPB_INLINE uint32_t
-validate_Fixed32Rules_const(const validate_Fixed32Rules* msg) {
-  return UPB_FIELD_AT(msg, uint32_t, UPB_SIZE(4, 4));
-}
-UPB_INLINE bool validate_Fixed32Rules_has_lt(const validate_Fixed32Rules* msg) {
-  return _upb_has_field(msg, 2);
-}
-UPB_INLINE uint32_t validate_Fixed32Rules_lt(const validate_Fixed32Rules* msg) {
-  return UPB_FIELD_AT(msg, uint32_t, UPB_SIZE(8, 8));
-}
-UPB_INLINE bool validate_Fixed32Rules_has_lte(
-    const validate_Fixed32Rules* msg) {
-  return _upb_has_field(msg, 3);
-}
-UPB_INLINE uint32_t
-validate_Fixed32Rules_lte(const validate_Fixed32Rules* msg) {
-  return UPB_FIELD_AT(msg, uint32_t, UPB_SIZE(12, 12));
-}
-UPB_INLINE bool validate_Fixed32Rules_has_gt(const validate_Fixed32Rules* msg) {
-  return _upb_has_field(msg, 4);
-}
-UPB_INLINE uint32_t validate_Fixed32Rules_gt(const validate_Fixed32Rules* msg) {
-  return UPB_FIELD_AT(msg, uint32_t, UPB_SIZE(16, 16));
-}
-UPB_INLINE bool validate_Fixed32Rules_has_gte(
-    const validate_Fixed32Rules* msg) {
-  return _upb_has_field(msg, 5);
-}
-UPB_INLINE uint32_t
-validate_Fixed32Rules_gte(const validate_Fixed32Rules* msg) {
-  return UPB_FIELD_AT(msg, uint32_t, UPB_SIZE(20, 20));
-}
-UPB_INLINE uint32_t const* validate_Fixed32Rules_in(
-    const validate_Fixed32Rules* msg, size_t* len) {
-  return (uint32_t const*)_upb_array_accessor(msg, UPB_SIZE(24, 24), len);
-}
-UPB_INLINE uint32_t const* validate_Fixed32Rules_not_in(
-    const validate_Fixed32Rules* msg, size_t* len) {
-  return (uint32_t const*)_upb_array_accessor(msg, UPB_SIZE(28, 32), len);
-}
-UPB_INLINE void validate_Fixed32Rules_set_const(validate_Fixed32Rules* msg,
-                                                uint32_t value) {
+UPB_INLINE bool validate_Fixed32Rules_has_const(const validate_Fixed32Rules *msg) { return _upb_has_field(msg, 1); }
+UPB_INLINE uint32_t validate_Fixed32Rules_const(const validate_Fixed32Rules *msg) { return UPB_FIELD_AT(msg, uint32_t, UPB_SIZE(4, 4)); }
+UPB_INLINE bool validate_Fixed32Rules_has_lt(const validate_Fixed32Rules *msg) { return _upb_has_field(msg, 2); }
+UPB_INLINE uint32_t validate_Fixed32Rules_lt(const validate_Fixed32Rules *msg) { return UPB_FIELD_AT(msg, uint32_t, UPB_SIZE(8, 8)); }
+UPB_INLINE bool validate_Fixed32Rules_has_lte(const validate_Fixed32Rules *msg) { return _upb_has_field(msg, 3); }
+UPB_INLINE uint32_t validate_Fixed32Rules_lte(const validate_Fixed32Rules *msg) { return UPB_FIELD_AT(msg, uint32_t, UPB_SIZE(12, 12)); }
+UPB_INLINE bool validate_Fixed32Rules_has_gt(const validate_Fixed32Rules *msg) { return _upb_has_field(msg, 4); }
+UPB_INLINE uint32_t validate_Fixed32Rules_gt(const validate_Fixed32Rules *msg) { return UPB_FIELD_AT(msg, uint32_t, UPB_SIZE(16, 16)); }
+UPB_INLINE bool validate_Fixed32Rules_has_gte(const validate_Fixed32Rules *msg) { return _upb_has_field(msg, 5); }
+UPB_INLINE uint32_t validate_Fixed32Rules_gte(const validate_Fixed32Rules *msg) { return UPB_FIELD_AT(msg, uint32_t, UPB_SIZE(20, 20)); }
+UPB_INLINE uint32_t const* validate_Fixed32Rules_in(const validate_Fixed32Rules *msg, size_t *len) { return (uint32_t const*)_upb_array_accessor(msg, UPB_SIZE(24, 24), len); }
+UPB_INLINE uint32_t const* validate_Fixed32Rules_not_in(const validate_Fixed32Rules *msg, size_t *len) { return (uint32_t const*)_upb_array_accessor(msg, UPB_SIZE(28, 32), len); }
+UPB_INLINE void validate_Fixed32Rules_set_const(validate_Fixed32Rules *msg, uint32_t value) {
@@ -1591,2 +964 @@ UPB_INLINE void validate_Fixed32Rules_set_const(validate_Fixed32Rules* msg,
-UPB_INLINE void validate_Fixed32Rules_set_lt(validate_Fixed32Rules* msg,
-                                             uint32_t value) {
+UPB_INLINE void validate_Fixed32Rules_set_lt(validate_Fixed32Rules *msg, uint32_t value) {
@@ -1596,2 +968 @@ UPB_INLINE void validate_Fixed32Rules_set_lt(validate_Fixed32Rules* msg,
-UPB_INLINE void validate_Fixed32Rules_set_lte(validate_Fixed32Rules* msg,
-                                              uint32_t value) {
+UPB_INLINE void validate_Fixed32Rules_set_lte(validate_Fixed32Rules *msg, uint32_t value) {
@@ -1601,2 +972 @@ UPB_INLINE void validate_Fixed32Rules_set_lte(validate_Fixed32Rules* msg,
-UPB_INLINE void validate_Fixed32Rules_set_gt(validate_Fixed32Rules* msg,
-                                             uint32_t value) {
+UPB_INLINE void validate_Fixed32Rules_set_gt(validate_Fixed32Rules *msg, uint32_t value) {
@@ -1606,2 +976 @@ UPB_INLINE void validate_Fixed32Rules_set_gt(validate_Fixed32Rules* msg,
-UPB_INLINE void validate_Fixed32Rules_set_gte(validate_Fixed32Rules* msg,
-                                              uint32_t value) {
+UPB_INLINE void validate_Fixed32Rules_set_gte(validate_Fixed32Rules *msg, uint32_t value) {
@@ -1611,2 +980 @@ UPB_INLINE void validate_Fixed32Rules_set_gte(validate_Fixed32Rules* msg,
-UPB_INLINE uint32_t* validate_Fixed32Rules_mutable_in(
-    validate_Fixed32Rules* msg, size_t* len) {
+UPB_INLINE uint32_t* validate_Fixed32Rules_mutable_in(validate_Fixed32Rules *msg, size_t *len) {
@@ -1615,5 +983,2 @@ UPB_INLINE uint32_t* validate_Fixed32Rules_mutable_in(
-UPB_INLINE uint32_t* validate_Fixed32Rules_resize_in(validate_Fixed32Rules* msg,
-                                                     size_t len,
-                                                     upb_arena* arena) {
-  return (uint32_t*)_upb_array_resize_accessor(msg, UPB_SIZE(24, 24), len,
-                                               UPB_TYPE_UINT32, arena);
+UPB_INLINE uint32_t* validate_Fixed32Rules_resize_in(validate_Fixed32Rules *msg, size_t len, upb_arena *arena) {
+  return (uint32_t*)_upb_array_resize_accessor(msg, UPB_SIZE(24, 24), len, UPB_TYPE_UINT32, arena);
@@ -1621,4 +986,3 @@ UPB_INLINE uint32_t* validate_Fixed32Rules_resize_in(validate_Fixed32Rules* msg,
-UPB_INLINE bool validate_Fixed32Rules_add_in(validate_Fixed32Rules* msg,
-                                             uint32_t val, upb_arena* arena) {
-  return _upb_array_append_accessor(msg, UPB_SIZE(24, 24), UPB_SIZE(4, 4),
-                                    UPB_TYPE_UINT32, &val, arena);
+UPB_INLINE bool validate_Fixed32Rules_add_in(validate_Fixed32Rules *msg, uint32_t val, upb_arena *arena) {
+  return _upb_array_append_accessor(msg, UPB_SIZE(24, 24), UPB_SIZE(4, 4), UPB_TYPE_UINT32, &val,
+      arena);
@@ -1626,2 +990 @@ UPB_INLINE bool validate_Fixed32Rules_add_in(validate_Fixed32Rules* msg,
-UPB_INLINE uint32_t* validate_Fixed32Rules_mutable_not_in(
-    validate_Fixed32Rules* msg, size_t* len) {
+UPB_INLINE uint32_t* validate_Fixed32Rules_mutable_not_in(validate_Fixed32Rules *msg, size_t *len) {
@@ -1630,4 +993,2 @@ UPB_INLINE uint32_t* validate_Fixed32Rules_mutable_not_in(
-UPB_INLINE uint32_t* validate_Fixed32Rules_resize_not_in(
-    validate_Fixed32Rules* msg, size_t len, upb_arena* arena) {
-  return (uint32_t*)_upb_array_resize_accessor(msg, UPB_SIZE(28, 32), len,
-                                               UPB_TYPE_UINT32, arena);
+UPB_INLINE uint32_t* validate_Fixed32Rules_resize_not_in(validate_Fixed32Rules *msg, size_t len, upb_arena *arena) {
+  return (uint32_t*)_upb_array_resize_accessor(msg, UPB_SIZE(28, 32), len, UPB_TYPE_UINT32, arena);
@@ -1635,5 +996,3 @@ UPB_INLINE uint32_t* validate_Fixed32Rules_resize_not_in(
-UPB_INLINE bool validate_Fixed32Rules_add_not_in(validate_Fixed32Rules* msg,
-                                                 uint32_t val,
-                                                 upb_arena* arena) {
-  return _upb_array_append_accessor(msg, UPB_SIZE(28, 32), UPB_SIZE(4, 4),
-                                    UPB_TYPE_UINT32, &val, arena);
+UPB_INLINE bool validate_Fixed32Rules_add_not_in(validate_Fixed32Rules *msg, uint32_t val, upb_arena *arena) {
+  return _upb_array_append_accessor(msg, UPB_SIZE(28, 32), UPB_SIZE(4, 4), UPB_TYPE_UINT32, &val,
+      arena);
@@ -1642,2 +1001 @@ UPB_INLINE validate_Fixed64Rules* validate_Fixed64Rules_new(upb_arena* arena) {
-  return (validate_Fixed64Rules*)_upb_msg_new(&validate_Fixed64Rules_msginit,
-                                              arena);
+  return (validate_Fixed64Rules *)_upb_msg_new(&validate_Fixed64Rules_msginit, arena);
@@ -1645,2 +1003,2 @@ UPB_INLINE validate_Fixed64Rules* validate_Fixed64Rules_new(upb_arena* arena) {
-UPB_INLINE validate_Fixed64Rules* validate_Fixed64Rules_parse(
-    const char* buf, size_t size, upb_arena* arena) {
+UPB_INLINE validate_Fixed64Rules *validate_Fixed64Rules_parse(const char *buf, size_t size,
+                        upb_arena *arena) {
@@ -1648,4 +1006 @@ UPB_INLINE validate_Fixed64Rules* validate_Fixed64Rules_parse(
-  return (ret &&
-          upb_decode(buf, size, ret, &validate_Fixed64Rules_msginit, arena))
-             ? ret
-             : NULL;
+  return (ret && upb_decode(buf, size, ret, &validate_Fixed64Rules_msginit, arena)) ? ret : NULL;
@@ -1653,2 +1008 @@ UPB_INLINE validate_Fixed64Rules* validate_Fixed64Rules_parse(
-UPB_INLINE char* validate_Fixed64Rules_serialize(
-    const validate_Fixed64Rules* msg, upb_arena* arena, size_t* len) {
+UPB_INLINE char *validate_Fixed64Rules_serialize(const validate_Fixed64Rules *msg, upb_arena *arena, size_t *len) {
@@ -1657,46 +1011,13 @@ UPB_INLINE char* validate_Fixed64Rules_serialize(
-UPB_INLINE bool validate_Fixed64Rules_has_const(
-    const validate_Fixed64Rules* msg) {
-  return _upb_has_field(msg, 1);
-}
-UPB_INLINE uint64_t
-validate_Fixed64Rules_const(const validate_Fixed64Rules* msg) {
-  return UPB_FIELD_AT(msg, uint64_t, UPB_SIZE(8, 8));
-}
-UPB_INLINE bool validate_Fixed64Rules_has_lt(const validate_Fixed64Rules* msg) {
-  return _upb_has_field(msg, 2);
-}
-UPB_INLINE uint64_t validate_Fixed64Rules_lt(const validate_Fixed64Rules* msg) {
-  return UPB_FIELD_AT(msg, uint64_t, UPB_SIZE(16, 16));
-}
-UPB_INLINE bool validate_Fixed64Rules_has_lte(
-    const validate_Fixed64Rules* msg) {
-  return _upb_has_field(msg, 3);
-}
-UPB_INLINE uint64_t
-validate_Fixed64Rules_lte(const validate_Fixed64Rules* msg) {
-  return UPB_FIELD_AT(msg, uint64_t, UPB_SIZE(24, 24));
-}
-UPB_INLINE bool validate_Fixed64Rules_has_gt(const validate_Fixed64Rules* msg) {
-  return _upb_has_field(msg, 4);
-}
-UPB_INLINE uint64_t validate_Fixed64Rules_gt(const validate_Fixed64Rules* msg) {
-  return UPB_FIELD_AT(msg, uint64_t, UPB_SIZE(32, 32));
-}
-UPB_INLINE bool validate_Fixed64Rules_has_gte(
-    const validate_Fixed64Rules* msg) {
-  return _upb_has_field(msg, 5);
-}
-UPB_INLINE uint64_t
-validate_Fixed64Rules_gte(const validate_Fixed64Rules* msg) {
-  return UPB_FIELD_AT(msg, uint64_t, UPB_SIZE(40, 40));
-}
-UPB_INLINE uint64_t const* validate_Fixed64Rules_in(
-    const validate_Fixed64Rules* msg, size_t* len) {
-  return (uint64_t const*)_upb_array_accessor(msg, UPB_SIZE(48, 48), len);
-}
-UPB_INLINE uint64_t const* validate_Fixed64Rules_not_in(
-    const validate_Fixed64Rules* msg, size_t* len) {
-  return (uint64_t const*)_upb_array_accessor(msg, UPB_SIZE(52, 56), len);
-}
-UPB_INLINE void validate_Fixed64Rules_set_const(validate_Fixed64Rules* msg,
-                                                uint64_t value) {
+UPB_INLINE bool validate_Fixed64Rules_has_const(const validate_Fixed64Rules *msg) { return _upb_has_field(msg, 1); }
+UPB_INLINE uint64_t validate_Fixed64Rules_const(const validate_Fixed64Rules *msg) { return UPB_FIELD_AT(msg, uint64_t, UPB_SIZE(8, 8)); }
+UPB_INLINE bool validate_Fixed64Rules_has_lt(const validate_Fixed64Rules *msg) { return _upb_has_field(msg, 2); }
+UPB_INLINE uint64_t validate_Fixed64Rules_lt(const validate_Fixed64Rules *msg) { return UPB_FIELD_AT(msg, uint64_t, UPB_SIZE(16, 16)); }
+UPB_INLINE bool validate_Fixed64Rules_has_lte(const validate_Fixed64Rules *msg) { return _upb_has_field(msg, 3); }
+UPB_INLINE uint64_t validate_Fixed64Rules_lte(const validate_Fixed64Rules *msg) { return UPB_FIELD_AT(msg, uint64_t, UPB_SIZE(24, 24)); }
+UPB_INLINE bool validate_Fixed64Rules_has_gt(const validate_Fixed64Rules *msg) { return _upb_has_field(msg, 4); }
+UPB_INLINE uint64_t validate_Fixed64Rules_gt(const validate_Fixed64Rules *msg) { return UPB_FIELD_AT(msg, uint64_t, UPB_SIZE(32, 32)); }
+UPB_INLINE bool validate_Fixed64Rules_has_gte(const validate_Fixed64Rules *msg) { return _upb_has_field(msg, 5); }
+UPB_INLINE uint64_t validate_Fixed64Rules_gte(const validate_Fixed64Rules *msg) { return UPB_FIELD_AT(msg, uint64_t, UPB_SIZE(40, 40)); }
+UPB_INLINE uint64_t const* validate_Fixed64Rules_in(const validate_Fixed64Rules *msg, size_t *len) { return (uint64_t const*)_upb_array_accessor(msg, UPB_SIZE(48, 48), len); }
+UPB_INLINE uint64_t const* validate_Fixed64Rules_not_in(const validate_Fixed64Rules *msg, size_t *len) { return (uint64_t const*)_upb_array_accessor(msg, UPB_SIZE(52, 56), len); }
+UPB_INLINE void validate_Fixed64Rules_set_const(validate_Fixed64Rules *msg, uint64_t value) {
@@ -1706,2 +1027 @@ UPB_INLINE void validate_Fixed64Rules_set_const(validate_Fixed64Rules* msg,
-UPB_INLINE void validate_Fixed64Rules_set_lt(validate_Fixed64Rules* msg,
-                                             uint64_t value) {
+UPB_INLINE void validate_Fixed64Rules_set_lt(validate_Fixed64Rules *msg, uint64_t value) {
@@ -1711,2 +1031 @@ UPB_INLINE void validate_Fixed64Rules_set_lt(validate_Fixed64Rules* msg,
-UPB_INLINE void validate_Fixed64Rules_set_lte(validate_Fixed64Rules* msg,
-                                              uint64_t value) {
+UPB_INLINE void validate_Fixed64Rules_set_lte(validate_Fixed64Rules *msg, uint64_t value) {
@@ -1716,2 +1035 @@ UPB_INLINE void validate_Fixed64Rules_set_lte(validate_Fixed64Rules* msg,
-UPB_INLINE void validate_Fixed64Rules_set_gt(validate_Fixed64Rules* msg,
-                                             uint64_t value) {
+UPB_INLINE void validate_Fixed64Rules_set_gt(validate_Fixed64Rules *msg, uint64_t value) {
@@ -1721,2 +1039 @@ UPB_INLINE void validate_Fixed64Rules_set_gt(validate_Fixed64Rules* msg,
-UPB_INLINE void validate_Fixed64Rules_set_gte(validate_Fixed64Rules* msg,
-                                              uint64_t value) {
+UPB_INLINE void validate_Fixed64Rules_set_gte(validate_Fixed64Rules *msg, uint64_t value) {
@@ -1726,2 +1043 @@ UPB_INLINE void validate_Fixed64Rules_set_gte(validate_Fixed64Rules* msg,
-UPB_INLINE uint64_t* validate_Fixed64Rules_mutable_in(
-    validate_Fixed64Rules* msg, size_t* len) {
+UPB_INLINE uint64_t* validate_Fixed64Rules_mutable_in(validate_Fixed64Rules *msg, size_t *len) {
@@ -1730,5 +1046,2 @@ UPB_INLINE uint64_t* validate_Fixed64Rules_mutable_in(
-UPB_INLINE uint64_t* validate_Fixed64Rules_resize_in(validate_Fixed64Rules* msg,
-                                                     size_t len,
-                                                     upb_arena* arena) {
-  return (uint64_t*)_upb_array_resize_accessor(msg, UPB_SIZE(48, 48), len,
-                                               UPB_TYPE_UINT64, arena);
+UPB_INLINE uint64_t* validate_Fixed64Rules_resize_in(validate_Fixed64Rules *msg, size_t len, upb_arena *arena) {
+  return (uint64_t*)_upb_array_resize_accessor(msg, UPB_SIZE(48, 48), len, UPB_TYPE_UINT64, arena);
@@ -1736,4 +1049,3 @@ UPB_INLINE uint64_t* validate_Fixed64Rules_resize_in(validate_Fixed64Rules* msg,
-UPB_INLINE bool validate_Fixed64Rules_add_in(validate_Fixed64Rules* msg,
-                                             uint64_t val, upb_arena* arena) {
-  return _upb_array_append_accessor(msg, UPB_SIZE(48, 48), UPB_SIZE(8, 8),
-                                    UPB_TYPE_UINT64, &val, arena);
+UPB_INLINE bool validate_Fixed64Rules_add_in(validate_Fixed64Rules *msg, uint64_t val, upb_arena *arena) {
+  return _upb_array_append_accessor(msg, UPB_SIZE(48, 48), UPB_SIZE(8, 8), UPB_TYPE_UINT64, &val,
+      arena);
@@ -1741,2 +1053 @@ UPB_INLINE bool validate_Fixed64Rules_add_in(validate_Fixed64Rules* msg,
-UPB_INLINE uint64_t* validate_Fixed64Rules_mutable_not_in(
-    validate_Fixed64Rules* msg, size_t* len) {
+UPB_INLINE uint64_t* validate_Fixed64Rules_mutable_not_in(validate_Fixed64Rules *msg, size_t *len) {
@@ -1745,10 +1056,2 @@ UPB_INLINE uint64_t* validate_Fixed64Rules_mutable_not_in(
-UPB_INLINE uint64_t* validate_Fixed64Rules_resize_not_in(
-    validate_Fixed64Rules* msg, size_t len, upb_arena* arena) {
-  return (uint64_t*)_upb_array_resize_accessor(msg, UPB_SIZE(52, 56), len,
-                                               UPB_TYPE_UINT64, arena);
-}
-UPB_INLINE bool validate_Fixed64Rules_add_not_in(validate_Fixed64Rules* msg,
-                                                 uint64_t val,
-                                                 upb_arena* arena) {
-  return _upb_array_append_accessor(msg, UPB_SIZE(52, 56), UPB_SIZE(8, 8),
-                                    UPB_TYPE_UINT64, &val, arena);
+UPB_INLINE uint64_t* validate_Fixed64Rules_resize_not_in(validate_Fixed64Rules *msg, size_t len, upb_arena *arena) {
+  return (uint64_t*)_upb_array_resize_accessor(msg, UPB_SIZE(52, 56), len, UPB_TYPE_UINT64, arena);
@@ -1756,3 +1059,2 @@ UPB_INLINE bool validate_Fixed64Rules_add_not_in(validate_Fixed64Rules* msg,
-UPB_INLINE validate_SFixed32Rules* validate_SFixed32Rules_new(
-    upb_arena* arena) {
-  return (validate_SFixed32Rules*)_upb_msg_new(&validate_SFixed32Rules_msginit,
+UPB_INLINE bool validate_Fixed64Rules_add_not_in(validate_Fixed64Rules *msg, uint64_t val, upb_arena *arena) {
+  return _upb_array_append_accessor(msg, UPB_SIZE(52, 56), UPB_SIZE(8, 8), UPB_TYPE_UINT64, &val,
@@ -1761,2 +1063,5 @@ UPB_INLINE validate_SFixed32Rules* validate_SFixed32Rules_new(
-UPB_INLINE validate_SFixed32Rules* validate_SFixed32Rules_parse(
-    const char* buf, size_t size, upb_arena* arena) {
+UPB_INLINE validate_SFixed32Rules *validate_SFixed32Rules_new(upb_arena *arena) {
+  return (validate_SFixed32Rules *)_upb_msg_new(&validate_SFixed32Rules_msginit, arena);
+}
+UPB_INLINE validate_SFixed32Rules *validate_SFixed32Rules_parse(const char *buf, size_t size,
+                        upb_arena *arena) {
@@ -1764,4 +1069 @@ UPB_INLINE validate_SFixed32Rules* validate_SFixed32Rules_parse(
-  return (ret &&
-          upb_decode(buf, size, ret, &validate_SFixed32Rules_msginit, arena))
-             ? ret
-             : NULL;
+  return (ret && upb_decode(buf, size, ret, &validate_SFixed32Rules_msginit, arena)) ? ret : NULL;
@@ -1769,2 +1071 @@ UPB_INLINE validate_SFixed32Rules* validate_SFixed32Rules_parse(
-UPB_INLINE char* validate_SFixed32Rules_serialize(
-    const validate_SFixed32Rules* msg, upb_arena* arena, size_t* len) {
+UPB_INLINE char *validate_SFixed32Rules_serialize(const validate_SFixed32Rules *msg, upb_arena *arena, size_t *len) {
@@ -1773,50 +1074,13 @@ UPB_INLINE char* validate_SFixed32Rules_serialize(
-UPB_INLINE bool validate_SFixed32Rules_has_const(
-    const validate_SFixed32Rules* msg) {
-  return _upb_has_field(msg, 1);
-}
-UPB_INLINE int32_t
-validate_SFixed32Rules_const(const validate_SFixed32Rules* msg) {
-  return UPB_FIELD_AT(msg, int32_t, UPB_SIZE(4, 4));
-}
-UPB_INLINE bool validate_SFixed32Rules_has_lt(
-    const validate_SFixed32Rules* msg) {
-  return _upb_has_field(msg, 2);
-}
-UPB_INLINE int32_t
-validate_SFixed32Rules_lt(const validate_SFixed32Rules* msg) {
-  return UPB_FIELD_AT(msg, int32_t, UPB_SIZE(8, 8));
-}
-UPB_INLINE bool validate_SFixed32Rules_has_lte(
-    const validate_SFixed32Rules* msg) {
-  return _upb_has_field(msg, 3);
-}
-UPB_INLINE int32_t
-validate_SFixed32Rules_lte(const validate_SFixed32Rules* msg) {
-  return UPB_FIELD_AT(msg, int32_t, UPB_SIZE(12, 12));
-}
-UPB_INLINE bool validate_SFixed32Rules_has_gt(
-    const validate_SFixed32Rules* msg) {
-  return _upb_has_field(msg, 4);
-}
-UPB_INLINE int32_t
-validate_SFixed32Rules_gt(const validate_SFixed32Rules* msg) {
-  return UPB_FIELD_AT(msg, int32_t, UPB_SIZE(16, 16));
-}
-UPB_INLINE bool validate_SFixed32Rules_has_gte(
-    const validate_SFixed32Rules* msg) {
-  return _upb_has_field(msg, 5);
-}
-UPB_INLINE int32_t
-validate_SFixed32Rules_gte(const validate_SFixed32Rules* msg) {
-  return UPB_FIELD_AT(msg, int32_t, UPB_SIZE(20, 20));
-}
-UPB_INLINE int32_t const* validate_SFixed32Rules_in(
-    const validate_SFixed32Rules* msg, size_t* len) {
-  return (int32_t const*)_upb_array_accessor(msg, UPB_SIZE(24, 24), len);
-}
-UPB_INLINE int32_t const* validate_SFixed32Rules_not_in(
-    const validate_SFixed32Rules* msg, size_t* len) {
-  return (int32_t const*)_upb_array_accessor(msg, UPB_SIZE(28, 32), len);
-}
-UPB_INLINE void validate_SFixed32Rules_set_const(validate_SFixed32Rules* msg,
-                                                 int32_t value) {
+UPB_INLINE bool validate_SFixed32Rules_has_const(const validate_SFixed32Rules *msg) { return _upb_has_field(msg, 1); }
+UPB_INLINE int32_t validate_SFixed32Rules_const(const validate_SFixed32Rules *msg) { return UPB_FIELD_AT(msg, int32_t, UPB_SIZE(4, 4)); }
+UPB_INLINE bool validate_SFixed32Rules_has_lt(const validate_SFixed32Rules *msg) { return _upb_has_field(msg, 2); }
+UPB_INLINE int32_t validate_SFixed32Rules_lt(const validate_SFixed32Rules *msg) { return UPB_FIELD_AT(msg, int32_t, UPB_SIZE(8, 8)); }
+UPB_INLINE bool validate_SFixed32Rules_has_lte(const validate_SFixed32Rules *msg) { return _upb_has_field(msg, 3); }
+UPB_INLINE int32_t validate_SFixed32Rules_lte(const validate_SFixed32Rules *msg) { return UPB_FIELD_AT(msg, int32_t, UPB_SIZE(12, 12)); }
+UPB_INLINE bool validate_SFixed32Rules_has_gt(const validate_SFixed32Rules *msg) { return _upb_has_field(msg, 4); }
+UPB_INLINE int32_t validate_SFixed32Rules_gt(const validate_SFixed32Rules *msg) { return UPB_FIELD_AT(msg, int32_t, UPB_SIZE(16, 16)); }
+UPB_INLINE bool validate_SFixed32Rules_has_gte(const validate_SFixed32Rules *msg) { return _upb_has_field(msg, 5); }
+UPB_INLINE int32_t validate_SFixed32Rules_gte(const validate_SFixed32Rules *msg) { return UPB_FIELD_AT(msg, int32_t, UPB_SIZE(20, 20)); }
+UPB_INLINE int32_t const* validate_SFixed32Rules_in(const validate_SFixed32Rules *msg, size_t *len) { return (int32_t const*)_upb_array_accessor(msg, UPB_SIZE(24, 24), len); }
+UPB_INLINE int32_t const* validate_SFixed32Rules_not_in(const validate_SFixed32Rules *msg, size_t *len) { return (int32_t const*)_upb_array_accessor(msg, UPB_SIZE(28, 32), len); }
+UPB_INLINE void validate_SFixed32Rules_set_const(validate_SFixed32Rules *msg, int32_t value) {
@@ -1826,2 +1090 @@ UPB_INLINE void validate_SFixed32Rules_set_const(validate_SFixed32Rules* msg,
-UPB_INLINE void validate_SFixed32Rules_set_lt(validate_SFixed32Rules* msg,
-                                              int32_t value) {
+UPB_INLINE void validate_SFixed32Rules_set_lt(validate_SFixed32Rules *msg, int32_t value) {
@@ -1831,2 +1094 @@ UPB_INLINE void validate_SFixed32Rules_set_lt(validate_SFixed32Rules* msg,
-UPB_INLINE void validate_SFixed32Rules_set_lte(validate_SFixed32Rules* msg,
-                                               int32_t value) {
+UPB_INLINE void validate_SFixed32Rules_set_lte(validate_SFixed32Rules *msg, int32_t value) {
@@ -1836,2 +1098 @@ UPB_INLINE void validate_SFixed32Rules_set_lte(validate_SFixed32Rules* msg,
-UPB_INLINE void validate_SFixed32Rules_set_gt(validate_SFixed32Rules* msg,
-                                              int32_t value) {
+UPB_INLINE void validate_SFixed32Rules_set_gt(validate_SFixed32Rules *msg, int32_t value) {
@@ -1841,2 +1102 @@ UPB_INLINE void validate_SFixed32Rules_set_gt(validate_SFixed32Rules* msg,
-UPB_INLINE void validate_SFixed32Rules_set_gte(validate_SFixed32Rules* msg,
-                                               int32_t value) {
+UPB_INLINE void validate_SFixed32Rules_set_gte(validate_SFixed32Rules *msg, int32_t value) {
@@ -1846,2 +1106 @@ UPB_INLINE void validate_SFixed32Rules_set_gte(validate_SFixed32Rules* msg,
-UPB_INLINE int32_t* validate_SFixed32Rules_mutable_in(
-    validate_SFixed32Rules* msg, size_t* len) {
+UPB_INLINE int32_t* validate_SFixed32Rules_mutable_in(validate_SFixed32Rules *msg, size_t *len) {
@@ -1850,4 +1109,2 @@ UPB_INLINE int32_t* validate_SFixed32Rules_mutable_in(
-UPB_INLINE int32_t* validate_SFixed32Rules_resize_in(
-    validate_SFixed32Rules* msg, size_t len, upb_arena* arena) {
-  return (int32_t*)_upb_array_resize_accessor(msg, UPB_SIZE(24, 24), len,
-                                              UPB_TYPE_INT32, arena);
+UPB_INLINE int32_t* validate_SFixed32Rules_resize_in(validate_SFixed32Rules *msg, size_t len, upb_arena *arena) {
+  return (int32_t*)_upb_array_resize_accessor(msg, UPB_SIZE(24, 24), len, UPB_TYPE_INT32, arena);
@@ -1855,4 +1112,3 @@ UPB_INLINE int32_t* validate_SFixed32Rules_resize_in(
-UPB_INLINE bool validate_SFixed32Rules_add_in(validate_SFixed32Rules* msg,
-                                              int32_t val, upb_arena* arena) {
-  return _upb_array_append_accessor(msg, UPB_SIZE(24, 24), UPB_SIZE(4, 4),
-                                    UPB_TYPE_INT32, &val, arena);
+UPB_INLINE bool validate_SFixed32Rules_add_in(validate_SFixed32Rules *msg, int32_t val, upb_arena *arena) {
+  return _upb_array_append_accessor(msg, UPB_SIZE(24, 24), UPB_SIZE(4, 4), UPB_TYPE_INT32, &val,
+      arena);
@@ -1860,2 +1116 @@ UPB_INLINE bool validate_SFixed32Rules_add_in(validate_SFixed32Rules* msg,
-UPB_INLINE int32_t* validate_SFixed32Rules_mutable_not_in(
-    validate_SFixed32Rules* msg, size_t* len) {
+UPB_INLINE int32_t* validate_SFixed32Rules_mutable_not_in(validate_SFixed32Rules *msg, size_t *len) {
@@ -1864,4 +1119,2 @@ UPB_INLINE int32_t* validate_SFixed32Rules_mutable_not_in(
-UPB_INLINE int32_t* validate_SFixed32Rules_resize_not_in(
-    validate_SFixed32Rules* msg, size_t len, upb_arena* arena) {
-  return (int32_t*)_upb_array_resize_accessor(msg, UPB_SIZE(28, 32), len,
-                                              UPB_TYPE_INT32, arena);
+UPB_INLINE int32_t* validate_SFixed32Rules_resize_not_in(validate_SFixed32Rules *msg, size_t len, upb_arena *arena) {
+  return (int32_t*)_upb_array_resize_accessor(msg, UPB_SIZE(28, 32), len, UPB_TYPE_INT32, arena);
@@ -1869,9 +1122,2 @@ UPB_INLINE int32_t* validate_SFixed32Rules_resize_not_in(
-UPB_INLINE bool validate_SFixed32Rules_add_not_in(validate_SFixed32Rules* msg,
-                                                  int32_t val,
-                                                  upb_arena* arena) {
-  return _upb_array_append_accessor(msg, UPB_SIZE(28, 32), UPB_SIZE(4, 4),
-                                    UPB_TYPE_INT32, &val, arena);
-}
-UPB_INLINE validate_SFixed64Rules* validate_SFixed64Rules_new(
-    upb_arena* arena) {
-  return (validate_SFixed64Rules*)_upb_msg_new(&validate_SFixed64Rules_msginit,
+UPB_INLINE bool validate_SFixed32Rules_add_not_in(validate_SFixed32Rules *msg, int32_t val, upb_arena *arena) {
+  return _upb_array_append_accessor(msg, UPB_SIZE(28, 32), UPB_SIZE(4, 4), UPB_TYPE_INT32, &val,
@@ -1880,2 +1126,5 @@ UPB_INLINE validate_SFixed64Rules* validate_SFixed64Rules_new(
-UPB_INLINE validate_SFixed64Rules* validate_SFixed64Rules_parse(
-    const char* buf, size_t size, upb_arena* arena) {
+UPB_INLINE validate_SFixed64Rules *validate_SFixed64Rules_new(upb_arena *arena) {
+  return (validate_SFixed64Rules *)_upb_msg_new(&validate_SFixed64Rules_msginit, arena);
+}
+UPB_INLINE validate_SFixed64Rules *validate_SFixed64Rules_parse(const char *buf, size_t size,
+                        upb_arena *arena) {
@@ -1883,4 +1132 @@ UPB_INLINE validate_SFixed64Rules* validate_SFixed64Rules_parse(
-  return (ret &&
-          upb_decode(buf, size, ret, &validate_SFixed64Rules_msginit, arena))
-             ? ret
-             : NULL;
+  return (ret && upb_decode(buf, size, ret, &validate_SFixed64Rules_msginit, arena)) ? ret : NULL;
@@ -1888,2 +1134 @@ UPB_INLINE validate_SFixed64Rules* validate_SFixed64Rules_parse(
-UPB_INLINE char* validate_SFixed64Rules_serialize(
-    const validate_SFixed64Rules* msg, upb_arena* arena, size_t* len) {
+UPB_INLINE char *validate_SFixed64Rules_serialize(const validate_SFixed64Rules *msg, upb_arena *arena, size_t *len) {
@@ -1892,50 +1137,13 @@ UPB_INLINE char* validate_SFixed64Rules_serialize(
-UPB_INLINE bool validate_SFixed64Rules_has_const(
-    const validate_SFixed64Rules* msg) {
-  return _upb_has_field(msg, 1);
-}
-UPB_INLINE int64_t
-validate_SFixed64Rules_const(const validate_SFixed64Rules* msg) {
-  return UPB_FIELD_AT(msg, int64_t, UPB_SIZE(8, 8));
-}
-UPB_INLINE bool validate_SFixed64Rules_has_lt(
-    const validate_SFixed64Rules* msg) {
-  return _upb_has_field(msg, 2);
-}
-UPB_INLINE int64_t
-validate_SFixed64Rules_lt(const validate_SFixed64Rules* msg) {
-  return UPB_FIELD_AT(msg, int64_t, UPB_SIZE(16, 16));
-}
-UPB_INLINE bool validate_SFixed64Rules_has_lte(
-    const validate_SFixed64Rules* msg) {
-  return _upb_has_field(msg, 3);
-}
-UPB_INLINE int64_t
-validate_SFixed64Rules_lte(const validate_SFixed64Rules* msg) {
-  return UPB_FIELD_AT(msg, int64_t, UPB_SIZE(24, 24));
-}
-UPB_INLINE bool validate_SFixed64Rules_has_gt(
-    const validate_SFixed64Rules* msg) {
-  return _upb_has_field(msg, 4);
-}
-UPB_INLINE int64_t
-validate_SFixed64Rules_gt(const validate_SFixed64Rules* msg) {
-  return UPB_FIELD_AT(msg, int64_t, UPB_SIZE(32, 32));
-}
-UPB_INLINE bool validate_SFixed64Rules_has_gte(
-    const validate_SFixed64Rules* msg) {
-  return _upb_has_field(msg, 5);
-}
-UPB_INLINE int64_t
-validate_SFixed64Rules_gte(const validate_SFixed64Rules* msg) {
-  return UPB_FIELD_AT(msg, int64_t, UPB_SIZE(40, 40));
-}
-UPB_INLINE int64_t const* validate_SFixed64Rules_in(
-    const validate_SFixed64Rules* msg, size_t* len) {
-  return (int64_t const*)_upb_array_accessor(msg, UPB_SIZE(48, 48), len);
-}
-UPB_INLINE int64_t const* validate_SFixed64Rules_not_in(
-    const validate_SFixed64Rules* msg, size_t* len) {
-  return (int64_t const*)_upb_array_accessor(msg, UPB_SIZE(52, 56), len);
-}
-UPB_INLINE void validate_SFixed64Rules_set_const(validate_SFixed64Rules* msg,
-                                                 int64_t value) {
+UPB_INLINE bool validate_SFixed64Rules_has_const(const validate_SFixed64Rules *msg) { return _upb_has_field(msg, 1); }
+UPB_INLINE int64_t validate_SFixed64Rules_const(const validate_SFixed64Rules *msg) { return UPB_FIELD_AT(msg, int64_t, UPB_SIZE(8, 8)); }
+UPB_INLINE bool validate_SFixed64Rules_has_lt(const validate_SFixed64Rules *msg) { return _upb_has_field(msg, 2); }
+UPB_INLINE int64_t validate_SFixed64Rules_lt(const validate_SFixed64Rules *msg) { return UPB_FIELD_AT(msg, int64_t, UPB_SIZE(16, 16)); }
+UPB_INLINE bool validate_SFixed64Rules_has_lte(const validate_SFixed64Rules *msg) { return _upb_has_field(msg, 3); }
+UPB_INLINE int64_t validate_SFixed64Rules_lte(const validate_SFixed64Rules *msg) { return UPB_FIELD_AT(msg, int64_t, UPB_SIZE(24, 24)); }
+UPB_INLINE bool validate_SFixed64Rules_has_gt(const validate_SFixed64Rules *msg) { return _upb_has_field(msg, 4); }
+UPB_INLINE int64_t validate_SFixed64Rules_gt(const validate_SFixed64Rules *msg) { return UPB_FIELD_AT(msg, int64_t, UPB_SIZE(32, 32)); }
+UPB_INLINE bool validate_SFixed64Rules_has_gte(const validate_SFixed64Rules *msg) { return _upb_has_field(msg, 5); }
+UPB_INLINE int64_t validate_SFixed64Rules_gte(const validate_SFixed64Rules *msg) { return UPB_FIELD_AT(msg, int64_t, UPB_SIZE(40, 40)); }
+UPB_INLINE int64_t const* validate_SFixed64Rules_in(const validate_SFixed64Rules *msg, size_t *len) { return (int64_t const*)_upb_array_accessor(msg, UPB_SIZE(48, 48), len); }
+UPB_INLINE int64_t const* validate_SFixed64Rules_not_in(const validate_SFixed64Rules *msg, size_t *len) { return (int64_t const*)_upb_array_accessor(msg, UPB_SIZE(52, 56), len); }
+UPB_INLINE void validate_SFixed64Rules_set_const(validate_SFixed64Rules *msg, int64_t value) {
@@ -1945,2 +1153 @@ UPB_INLINE void validate_SFixed64Rules_set_const(validate_SFixed64Rules* msg,
-UPB_INLINE void validate_SFixed64Rules_set_lt(validate_SFixed64Rules* msg,
-                                              int64_t value) {
+UPB_INLINE void validate_SFixed64Rules_set_lt(validate_SFixed64Rules *msg, int64_t value) {
@@ -1950,2 +1157 @@ UPB_INLINE void validate_SFixed64Rules_set_lt(validate_SFixed64Rules* msg,
-UPB_INLINE void validate_SFixed64Rules_set_lte(validate_SFixed64Rules* msg,
-                                               int64_t value) {
+UPB_INLINE void validate_SFixed64Rules_set_lte(validate_SFixed64Rules *msg, int64_t value) {
@@ -1955,2 +1161 @@ UPB_INLINE void validate_SFixed64Rules_set_lte(validate_SFixed64Rules* msg,
-UPB_INLINE void validate_SFixed64Rules_set_gt(validate_SFixed64Rules* msg,
-                                              int64_t value) {
+UPB_INLINE void validate_SFixed64Rules_set_gt(validate_SFixed64Rules *msg, int64_t value) {
@@ -1960,2 +1165 @@ UPB_INLINE void validate_SFixed64Rules_set_gt(validate_SFixed64Rules* msg,
-UPB_INLINE void validate_SFixed64Rules_set_gte(validate_SFixed64Rules* msg,
-                                               int64_t value) {
+UPB_INLINE void validate_SFixed64Rules_set_gte(validate_SFixed64Rules *msg, int64_t value) {
@@ -1965,2 +1169 @@ UPB_INLINE void validate_SFixed64Rules_set_gte(validate_SFixed64Rules* msg,
-UPB_INLINE int64_t* validate_SFixed64Rules_mutable_in(
-    validate_SFixed64Rules* msg, size_t* len) {
+UPB_INLINE int64_t* validate_SFixed64Rules_mutable_in(validate_SFixed64Rules *msg, size_t *len) {
@@ -1969,4 +1172,2 @@ UPB_INLINE int64_t* validate_SFixed64Rules_mutable_in(
-UPB_INLINE int64_t* validate_SFixed64Rules_resize_in(
-    validate_SFixed64Rules* msg, size_t len, upb_arena* arena) {
-  return (int64_t*)_upb_array_resize_accessor(msg, UPB_SIZE(48, 48), len,
-                                              UPB_TYPE_INT64, arena);
+UPB_INLINE int64_t* validate_SFixed64Rules_resize_in(validate_SFixed64Rules *msg, size_t len, upb_arena *arena) {
+  return (int64_t*)_upb_array_resize_accessor(msg, UPB_SIZE(48, 48), len, UPB_TYPE_INT64, arena);
@@ -1974,4 +1175,3 @@ UPB_INLINE int64_t* validate_SFixed64Rules_resize_in(
-UPB_INLINE bool validate_SFixed64Rules_add_in(validate_SFixed64Rules* msg,
-                                              int64_t val, upb_arena* arena) {
-  return _upb_array_append_accessor(msg, UPB_SIZE(48, 48), UPB_SIZE(8, 8),
-                                    UPB_TYPE_INT64, &val, arena);
+UPB_INLINE bool validate_SFixed64Rules_add_in(validate_SFixed64Rules *msg, int64_t val, upb_arena *arena) {
+  return _upb_array_append_accessor(msg, UPB_SIZE(48, 48), UPB_SIZE(8, 8), UPB_TYPE_INT64, &val,
+      arena);
@@ -1979,2 +1179 @@ UPB_INLINE bool validate_SFixed64Rules_add_in(validate_SFixed64Rules* msg,
-UPB_INLINE int64_t* validate_SFixed64Rules_mutable_not_in(
-    validate_SFixed64Rules* msg, size_t* len) {
+UPB_INLINE int64_t* validate_SFixed64Rules_mutable_not_in(validate_SFixed64Rules *msg, size_t *len) {
@@ -1983,4 +1182,2 @@ UPB_INLINE int64_t* validate_SFixed64Rules_mutable_not_in(
-UPB_INLINE int64_t* validate_SFixed64Rules_resize_not_in(
-    validate_SFixed64Rules* msg, size_t len, upb_arena* arena) {
-  return (int64_t*)_upb_array_resize_accessor(msg, UPB_SIZE(52, 56), len,
-                                              UPB_TYPE_INT64, arena);
+UPB_INLINE int64_t* validate_SFixed64Rules_resize_not_in(validate_SFixed64Rules *msg, size_t len, upb_arena *arena) {
+  return (int64_t*)_upb_array_resize_accessor(msg, UPB_SIZE(52, 56), len, UPB_TYPE_INT64, arena);
@@ -1988,5 +1185,3 @@ UPB_INLINE int64_t* validate_SFixed64Rules_resize_not_in(
-UPB_INLINE bool validate_SFixed64Rules_add_not_in(validate_SFixed64Rules* msg,
-                                                  int64_t val,
-                                                  upb_arena* arena) {
-  return _upb_array_append_accessor(msg, UPB_SIZE(52, 56), UPB_SIZE(8, 8),
-                                    UPB_TYPE_INT64, &val, arena);
+UPB_INLINE bool validate_SFixed64Rules_add_not_in(validate_SFixed64Rules *msg, int64_t val, upb_arena *arena) {
+  return _upb_array_append_accessor(msg, UPB_SIZE(52, 56), UPB_SIZE(8, 8), UPB_TYPE_INT64, &val,
+      arena);
@@ -1997,2 +1192 @@ UPB_INLINE validate_BoolRules* validate_BoolRules_new(upb_arena* arena) {
-UPB_INLINE validate_BoolRules* validate_BoolRules_parse(const char* buf,
-                                                        size_t size,
+UPB_INLINE validate_BoolRules *validate_BoolRules_parse(const char *buf, size_t size,
@@ -2001,3 +1195 @@ UPB_INLINE validate_BoolRules* validate_BoolRules_parse(const char* buf,
-  return (ret && upb_decode(buf, size, ret, &validate_BoolRules_msginit, arena))
-             ? ret
-             : NULL;
+  return (ret && upb_decode(buf, size, ret, &validate_BoolRules_msginit, arena)) ? ret : NULL;
@@ -2005,2 +1197 @@ UPB_INLINE validate_BoolRules* validate_BoolRules_parse(const char* buf,
-UPB_INLINE char* validate_BoolRules_serialize(const validate_BoolRules* msg,
-                                              upb_arena* arena, size_t* len) {
+UPB_INLINE char *validate_BoolRules_serialize(const validate_BoolRules *msg, upb_arena *arena, size_t *len) {
@@ -2009,8 +1200,3 @@ UPB_INLINE char* validate_BoolRules_serialize(const validate_BoolRules* msg,
-UPB_INLINE bool validate_BoolRules_has_const(const validate_BoolRules* msg) {
-  return _upb_has_field(msg, 1);
-}
-UPB_INLINE bool validate_BoolRules_const(const validate_BoolRules* msg) {
-  return UPB_FIELD_AT(msg, bool, UPB_SIZE(1, 1));
-}
-UPB_INLINE void validate_BoolRules_set_const(validate_BoolRules* msg,
-                                             bool value) {
+UPB_INLINE bool validate_BoolRules_has_const(const validate_BoolRules *msg) { return _upb_has_field(msg, 1); }
+UPB_INLINE bool validate_BoolRules_const(const validate_BoolRules *msg) { return UPB_FIELD_AT(msg, bool, UPB_SIZE(1, 1)); }
+UPB_INLINE void validate_BoolRules_set_const(validate_BoolRules *msg, bool value) {
@@ -2021,2 +1207 @@ UPB_INLINE validate_StringRules* validate_StringRules_new(upb_arena* arena) {
-  return (validate_StringRules*)_upb_msg_new(&validate_StringRules_msginit,
-                                             arena);
+  return (validate_StringRules *)_upb_msg_new(&validate_StringRules_msginit, arena);
@@ -2024,2 +1209 @@ UPB_INLINE validate_StringRules* validate_StringRules_new(upb_arena* arena) {
-UPB_INLINE validate_StringRules* validate_StringRules_parse(const char* buf,
-                                                            size_t size,
+UPB_INLINE validate_StringRules *validate_StringRules_parse(const char *buf, size_t size,
@@ -2028,4 +1212 @@ UPB_INLINE validate_StringRules* validate_StringRules_parse(const char* buf,
-  return (ret &&
-          upb_decode(buf, size, ret, &validate_StringRules_msginit, arena))
-             ? ret
-             : NULL;
+  return (ret && upb_decode(buf, size, ret, &validate_StringRules_msginit, arena)) ? ret : NULL;
@@ -2033,2 +1214 @@ UPB_INLINE validate_StringRules* validate_StringRules_parse(const char* buf,
-UPB_INLINE char* validate_StringRules_serialize(const validate_StringRules* msg,
-                                                upb_arena* arena, size_t* len) {
+UPB_INLINE char *validate_StringRules_serialize(const validate_StringRules *msg, upb_arena *arena, size_t *len) {
@@ -2050,4 +1230,52 @@ typedef enum {
-UPB_INLINE validate_StringRules_well_known_oneofcases
-validate_StringRules_well_known_case(const validate_StringRules* msg) {
-  return (validate_StringRules_well_known_oneofcases)UPB_FIELD_AT(
-      msg, int32_t, UPB_SIZE(128, 184));
+UPB_INLINE validate_StringRules_well_known_oneofcases validate_StringRules_well_known_case(const validate_StringRules* msg) { return (validate_StringRules_well_known_oneofcases)UPB_FIELD_AT(msg, int32_t, UPB_SIZE(128, 184)); }
+UPB_INLINE bool validate_StringRules_has_const(const validate_StringRules *msg) { return _upb_has_field(msg, 8); }
+UPB_INLINE upb_strview validate_StringRules_const(const validate_StringRules *msg) { return UPB_FIELD_AT(msg, upb_strview, UPB_SIZE(60, 64)); }
+UPB_INLINE bool validate_StringRules_has_min_len(const validate_StringRules *msg) { return _upb_has_field(msg, 1); }
+UPB_INLINE uint64_t validate_StringRules_min_len(const validate_StringRules *msg) { return UPB_FIELD_AT(msg, uint64_t, UPB_SIZE(8, 8)); }
+UPB_INLINE bool validate_StringRules_has_max_len(const validate_StringRules *msg) { return _upb_has_field(msg, 2); }
+UPB_INLINE uint64_t validate_StringRules_max_len(const validate_StringRules *msg) { return UPB_FIELD_AT(msg, uint64_t, UPB_SIZE(16, 16)); }
+UPB_INLINE bool validate_StringRules_has_min_bytes(const validate_StringRules *msg) { return _upb_has_field(msg, 3); }
+UPB_INLINE uint64_t validate_StringRules_min_bytes(const validate_StringRules *msg) { return UPB_FIELD_AT(msg, uint64_t, UPB_SIZE(24, 24)); }
+UPB_INLINE bool validate_StringRules_has_max_bytes(const validate_StringRules *msg) { return _upb_has_field(msg, 4); }
+UPB_INLINE uint64_t validate_StringRules_max_bytes(const validate_StringRules *msg) { return UPB_FIELD_AT(msg, uint64_t, UPB_SIZE(32, 32)); }
+UPB_INLINE bool validate_StringRules_has_pattern(const validate_StringRules *msg) { return _upb_has_field(msg, 9); }
+UPB_INLINE upb_strview validate_StringRules_pattern(const validate_StringRules *msg) { return UPB_FIELD_AT(msg, upb_strview, UPB_SIZE(68, 80)); }
+UPB_INLINE bool validate_StringRules_has_prefix(const validate_StringRules *msg) { return _upb_has_field(msg, 10); }
+UPB_INLINE upb_strview validate_StringRules_prefix(const validate_StringRules *msg) { return UPB_FIELD_AT(msg, upb_strview, UPB_SIZE(76, 96)); }
+UPB_INLINE bool validate_StringRules_has_suffix(const validate_StringRules *msg) { return _upb_has_field(msg, 11); }
+UPB_INLINE upb_strview validate_StringRules_suffix(const validate_StringRules *msg) { return UPB_FIELD_AT(msg, upb_strview, UPB_SIZE(84, 112)); }
+UPB_INLINE bool validate_StringRules_has_contains(const validate_StringRules *msg) { return _upb_has_field(msg, 12); }
+UPB_INLINE upb_strview validate_StringRules_contains(const validate_StringRules *msg) { return UPB_FIELD_AT(msg, upb_strview, UPB_SIZE(92, 128)); }
+UPB_INLINE upb_strview const* validate_StringRules_in(const validate_StringRules *msg, size_t *len) { return (upb_strview const*)_upb_array_accessor(msg, UPB_SIZE(108, 160), len); }
+UPB_INLINE upb_strview const* validate_StringRules_not_in(const validate_StringRules *msg, size_t *len) { return (upb_strview const*)_upb_array_accessor(msg, UPB_SIZE(112, 168), len); }
+UPB_INLINE bool validate_StringRules_has_email(const validate_StringRules *msg) { return _upb_has_oneof_field(msg, UPB_SIZE(128, 184), 12); }
+UPB_INLINE bool validate_StringRules_email(const validate_StringRules *msg) { return UPB_READ_ONEOF(msg, bool, UPB_SIZE(120, 176), UPB_SIZE(128, 184), 12, false); }
+UPB_INLINE bool validate_StringRules_has_hostname(const validate_StringRules *msg) { return _upb_has_oneof_field(msg, UPB_SIZE(128, 184), 13); }
+UPB_INLINE bool validate_StringRules_hostname(const validate_StringRules *msg) { return UPB_READ_ONEOF(msg, bool, UPB_SIZE(120, 176), UPB_SIZE(128, 184), 13, false); }
+UPB_INLINE bool validate_StringRules_has_ip(const validate_StringRules *msg) { return _upb_has_oneof_field(msg, UPB_SIZE(128, 184), 14); }
+UPB_INLINE bool validate_StringRules_ip(const validate_StringRules *msg) { return UPB_READ_ONEOF(msg, bool, UPB_SIZE(120, 176), UPB_SIZE(128, 184), 14, false); }
+UPB_INLINE bool validate_StringRules_has_ipv4(const validate_StringRules *msg) { return _upb_has_oneof_field(msg, UPB_SIZE(128, 184), 15); }
+UPB_INLINE bool validate_StringRules_ipv4(const validate_StringRules *msg) { return UPB_READ_ONEOF(msg, bool, UPB_SIZE(120, 176), UPB_SIZE(128, 184), 15, false); }
+UPB_INLINE bool validate_StringRules_has_ipv6(const validate_StringRules *msg) { return _upb_has_oneof_field(msg, UPB_SIZE(128, 184), 16); }
+UPB_INLINE bool validate_StringRules_ipv6(const validate_StringRules *msg) { return UPB_READ_ONEOF(msg, bool, UPB_SIZE(120, 176), UPB_SIZE(128, 184), 16, false); }
+UPB_INLINE bool validate_StringRules_has_uri(const validate_StringRules *msg) { return _upb_has_oneof_field(msg, UPB_SIZE(128, 184), 17); }
+UPB_INLINE bool validate_StringRules_uri(const validate_StringRules *msg) { return UPB_READ_ONEOF(msg, bool, UPB_SIZE(120, 176), UPB_SIZE(128, 184), 17, false); }
+UPB_INLINE bool validate_StringRules_has_uri_ref(const validate_StringRules *msg) { return _upb_has_oneof_field(msg, UPB_SIZE(128, 184), 18); }
+UPB_INLINE bool validate_StringRules_uri_ref(const validate_StringRules *msg) { return UPB_READ_ONEOF(msg, bool, UPB_SIZE(120, 176), UPB_SIZE(128, 184), 18, false); }
+UPB_INLINE bool validate_StringRules_has_len(const validate_StringRules *msg) { return _upb_has_field(msg, 5); }
+UPB_INLINE uint64_t validate_StringRules_len(const validate_StringRules *msg) { return UPB_FIELD_AT(msg, uint64_t, UPB_SIZE(40, 40)); }
+UPB_INLINE bool validate_StringRules_has_len_bytes(const validate_StringRules *msg) { return _upb_has_field(msg, 6); }
+UPB_INLINE uint64_t validate_StringRules_len_bytes(const validate_StringRules *msg) { return UPB_FIELD_AT(msg, uint64_t, UPB_SIZE(48, 48)); }
+UPB_INLINE bool validate_StringRules_has_address(const validate_StringRules *msg) { return _upb_has_oneof_field(msg, UPB_SIZE(128, 184), 21); }
+UPB_INLINE bool validate_StringRules_address(const validate_StringRules *msg) { return UPB_READ_ONEOF(msg, bool, UPB_SIZE(120, 176), UPB_SIZE(128, 184), 21, false); }
+UPB_INLINE bool validate_StringRules_has_uuid(const validate_StringRules *msg) { return _upb_has_oneof_field(msg, UPB_SIZE(128, 184), 22); }
+UPB_INLINE bool validate_StringRules_uuid(const validate_StringRules *msg) { return UPB_READ_ONEOF(msg, bool, UPB_SIZE(120, 176), UPB_SIZE(128, 184), 22, false); }
+UPB_INLINE bool validate_StringRules_has_not_contains(const validate_StringRules *msg) { return _upb_has_field(msg, 13); }
+UPB_INLINE upb_strview validate_StringRules_not_contains(const validate_StringRules *msg) { return UPB_FIELD_AT(msg, upb_strview, UPB_SIZE(100, 144)); }
+UPB_INLINE bool validate_StringRules_has_well_known_regex(const validate_StringRules *msg) { return _upb_has_oneof_field(msg, UPB_SIZE(128, 184), 24); }
+UPB_INLINE int32_t validate_StringRules_well_known_regex(const validate_StringRules *msg) { return UPB_READ_ONEOF(msg, int32_t, UPB_SIZE(120, 176), UPB_SIZE(128, 184), 24, validate_UNKNOWN); }
+UPB_INLINE bool validate_StringRules_has_strict(const validate_StringRules *msg) { return _upb_has_field(msg, 7); }
+UPB_INLINE bool validate_StringRules_strict(const validate_StringRules *msg) { return UPB_FIELD_AT(msg, bool, UPB_SIZE(56, 56)); }
+UPB_INLINE void validate_StringRules_set_const(validate_StringRules *msg, upb_strview value) {
+  _upb_sethas(msg, 8);
+  UPB_FIELD_AT(msg, upb_strview, UPB_SIZE(60, 64)) = value;
@@ -2055,3 +1283,3 @@ validate_StringRules_well_known_case(const validate_StringRules* msg) {
-UPB_INLINE bool validate_StringRules_has_const(
-    const validate_StringRules* msg) {
-  return _upb_has_field(msg, 8);
+UPB_INLINE void validate_StringRules_set_min_len(validate_StringRules *msg, uint64_t value) {
+  _upb_sethas(msg, 1);
+  UPB_FIELD_AT(msg, uint64_t, UPB_SIZE(8, 8)) = value;
@@ -2059,3 +1287,3 @@ UPB_INLINE bool validate_StringRules_has_const(
-UPB_INLINE upb_strview
-envoy_api_v2_auth_Secret_name(const envoy_api_v2_auth_Secret* msg) {
-  return UPB_FIELD_AT(msg, upb_strview, UPB_SIZE(0, 0));
+UPB_INLINE void validate_StringRules_set_max_len(validate_StringRules *msg, uint64_t value) {
+  _upb_sethas(msg, 2);
+  UPB_FIELD_AT(msg, uint64_t, UPB_SIZE(16, 16)) = value;
@@ -2063,3 +1291,3 @@ envoy_api_v2_auth_Secret_name(const envoy_api_v2_auth_Secret* msg) {
-UPB_INLINE bool validate_StringRules_has_min_len(
-    const validate_StringRules* msg) {
-  return _upb_has_field(msg, 1);
+UPB_INLINE void validate_StringRules_set_min_bytes(validate_StringRules *msg, uint64_t value) {
+  _upb_sethas(msg, 3);
+  UPB_FIELD_AT(msg, uint64_t, UPB_SIZE(24, 24)) = value;
@@ -2067,3 +1295,3 @@ UPB_INLINE bool validate_StringRules_has_min_len(
-UPB_INLINE uint64_t
-validate_StringRules_min_len(const validate_StringRules* msg) {
-  return UPB_FIELD_AT(msg, uint64_t, UPB_SIZE(8, 8));
+UPB_INLINE void validate_StringRules_set_max_bytes(validate_StringRules *msg, uint64_t value) {
+  _upb_sethas(msg, 4);
+  UPB_FIELD_AT(msg, uint64_t, UPB_SIZE(32, 32)) = value;
@@ -2071,3 +1299,3 @@ validate_StringRules_min_len(const validate_StringRules* msg) {
-UPB_INLINE bool validate_StringRules_has_max_len(
-    const validate_StringRules* msg) {
-  return _upb_has_field(msg, 2);
+UPB_INLINE void validate_StringRules_set_pattern(validate_StringRules *msg, upb_strview value) {
+  _upb_sethas(msg, 9);
+  UPB_FIELD_AT(msg, upb_strview, UPB_SIZE(68, 80)) = value;
@@ -2075,3 +1303,3 @@ UPB_INLINE bool validate_StringRules_has_max_len(
-UPB_INLINE uint64_t
-validate_StringRules_max_len(const validate_StringRules* msg) {
-  return UPB_FIELD_AT(msg, uint64_t, UPB_SIZE(16, 16));
+UPB_INLINE void validate_StringRules_set_prefix(validate_StringRules *msg, upb_strview value) {
+  _upb_sethas(msg, 10);
+  UPB_FIELD_AT(msg, upb_strview, UPB_SIZE(76, 96)) = value;
@@ -2079,3 +1307,3 @@ validate_StringRules_max_len(const validate_StringRules* msg) {
-UPB_INLINE bool validate_StringRules_has_min_bytes(
-    const validate_StringRules* msg) {
-  return _upb_has_field(msg, 3);
+UPB_INLINE void validate_StringRules_set_suffix(validate_StringRules *msg, upb_strview value) {
+  _upb_sethas(msg, 11);
+  UPB_FIELD_AT(msg, upb_strview, UPB_SIZE(84, 112)) = value;
@@ -2083,3 +1311,3 @@ UPB_INLINE bool validate_StringRules_has_min_bytes(
-UPB_INLINE uint64_t
-validate_StringRules_min_bytes(const validate_StringRules* msg) {
-  return UPB_FIELD_AT(msg, uint64_t, UPB_SIZE(24, 24));
+UPB_INLINE void validate_StringRules_set_contains(validate_StringRules *msg, upb_strview value) {
+  _upb_sethas(msg, 12);
+  UPB_FIELD_AT(msg, upb_strview, UPB_SIZE(92, 128)) = value;
@@ -2087,3 +1315,2 @@ validate_StringRules_min_bytes(const validate_StringRules* msg) {
-UPB_INLINE bool validate_StringRules_has_max_bytes(
-    const validate_StringRules* msg) {
-  return _upb_has_field(msg, 4);
+UPB_INLINE upb_strview* validate_StringRules_mutable_in(validate_StringRules *msg, size_t *len) {
+  return (upb_strview*)_upb_array_mutable_accessor(msg, UPB_SIZE(108, 160), len);
@@ -2091,3 +1318,2 @@ UPB_INLINE bool validate_StringRules_has_max_bytes(
-UPB_INLINE uint64_t
-validate_StringRules_max_bytes(const validate_StringRules* msg) {
-  return UPB_FIELD_AT(msg, uint64_t, UPB_SIZE(32, 32));
+UPB_INLINE upb_strview* validate_StringRules_resize_in(validate_StringRules *msg, size_t len, upb_arena *arena) {
+  return (upb_strview*)_upb_array_resize_accessor(msg, UPB_SIZE(108, 160), len, UPB_TYPE_STRING, arena);
@@ -2095,3 +1321,3 @@ validate_StringRules_max_bytes(const validate_StringRules* msg) {
-UPB_INLINE bool validate_StringRules_has_pattern(
-    const validate_StringRules* msg) {
-  return _upb_has_field(msg, 9);
+UPB_INLINE bool validate_StringRules_add_in(validate_StringRules *msg, upb_strview val, upb_arena *arena) {
+  return _upb_array_append_accessor(msg, UPB_SIZE(108, 160), UPB_SIZE(8, 16), UPB_TYPE_STRING, &val,
+      arena);
@@ -2099,3 +1325,2 @@ UPB_INLINE bool validate_StringRules_has_pattern(
-UPB_INLINE upb_strview
-envoy_api_v2_auth_Secret_name(const envoy_api_v2_auth_Secret* msg) {
-  return UPB_FIELD_AT(msg, upb_strview, UPB_SIZE(0, 0));
+UPB_INLINE upb_strview* validate_StringRules_mutable_not_in(validate_StringRules *msg, size_t *len) {
+  return (upb_strview*)_upb_array_mutable_accessor(msg, UPB_SIZE(112, 168), len);
@@ -2103,3 +1328,2 @@ envoy_api_v2_auth_Secret_name(const envoy_api_v2_auth_Secret* msg) {
-UPB_INLINE bool validate_StringRules_has_prefix(
-    const validate_StringRules* msg) {
-  return _upb_has_field(msg, 10);
+UPB_INLINE upb_strview* validate_StringRules_resize_not_in(validate_StringRules *msg, size_t len, upb_arena *arena) {
+  return (upb_strview*)_upb_array_resize_accessor(msg, UPB_SIZE(112, 168), len, UPB_TYPE_STRING, arena);
@@ -2107,3 +1331,3 @@ UPB_INLINE bool validate_StringRules_has_prefix(
-UPB_INLINE upb_strview
-envoy_api_v2_auth_Secret_name(const envoy_api_v2_auth_Secret* msg) {
-  return UPB_FIELD_AT(msg, upb_strview, UPB_SIZE(0, 0));
+UPB_INLINE bool validate_StringRules_add_not_in(validate_StringRules *msg, upb_strview val, upb_arena *arena) {
+  return _upb_array_append_accessor(msg, UPB_SIZE(112, 168), UPB_SIZE(8, 16), UPB_TYPE_STRING, &val,
+      arena);
@@ -2111,3 +1335,2 @@ envoy_api_v2_auth_Secret_name(const envoy_api_v2_auth_Secret* msg) {
-UPB_INLINE bool validate_StringRules_has_suffix(
-    const validate_StringRules* msg) {
-  return _upb_has_field(msg, 11);
+UPB_INLINE void validate_StringRules_set_email(validate_StringRules *msg, bool value) {
+  UPB_WRITE_ONEOF(msg, bool, UPB_SIZE(120, 176), value, UPB_SIZE(128, 184), 12);
@@ -2115,3 +1338,2 @@ UPB_INLINE bool validate_StringRules_has_suffix(
-UPB_INLINE upb_strview
-envoy_api_v2_auth_Secret_name(const envoy_api_v2_auth_Secret* msg) {
-  return UPB_FIELD_AT(msg, upb_strview, UPB_SIZE(0, 0));
+UPB_INLINE void validate_StringRules_set_hostname(validate_StringRules *msg, bool value) {
+  UPB_WRITE_ONEOF(msg, bool, UPB_SIZE(120, 176), value, UPB_SIZE(128, 184), 13);
@@ -2119,3 +1341,2 @@ envoy_api_v2_auth_Secret_name(const envoy_api_v2_auth_Secret* msg) {
-UPB_INLINE bool validate_StringRules_has_contains(
-    const validate_StringRules* msg) {
-  return _upb_has_field(msg, 12);
+UPB_INLINE void validate_StringRules_set_ip(validate_StringRules *msg, bool value) {
+  UPB_WRITE_ONEOF(msg, bool, UPB_SIZE(120, 176), value, UPB_SIZE(128, 184), 14);
@@ -2123,3 +1344,2 @@ UPB_INLINE bool validate_StringRules_has_contains(
-UPB_INLINE upb_strview
-envoy_api_v2_auth_Secret_name(const envoy_api_v2_auth_Secret* msg) {
-  return UPB_FIELD_AT(msg, upb_strview, UPB_SIZE(0, 0));
+UPB_INLINE void validate_StringRules_set_ipv4(validate_StringRules *msg, bool value) {
+  UPB_WRITE_ONEOF(msg, bool, UPB_SIZE(120, 176), value, UPB_SIZE(128, 184), 15);
@@ -2127,3 +1347,2 @@ envoy_api_v2_auth_Secret_name(const envoy_api_v2_auth_Secret* msg) {
-UPB_INLINE upb_strview const* validate_StringRules_in(
-    const validate_StringRules* msg, size_t* len) {
-  return (upb_strview const*)_upb_array_accessor(msg, UPB_SIZE(108, 160), len);
+UPB_INLINE void validate_StringRules_set_ipv6(validate_StringRules *msg, bool value) {
+  UPB_WRITE_ONEOF(msg, bool, UPB_SIZE(120, 176), value, UPB_SIZE(128, 184), 16);
@@ -2131,3 +1350,2 @@ UPB_INLINE upb_strview const* validate_StringRules_in(
-UPB_INLINE upb_strview const* validate_StringRules_not_in(
-    const validate_StringRules* msg, size_t* len) {
-  return (upb_strview const*)_upb_array_accessor(msg, UPB_SIZE(112, 168), len);
+UPB_INLINE void validate_StringRules_set_uri(validate_StringRules *msg, bool value) {
+  UPB_WRITE_ONEOF(msg, bool, UPB_SIZE(120, 176), value, UPB_SIZE(128, 184), 17);
@@ -2135,3 +1353,2 @@ UPB_INLINE upb_strview const* validate_StringRules_not_in(
-UPB_INLINE bool validate_StringRules_has_email(
-    const validate_StringRules* msg) {
-  return _upb_has_oneof_field(msg, UPB_SIZE(128, 184), 12);
+UPB_INLINE void validate_StringRules_set_uri_ref(validate_StringRules *msg, bool value) {
+  UPB_WRITE_ONEOF(msg, bool, UPB_SIZE(120, 176), value, UPB_SIZE(128, 184), 18);
@@ -2139,3 +1356,3 @@ UPB_INLINE bool validate_StringRules_has_email(
-UPB_INLINE bool validate_StringRules_email(const validate_StringRules* msg) {
-  return UPB_READ_ONEOF(msg, bool, UPB_SIZE(120, 176), UPB_SIZE(128, 184), 12,
-                        false);
+UPB_INLINE void validate_StringRules_set_len(validate_StringRules *msg, uint64_t value) {
+  _upb_sethas(msg, 5);
+  UPB_FIELD_AT(msg, uint64_t, UPB_SIZE(40, 40)) = value;
@@ -2143,3 +1360,3 @@ UPB_INLINE bool validate_StringRules_email(const validate_StringRules* msg) {
-UPB_INLINE bool validate_StringRules_has_hostname(
-    const validate_StringRules* msg) {
-  return _upb_has_oneof_field(msg, UPB_SIZE(128, 184), 13);
+UPB_INLINE void validate_StringRules_set_len_bytes(validate_StringRules *msg, uint64_t value) {
+  _upb_sethas(msg, 6);
+  UPB_FIELD_AT(msg, uint64_t, UPB_SIZE(48, 48)) = value;
@@ -2147,3 +1364,2 @@ UPB_INLINE bool validate_StringRules_has_hostname(
-UPB_INLINE bool validate_StringRules_hostname(const validate_StringRules* msg) {
-  return UPB_READ_ONEOF(msg, bool, UPB_SIZE(120, 176), UPB_SIZE(128, 184), 13,
-                        false);
+UPB_INLINE void validate_StringRules_set_address(validate_StringRules *msg, bool value) {
+  UPB_WRITE_ONEOF(msg, bool, UPB_SIZE(120, 176), value, UPB_SIZE(128, 184), 21);
@@ -2151,2 +1367,2 @@ UPB_INLINE bool validate_StringRules_hostname(const validate_StringRules* msg) {
-UPB_INLINE bool validate_StringRules_has_ip(const validate_StringRules* msg) {
-  return _upb_has_oneof_field(msg, UPB_SIZE(128, 184), 14);
+UPB_INLINE void validate_StringRules_set_uuid(validate_StringRules *msg, bool value) {
+  UPB_WRITE_ONEOF(msg, bool, UPB_SIZE(120, 176), value, UPB_SIZE(128, 184), 22);
@@ -2154,3 +1370,3 @@ UPB_INLINE bool validate_StringRules_has_ip(const validate_StringRules* msg) {
-UPB_INLINE bool validate_StringRules_ip(const validate_StringRules* msg) {
-  return UPB_READ_ONEOF(msg, bool, UPB_SIZE(120, 176), UPB_SIZE(128, 184), 14,
-                        false);
+UPB_INLINE void validate_StringRules_set_not_contains(validate_StringRules *msg, upb_strview value) {
+  _upb_sethas(msg, 13);
+  UPB_FIELD_AT(msg, upb_strview, UPB_SIZE(100, 144)) = value;
@@ -2158,2 +1374,2 @@ UPB_INLINE bool validate_StringRules_ip(const validate_StringRules* msg) {
-UPB_INLINE bool validate_StringRules_has_ipv4(const validate_StringRules* msg) {
-  return _upb_has_oneof_field(msg, UPB_SIZE(128, 184), 15);
+UPB_INLINE void validate_StringRules_set_well_known_regex(validate_StringRules *msg, int32_t value) {
+  UPB_WRITE_ONEOF(msg, int32_t, UPB_SIZE(120, 176), value, UPB_SIZE(128, 184), 24);
@@ -2161,3 +1377,3 @@ UPB_INLINE bool validate_StringRules_has_ipv4(const validate_StringRules* msg) {
-UPB_INLINE bool validate_StringRules_ipv4(const validate_StringRules* msg) {
-  return UPB_READ_ONEOF(msg, bool, UPB_SIZE(120, 176), UPB_SIZE(128, 184), 15,
-                        false);
+UPB_INLINE void validate_StringRules_set_strict(validate_StringRules *msg, bool value) {
+  _upb_sethas(msg, 7);
+  UPB_FIELD_AT(msg, bool, UPB_SIZE(56, 56)) = value;
@@ -2165,2 +1381,2 @@ UPB_INLINE bool validate_StringRules_ipv4(const validate_StringRules* msg) {
-UPB_INLINE bool validate_StringRules_has_ipv6(const validate_StringRules* msg) {
-  return _upb_has_oneof_field(msg, UPB_SIZE(128, 184), 16);
+UPB_INLINE validate_BytesRules *validate_BytesRules_new(upb_arena *arena) {
+  return (validate_BytesRules *)_upb_msg_new(&validate_BytesRules_msginit, arena);
@@ -2168,3 +1384,4 @@ UPB_INLINE bool validate_StringRules_has_ipv6(const validate_StringRules* msg) {
-UPB_INLINE bool validate_StringRules_ipv6(const validate_StringRules* msg) {
-  return UPB_READ_ONEOF(msg, bool, UPB_SIZE(120, 176), UPB_SIZE(128, 184), 16,
-                        false);
+UPB_INLINE validate_BytesRules *validate_BytesRules_parse(const char *buf, size_t size,
+                        upb_arena *arena) {
+  validate_BytesRules *ret = validate_BytesRules_new(arena);
+  return (ret && upb_decode(buf, size, ret, &validate_BytesRules_msginit, arena)) ? ret : NULL;
@@ -2172,2 +1389,2 @@ UPB_INLINE bool validate_StringRules_ipv6(const validate_StringRules* msg) {
-UPB_INLINE bool validate_StringRules_has_uri(const validate_StringRules* msg) {
-  return _upb_has_oneof_field(msg, UPB_SIZE(128, 184), 17);
+UPB_INLINE char *validate_BytesRules_serialize(const validate_BytesRules *msg, upb_arena *arena, size_t *len) {
+  return upb_encode(msg, &validate_BytesRules_msginit, arena, len);
@@ -2175,3 +1392,34 @@ UPB_INLINE bool validate_StringRules_has_uri(const validate_StringRules* msg) {
-UPB_INLINE bool validate_StringRules_uri(const validate_StringRules* msg) {
-  return UPB_READ_ONEOF(msg, bool, UPB_SIZE(120, 176), UPB_SIZE(128, 184), 17,
-                        false);
+typedef enum {
+  validate_BytesRules_well_known_ip = 10,
+  validate_BytesRules_well_known_ipv4 = 11,
+  validate_BytesRules_well_known_ipv6 = 12,
+  validate_BytesRules_well_known_NOT_SET = 0
+} validate_BytesRules_well_known_oneofcases;
+UPB_INLINE validate_BytesRules_well_known_oneofcases validate_BytesRules_well_known_case(const validate_BytesRules* msg) { return (validate_BytesRules_well_known_oneofcases)UPB_FIELD_AT(msg, int32_t, UPB_SIZE(84, 132)); }
+UPB_INLINE bool validate_BytesRules_has_const(const validate_BytesRules *msg) { return _upb_has_field(msg, 4); }
+UPB_INLINE upb_strview validate_BytesRules_const(const validate_BytesRules *msg) { return UPB_FIELD_AT(msg, upb_strview, UPB_SIZE(32, 32)); }
+UPB_INLINE bool validate_BytesRules_has_min_len(const validate_BytesRules *msg) { return _upb_has_field(msg, 1); }
+UPB_INLINE uint64_t validate_BytesRules_min_len(const validate_BytesRules *msg) { return UPB_FIELD_AT(msg, uint64_t, UPB_SIZE(8, 8)); }
+UPB_INLINE bool validate_BytesRules_has_max_len(const validate_BytesRules *msg) { return _upb_has_field(msg, 2); }
+UPB_INLINE uint64_t validate_BytesRules_max_len(const validate_BytesRules *msg) { return UPB_FIELD_AT(msg, uint64_t, UPB_SIZE(16, 16)); }
+UPB_INLINE bool validate_BytesRules_has_pattern(const validate_BytesRules *msg) { return _upb_has_field(msg, 5); }
+UPB_INLINE upb_strview validate_BytesRules_pattern(const validate_BytesRules *msg) { return UPB_FIELD_AT(msg, upb_strview, UPB_SIZE(40, 48)); }
+UPB_INLINE bool validate_BytesRules_has_prefix(const validate_BytesRules *msg) { return _upb_has_field(msg, 6); }
+UPB_INLINE upb_strview validate_BytesRules_prefix(const validate_BytesRules *msg) { return UPB_FIELD_AT(msg, upb_strview, UPB_SIZE(48, 64)); }
+UPB_INLINE bool validate_BytesRules_has_suffix(const validate_BytesRules *msg) { return _upb_has_field(msg, 7); }
+UPB_INLINE upb_strview validate_BytesRules_suffix(const validate_BytesRules *msg) { return UPB_FIELD_AT(msg, upb_strview, UPB_SIZE(56, 80)); }
+UPB_INLINE bool validate_BytesRules_has_contains(const validate_BytesRules *msg) { return _upb_has_field(msg, 8); }
+UPB_INLINE upb_strview validate_BytesRules_contains(const validate_BytesRules *msg) { return UPB_FIELD_AT(msg, upb_strview, UPB_SIZE(64, 96)); }
+UPB_INLINE upb_strview const* validate_BytesRules_in(const validate_BytesRules *msg, size_t *len) { return (upb_strview const*)_upb_array_accessor(msg, UPB_SIZE(72, 112), len); }
+UPB_INLINE upb_strview const* validate_BytesRules_not_in(const validate_BytesRules *msg, size_t *len) { return (upb_strview const*)_upb_array_accessor(msg, UPB_SIZE(76, 120), len); }
+UPB_INLINE bool validate_BytesRules_has_ip(const validate_BytesRules *msg) { return _upb_has_oneof_field(msg, UPB_SIZE(84, 132), 10); }
+UPB_INLINE bool validate_BytesRules_ip(const validate_BytesRules *msg) { return UPB_READ_ONEOF(msg, bool, UPB_SIZE(80, 128), UPB_SIZE(84, 132), 10, false); }
+UPB_INLINE bool validate_BytesRules_has_ipv4(const validate_BytesRules *msg) { return _upb_has_oneof_field(msg, UPB_SIZE(84, 132), 11); }
+UPB_INLINE bool validate_BytesRules_ipv4(const validate_BytesRules *msg) { return UPB_READ_ONEOF(msg, bool, UPB_SIZE(80, 128), UPB_SIZE(84, 132), 11, false); }
+UPB_INLINE bool validate_BytesRules_has_ipv6(const validate_BytesRules *msg) { return _upb_has_oneof_field(msg, UPB_SIZE(84, 132), 12); }
+UPB_INLINE bool validate_BytesRules_ipv6(const validate_BytesRules *msg) { return UPB_READ_ONEOF(msg, bool, UPB_SIZE(80, 128), UPB_SIZE(84, 132), 12, false); }
+UPB_INLINE bool validate_BytesRules_has_len(const validate_BytesRules *msg) { return _upb_has_field(msg, 3); }
+UPB_INLINE uint64_t validate_BytesRules_len(const validate_BytesRules *msg) { return UPB_FIELD_AT(msg, uint64_t, UPB_SIZE(24, 24)); }
+UPB_INLINE void validate_BytesRules_set_const(validate_BytesRules *msg, upb_strview value) {
+  _upb_sethas(msg, 4);
+  UPB_FIELD_AT(msg, upb_strview, UPB_SIZE(32, 32)) = value;
@@ -2179,3 +1427,3 @@ UPB_INLINE bool validate_StringRules_uri(const validate_StringRules* msg) {
-UPB_INLINE bool validate_StringRules_has_uri_ref(
-    const validate_StringRules* msg) {
-  return _upb_has_oneof_field(msg, UPB_SIZE(128, 184), 18);
+UPB_INLINE void validate_BytesRules_set_min_len(validate_BytesRules *msg, uint64_t value) {
+  _upb_sethas(msg, 1);
+  UPB_FIELD_AT(msg, uint64_t, UPB_SIZE(8, 8)) = value;
@@ -2183,3 +1431,3 @@ UPB_INLINE bool validate_StringRules_has_uri_ref(
-UPB_INLINE bool validate_StringRules_uri_ref(const validate_StringRules* msg) {
-  return UPB_READ_ONEOF(msg, bool, UPB_SIZE(120, 176), UPB_SIZE(128, 184), 18,
-                        false);
+UPB_INLINE void validate_BytesRules_set_max_len(validate_BytesRules *msg, uint64_t value) {
+  _upb_sethas(msg, 2);
+  UPB_FIELD_AT(msg, uint64_t, UPB_SIZE(16, 16)) = value;
@@ -2187,2 +1435,3 @@ UPB_INLINE bool validate_StringRules_uri_ref(const validate_StringRules* msg) {
-UPB_INLINE bool validate_StringRules_has_len(const validate_StringRules* msg) {
-  return _upb_has_field(msg, 5);
+UPB_INLINE void validate_BytesRules_set_pattern(validate_BytesRules *msg, upb_strview value) {
+  _upb_sethas(msg, 5);
+  UPB_FIELD_AT(msg, upb_strview, UPB_SIZE(40, 48)) = value;
@@ -2190,2 +1439,3 @@ UPB_INLINE bool validate_StringRules_has_len(const validate_StringRules* msg) {
-UPB_INLINE uint64_t validate_StringRules_len(const validate_StringRules* msg) {
-  return UPB_FIELD_AT(msg, uint64_t, UPB_SIZE(40, 40));
+UPB_INLINE void validate_BytesRules_set_prefix(validate_BytesRules *msg, upb_strview value) {
+  _upb_sethas(msg, 6);
+  UPB_FIELD_AT(msg, upb_strview, UPB_SIZE(48, 64)) = value;
@@ -2193,3 +1443,3 @@ UPB_INLINE uint64_t validate_StringRules_len(const validate_StringRules* msg) {
-UPB_INLINE bool validate_StringRules_has_len_bytes(
-    const validate_StringRules* msg) {
-  return _upb_has_field(msg, 6);
+UPB_INLINE void validate_BytesRules_set_suffix(validate_BytesRules *msg, upb_strview value) {
+  _upb_sethas(msg, 7);
+  UPB_FIELD_AT(msg, upb_strview, UPB_SIZE(56, 80)) = value;
@@ -2197,3 +1447,3 @@ UPB_INLINE bool validate_StringRules_has_len_bytes(
-UPB_INLINE uint64_t
-validate_StringRules_len_bytes(const validate_StringRules* msg) {
-  return UPB_FIELD_AT(msg, uint64_t, UPB_SIZE(48, 48));
+UPB_INLINE void validate_BytesRules_set_contains(validate_BytesRules *msg, upb_strview value) {
+  _upb_sethas(msg, 8);
+  UPB_FIELD_AT(msg, upb_strview, UPB_SIZE(64, 96)) = value;
@@ -2201,3 +1451,2 @@ validate_StringRules_len_bytes(const validate_StringRules* msg) {
-UPB_INLINE bool validate_StringRules_has_address(
-    const validate_StringRules* msg) {
-  return _upb_has_oneof_field(msg, UPB_SIZE(128, 184), 21);
+UPB_INLINE upb_strview* validate_BytesRules_mutable_in(validate_BytesRules *msg, size_t *len) {
+  return (upb_strview*)_upb_array_mutable_accessor(msg, UPB_SIZE(72, 112), len);
@@ -2205,3 +1454,2 @@ UPB_INLINE bool validate_StringRules_has_address(
-UPB_INLINE bool validate_StringRules_address(const validate_StringRules* msg) {
-  return UPB_READ_ONEOF(msg, bool, UPB_SIZE(120, 176), UPB_SIZE(128, 184), 21,
-                        false);
+UPB_INLINE upb_strview* validate_BytesRules_resize_in(validate_BytesRules *msg, size_t len, upb_arena *arena) {
+  return (upb_strview*)_upb_array_resize_accessor(msg, UPB_SIZE(72, 112), len, UPB_TYPE_STRING, arena);
@@ -2209,2 +1457,3 @@ UPB_INLINE bool validate_StringRules_address(const validate_StringRules* msg) {
-UPB_INLINE bool validate_StringRules_has_uuid(const validate_StringRules* msg) {
-  return _upb_has_oneof_field(msg, UPB_SIZE(128, 184), 22);
+UPB_INLINE bool validate_BytesRules_add_in(validate_BytesRules *msg, upb_strview val, upb_arena *arena) {
+  return _upb_array_append_accessor(msg, UPB_SIZE(72, 112), UPB_SIZE(8, 16), UPB_TYPE_STRING, &val,
+      arena);
@@ -2212,3 +1461,2 @@ UPB_INLINE bool validate_StringRules_has_uuid(const validate_StringRules* msg) {
-UPB_INLINE bool validate_StringRules_uuid(const validate_StringRules* msg) {
-  return UPB_READ_ONEOF(msg, bool, UPB_SIZE(120, 176), UPB_SIZE(128, 184), 22,
-                        false);
+UPB_INLINE upb_strview* validate_BytesRules_mutable_not_in(validate_BytesRules *msg, size_t *len) {
+  return (upb_strview*)_upb_array_mutable_accessor(msg, UPB_SIZE(76, 120), len);
@@ -2216,3 +1464,2 @@ UPB_INLINE bool validate_StringRules_uuid(const validate_StringRules* msg) {
-UPB_INLINE bool validate_StringRules_has_not_contains(
-    const validate_StringRules* msg) {
-  return _upb_has_field(msg, 13);
+UPB_INLINE upb_strview* validate_BytesRules_resize_not_in(validate_BytesRules *msg, size_t len, upb_arena *arena) {
+  return (upb_strview*)_upb_array_resize_accessor(msg, UPB_SIZE(76, 120), len, UPB_TYPE_STRING, arena);
@@ -2220,3 +1467,3 @@ UPB_INLINE bool validate_StringRules_has_not_contains(
-UPB_INLINE upb_strview
-envoy_api_v2_auth_Secret_name(const envoy_api_v2_auth_Secret* msg) {
-  return UPB_FIELD_AT(msg, upb_strview, UPB_SIZE(0, 0));
+UPB_INLINE bool validate_BytesRules_add_not_in(validate_BytesRules *msg, upb_strview val, upb_arena *arena) {
+  return _upb_array_append_accessor(msg, UPB_SIZE(76, 120), UPB_SIZE(8, 16), UPB_TYPE_STRING, &val,
+      arena);
@@ -2224,3 +1471,2 @@ envoy_api_v2_auth_Secret_name(const envoy_api_v2_auth_Secret* msg) {
-UPB_INLINE bool validate_StringRules_has_well_known_regex(
-    const validate_StringRules* msg) {
-  return _upb_has_oneof_field(msg, UPB_SIZE(128, 184), 24);
+UPB_INLINE void validate_BytesRules_set_ip(validate_BytesRules *msg, bool value) {
+  UPB_WRITE_ONEOF(msg, bool, UPB_SIZE(80, 128), value, UPB_SIZE(84, 132), 10);
@@ -2228,4 +1474,2 @@ UPB_INLINE bool validate_StringRules_has_well_known_regex(
-UPB_INLINE int32_t
-validate_StringRules_well_known_regex(const validate_StringRules* msg) {
-  return UPB_READ_ONEOF(msg, int32_t, UPB_SIZE(120, 176), UPB_SIZE(128, 184),
-                        24, validate_UNKNOWN);
+UPB_INLINE void validate_BytesRules_set_ipv4(validate_BytesRules *msg, bool value) {
+  UPB_WRITE_ONEOF(msg, bool, UPB_SIZE(80, 128), value, UPB_SIZE(84, 132), 11);
@@ -2233,3 +1477,2 @@ validate_StringRules_well_known_regex(const validate_StringRules* msg) {
-UPB_INLINE bool validate_StringRules_has_strict(
-    const validate_StringRules* msg) {
-  return _upb_has_field(msg, 7);
+UPB_INLINE void validate_BytesRules_set_ipv6(validate_BytesRules *msg, bool value) {
+  UPB_WRITE_ONEOF(msg, bool, UPB_SIZE(80, 128), value, UPB_SIZE(84, 132), 12);
@@ -2237,2 +1480,3 @@ UPB_INLINE bool validate_StringRules_has_strict(
-UPB_INLINE bool validate_StringRules_strict(const validate_StringRules* msg) {
-  return UPB_FIELD_AT(msg, bool, UPB_SIZE(56, 56));
+UPB_INLINE void validate_BytesRules_set_len(validate_BytesRules *msg, uint64_t value) {
+  _upb_sethas(msg, 3);
+  UPB_FIELD_AT(msg, uint64_t, UPB_SIZE(24, 24)) = value;
@@ -2240,4 +1484,2 @@ UPB_INLINE bool validate_StringRules_strict(const validate_StringRules* msg) {
-UPB_INLINE void validate_StringRules_set_const(validate_StringRules* msg,
-                                               upb_strview value) {
-  _upb_sethas(msg, 8);
-  UPB_FIELD_AT(msg, upb_strview, UPB_SIZE(60, 64)) = value;
+UPB_INLINE validate_EnumRules *validate_EnumRules_new(upb_arena *arena) {
+  return (validate_EnumRules *)_upb_msg_new(&validate_EnumRules_msginit, arena);
@@ -2245,2 +1487,85 @@ UPB_INLINE void validate_StringRules_set_const(validate_StringRules* msg,
-UPB_INLINE void validate_StringRules_set_min_len(validate_StringRules* msg,
-                                                 uint64_t value) {
+UPB_INLINE validate_EnumRules *validate_EnumRules_parse(const char *buf, size_t size,
+                        upb_arena *arena) {
+  validate_EnumRules *ret = validate_EnumRules_new(arena);
+  return (ret && upb_decode(buf, size, ret, &validate_EnumRules_msginit, arena)) ? ret : NULL;
+}
+UPB_INLINE char *validate_EnumRules_serialize(const validate_EnumRules *msg, upb_arena *arena, size_t *len) {
+  return upb_encode(msg, &validate_EnumRules_msginit, arena, len);
+}
+UPB_INLINE bool validate_EnumRules_has_const(const validate_EnumRules *msg) { return _upb_has_field(msg, 1); }
+UPB_INLINE int32_t validate_EnumRules_const(const validate_EnumRules *msg) { return UPB_FIELD_AT(msg, int32_t, UPB_SIZE(4, 4)); }
+UPB_INLINE bool validate_EnumRules_has_defined_only(const validate_EnumRules *msg) { return _upb_has_field(msg, 2); }
+UPB_INLINE bool validate_EnumRules_defined_only(const validate_EnumRules *msg) { return UPB_FIELD_AT(msg, bool, UPB_SIZE(8, 8)); }
+UPB_INLINE int32_t const* validate_EnumRules_in(const validate_EnumRules *msg, size_t *len) { return (int32_t const*)_upb_array_accessor(msg, UPB_SIZE(12, 16), len); }
+UPB_INLINE int32_t const* validate_EnumRules_not_in(const validate_EnumRules *msg, size_t *len) { return (int32_t const*)_upb_array_accessor(msg, UPB_SIZE(16, 24), len); }
+UPB_INLINE void validate_EnumRules_set_const(validate_EnumRules *msg, int32_t value) {
+  _upb_sethas(msg, 1);
+  UPB_FIELD_AT(msg, int32_t, UPB_SIZE(4, 4)) = value;
+}
+UPB_INLINE void validate_EnumRules_set_defined_only(validate_EnumRules *msg, bool value) {
+  _upb_sethas(msg, 2);
+  UPB_FIELD_AT(msg, bool, UPB_SIZE(8, 8)) = value;
+}
+UPB_INLINE int32_t* validate_EnumRules_mutable_in(validate_EnumRules *msg, size_t *len) {
+  return (int32_t*)_upb_array_mutable_accessor(msg, UPB_SIZE(12, 16), len);
+}
+UPB_INLINE int32_t* validate_EnumRules_resize_in(validate_EnumRules *msg, size_t len, upb_arena *arena) {
+  return (int32_t*)_upb_array_resize_accessor(msg, UPB_SIZE(12, 16), len, UPB_TYPE_INT32, arena);
+}
+UPB_INLINE bool validate_EnumRules_add_in(validate_EnumRules *msg, int32_t val, upb_arena *arena) {
+  return _upb_array_append_accessor(msg, UPB_SIZE(12, 16), UPB_SIZE(4, 4), UPB_TYPE_INT32, &val,
+      arena);
+}
+UPB_INLINE int32_t* validate_EnumRules_mutable_not_in(validate_EnumRules *msg, size_t *len) {
+  return (int32_t*)_upb_array_mutable_accessor(msg, UPB_SIZE(16, 24), len);
+}
+UPB_INLINE int32_t* validate_EnumRules_resize_not_in(validate_EnumRules *msg, size_t len, upb_arena *arena) {
+  return (int32_t*)_upb_array_resize_accessor(msg, UPB_SIZE(16, 24), len, UPB_TYPE_INT32, arena);
+}
+UPB_INLINE bool validate_EnumRules_add_not_in(validate_EnumRules *msg, int32_t val, upb_arena *arena) {
+  return _upb_array_append_accessor(msg, UPB_SIZE(16, 24), UPB_SIZE(4, 4), UPB_TYPE_INT32, &val,
+      arena);
+}
+UPB_INLINE validate_MessageRules *validate_MessageRules_new(upb_arena *arena) {
+  return (validate_MessageRules *)_upb_msg_new(&validate_MessageRules_msginit, arena);
+}
+UPB_INLINE validate_MessageRules *validate_MessageRules_parse(const char *buf, size_t size,
+                        upb_arena *arena) {
+  validate_MessageRules *ret = validate_MessageRules_new(arena);
+  return (ret && upb_decode(buf, size, ret, &validate_MessageRules_msginit, arena)) ? ret : NULL;
+}
+UPB_INLINE char *validate_MessageRules_serialize(const validate_MessageRules *msg, upb_arena *arena, size_t *len) {
+  return upb_encode(msg, &validate_MessageRules_msginit, arena, len);
+}
+UPB_INLINE bool validate_MessageRules_has_skip(const validate_MessageRules *msg) { return _upb_has_field(msg, 1); }
+UPB_INLINE bool validate_MessageRules_skip(const validate_MessageRules *msg) { return UPB_FIELD_AT(msg, bool, UPB_SIZE(1, 1)); }
+UPB_INLINE bool validate_MessageRules_has_required(const validate_MessageRules *msg) { return _upb_has_field(msg, 2); }
+UPB_INLINE bool validate_MessageRules_required(const validate_MessageRules *msg) { return UPB_FIELD_AT(msg, bool, UPB_SIZE(2, 2)); }
+UPB_INLINE void validate_MessageRules_set_skip(validate_MessageRules *msg, bool value) {
+  _upb_sethas(msg, 1);
+  UPB_FIELD_AT(msg, bool, UPB_SIZE(1, 1)) = value;
+}
+UPB_INLINE void validate_MessageRules_set_required(validate_MessageRules *msg, bool value) {
+  _upb_sethas(msg, 2);
+  UPB_FIELD_AT(msg, bool, UPB_SIZE(2, 2)) = value;
+}
+UPB_INLINE validate_RepeatedRules *validate_RepeatedRules_new(upb_arena *arena) {
+  return (validate_RepeatedRules *)_upb_msg_new(&validate_RepeatedRules_msginit, arena);
+}
+UPB_INLINE validate_RepeatedRules *validate_RepeatedRules_parse(const char *buf, size_t size,
+                        upb_arena *arena) {
+  validate_RepeatedRules *ret = validate_RepeatedRules_new(arena);
+  return (ret && upb_decode(buf, size, ret, &validate_RepeatedRules_msginit, arena)) ? ret : NULL;
+}
+UPB_INLINE char *validate_RepeatedRules_serialize(const validate_RepeatedRules *msg, upb_arena *arena, size_t *len) {
+  return upb_encode(msg, &validate_RepeatedRules_msginit, arena, len);
+}
+UPB_INLINE bool validate_RepeatedRules_has_min_items(const validate_RepeatedRules *msg) { return _upb_has_field(msg, 1); }
+UPB_INLINE uint64_t validate_RepeatedRules_min_items(const validate_RepeatedRules *msg) { return UPB_FIELD_AT(msg, uint64_t, UPB_SIZE(8, 8)); }
+UPB_INLINE bool validate_RepeatedRules_has_max_items(const validate_RepeatedRules *msg) { return _upb_has_field(msg, 2); }
+UPB_INLINE uint64_t validate_RepeatedRules_max_items(const validate_RepeatedRules *msg) { return UPB_FIELD_AT(msg, uint64_t, UPB_SIZE(16, 16)); }
+UPB_INLINE bool validate_RepeatedRules_has_unique(const validate_RepeatedRules *msg) { return _upb_has_field(msg, 3); }
+UPB_INLINE bool validate_RepeatedRules_unique(const validate_RepeatedRules *msg) { return UPB_FIELD_AT(msg, bool, UPB_SIZE(24, 24)); }
+UPB_INLINE bool validate_RepeatedRules_has_items(const validate_RepeatedRules *msg) { return _upb_has_field(msg, 4); }
+UPB_INLINE const validate_FieldRules* validate_RepeatedRules_items(const validate_RepeatedRules *msg) { return UPB_FIELD_AT(msg, const validate_FieldRules*, UPB_SIZE(28, 32)); }
+UPB_INLINE void validate_RepeatedRules_set_min_items(validate_RepeatedRules *msg, uint64_t value) {
@@ -2250,2 +1575 @@ UPB_INLINE void validate_StringRules_set_min_len(validate_StringRules* msg,
-UPB_INLINE void validate_StringRules_set_max_len(validate_StringRules* msg,
-                                                 uint64_t value) {
+UPB_INLINE void validate_RepeatedRules_set_max_items(validate_RepeatedRules *msg, uint64_t value) {
@@ -2255,2 +1579 @@ UPB_INLINE void validate_StringRules_set_max_len(validate_StringRules* msg,
-UPB_INLINE void validate_StringRules_set_min_bytes(validate_StringRules* msg,
-                                                   uint64_t value) {
+UPB_INLINE void validate_RepeatedRules_set_unique(validate_RepeatedRules *msg, bool value) {
@@ -2258 +1581 @@ UPB_INLINE void validate_StringRules_set_min_bytes(validate_StringRules* msg,
-  UPB_FIELD_AT(msg, uint64_t, UPB_SIZE(24, 24)) = value;
+  UPB_FIELD_AT(msg, bool, UPB_SIZE(24, 24)) = value;
@@ -2260,2 +1583 @@ UPB_INLINE void validate_StringRules_set_min_bytes(validate_StringRules* msg,
-UPB_INLINE void validate_StringRules_set_max_bytes(validate_StringRules* msg,
-                                                   uint64_t value) {
+UPB_INLINE void validate_RepeatedRules_set_items(validate_RepeatedRules *msg, validate_FieldRules* value) {
@@ -2263 +1585 @@ UPB_INLINE void validate_StringRules_set_max_bytes(validate_StringRules* msg,
-  UPB_FIELD_AT(msg, uint64_t, UPB_SIZE(32, 32)) = value;
+  UPB_FIELD_AT(msg, validate_FieldRules*, UPB_SIZE(28, 32)) = value;
@@ -2265,4 +1587,6 @@ UPB_INLINE void validate_StringRules_set_max_bytes(validate_StringRules* msg,
-UPB_INLINE void validate_StringRules_set_pattern(validate_StringRules* msg,
-                                                 upb_strview value) {
-  _upb_sethas(msg, 9);
-  UPB_FIELD_AT(msg, upb_strview, UPB_SIZE(68, 80)) = value;
+UPB_INLINE struct validate_FieldRules* validate_RepeatedRules_mutable_items(validate_RepeatedRules *msg, upb_arena *arena) {
+  struct validate_FieldRules* sub = (struct validate_FieldRules*)validate_RepeatedRules_items(msg);
+  if (sub == NULL) {
+    sub = (struct validate_FieldRules*)_upb_msg_new(&validate_FieldRules_msginit, arena);
+    if (!sub) return NULL;
+    validate_RepeatedRules_set_items(msg, sub);
@@ -2270,4 +1594 @@ UPB_INLINE void validate_StringRules_set_pattern(validate_StringRules* msg,
-UPB_INLINE void validate_StringRules_set_prefix(validate_StringRules* msg,
-                                                upb_strview value) {
-  _upb_sethas(msg, 10);
-  UPB_FIELD_AT(msg, upb_strview, UPB_SIZE(76, 96)) = value;
+  return sub;
@@ -2275,4 +1596,2 @@ UPB_INLINE void validate_StringRules_set_prefix(validate_StringRules* msg,
-UPB_INLINE void validate_StringRules_set_suffix(validate_StringRules* msg,
-                                                upb_strview value) {
-  _upb_sethas(msg, 11);
-  UPB_FIELD_AT(msg, upb_strview, UPB_SIZE(84, 112)) = value;
+UPB_INLINE validate_MapRules *validate_MapRules_new(upb_arena *arena) {
+  return (validate_MapRules *)_upb_msg_new(&validate_MapRules_msginit, arena);
@@ -2280,4 +1599,66 @@ UPB_INLINE void validate_StringRules_set_suffix(validate_StringRules* msg,
-UPB_INLINE void validate_StringRules_set_contains(validate_StringRules* msg,
-                                                  upb_strview value) {
-  _upb_sethas(msg, 12);
-  UPB_FIELD_AT(msg, upb_strview, UPB_SIZE(92, 128)) = value;
+UPB_INLINE validate_MapRules *validate_MapRules_parse(const char *buf, size_t size,
+                        upb_arena *arena) {
+  validate_MapRules *ret = validate_MapRules_new(arena);
+  return (ret && upb_decode(buf, size, ret, &validate_MapRules_msginit, arena)) ? ret : NULL;
+}
+UPB_INLINE char *validate_MapRules_serialize(const validate_MapRules *msg, upb_arena *arena, size_t *len) {
+  return upb_encode(msg, &validate_MapRules_msginit, arena, len);
+}
+UPB_INLINE bool validate_MapRules_has_min_pairs(const validate_MapRules *msg) { return _upb_has_field(msg, 1); }
+UPB_INLINE uint64_t validate_MapRules_min_pairs(const validate_MapRules *msg) { return UPB_FIELD_AT(msg, uint64_t, UPB_SIZE(8, 8)); }
+UPB_INLINE bool validate_MapRules_has_max_pairs(const validate_MapRules *msg) { return _upb_has_field(msg, 2); }
+UPB_INLINE uint64_t validate_MapRules_max_pairs(const validate_MapRules *msg) { return UPB_FIELD_AT(msg, uint64_t, UPB_SIZE(16, 16)); }
+UPB_INLINE bool validate_MapRules_has_no_sparse(const validate_MapRules *msg) { return _upb_has_field(msg, 3); }
+UPB_INLINE bool validate_MapRules_no_sparse(const validate_MapRules *msg) { return UPB_FIELD_AT(msg, bool, UPB_SIZE(24, 24)); }
+UPB_INLINE bool validate_MapRules_has_keys(const validate_MapRules *msg) { return _upb_has_field(msg, 4); }
+UPB_INLINE const validate_FieldRules* validate_MapRules_keys(const validate_MapRules *msg) { return UPB_FIELD_AT(msg, const validate_FieldRules*, UPB_SIZE(28, 32)); }
+UPB_INLINE bool validate_MapRules_has_values(const validate_MapRules *msg) { return _upb_has_field(msg, 5); }
+UPB_INLINE const validate_FieldRules* validate_MapRules_values(const validate_MapRules *msg) { return UPB_FIELD_AT(msg, const validate_FieldRules*, UPB_SIZE(32, 40)); }
+UPB_INLINE void validate_MapRules_set_min_pairs(validate_MapRules *msg, uint64_t value) {
+  _upb_sethas(msg, 1);
+  UPB_FIELD_AT(msg, uint64_t, UPB_SIZE(8, 8)) = value;
+}
+UPB_INLINE void validate_MapRules_set_max_pairs(validate_MapRules *msg, uint64_t value) {
+  _upb_sethas(msg, 2);
+  UPB_FIELD_AT(msg, uint64_t, UPB_SIZE(16, 16)) = value;
+}
+UPB_INLINE void validate_MapRules_set_no_sparse(validate_MapRules *msg, bool value) {
+  _upb_sethas(msg, 3);
+  UPB_FIELD_AT(msg, bool, UPB_SIZE(24, 24)) = value;
+}
+UPB_INLINE void validate_MapRules_set_keys(validate_MapRules *msg, validate_FieldRules* value) {
+  _upb_sethas(msg, 4);
+  UPB_FIELD_AT(msg, validate_FieldRules*, UPB_SIZE(28, 32)) = value;
+}
+UPB_INLINE struct validate_FieldRules* validate_MapRules_mutable_keys(validate_MapRules *msg, upb_arena *arena) {
+  struct validate_FieldRules* sub = (struct validate_FieldRules*)validate_MapRules_keys(msg);
+  if (sub == NULL) {
+    sub = (struct validate_FieldRules*)_upb_msg_new(&validate_FieldRules_msginit, arena);
+    if (!sub) return NULL;
+    validate_MapRules_set_keys(msg, sub);
+  }
+  return sub;
+}
+UPB_INLINE void validate_MapRules_set_values(validate_MapRules *msg, validate_FieldRules* value) {
+  _upb_sethas(msg, 5);
+  UPB_FIELD_AT(msg, validate_FieldRules*, UPB_SIZE(32, 40)) = value;
+}
+UPB_INLINE struct validate_FieldRules* validate_MapRules_mutable_values(validate_MapRules *msg, upb_arena *arena) {
+  struct validate_FieldRules* sub = (struct validate_FieldRules*)validate_MapRules_values(msg);
+  if (sub == NULL) {
+    sub = (struct validate_FieldRules*)_upb_msg_new(&validate_FieldRules_msginit, arena);
+    if (!sub) return NULL;
+    validate_MapRules_set_values(msg, sub);
+  }
+  return sub;
+}
+UPB_INLINE validate_AnyRules *validate_AnyRules_new(upb_arena *arena) {
+  return (validate_AnyRules *)_upb_msg_new(&validate_AnyRules_msginit, arena);
+}
+UPB_INLINE validate_AnyRules *validate_AnyRules_parse(const char *buf, size_t size,
+                        upb_arena *arena) {
+  validate_AnyRules *ret = validate_AnyRules_new(arena);
+  return (ret && upb_decode(buf, size, ret, &validate_AnyRules_msginit, arena)) ? ret : NULL;
+}
+UPB_INLINE char *validate_AnyRules_serialize(const validate_AnyRules *msg, upb_arena *arena, size_t *len) {
+  return upb_encode(msg, &validate_AnyRules_msginit, arena, len);
@@ -2285,51 +1666,32 @@ UPB_INLINE void validate_StringRules_set_contains(validate_StringRules* msg,
-UPB_INLINE upb_strview* validate_StringRules_mutable_in(
-    validate_StringRules* msg, size_t* len) {
-  return (upb_strview*)_upb_array_mutable_accessor(msg, UPB_SIZE(108, 160),
-                                                   len);
-}
-UPB_INLINE upb_strview* validate_StringRules_resize_in(
-    validate_StringRules* msg, size_t len, upb_arena* arena) {
-<<<<<<< HEAD
-  return (upb_strview*)_upb_array_resize_accessor(msg, UPB_SIZE(104, 152), len,
-                                                  UPB_TYPE_STRING, arena);
-|||||||
-  return (upb_strview*)_upb_array_resize_accessor(
-      msg, UPB_SIZE(104, 152), len, UPB_SIZE(8, 16), UPB_TYPE_STRING, arena);
-=======
-  return (upb_strview*)_upb_array_resize_accessor(
-      msg, UPB_SIZE(108, 160), len, UPB_SIZE(8, 16), UPB_TYPE_STRING, arena);
->>>>>>> 729af3a43d16584684f6f70349ed34133e1b59f1
-}
-UPB_INLINE bool validate_StringRules_add_in(validate_StringRules* msg,
-                                            upb_strview val, upb_arena* arena) {
-<<<<<<< HEAD
-  return _upb_array_append_accessor(msg, UPB_SIZE(104, 152), UPB_SIZE(8, 16),
-                                    UPB_TYPE_STRING, &val, arena);
-|||||||
-  return _upb_array_append_accessor(msg, UPB_SIZE(104, 152), UPB_SIZE(8, 16),
-                                    UPB_TYPE_STRING, &val, arena);
-=======
-  return _upb_array_append_accessor(msg, UPB_SIZE(108, 160), UPB_SIZE(8, 16),
-                                    UPB_TYPE_STRING, &val, arena);
->>>>>>> 729af3a43d16584684f6f70349ed34133e1b59f1
-}
-UPB_INLINE upb_strview* validate_StringRules_mutable_not_in(
-    validate_StringRules* msg, size_t* len) {
-  return (upb_strview*)_upb_array_mutable_accessor(msg, UPB_SIZE(112, 168),
-                                                   len);
-}
-UPB_INLINE upb_strview* validate_StringRules_resize_not_in(
-    validate_StringRules* msg, size_t len, upb_arena* arena) {
-<<<<<<< HEAD
-  return (upb_strview*)_upb_array_resize_accessor(msg, UPB_SIZE(108, 160), len,
-                                                  UPB_TYPE_STRING, arena);
-|||||||
-  return (upb_strview*)_upb_array_resize_accessor(
-      msg, UPB_SIZE(108, 160), len, UPB_SIZE(8, 16), UPB_TYPE_STRING, arena);
-=======
-  return (upb_strview*)_upb_array_resize_accessor(
-      msg, UPB_SIZE(112, 168), len, UPB_SIZE(8, 16), UPB_TYPE_STRING, arena);
->>>>>>> 729af3a43d16584684f6f70349ed34133e1b59f1
-}
-UPB_INLINE bool validate_StringRules_add_not_in(validate_StringRules* msg,
-                                                upb_strview val,
+UPB_INLINE bool validate_AnyRules_has_required(const validate_AnyRules *msg) { return _upb_has_field(msg, 1); }
+UPB_INLINE bool validate_AnyRules_required(const validate_AnyRules *msg) { return UPB_FIELD_AT(msg, bool, UPB_SIZE(1, 1)); }
+UPB_INLINE upb_strview const* validate_AnyRules_in(const validate_AnyRules *msg, size_t *len) { return (upb_strview const*)_upb_array_accessor(msg, UPB_SIZE(4, 8), len); }
+UPB_INLINE upb_strview const* validate_AnyRules_not_in(const validate_AnyRules *msg, size_t *len) { return (upb_strview const*)_upb_array_accessor(msg, UPB_SIZE(8, 16), len); }
+UPB_INLINE void validate_AnyRules_set_required(validate_AnyRules *msg, bool value) {
+  _upb_sethas(msg, 1);
+  UPB_FIELD_AT(msg, bool, UPB_SIZE(1, 1)) = value;
+}
+UPB_INLINE upb_strview* validate_AnyRules_mutable_in(validate_AnyRules *msg, size_t *len) {
+  return (upb_strview*)_upb_array_mutable_accessor(msg, UPB_SIZE(4, 8), len);
+}
+UPB_INLINE upb_strview* validate_AnyRules_resize_in(validate_AnyRules *msg, size_t len, upb_arena *arena) {
+  return (upb_strview*)_upb_array_resize_accessor(msg, UPB_SIZE(4, 8), len, UPB_TYPE_STRING, arena);
+}
+UPB_INLINE bool validate_AnyRules_add_in(validate_AnyRules *msg, upb_strview val, upb_arena *arena) {
+  return _upb_array_append_accessor(msg, UPB_SIZE(4, 8), UPB_SIZE(8, 16), UPB_TYPE_STRING, &val,
+      arena);
+}
+UPB_INLINE upb_strview* validate_AnyRules_mutable_not_in(validate_AnyRules *msg, size_t *len) {
+  return (upb_strview*)_upb_array_mutable_accessor(msg, UPB_SIZE(8, 16), len);
+}
+UPB_INLINE upb_strview* validate_AnyRules_resize_not_in(validate_AnyRules *msg, size_t len, upb_arena *arena) {
+  return (upb_strview*)_upb_array_resize_accessor(msg, UPB_SIZE(8, 16), len, UPB_TYPE_STRING, arena);
+}
+UPB_INLINE bool validate_AnyRules_add_not_in(validate_AnyRules *msg, upb_strview val, upb_arena *arena) {
+  return _upb_array_append_accessor(msg, UPB_SIZE(8, 16), UPB_SIZE(8, 16), UPB_TYPE_STRING, &val,
+      arena);
+}
+UPB_INLINE validate_DurationRules *validate_DurationRules_new(upb_arena *arena) {
+  return (validate_DurationRules *)_upb_msg_new(&validate_DurationRules_msginit, arena);
+}
+UPB_INLINE validate_DurationRules *validate_DurationRules_parse(const char *buf, size_t size,
@@ -2337,10 +1699,235 @@ UPB_INLINE bool validate_StringRules_add_not_in(validate_StringRules* msg,
-<<<<<<< HEAD
-  return _upb_array_append_accessor(msg, UPB_SIZE(108, 160), UPB_SIZE(8, 16),
-                                    UPB_TYPE_STRING, &val, arena);
-|||||||
-  return _upb_array_append_accessor(msg, UPB_SIZE(108, 160), UPB_SIZE(8, 16),
-                                    UPB_TYPE_STRING, &val, arena);
-=======
-  return _upb_array_append_accessor(msg, UPB_SIZE(112, 168), UPB_SIZE(8, 16),
-                                    UPB_TYPE_STRING, &val, arena);
->>>>>>> 729af3a43d16584684f6f70349ed34133e1b59f1
+  validate_DurationRules *ret = validate_DurationRules_new(arena);
+  return (ret && upb_decode(buf, size, ret, &validate_DurationRules_msginit, arena)) ? ret : NULL;
+}
+UPB_INLINE char *validate_DurationRules_serialize(const validate_DurationRules *msg, upb_arena *arena, size_t *len) {
+  return upb_encode(msg, &validate_DurationRules_msginit, arena, len);
+}
+UPB_INLINE bool validate_DurationRules_has_required(const validate_DurationRules *msg) { return _upb_has_field(msg, 1); }
+UPB_INLINE bool validate_DurationRules_required(const validate_DurationRules *msg) { return UPB_FIELD_AT(msg, bool, UPB_SIZE(1, 1)); }
+UPB_INLINE bool validate_DurationRules_has_const(const validate_DurationRules *msg) { return _upb_has_field(msg, 2); }
+UPB_INLINE const struct google_protobuf_Duration* validate_DurationRules_const(const validate_DurationRules *msg) { return UPB_FIELD_AT(msg, const struct google_protobuf_Duration*, UPB_SIZE(4, 8)); }
+UPB_INLINE bool validate_DurationRules_has_lt(const validate_DurationRules *msg) { return _upb_has_field(msg, 3); }
+UPB_INLINE const struct google_protobuf_Duration* validate_DurationRules_lt(const validate_DurationRules *msg) { return UPB_FIELD_AT(msg, const struct google_protobuf_Duration*, UPB_SIZE(8, 16)); }
+UPB_INLINE bool validate_DurationRules_has_lte(const validate_DurationRules *msg) { return _upb_has_field(msg, 4); }
+UPB_INLINE const struct google_protobuf_Duration* validate_DurationRules_lte(const validate_DurationRules *msg) { return UPB_FIELD_AT(msg, const struct google_protobuf_Duration*, UPB_SIZE(12, 24)); }
+UPB_INLINE bool validate_DurationRules_has_gt(const validate_DurationRules *msg) { return _upb_has_field(msg, 5); }
+UPB_INLINE const struct google_protobuf_Duration* validate_DurationRules_gt(const validate_DurationRules *msg) { return UPB_FIELD_AT(msg, const struct google_protobuf_Duration*, UPB_SIZE(16, 32)); }
+UPB_INLINE bool validate_DurationRules_has_gte(const validate_DurationRules *msg) { return _upb_has_field(msg, 6); }
+UPB_INLINE const struct google_protobuf_Duration* validate_DurationRules_gte(const validate_DurationRules *msg) { return UPB_FIELD_AT(msg, const struct google_protobuf_Duration*, UPB_SIZE(20, 40)); }
+UPB_INLINE const struct google_protobuf_Duration* const* validate_DurationRules_in(const validate_DurationRules *msg, size_t *len) { return (const struct google_protobuf_Duration* const*)_upb_array_accessor(msg, UPB_SIZE(24, 48), len); }
+UPB_INLINE const struct google_protobuf_Duration* const* validate_DurationRules_not_in(const validate_DurationRules *msg, size_t *len) { return (const struct google_protobuf_Duration* const*)_upb_array_accessor(msg, UPB_SIZE(28, 56), len); }
+UPB_INLINE void validate_DurationRules_set_required(validate_DurationRules *msg, bool value) {
+  _upb_sethas(msg, 1);
+  UPB_FIELD_AT(msg, bool, UPB_SIZE(1, 1)) = value;
+}
+UPB_INLINE void validate_DurationRules_set_const(validate_DurationRules *msg, struct google_protobuf_Duration* value) {
+  _upb_sethas(msg, 2);
+  UPB_FIELD_AT(msg, struct google_protobuf_Duration*, UPB_SIZE(4, 8)) = value;
+}
+UPB_INLINE struct google_protobuf_Duration* validate_DurationRules_mutable_const(validate_DurationRules *msg, upb_arena *arena) {
+  struct google_protobuf_Duration* sub = (struct google_protobuf_Duration*)validate_DurationRules_const(msg);
+  if (sub == NULL) {
+    sub = (struct google_protobuf_Duration*)_upb_msg_new(&google_protobuf_Duration_msginit, arena);
+    if (!sub) return NULL;
+    validate_DurationRules_set_const(msg, sub);
+  }
+  return sub;
+}
+UPB_INLINE void validate_DurationRules_set_lt(validate_DurationRules *msg, struct google_protobuf_Duration* value) {
+  _upb_sethas(msg, 3);
+  UPB_FIELD_AT(msg, struct google_protobuf_Duration*, UPB_SIZE(8, 16)) = value;
+}
+UPB_INLINE struct google_protobuf_Duration* validate_DurationRules_mutable_lt(validate_DurationRules *msg, upb_arena *arena) {
+  struct google_protobuf_Duration* sub = (struct google_protobuf_Duration*)validate_DurationRules_lt(msg);
+  if (sub == NULL) {
+    sub = (struct google_protobuf_Duration*)_upb_msg_new(&google_protobuf_Duration_msginit, arena);
+    if (!sub) return NULL;
+    validate_DurationRules_set_lt(msg, sub);
+  }
+  return sub;
+}
+UPB_INLINE void validate_DurationRules_set_lte(validate_DurationRules *msg, struct google_protobuf_Duration* value) {
+  _upb_sethas(msg, 4);
+  UPB_FIELD_AT(msg, struct google_protobuf_Duration*, UPB_SIZE(12, 24)) = value;
+}
+UPB_INLINE struct google_protobuf_Duration* validate_DurationRules_mutable_lte(validate_DurationRules *msg, upb_arena *arena) {
+  struct google_protobuf_Duration* sub = (struct google_protobuf_Duration*)validate_DurationRules_lte(msg);
+  if (sub == NULL) {
+    sub = (struct google_protobuf_Duration*)_upb_msg_new(&google_protobuf_Duration_msginit, arena);
+    if (!sub) return NULL;
+    validate_DurationRules_set_lte(msg, sub);
+  }
+  return sub;
+}
+UPB_INLINE void validate_DurationRules_set_gt(validate_DurationRules *msg, struct google_protobuf_Duration* value) {
+  _upb_sethas(msg, 5);
+  UPB_FIELD_AT(msg, struct google_protobuf_Duration*, UPB_SIZE(16, 32)) = value;
+}
+UPB_INLINE struct google_protobuf_Duration* validate_DurationRules_mutable_gt(validate_DurationRules *msg, upb_arena *arena) {
+  struct google_protobuf_Duration* sub = (struct google_protobuf_Duration*)validate_DurationRules_gt(msg);
+  if (sub == NULL) {
+    sub = (struct google_protobuf_Duration*)_upb_msg_new(&google_protobuf_Duration_msginit, arena);
+    if (!sub) return NULL;
+    validate_DurationRules_set_gt(msg, sub);
+  }
+  return sub;
+}
+UPB_INLINE void validate_DurationRules_set_gte(validate_DurationRules *msg, struct google_protobuf_Duration* value) {
+  _upb_sethas(msg, 6);
+  UPB_FIELD_AT(msg, struct google_protobuf_Duration*, UPB_SIZE(20, 40)) = value;
+}
+UPB_INLINE struct google_protobuf_Duration* validate_DurationRules_mutable_gte(validate_DurationRules *msg, upb_arena *arena) {
+  struct google_protobuf_Duration* sub = (struct google_protobuf_Duration*)validate_DurationRules_gte(msg);
+  if (sub == NULL) {
+    sub = (struct google_protobuf_Duration*)_upb_msg_new(&google_protobuf_Duration_msginit, arena);
+    if (!sub) return NULL;
+    validate_DurationRules_set_gte(msg, sub);
+  }
+  return sub;
+}
+UPB_INLINE struct google_protobuf_Duration** validate_DurationRules_mutable_in(validate_DurationRules *msg, size_t *len) {
+  return (struct google_protobuf_Duration**)_upb_array_mutable_accessor(msg, UPB_SIZE(24, 48), len);
+}
+UPB_INLINE struct google_protobuf_Duration** validate_DurationRules_resize_in(validate_DurationRules *msg, size_t len, upb_arena *arena) {
+  return (struct google_protobuf_Duration**)_upb_array_resize_accessor(msg, UPB_SIZE(24, 48), len, UPB_TYPE_MESSAGE, arena);
+}
+UPB_INLINE struct google_protobuf_Duration* validate_DurationRules_add_in(validate_DurationRules *msg, upb_arena *arena) {
+  struct google_protobuf_Duration* sub = (struct google_protobuf_Duration*)_upb_msg_new(&google_protobuf_Duration_msginit, arena);
+  bool ok = _upb_array_append_accessor(
+      msg, UPB_SIZE(24, 48), UPB_SIZE(4, 8), UPB_TYPE_MESSAGE, &sub, arena);
+  if (!ok) return NULL;
+  return sub;
+}
+UPB_INLINE struct google_protobuf_Duration** validate_DurationRules_mutable_not_in(validate_DurationRules *msg, size_t *len) {
+  return (struct google_protobuf_Duration**)_upb_array_mutable_accessor(msg, UPB_SIZE(28, 56), len);
+}
+UPB_INLINE struct google_protobuf_Duration** validate_DurationRules_resize_not_in(validate_DurationRules *msg, size_t len, upb_arena *arena) {
+  return (struct google_protobuf_Duration**)_upb_array_resize_accessor(msg, UPB_SIZE(28, 56), len, UPB_TYPE_MESSAGE, arena);
+}
+UPB_INLINE struct google_protobuf_Duration* validate_DurationRules_add_not_in(validate_DurationRules *msg, upb_arena *arena) {
+  struct google_protobuf_Duration* sub = (struct google_protobuf_Duration*)_upb_msg_new(&google_protobuf_Duration_msginit, arena);
+  bool ok = _upb_array_append_accessor(
+      msg, UPB_SIZE(28, 56), UPB_SIZE(4, 8), UPB_TYPE_MESSAGE, &sub, arena);
+  if (!ok) return NULL;
+  return sub;
+}
+UPB_INLINE validate_TimestampRules *validate_TimestampRules_new(upb_arena *arena) {
+  return (validate_TimestampRules *)_upb_msg_new(&validate_TimestampRules_msginit, arena);
+}
+UPB_INLINE validate_TimestampRules *validate_TimestampRules_parse(const char *buf, size_t size,
+                        upb_arena *arena) {
+  validate_TimestampRules *ret = validate_TimestampRules_new(arena);
+  return (ret && upb_decode(buf, size, ret, &validate_TimestampRules_msginit, arena)) ? ret : NULL;
+}
+UPB_INLINE char *validate_TimestampRules_serialize(const validate_TimestampRules *msg, upb_arena *arena, size_t *len) {
+  return upb_encode(msg, &validate_TimestampRules_msginit, arena, len);
+}
+UPB_INLINE bool validate_TimestampRules_has_required(const validate_TimestampRules *msg) { return _upb_has_field(msg, 1); }
+UPB_INLINE bool validate_TimestampRules_required(const validate_TimestampRules *msg) { return UPB_FIELD_AT(msg, bool, UPB_SIZE(2, 2)); }
+UPB_INLINE bool validate_TimestampRules_has_const(const validate_TimestampRules *msg) { return _upb_has_field(msg, 4); }
+UPB_INLINE const struct google_protobuf_Timestamp* validate_TimestampRules_const(const validate_TimestampRules *msg) { return UPB_FIELD_AT(msg, const struct google_protobuf_Timestamp*, UPB_SIZE(8, 8)); }
+UPB_INLINE bool validate_TimestampRules_has_lt(const validate_TimestampRules *msg) { return _upb_has_field(msg, 5); }
+UPB_INLINE const struct google_protobuf_Timestamp* validate_TimestampRules_lt(const validate_TimestampRules *msg) { return UPB_FIELD_AT(msg, const struct google_protobuf_Timestamp*, UPB_SIZE(12, 16)); }
+UPB_INLINE bool validate_TimestampRules_has_lte(const validate_TimestampRules *msg) { return _upb_has_field(msg, 6); }
+UPB_INLINE const struct google_protobuf_Timestamp* validate_TimestampRules_lte(const validate_TimestampRules *msg) { return UPB_FIELD_AT(msg, const struct google_protobuf_Timestamp*, UPB_SIZE(16, 24)); }
+UPB_INLINE bool validate_TimestampRules_has_gt(const validate_TimestampRules *msg) { return _upb_has_field(msg, 7); }
+UPB_INLINE const struct google_protobuf_Timestamp* validate_TimestampRules_gt(const validate_TimestampRules *msg) { return UPB_FIELD_AT(msg, const struct google_protobuf_Timestamp*, UPB_SIZE(20, 32)); }
+UPB_INLINE bool validate_TimestampRules_has_gte(const validate_TimestampRules *msg) { return _upb_has_field(msg, 8); }
+UPB_INLINE const struct google_protobuf_Timestamp* validate_TimestampRules_gte(const validate_TimestampRules *msg) { return UPB_FIELD_AT(msg, const struct google_protobuf_Timestamp*, UPB_SIZE(24, 40)); }
+UPB_INLINE bool validate_TimestampRules_has_lt_now(const validate_TimestampRules *msg) { return _upb_has_field(msg, 2); }
+UPB_INLINE bool validate_TimestampRules_lt_now(const validate_TimestampRules *msg) { return UPB_FIELD_AT(msg, bool, UPB_SIZE(3, 3)); }
+UPB_INLINE bool validate_TimestampRules_has_gt_now(const validate_TimestampRules *msg) { return _upb_has_field(msg, 3); }
+UPB_INLINE bool validate_TimestampRules_gt_now(const validate_TimestampRules *msg) { return UPB_FIELD_AT(msg, bool, UPB_SIZE(4, 4)); }
+UPB_INLINE bool validate_TimestampRules_has_within(const validate_TimestampRules *msg) { return _upb_has_field(msg, 9); }
+UPB_INLINE const struct google_protobuf_Duration* validate_TimestampRules_within(const validate_TimestampRules *msg) { return UPB_FIELD_AT(msg, const struct google_protobuf_Duration*, UPB_SIZE(28, 48)); }
+UPB_INLINE void validate_TimestampRules_set_required(validate_TimestampRules *msg, bool value) {
+  _upb_sethas(msg, 1);
+  UPB_FIELD_AT(msg, bool, UPB_SIZE(2, 2)) = value;
+}
+UPB_INLINE void validate_TimestampRules_set_const(validate_TimestampRules *msg, struct google_protobuf_Timestamp* value) {
+  _upb_sethas(msg, 4);
+  UPB_FIELD_AT(msg, struct google_protobuf_Timestamp*, UPB_SIZE(8, 8)) = value;
+}
+UPB_INLINE struct google_protobuf_Timestamp* validate_TimestampRules_mutable_const(validate_TimestampRules *msg, upb_arena *arena) {
+  struct google_protobuf_Timestamp* sub = (struct google_protobuf_Timestamp*)validate_TimestampRules_const(msg);
+  if (sub == NULL) {
+    sub = (struct google_protobuf_Timestamp*)_upb_msg_new(&google_protobuf_Timestamp_msginit, arena);
+    if (!sub) return NULL;
+    validate_TimestampRules_set_const(msg, sub);
+  }
+  return sub;
+}
+UPB_INLINE void validate_TimestampRules_set_lt(validate_TimestampRules *msg, struct google_protobuf_Timestamp* value) {
+  _upb_sethas(msg, 5);
+  UPB_FIELD_AT(msg, struct google_protobuf_Timestamp*, UPB_SIZE(12, 16)) = value;
+}
+UPB_INLINE struct google_protobuf_Timestamp* validate_TimestampRules_mutable_lt(validate_TimestampRules *msg, upb_arena *arena) {
+  struct google_protobuf_Timestamp* sub = (struct google_protobuf_Timestamp*)validate_TimestampRules_lt(msg);
+  if (sub == NULL) {
+    sub = (struct google_protobuf_Timestamp*)_upb_msg_new(&google_protobuf_Timestamp_msginit, arena);
+    if (!sub) return NULL;
+    validate_TimestampRules_set_lt(msg, sub);
+  }
+  return sub;
+}
+UPB_INLINE void validate_TimestampRules_set_lte(validate_TimestampRules *msg, struct google_protobuf_Timestamp* value) {
+  _upb_sethas(msg, 6);
+  UPB_FIELD_AT(msg, struct google_protobuf_Timestamp*, UPB_SIZE(16, 24)) = value;
+}
+UPB_INLINE struct google_protobuf_Timestamp* validate_TimestampRules_mutable_lte(validate_TimestampRules *msg, upb_arena *arena) {
+  struct google_protobuf_Timestamp* sub = (struct google_protobuf_Timestamp*)validate_TimestampRules_lte(msg);
+  if (sub == NULL) {
+    sub = (struct google_protobuf_Timestamp*)_upb_msg_new(&google_protobuf_Timestamp_msginit, arena);
+    if (!sub) return NULL;
+    validate_TimestampRules_set_lte(msg, sub);
+  }
+  return sub;
+}
+UPB_INLINE void validate_TimestampRules_set_gt(validate_TimestampRules *msg, struct google_protobuf_Timestamp* value) {
+  _upb_sethas(msg, 7);
+  UPB_FIELD_AT(msg, struct google_protobuf_Timestamp*, UPB_SIZE(20, 32)) = value;
+}
+UPB_INLINE struct google_protobuf_Timestamp* validate_TimestampRules_mutable_gt(validate_TimestampRules *msg, upb_arena *arena) {
+  struct google_protobuf_Timestamp* sub = (struct google_protobuf_Timestamp*)validate_TimestampRules_gt(msg);
+  if (sub == NULL) {
+    sub = (struct google_protobuf_Timestamp*)_upb_msg_new(&google_protobuf_Timestamp_msginit, arena);
+    if (!sub) return NULL;
+    validate_TimestampRules_set_gt(msg, sub);
+  }
+  return sub;
+}
+UPB_INLINE void validate_TimestampRules_set_gte(validate_TimestampRules *msg, struct google_protobuf_Timestamp* value) {
+  _upb_sethas(msg, 8);
+  UPB_FIELD_AT(msg, struct google_protobuf_Timestamp*, UPB_SIZE(24, 40)) = value;
+}
+UPB_INLINE struct google_protobuf_Timestamp* validate_TimestampRules_mutable_gte(validate_TimestampRules *msg, upb_arena *arena) {
+  struct google_protobuf_Timestamp* sub = (struct google_protobuf_Timestamp*)validate_TimestampRules_gte(msg);
+  if (sub == NULL) {
+    sub = (struct google_protobuf_Timestamp*)_upb_msg_new(&google_protobuf_Timestamp_msginit, arena);
+    if (!sub) return NULL;
+    validate_TimestampRules_set_gte(msg, sub);
+  }
+  return sub;
+}
+UPB_INLINE void validate_TimestampRules_set_lt_now(validate_TimestampRules *msg, bool value) {
+  _upb_sethas(msg, 2);
+  UPB_FIELD_AT(msg, bool, UPB_SIZE(3, 3)) = value;
+}
+UPB_INLINE void validate_TimestampRules_set_gt_now(validate_TimestampRules *msg, bool value) {
+  _upb_sethas(msg, 3);
+  UPB_FIELD_AT(msg, bool, UPB_SIZE(4, 4)) = value;
+}
+UPB_INLINE void validate_TimestampRules_set_within(validate_TimestampRules *msg, struct google_protobuf_Duration* value) {
+  _upb_sethas(msg, 9);
+  UPB_FIELD_AT(msg, struct google_protobuf_Duration*, UPB_SIZE(28, 48)) = value;
+}
+UPB_INLINE struct google_protobuf_Duration* validate_TimestampRules_mutable_within(validate_TimestampRules *msg, upb_arena *arena) {
+  struct google_protobuf_Duration* sub = (struct google_protobuf_Duration*)validate_TimestampRules_within(msg);
+  if (sub == NULL) {
+    sub = (struct google_protobuf_Duration*)_upb_msg_new(&google_protobuf_Duration_msginit, arena);
+    if (!sub) return NULL;
+    validate_TimestampRules_set_within(msg, sub);
+  }
+  return sub;
+}
+#ifdef __cplusplus
@@ -2347,0 +1935,3 @@ UPB_INLINE bool validate_StringRules_add_not_in(validate_StringRules* msg,
+#endif
+#include "upb/port_undef.inc"
+#endif
