diff --git a/home/whalien/codebase/cpp/mergebot/eva/output/grpc/fa0c7314-c6bd67c2-b4031fa4/include@grpcpp@security@credentials.no_comments_mergebot.h b/home/whalien/codebase/cpp/mergebot/eva/output/grpc/fa0c7314-c6bd67c2-b4031fa4/include@grpcpp@security@credentials.no_comments_merged.h
index 591cbd7..1b6c81c 100644
--- a/home/whalien/codebase/cpp/mergebot/eva/output/grpc/fa0c7314-c6bd67c2-b4031fa4/include@grpcpp@security@credentials.no_comments_mergebot.h
+++ b/home/whalien/codebase/cpp/mergebot/eva/output/grpc/fa0c7314-c6bd67c2-b4031fa4/include@grpcpp@security@credentials.no_comments_merged.h
@@ -15,2 +15 @@
-struct grpc_call
-#include <grpcpp/security/credentials_impl.h>
+struct grpc_call;
@@ -18,33 +17,4 @@ struct grpc_call
-  constexpr long kMaxAuthTokenLifetimeSecs = 3600;
-  std::shared_ptr<CallCredentials> ServiceAccountJWTAccessCredentials(
-      const grpc::string& json_key,
-      long token_lifetime_seconds = kMaxAuthTokenLifetimeSecs);
-  std::shared_ptr<CallCredentials> GoogleRefreshTokenCredentials(
-      const grpc::string& json_refresh_token);
-  std::shared_ptr<CallCredentials> AccessTokenCredentials(
-      const grpc::string& access_token);
-  std::shared_ptr<CallCredentials> GoogleIAMCredentials(
-      const grpc::string& authorization_token,
-      const grpc::string& authority_selector);
-  std::shared_ptr<ChannelCredentials> CompositeChannelCredentials(
-      const std::shared_ptr<ChannelCredentials>& channel_creds,
-      const std::shared_ptr<CallCredentials>& call_creds);
-  std::shared_ptr<CallCredentials> CompositeCallCredentials(
-      const std::shared_ptr<CallCredentials>& creds1,
-      const std::shared_ptr<CallCredentials>& creds2);
-  std::shared_ptr<ChannelCredentials> InsecureChannelCredentials();
-  class MetadataCredentialsPlugin {
-   public:
-    ~MetadataCredentialsPlugin() {}
-    virtual bool IsBlocking() const { return true; }
-    virtual const char* GetType() const { return ""; }
-    virtual grpc::Status GetMetadata(
-        grpc::string_ref service_url, grpc::string_ref method_name,
-        const grpc::AuthContext& channel_auth_context,
-        std::multimap<grpc::string, grpc::string>* metadata) = 0;
-    virtual grpc::string DebugString() {
-      return "MetadataCredentialsPlugin did not provide a debug string";
-    }
-  };
-  std::shared_ptr<CallCredentials> MetadataCredentialsFromPlugin(
-      std::unique_ptr<MetadataCredentialsPlugin> plugin);
+class CallCredentials;
+class SecureCallCredentials;
+class SecureChannelCredentials;
+class ChannelCredentials;
@@ -60,2 +30,2 @@ struct grpc_call
-      std::vector<std::unique_ptr<
-          grpc::experimental::ClientInterceptorFactoryInterface>>
+    std::vector<
+        std::unique_ptr<grpc::experimental::ClientInterceptorFactoryInterface>>
@@ -63,17 +32,0 @@ struct grpc_call
-  grpc::Status StsCredentialsOptionsFromJson(const grpc::string& json_string,
-                                             StsCredentialsOptions* options);
-  grpc::Status StsCredentialsOptionsFromEnv(StsCredentialsOptions* options);
-  std::shared_ptr<CallCredentials> StsCredentials(
-      const StsCredentialsOptions& options);
-  std::shared_ptr<CallCredentials> MetadataCredentialsFromPlugin(
-      std::unique_ptr<MetadataCredentialsPlugin> plugin,
-      grpc_security_level min_security_level);
-  struct AltsCredentialsOptions {
-    std::vector<grpc::string> target_service_accounts;
-  };
-  std::shared_ptr<ChannelCredentials> AltsCredentials(
-      const AltsCredentialsOptions& options);
-  std::shared_ptr<ChannelCredentials> LocalCredentials(
-      grpc_local_connect_type type);
-  std::shared_ptr<ChannelCredentials> TlsCredentials(
-      const TlsCredentialsOptions& options);
@@ -138,0 +92,66 @@ struct grpc_call
+constexpr long kMaxAuthTokenLifetimeSecs = 3600;
+std::shared_ptr<CallCredentials> ServiceAccountJWTAccessCredentials(
+    const grpc::string& json_key,
+    long token_lifetime_seconds = kMaxAuthTokenLifetimeSecs);
+std::shared_ptr<CallCredentials> GoogleRefreshTokenCredentials(
+    const grpc::string& json_refresh_token);
+std::shared_ptr<CallCredentials> AccessTokenCredentials(
+    const grpc::string& access_token);
+std::shared_ptr<CallCredentials> GoogleIAMCredentials(
+    const grpc::string& authorization_token,
+    const grpc::string& authority_selector);
+std::shared_ptr<ChannelCredentials> CompositeChannelCredentials(
+    const std::shared_ptr<ChannelCredentials>& channel_creds,
+    const std::shared_ptr<CallCredentials>& call_creds);
+std::shared_ptr<CallCredentials> CompositeCallCredentials(
+    const std::shared_ptr<CallCredentials>& creds1,
+    const std::shared_ptr<CallCredentials>& creds2);
+std::shared_ptr<ChannelCredentials> InsecureChannelCredentials();
+class MetadataCredentialsPlugin {
+ public:
+  virtual ~MetadataCredentialsPlugin() {}
+  virtual bool IsBlocking() const { return true; }
+  virtual const char* GetType() const { return ""; }
+  virtual grpc::Status GetMetadata(
+      grpc::string_ref service_url, grpc::string_ref method_name,
+      const grpc::AuthContext& channel_auth_context,
+      std::multimap<grpc::string, grpc::string>* metadata) = 0;
+  virtual grpc::string DebugString() {
+    return "MetadataCredentialsPlugin did not provide a debug string";
+  }
+};
+std::shared_ptr<CallCredentials> MetadataCredentialsFromPlugin(
+    std::unique_ptr<MetadataCredentialsPlugin> plugin);
+namespace experimental {
+struct StsCredentialsOptions {
+  grpc::string token_exchange_service_uri;
+  grpc::string resource;
+  grpc::string audience;
+  grpc::string scope;
+  grpc::string requested_token_type;
+  grpc::string subject_token_path;
+  grpc::string subject_token_type;
+  grpc::string actor_token_path;
+  grpc::string actor_token_type;
+};
+static inline grpc::Status StsCredentialsOptionsFromJson(
+    const std::string& json_string, StsCredentialsOptions* options) {
+  return ::grpc::experimental::StsCredentialsOptionsFromJson(json_string,
+                                                                  options);
+}
+grpc::Status StsCredentialsOptionsFromEnv(StsCredentialsOptions* options);
+std::shared_ptr<CallCredentials> StsCredentials(
+    const StsCredentialsOptions& options);
+std::shared_ptr<CallCredentials> MetadataCredentialsFromPlugin(
+    std::unique_ptr<MetadataCredentialsPlugin> plugin,
+    grpc_security_level min_security_level);
+struct AltsCredentialsOptions {
+  std::vector<grpc::string> target_service_accounts;
+};
+std::shared_ptr<ChannelCredentials> AltsCredentials(
+    const AltsCredentialsOptions& options);
+std::shared_ptr<ChannelCredentials> LocalCredentials(
+    grpc_local_connect_type type);
+std::shared_ptr<ChannelCredentials> TlsCredentials(
+    const TlsCredentialsOptions& options);
+}
