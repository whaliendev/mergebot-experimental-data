diff --git a/home/whalien/codebase/cpp/mergebot/eva/output/libnativehelper/a7de6785-b50e3d9d-dd7513f9/JNIHelp.no_comments_mergebot.cpp b/home/whalien/codebase/cpp/mergebot/eva/output/libnativehelper/a7de6785-b50e3d9d-dd7513f9/JNIHelp.no_comments_merged.cpp
index f6e8aca..016b408 100644
--- a/home/whalien/codebase/cpp/mergebot/eva/output/libnativehelper/a7de6785-b50e3d9d-dd7513f9/JNIHelp.no_comments_mergebot.cpp
+++ b/home/whalien/codebase/cpp/mergebot/eva/output/libnativehelper/a7de6785-b50e3d9d-dd7513f9/JNIHelp.no_comments_merged.cpp
@@ -7 +6,0 @@
-#include <string>
@@ -9,0 +9 @@
+#include <string>
@@ -14,2 +14,6 @@ class scoped_local_ref {
-      : mEnv(env), mLocalRef(localRef) {}
-  ~scoped_local_ref() { reset(); }
+    : mEnv(env), mLocalRef(localRef)
+    {
+    }
+    ~scoped_local_ref() {
+        reset();
+    }
@@ -22 +26,3 @@ class scoped_local_ref {
-  T get() const { return mLocalRef; }
+    T get() const {
+        return mLocalRef;
+    }
@@ -34,2 +40,2 @@ extern "C" int jniRegisterNativeMethods(C_JNIEnv* env, const char* className,
-                                        const JNINativeMethod* gMethods,
-                                        int numMethods) {
+    const JNINativeMethod* gMethods, int numMethods)
+{
@@ -41,2 +47 @@ extern "C" int jniRegisterNativeMethods(C_JNIEnv* env, const char* className,
-    asprintf(&msg, "Native registration unable to find class '%s', aborting...",
-             className);
+        asprintf(&msg, "Native registration unable to find class '%s', aborting...", className);
@@ -52,2 +57 @@ extern "C" int jniRegisterNativeMethods(C_JNIEnv* env, const char* className,
-static bool getExceptionSummary(C_JNIEnv* env, jthrowable exception,
-                                std::string& result) {
+static bool getExceptionSummary(C_JNIEnv* env, jthrowable exception, std::string& result) {
@@ -55,10 +59,7 @@ static bool getExceptionSummary(C_JNIEnv* env, jthrowable exception,
-  scoped_local_ref<jclass> exceptionClass(
-      env, (*env)->GetObjectClass(e, exception));
-  scoped_local_ref<jclass> classClass(
-      env, (*env)->GetObjectClass(
-               e, exceptionClass.get()));
-  jmethodID classGetNameMethod = (*env)->GetMethodID(
-      e, classClass.get(), "getName", "()Ljava/lang/String;");
-  scoped_local_ref<jstring> classNameStr(
-      env, (jstring)(*env)->CallObjectMethod(e, exceptionClass.get(),
-                                             classGetNameMethod));
+    scoped_local_ref<jclass> exceptionClass(env, (*env)->GetObjectClass(e, exception));
+    scoped_local_ref<jclass> classClass(env,
+            (*env)->GetObjectClass(e, exceptionClass.get()));
+    jmethodID classGetNameMethod =
+            (*env)->GetMethodID(e, classClass.get(), "getName", "()Ljava/lang/String;");
+    scoped_local_ref<jstring> classNameStr(env,
+            (jstring) (*env)->CallObjectMethod(e, exceptionClass.get(), classGetNameMethod));
@@ -70,2 +71 @@ static bool getExceptionSummary(C_JNIEnv* env, jthrowable exception,
-  const char* classNameChars =
-      (*env)->GetStringUTFChars(e, classNameStr.get(), NULL);
+    const char* classNameChars = (*env)->GetStringUTFChars(e, classNameStr.get(), NULL);
@@ -79,4 +79,4 @@ static bool getExceptionSummary(C_JNIEnv* env, jthrowable exception,
-  jmethodID getMessage = (*env)->GetMethodID(
-      e, exceptionClass.get(), "getMessage", "()Ljava/lang/String;");
-  scoped_local_ref<jstring> messageStr(
-      env, (jstring)(*env)->CallObjectMethod(e, exception, getMessage));
+    jmethodID getMessage =
+            (*env)->GetMethodID(e, exceptionClass.get(), "getMessage", "()Ljava/lang/String;");
+    scoped_local_ref<jstring> messageStr(env,
+            (jstring) (*env)->CallObjectMethod(e, exception, getMessage));
@@ -87,2 +87 @@ static bool getExceptionSummary(C_JNIEnv* env, jthrowable exception,
-  const char* messageChars =
-      (*env)->GetStringUTFChars(e, messageStr.get(), NULL);
+    const char* messageChars = (*env)->GetStringUTFChars(e, messageStr.get(), NULL);
@@ -98,2 +97 @@ static bool getExceptionSummary(C_JNIEnv* env, jthrowable exception,
-static bool getStackTrace(C_JNIEnv* env, jthrowable exception,
-                          std::string& result) {
+static bool getStackTrace(C_JNIEnv* env, jthrowable exception, std::string& result) {
@@ -101,2 +99 @@ static bool getStackTrace(C_JNIEnv* env, jthrowable exception,
-  scoped_local_ref<jclass> stringWriterClass(
-      env, findClass(env, "java/io/StringWriter"));
+    scoped_local_ref<jclass> stringWriterClass(env, findClass(env, "java/io/StringWriter"));
@@ -106,6 +103,4 @@ static bool getStackTrace(C_JNIEnv* env, jthrowable exception,
-  jmethodID stringWriterCtor =
-      (*env)->GetMethodID(e, stringWriterClass.get(), "<init>", "()V");
-  jmethodID stringWriterToStringMethod = (*env)->GetMethodID(
-      e, stringWriterClass.get(), "toString", "()Ljava/lang/String;");
-  scoped_local_ref<jclass> printWriterClass(
-      env, findClass(env, "java/io/PrintWriter"));
+    jmethodID stringWriterCtor = (*env)->GetMethodID(e, stringWriterClass.get(), "<init>", "()V");
+    jmethodID stringWriterToStringMethod =
+            (*env)->GetMethodID(e, stringWriterClass.get(), "toString", "()Ljava/lang/String;");
+    scoped_local_ref<jclass> printWriterClass(env, findClass(env, "java/io/PrintWriter"));
@@ -115,4 +110,4 @@ static bool getStackTrace(C_JNIEnv* env, jthrowable exception,
-  jmethodID printWriterCtor = (*env)->GetMethodID(
-      e, printWriterClass.get(), "<init>", "(Ljava/io/Writer;)V");
-  scoped_local_ref<jobject> stringWriter(
-      env, (*env)->NewObject(e, stringWriterClass.get(), stringWriterCtor));
+    jmethodID printWriterCtor =
+            (*env)->GetMethodID(e, printWriterClass.get(), "<init>", "(Ljava/io/Writer;)V");
+    scoped_local_ref<jobject> stringWriter(env,
+            (*env)->NewObject(e, stringWriterClass.get(), stringWriterCtor));
@@ -122,2 +117,2 @@ static bool getStackTrace(C_JNIEnv* env, jthrowable exception,
-  jobject printWriter = (*env)->NewObject(e, printWriterClass.get(),
-                                          printWriterCtor, stringWriter.get());
+    jobject printWriter =
+            (*env)->NewObject(e, printWriterClass.get(), printWriterCtor, stringWriter.get());
@@ -127,4 +122,3 @@ static bool getStackTrace(C_JNIEnv* env, jthrowable exception,
-  scoped_local_ref<jclass> exceptionClass(
-      env, (*env)->GetObjectClass(e, exception));
-  jmethodID printStackTraceMethod = (*env)->GetMethodID(
-      e, exceptionClass.get(), "printStackTrace", "(Ljava/io/PrintWriter;)V");
+    scoped_local_ref<jclass> exceptionClass(env, (*env)->GetObjectClass(e, exception));
+    jmethodID printStackTraceMethod =
+            (*env)->GetMethodID(e, exceptionClass.get(), "printStackTrace", "(Ljava/io/PrintWriter;)V");
@@ -135,3 +129,2 @@ static bool getStackTrace(C_JNIEnv* env, jthrowable exception,
-  scoped_local_ref<jstring> messageStr(
-      env, (jstring)(*env)->CallObjectMethod(e, stringWriter.get(),
-                                             stringWriterToStringMethod));
+    scoped_local_ref<jstring> messageStr(env,
+            (jstring) (*env)->CallObjectMethod(e, stringWriter.get(), stringWriterToStringMethod));
@@ -149,2 +142 @@ static bool getStackTrace(C_JNIEnv* env, jthrowable exception,
-extern "C" int jniThrowException(C_JNIEnv* env, const char* className,
-                                 const char* msg) {
+extern "C" int jniThrowException(C_JNIEnv* env, const char* className, const char* msg) {
@@ -158,2 +150 @@ extern "C" int jniThrowException(C_JNIEnv* env, const char* className,
-      ALOGW("Discarding pending exception (%s) to throw %s", text.c_str(),
-            className);
+            ALOGW("Discarding pending exception (%s) to throw %s", text.c_str(), className);
@@ -173,2 +164 @@ extern "C" int jniThrowException(C_JNIEnv* env, const char* className,
-int jniThrowExceptionFmt(C_JNIEnv* env, const char* className, const char* fmt,
-                         va_list args) {
+int jniThrowExceptionFmt(C_JNIEnv* env, const char* className, const char* fmt, va_list args) {
@@ -190,2 +180 @@ int jniThrowIOException(C_JNIEnv* env, int errnum) {
-void jniLogException(C_JNIEnv* env, int priority, const char* tag,
-                     jthrowable exception) {
+void jniLogException(C_JNIEnv* env, int priority, const char* tag, jthrowable exception) {
@@ -197,2 +186 @@ extern "C" std::string jniGetStackTrace(C_JNIEnv* env, jthrowable exception) {
-  scoped_local_ref<jthrowable> currentException(env,
-                                                (*env)->ExceptionOccurred(e));
+    scoped_local_ref<jthrowable> currentException(env, (*env)->ExceptionOccurred(e));
@@ -231,12 +219,2 @@ jobject jniCreateFileDescriptor(C_JNIEnv* env, int fd) {
-<<<<<<< /tmp/.mergebot/47060b8d762c346617290efed906fb91073cf64c/a7de67-b50e3d/ours/JNIHelp.cpp
-  jobject fileDescriptor = (*env)->NewObject(e, gFileDescriptorClassInfo.clazz,
-                                             gFileDescriptorClassInfo.ctor);
-||||||| /tmp/.mergebot/47060b8d762c346617290efed906fb91073cf64c/a7de67-b50e3d/base/JNIHelp.cpp
-  jobject fileDescriptor = (*env)->NewObject(
-      e, gCachedFields.fileDescriptorClass, gCachedFields.fileDescriptorCtor);
-=======
-  static jmethodID ctor =
-      e->GetMethodID(JniConstants::fileDescriptorClass, "<init>", "()V");
-  jobject fileDescriptor =
-      (*env)->NewObject(e, JniConstants::fileDescriptorClass, ctor);
->>>>>>> /tmp/.mergebot/47060b8d762c346617290efed906fb91073cf64c/a7de67-b50e3d/theirs/JNIHelp.cpp
+    static jmethodID ctor = e->GetMethodID(JniConstants::fileDescriptorClass, "<init>", "()V");
+    jobject fileDescriptor = (*env)->NewObject(e, JniConstants::fileDescriptorClass, ctor);
@@ -248,8 +226 @@ int jniGetFDFromFileDescriptor(C_JNIEnv* env, jobject fileDescriptor) {
-<<<<<<< /tmp/.mergebot/47060b8d762c346617290efed906fb91073cf64c/a7de67-b50e3d/ours/JNIHelp.cpp
-  return (*env)->GetIntField(e, fileDescriptor,
-                             gFileDescriptorClassInfo.descriptor);
-||||||| /tmp/.mergebot/47060b8d762c346617290efed906fb91073cf64c/a7de67-b50e3d/base/JNIHelp.cpp
-  return (*env)->GetIntField(e, fileDescriptor, gCachedFields.descriptorField);
-=======
-  static jfieldID fid =
-      e->GetFieldID(JniConstants::fileDescriptorClass, "descriptor", "I");
+    static jfieldID fid = e->GetFieldID(JniConstants::fileDescriptorClass, "descriptor", "I");
@@ -257 +227,0 @@ int jniGetFDFromFileDescriptor(C_JNIEnv* env, jobject fileDescriptor) {
->>>>>>> /tmp/.mergebot/47060b8d762c346617290efed906fb91073cf64c/a7de67-b50e3d/theirs/JNIHelp.cpp
@@ -259,2 +229 @@ int jniGetFDFromFileDescriptor(C_JNIEnv* env, jobject fileDescriptor) {
-void jniSetFileDescriptorOfFD(C_JNIEnv* env, jobject fileDescriptor,
-                              int value) {
+void jniSetFileDescriptorOfFD(C_JNIEnv* env, jobject fileDescriptor, int value) {
@@ -262,8 +231 @@ void jniSetFileDescriptorOfFD(C_JNIEnv* env, jobject fileDescriptor,
-<<<<<<< /tmp/.mergebot/47060b8d762c346617290efed906fb91073cf64c/a7de67-b50e3d/ours/JNIHelp.cpp
-  (*env)->SetIntField(e, fileDescriptor, gFileDescriptorClassInfo.descriptor,
-                      value);
-||||||| /tmp/.mergebot/47060b8d762c346617290efed906fb91073cf64c/a7de67-b50e3d/base/JNIHelp.cpp
-  (*env)->SetIntField(e, fileDescriptor, gCachedFields.descriptorField, value);
-=======
-  static jfieldID fid =
-      e->GetFieldID(JniConstants::fileDescriptorClass, "descriptor", "I");
+    static jfieldID fid = e->GetFieldID(JniConstants::fileDescriptorClass, "descriptor", "I");
@@ -271,5 +232,0 @@ void jniSetFileDescriptorOfFD(C_JNIEnv* env, jobject fileDescriptor,
->>>>>>> /tmp/.mergebot/47060b8d762c346617290efed906fb91073cf64c/a7de67-b50e3d/theirs/JNIHelp.cpp
-}
-jobject jniGetReferent(C_JNIEnv* env, jobject ref) {
-  JNIEnv* e = reinterpret_cast<JNIEnv*>(env);
-  return (*env)->CallObjectMethod(e, ref, gReferenceClassInfo.get);
@@ -278,2 +235 @@ jobject jniGetReferent(C_JNIEnv* env, jobject ref) {
-extern "C" jbyte* jniGetNonMovableArrayElements(C_JNIEnv* env,
-                                                jarray arrayObj) {
+extern "C" jbyte* jniGetNonMovableArrayElements(C_JNIEnv* env, jarray arrayObj) {
@@ -283,4 +239,2 @@ extern "C" jbyte* jniGetNonMovableArrayElements(C_JNIEnv* env,
-  jbyte* result = (*env)->GetByteArrayElements(
-      e, byteArray, reinterpret_cast<jboolean*>(&noCopy));
-  (*env)->ReleaseByteArrayElements(e, byteArray,
-                                   reinterpret_cast<jbyte*>(kNoCopyMagic), 0);
+    jbyte* result = (*env)->GetByteArrayElements(e, byteArray, reinterpret_cast<jboolean*>(&noCopy));
+    (*env)->ReleaseByteArrayElements(e, byteArray, reinterpret_cast<jbyte*>(kNoCopyMagic), 0);
@@ -289,8 +242,0 @@ extern "C" jbyte* jniGetNonMovableArrayElements(C_JNIEnv* env,
-static struct {
-  jclass clazz;
-  jmethodID ctor;
-  jfieldID descriptor;
-} gFileDescriptorClassInfo;
-static struct {
-  jmethodID get;
-} gReferenceClassInfo;
