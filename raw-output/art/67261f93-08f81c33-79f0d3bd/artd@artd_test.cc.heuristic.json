[
  {
    "desc": "Added code or method extraction, accept our side.",
    "confidence": 0.7,
    "index": 0,
    "label": "",
    "code": [
      "#include <cstdio>",
      "#include <cstring>"
    ]
  },
  {
    "code": [
      "void CreateZipWithSingleEntry(const std::string& filename,",
      "                                const std::string& entry_name,",
      "                                const std::string& content = \"\") {",
      "    std::unique_ptr<File> file(OS::CreateEmptyFileWriteOnly(filename.c_str()));",
      "    ASSERT_NE(file, nullptr);",
      "    file->MarkUnchecked();  // `writer.Finish()` flushes the file and the destructor closes it.",
      "    ZipWriter writer(fdopen(file->Fd(), \"wb\"));",
      "    ASSERT_EQ(writer.StartEntry(entry_name, /*flags=*/0), 0);",
      "    ASSERT_EQ(writer.WriteBytes(content.c_str(), content.size()), 0);",
      "    ASSERT_EQ(writer.FinishEntry(), 0);",
      "    ASSERT_EQ(writer.Finish(), 0);",
      "  }",
      "void CreateZipWithSingleEntry(const std::string& filename,",
      "                                const std::string& entry_name,",
      "                                const std::string& content = \"\") {",
      "    std::filesystem::path path(filename);",
      "    std::filesystem::create_directories(path.parent_path());",
      "    std::unique_ptr<File> file(OS::CreateEmptyFileWriteOnly(filename.c_str()));",
      "    ASSERT_NE(file, nullptr) << strerror(errno);",
      "    file->MarkUnchecked();  // `writer.Finish()` flushes the file and the destructor closes it.",
      "    ZipWriter writer(fdopen(file->Fd(), \"wb\"));",
      "    ASSERT_EQ(writer.StartEntry(entry_name, /*flags=*/0), 0);",
      "    ASSERT_EQ(writer.WriteBytes(content.c_str(), content.size()), 0);",
      "    ASSERT_EQ(writer.FinishEntry(), 0);",
      "    ASSERT_EQ(writer.Finish(), 0);",
      "  }"
    ],
    "label": "",
    "index": 2,
    "confidence": 0.4,
    "desc": "List merge."
  }
]