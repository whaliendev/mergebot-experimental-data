[
  {
    "code": [
      "// Only to be changed for testing.",
      "std::string_view gListRootDir = \"/\";",
      "",
      "Result<void> ValidateAbsoluteNormalPath(const std::string& path_str) {",
      "  if (path_str.empty()) {",
      "    return Errorf(\"Path is empty\");",
      "  }",
      "  if (path_str.find('\\0') != std::string::npos) {",
      "    return Errorf(\"Path '{}' has invalid character '\\\\0'\", path_str);",
      "  }",
      "  std::filesystem::path path(path_str);",
      "  if (!path.is_absolute()) {",
      "    return Errorf(\"Path '{}' is not an absolute path\", path_str);",
      "  }",
      "  if (path.lexically_normal() != path_str) {",
      "    return Errorf(\"Path '{}' is not in normal form\", path_str);",
      "  }",
      "  return {};",
      "}",
      "",
      "Result<void> ValidatePathElementSubstring(const std::string& path_element_substring,",
      "                                          const std::string& name) {",
      "  if (path_element_substring.empty()) {",
      "    return Errorf(\"{} is empty\", name);",
      "  }",
      "  if (path_element_substring.find('/') != std::string::npos) {",
      "    return Errorf(\"{} '{}' has invalid character '/'\", name, path_element_substring);",
      "  }",
      "  if (path_element_substring.find('\\0') != std::string::npos) {",
      "    return Errorf(\"{} '{}' has invalid character '\\\\0'\", name, path_element_substring);",
      "  }",
      "  return {};",
      "}",
      "",
      "Result<void> ValidatePathElement(const std::string& path_element, const std::string& name) {",
      "  OR_RETURN(ValidatePathElementSubstring(path_element, name));",
      "  if (path_element == \".\" || path_element == \"..\") {",
      "    return Errorf(\"Invalid {} '{}'\", name, path_element);",
      "  }",
      "  return {};",
      "}"
    ],
    "label": "",
    "index": 0,
    "confidence": 0.7,
    "desc": "Added code or method extraction, accept their side."
  }
]