diff --git a/output/art/b8eb3ad3-bebee4fd-d68168e9/compiler@dex@quick@gen_common.no_comments_mergebot.cc b/output/art/b8eb3ad3-bebee4fd-d68168e9/compiler@dex@quick@gen_common.no_comments_truth.cc
index ffa20ab..6d537e0 100644
--- a/output/art/b8eb3ad3-bebee4fd-d68168e9/compiler@dex@quick@gen_common.no_comments_mergebot.cc
+++ b/output/art/b8eb3ad3-bebee4fd-d68168e9/compiler@dex@quick@gen_common.no_comments_truth.cc
@@ -980 +979,0 @@ void Mir2Lir::GenInstanceofCallingHelper(bool needs_access_check, bool type_know
-<<<<<<< HEAD
@@ -984,6 +982,0 @@ void Mir2Lir::GenInstanceofCallingHelper(bool needs_access_check, bool type_know
-||||||| d68168e9f0
-=======
-    if (can_assume_type_is_in_dex_cache) {
-      LoadValueDirectFixed(rl_src, TargetReg(kArg0, kRef));
-    }
->>>>>>> bebee4fd
@@ -995 +987,0 @@ void Mir2Lir::GenInstanceofCallingHelper(bool needs_access_check, bool type_know
-<<<<<<< HEAD
@@ -1008,16 +999,0 @@ void Mir2Lir::GenInstanceofCallingHelper(bool needs_access_check, bool type_know
-||||||| d68168e9f0
-      LIR* hop_branch = OpCmpImmBranch(kCondNe, class_reg, 0, NULL);
-=======
-      LIR* slow_path_branch = OpCmpImmBranch(kCondEq, class_reg, 0, NULL);
-      LIR* slow_path_target = NewLIR0(kPseudoTargetLabel);
-      LoadValueDirectFixed(rl_src, TargetReg(kArg0, kRef));
-      class InitTypeSlowPath : public Mir2Lir::LIRSlowPath {
-       public:
-        InitTypeSlowPath(Mir2Lir* m2l, LIR* branch, LIR* cont, uint32_t type_idx,
-                         RegLocation rl_src)
-            : LIRSlowPath(m2l, m2l->GetCurrentDexPc(), branch, cont), type_idx_(type_idx),
-              rl_src_(rl_src) {
-        }
-        void Compile() OVERRIDE {
-          GenerateTargetLabel();
->>>>>>> bebee4fd
@@ -1054 +1029,0 @@ void Mir2Lir::GenInstanceofCallingHelper(bool needs_access_check, bool type_know
-<<<<<<< HEAD
@@ -1057,16 +1031,0 @@ void Mir2Lir::GenInstanceofCallingHelper(bool needs_access_check, bool type_know
-||||||| d68168e9f0
-    if (cu_->instruction_set == kThumb2) {
-      OpRegReg(kOpCmp, TargetReg(kArg1, kRef), TargetReg(kArg2, kRef));
-      LIR* it = OpIT(kCondEq, "E");
-      LoadConstant(rl_result.reg, 1);
-      LoadConstant(rl_result.reg, 0);
-      OpEndIT(it);
-    } else {
-      LoadConstant(rl_result.reg, 0);
-      branchover = OpCmpBranch(kCondNe, TargetReg(kArg1, kRef), TargetReg(kArg2, kRef), NULL);
-      LoadConstant(rl_result.reg, 1);
-    }
-=======
-    GenSelectConst32(TargetReg(kArg1, kRef), TargetReg(kArg2, kRef), kCondEq, 1, 0, rl_result.reg,
-                     kCoreReg);
->>>>>>> bebee4fd
@@ -1095 +1053,0 @@ void Mir2Lir::GenInstanceofCallingHelper(bool needs_access_check, bool type_know
-<<<<<<< HEAD
@@ -1102,15 +1059,0 @@ void Mir2Lir::GenInstanceofCallingHelper(bool needs_access_check, bool type_know
-||||||| d68168e9f0
-      RegStorage r_tgt = cu_->target64 ?
-          LoadHelper(QUICK_ENTRYPOINT_OFFSET(8, pInstanceofNonTrivial)) :
-          LoadHelper(QUICK_ENTRYPOINT_OFFSET(4, pInstanceofNonTrivial));
-      OpRegCopy(TargetReg(kArg0, kRef), TargetReg(kArg2, kRef));
-      OpReg(kOpBlx, r_tgt);
-      FreeTemp(r_tgt);
-=======
-      OpRegCopy(TargetReg(kArg0, kRef), TargetReg(kArg2, kRef));
-      if (cu_->target64) {
-        CallRuntimeHelper(QUICK_ENTRYPOINT_OFFSET(8, pInstanceofNonTrivial), false);
-      } else {
-        CallRuntimeHelper(QUICK_ENTRYPOINT_OFFSET(4, pInstanceofNonTrivial), false);
-      }
->>>>>>> bebee4fd
@@ -1864,0 +1808,4 @@ void Mir2Lir::GenConversionCall(ThreadOffset<pointer_size> func_offset,
+template void Mir2Lir::GenConversionCall(ThreadOffset<4> func_offset,
+                                         RegLocation rl_dest, RegLocation rl_src);
+template void Mir2Lir::GenConversionCall(ThreadOffset<8> func_offset,
+                                         RegLocation rl_dest, RegLocation rl_src);
