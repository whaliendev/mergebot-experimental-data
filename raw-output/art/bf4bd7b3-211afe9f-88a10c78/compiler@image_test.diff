diff --git a/output/art/bf4bd7b3-211afe9f-88a10c78/compiler@image_test.no_comments_mergebot.cc b/output/art/bf4bd7b3-211afe9f-88a10c78/compiler@image_test.no_comments_truth.cc
index dd4198d..cb2acc8 100644
--- a/output/art/bf4bd7b3-211afe9f-88a10c78/compiler@image_test.no_comments_mergebot.cc
+++ b/output/art/bf4bd7b3-211afe9f-88a10c78/compiler@image_test.no_comments_truth.cc
@@ -35,3 +35 @@ void ImageTest::TestWriteRead(ImageHeader::StorageMode storage_mode) {
-  const std::vector<const DexFile*>& boot_class_path = class_linker->GetBootClassPath();
-  const size_t num_images = boot_class_path.size();
-  for (const DexFile* dex_file : boot_class_path) {
+  for (const DexFile* dex_file : class_linker->GetBootClassPath()) {
@@ -40,2 +37,0 @@ void ImageTest::TestWriteRead(ImageHeader::StorageMode storage_mode) {
-  std::vector<ScratchFile> image_locations;
-  {
@@ -43,11 +39,3 @@ void ImageTest::TestWriteRead(ImageHeader::StorageMode storage_mode) {
-    for (int i = 0; i < static_cast<int>(num_images); ++i) {
-      std::string cur_location(StringPrintf("%s-%d.art", location.GetFilename().c_str(), i));
-      image_locations.push_back(ScratchFile(cur_location));
-    }
-  }
-  std::vector<std::string> image_filenames;
-  std::vector<ScratchFile> image_files;
-  std::string image_dir;
-  for (ScratchFile& file : image_locations) {
-    std::string image_filename(GetSystemImageFilename(file.GetFilename().c_str(), kRuntimeISA));
-    image_filenames.push_back(image_filename);
+  ScratchFile image_location(location, ".art");
+  std::string image_filename(GetSystemImageFilename(image_location.GetFilename().c_str(),
+                                                    kRuntimeISA));
@@ -56,2 +44 @@ void ImageTest::TestWriteRead(ImageHeader::StorageMode storage_mode) {
-    if (image_dir.empty()) {
-      image_dir = image_filename.substr(0, pos);
+  std::string image_dir(image_filename, 0, pos);
@@ -60,4 +47 @@ void ImageTest::TestWriteRead(ImageHeader::StorageMode storage_mode) {
-    }
-    image_files.push_back(ScratchFile(OS::CreateEmptyFile(image_filename.c_str())));
-  }
-<<<<<<< HEAD
+  ScratchFile image_file(OS::CreateEmptyFile(image_filename.c_str()));
@@ -66,13 +49,0 @@ void ImageTest::TestWriteRead(ImageHeader::StorageMode storage_mode) {
-||||||| 88a10c78b8
-  std::string oat_filename(image_filename, 0, image_filename.size() - 3);
-  oat_filename += "oat";
-  ScratchFile oat_file(OS::CreateEmptyFile(oat_filename.c_str()));
-=======
-  std::vector<std::string> oat_filenames;
-  std::vector<ScratchFile> oat_files;
-  for (const std::string& image_filename : image_filenames) {
-    std::string oat_filename(image_filename.substr(0, image_filename.size() - strlen("art")) + "oat");
-    oat_files.push_back(ScratchFile(OS::CreateEmptyFile(oat_filename.c_str())));
-    oat_filenames.push_back(oat_filename);
-  }
->>>>>>> 211afe9f
@@ -83,12 +54,3 @@ void ImageTest::TestWriteRead(ImageHeader::StorageMode storage_mode) {
-  std::vector<const char*> oat_filename_vector;
-  for (const std::string& file : oat_filenames) {
-    oat_filename_vector.push_back(file.c_str());
-  }
-  std::vector<const char*> image_filename_vector;
-  for (const std::string& file : image_filenames) {
-    image_filename_vector.push_back(file.c_str());
-  }
-  size_t image_idx = 0;
-  for (const DexFile* dex_file : boot_class_path) {
-    dex_file_to_oat_index_map.emplace(dex_file, image_idx);
-    ++image_idx;
+  std::vector<const char*> oat_filename_vector(1, oat_filename.c_str());
+  for (const DexFile* dex_file : class_linker->GetBootClassPath()) {
+    dex_file_to_oat_index_map.emplace(dex_file, 0);
@@ -112,9 +73,0 @@ void ImageTest::TestWriteRead(ImageHeader::StorageMode storage_mode) {
-      std::vector<const char*> dex_filename_vector;
-      for (size_t i = 0; i < boot_class_path.size(); ++i) {
-        dex_filename_vector.push_back("");
-      }
-      key_value_store.Put(OatHeader::kBootClassPathKey,
-                          gc::space::ImageSpace::GetMultiImageBootClassPath(
-                              dex_filename_vector,
-                              oat_filename_vector,
-                              image_filename_vector));
@@ -122,4 +75,2 @@ void ImageTest::TestWriteRead(ImageHeader::StorageMode storage_mode) {
-      std::vector<std::unique_ptr<ElfWriter>> elf_writers;
-      std::vector<std::unique_ptr<OatWriter>> oat_writers;
-      for (ScratchFile& oat_file : oat_files) {
-        elf_writers.emplace_back(CreateElfWriterQuick(compiler_driver_->GetInstructionSet(),
+      std::unique_ptr<ElfWriter> elf_writer = CreateElfWriterQuick(
+          compiler_driver_->GetInstructionSet(),
@@ -128 +78,0 @@ void ImageTest::TestWriteRead(ImageHeader::StorageMode storage_mode) {
-<<<<<<< HEAD
@@ -134,18 +83,0 @@ void ImageTest::TestWriteRead(ImageHeader::StorageMode storage_mode) {
-||||||| 88a10c78b8
-          oat_file.GetFile());
-      elf_writer->Start();
-      OatWriter oat_writer( true, &timings);
-      OutputStream* rodata = elf_writer->StartRoData();
-      for (const DexFile* dex_file : dex_files) {
-=======
-                                                       oat_file.GetFile()));
-        elf_writers.back()->Start();
-        oat_writers.emplace_back(new OatWriter( true, &timings));
-      }
-      std::vector<OutputStream*> rodata;
-      std::vector<std::unique_ptr<MemMap>> opened_dex_files_map;
-      std::vector<std::unique_ptr<const DexFile>> opened_dex_files;
-      for (size_t i = 0, size = oat_writers.size(); i != size; ++i) {
-        const DexFile* dex_file = dex_files[i];
-        rodata.push_back(elf_writers[i]->StartRoData());
->>>>>>> 211afe9f
@@ -155 +87 @@ void ImageTest::TestWriteRead(ImageHeader::StorageMode storage_mode) {
-        oat_writers[i]->AddRawDexFileSource(raw_dex_file,
+        oat_writer.AddRawDexFileSource(raw_dex_file,
@@ -158 +89,0 @@ void ImageTest::TestWriteRead(ImageHeader::StorageMode storage_mode) {
-<<<<<<< HEAD
@@ -166,14 +96,0 @@ void ImageTest::TestWriteRead(ImageHeader::StorageMode storage_mode) {
-||||||| 88a10c78b8
-      }
-      std::unique_ptr<MemMap> opened_dex_files_map;
-      std::vector<std::unique_ptr<const DexFile>> opened_dex_files;
-      bool dex_files_ok = oat_writer.WriteAndOpenDexFiles(
-          rodata,
-          oat_file.GetFile(),
-=======
-        std::unique_ptr<MemMap> cur_opened_dex_files_map;
-        std::vector<std::unique_ptr<const DexFile>> cur_opened_dex_files;
-        bool dex_files_ok = oat_writers[i]->WriteAndOpenDexFiles(
-            rodata.back(),
-            oat_files[i].GetFile(),
->>>>>>> 211afe9f
@@ -184,2 +101,2 @@ void ImageTest::TestWriteRead(ImageHeader::StorageMode storage_mode) {
-            &cur_opened_dex_files_map,
-            &cur_opened_dex_files);
+            &opened_dex_files_map,
+            &opened_dex_files);
@@ -187,9 +103,0 @@ void ImageTest::TestWriteRead(ImageHeader::StorageMode storage_mode) {
-      }
-        if (cur_opened_dex_files_map != nullptr) {
-          opened_dex_files_map.push_back(std::move(cur_opened_dex_files_map));
-          for (std::unique_ptr<const DexFile>& cur_dex_file : cur_opened_dex_files) {
-            opened_dex_files.push_back(std::move(cur_dex_file));
-          }
-        } else {
-          ASSERT_TRUE(cur_opened_dex_files.empty());
-        }
@@ -199 +106,0 @@ void ImageTest::TestWriteRead(ImageHeader::StorageMode storage_mode) {
-      for (size_t i = 0, size = oat_files.size(); i != size; ++i) {
@@ -202 +108,0 @@ void ImageTest::TestWriteRead(ImageHeader::StorageMode storage_mode) {
-<<<<<<< HEAD
@@ -207,15 +113 @@ void ImageTest::TestWriteRead(ImageHeader::StorageMode storage_mode) {
-||||||| 88a10c78b8
-      oat_writer.PrepareLayout(compiler_driver_.get(), writer.get(), dex_files, &patcher);
-      size_t rodata_size = oat_writer.GetOatHeader().GetExecutableOffset();
-      size_t text_size = oat_writer.GetSize() - rodata_size;
-      elf_writer->SetLoadedSectionSizes(rodata_size, text_size, oat_writer.GetBssSize());
-=======
-        OatWriter* const oat_writer = oat_writers[i].get();
-        ElfWriter* const elf_writer = elf_writers[i].get();
-        std::vector<const DexFile*> cur_dex_files(1u, dex_files[i]);
-        oat_writer->PrepareLayout(compiler_driver_.get(), writer.get(), cur_dex_files, &patcher);
-        size_t rodata_size = oat_writer->GetOatHeader().GetExecutableOffset();
-        size_t text_size = oat_writer->GetSize() - rodata_size;
-        elf_writer->SetLoadedSectionSizes(rodata_size, text_size, oat_writer->GetBssSize());
->>>>>>> 211afe9f
-        writer->UpdateOatFileLayout(i,
+      writer->UpdateOatFileLayout( 0u,
@@ -223 +114,0 @@ void ImageTest::TestWriteRead(ImageHeader::StorageMode storage_mode) {
-<<<<<<< HEAD
@@ -226,8 +116,0 @@ void ImageTest::TestWriteRead(ImageHeader::StorageMode storage_mode) {
-||||||| 88a10c78b8
-                                  oat_writer.GetOatDataOffset(),
-                                  oat_writer.GetSize());
-=======
-                                    oat_writer->GetOatDataOffset(),
-                                    oat_writer->GetSize());
->>>>>>> 211afe9f
-<<<<<<< HEAD
@@ -235,5 +117,0 @@ void ImageTest::TestWriteRead(ImageHeader::StorageMode storage_mode) {
-||||||| 88a10c78b8
-      bool rodata_ok = oat_writer.WriteRodata(rodata);
-=======
-        bool rodata_ok = oat_writer->WriteRodata(rodata[i]);
->>>>>>> 211afe9f
@@ -241 +118,0 @@ void ImageTest::TestWriteRead(ImageHeader::StorageMode storage_mode) {
-<<<<<<< HEAD
@@ -243,5 +119,0 @@ void ImageTest::TestWriteRead(ImageHeader::StorageMode storage_mode) {
-||||||| 88a10c78b8
-      elf_writer->EndRoData(rodata);
-=======
-        elf_writer->EndRoData(rodata[i]);
->>>>>>> 211afe9f
@@ -249 +121 @@ void ImageTest::TestWriteRead(ImageHeader::StorageMode storage_mode) {
-        bool text_ok = oat_writer->WriteCode(text);
+      bool text_ok = oat_writer.WriteCode(text);
@@ -252 +124 @@ void ImageTest::TestWriteRead(ImageHeader::StorageMode storage_mode) {
-        bool header_ok = oat_writer->WriteHeader(elf_writer->GetStream(), 0u, 0u, 0u);
+      bool header_ok = oat_writer.WriteHeader(elf_writer->GetStream(), 0u, 0u, 0u);
@@ -254 +126 @@ void ImageTest::TestWriteRead(ImageHeader::StorageMode storage_mode) {
-        writer->UpdateOatFileHeader(i, oat_writer->GetOatHeader());
+      writer->UpdateOatFileHeader( 0u, oat_writer.GetOatHeader());
@@ -256,2 +128,2 @@ void ImageTest::TestWriteRead(ImageHeader::StorageMode storage_mode) {
-        elf_writer->WriteDebugInfo(oat_writer->GetMethodDebugInfo());
-        elf_writer->WritePatchLocations(oat_writer->GetAbsolutePatchLocations());
+      elf_writer->WriteDebugInfo(oat_writer.GetMethodDebugInfo());
+      elf_writer->WritePatchLocations(oat_writer.GetAbsolutePatchLocations());
@@ -262 +134,2 @@ void ImageTest::TestWriteRead(ImageHeader::StorageMode storage_mode) {
-  }
+  std::unique_ptr<File> dup_oat(OS::OpenFileReadWrite(oat_file.GetFilename().c_str()));
+  ASSERT_TRUE(dup_oat.get() != nullptr);
@@ -263,0 +137,2 @@ void ImageTest::TestWriteRead(ImageHeader::StorageMode storage_mode) {
+    std::vector<const char*> dup_oat_filename(1, dup_oat->GetPath().c_str());
+    std::vector<const char*> dup_image_filename(1, image_file.GetFilename().c_str());
@@ -265,2 +140,2 @@ void ImageTest::TestWriteRead(ImageHeader::StorageMode storage_mode) {
-                                       image_filename_vector,
-                                       oat_filename_vector);
+                                       dup_image_filename,
+                                       dup_oat_filename);
@@ -268,6 +143,2 @@ void ImageTest::TestWriteRead(ImageHeader::StorageMode storage_mode) {
-    for (size_t i = 0, size = oat_filenames.size(); i != size; ++i) {
-      const char* oat_filename = oat_filenames[i].c_str();
-      std::unique_ptr<File> oat_file(OS::OpenFileReadWrite(oat_filename));
-      ASSERT_TRUE(oat_file != nullptr);
-      bool success_fixup = ElfWriter::Fixup(oat_file.get(),
-                                            writer->GetOatDataBegin(i));
+    bool success_fixup = ElfWriter::Fixup(dup_oat.get(),
+                                          writer->GetOatDataBegin(0));
@@ -275,3 +146,2 @@ void ImageTest::TestWriteRead(ImageHeader::StorageMode storage_mode) {
-      ASSERT_EQ(oat_file->FlushCloseOrErase(), 0) << "Could not flush and close oat file "
-                                                  << oat_filename;
-    }
+    ASSERT_EQ(dup_oat->FlushCloseOrErase(), 0) << "Could not flush and close oat file "
+                                               << oat_file.GetFilename();
@@ -279 +148,0 @@ void ImageTest::TestWriteRead(ImageHeader::StorageMode storage_mode) {
-<<<<<<< HEAD
@@ -283,7 +151,0 @@ void ImageTest::TestWriteRead(ImageHeader::StorageMode storage_mode) {
-||||||| 88a10c78b8
-  uint64_t image_file_size;
-  {
-=======
-  std::vector<uint64_t> image_file_sizes;
-  for (ScratchFile& image_file : image_files) {
->>>>>>> 211afe9f
@@ -304 +165,0 @@ void ImageTest::TestWriteRead(ImageHeader::StorageMode storage_mode) {
-<<<<<<< HEAD
@@ -307,5 +167,0 @@ void ImageTest::TestWriteRead(ImageHeader::StorageMode storage_mode) {
-||||||| 88a10c78b8
-    image_file_size = file->GetLength();
-=======
-    image_file_sizes.push_back(file->GetLength());
->>>>>>> 211afe9f
@@ -320,0 +177 @@ void ImageTest::TestWriteRead(ImageHeader::StorageMode storage_mode) {
+  std::unique_ptr<const DexFile> dex(LoadExpectSingleDexFile(GetLibCoreDexFileNames()[0].c_str()));
@@ -323 +180 @@ void ImageTest::TestWriteRead(ImageHeader::StorageMode storage_mode) {
-  image.append(image_locations[0].GetFilename());
+  image.append(image_location.GetFilename());
@@ -338,6 +195 @@ void ImageTest::TestWriteRead(ImageHeader::StorageMode storage_mode) {
-  ASSERT_EQ(heap->GetBootImageSpaces().size(), image_file_sizes.size());
-  for (size_t i = 0; i < image_file_sizes.size(); ++i) {
-    std::unique_ptr<const DexFile> dex(
-        LoadExpectSingleDexFile(GetLibCoreDexFileNames()[i].c_str()));
-    uint64_t image_file_size = image_file_sizes[i];
-    gc::space::ImageSpace* image_space = heap->GetBootImageSpaces()[i];
+  gc::space::ImageSpace* image_space = heap->GetBootImageSpaces()[0];
@@ -346 +197,0 @@ void ImageTest::TestWriteRead(ImageHeader::StorageMode storage_mode) {
-<<<<<<< HEAD
@@ -348,5 +198,0 @@ void ImageTest::TestWriteRead(ImageHeader::StorageMode storage_mode) {
-||||||| 88a10c78b8
-    ASSERT_LE(image_space->Size(), image_file_size);
-=======
-      ASSERT_LE(image_space->GetImageHeader().GetImageSize(), image_file_size);
->>>>>>> 211afe9f
@@ -354 +199,0 @@ void ImageTest::TestWriteRead(ImageHeader::StorageMode storage_mode) {
-<<<<<<< HEAD
@@ -356,5 +200,0 @@ void ImageTest::TestWriteRead(ImageHeader::StorageMode storage_mode) {
-||||||| 88a10c78b8
-    ASSERT_LE(image_file_size, image_space->Size());
-=======
-      ASSERT_LE(image_file_size, image_space->GetImageHeader().GetImageSize());
->>>>>>> 211afe9f
@@ -365 +204,0 @@ void ImageTest::TestWriteRead(ImageHeader::StorageMode storage_mode) {
-    if (i == 0) {
@@ -367,3 +206,2 @@ void ImageTest::TestWriteRead(ImageHeader::StorageMode storage_mode) {
-    }
-    for (size_t j = 0; j < dex->NumClassDefs(); ++j) {
-      const DexFile::ClassDef& class_def = dex->GetClassDef(j);
+  for (size_t i = 0; i < dex->NumClassDefs(); ++i) {
+    const DexFile::ClassDef& class_def = dex->GetClassDef(i);
@@ -373,4 +211 @@ void ImageTest::TestWriteRead(ImageHeader::StorageMode storage_mode) {
-      if (image_classes.find(descriptor) == image_classes.end()) {
-        EXPECT_TRUE(reinterpret_cast<uint8_t*>(klass) >= image_end ||
-                    reinterpret_cast<uint8_t*>(klass) < image_begin) << descriptor;
-      } else {
+    if (image_classes.find(descriptor) != image_classes.end()) {
@@ -378,0 +214,3 @@ void ImageTest::TestWriteRead(ImageHeader::StorageMode storage_mode) {
+    } else {
+      EXPECT_TRUE(reinterpret_cast<uint8_t*>(klass) >= image_end ||
+                  reinterpret_cast<uint8_t*>(klass) < image_begin) << descriptor;
@@ -382,2 +219,0 @@ void ImageTest::TestWriteRead(ImageHeader::StorageMode storage_mode) {
-  }
-  for (ScratchFile& image_file : image_files) {
@@ -385,2 +220,0 @@ void ImageTest::TestWriteRead(ImageHeader::StorageMode storage_mode) {
-  }
-  for (ScratchFile& oat_file : oat_files) {
@@ -388 +221,0 @@ void ImageTest::TestWriteRead(ImageHeader::StorageMode storage_mode) {
-<<<<<<< HEAD
@@ -390,4 +222,0 @@ void ImageTest::TestWriteRead(ImageHeader::StorageMode storage_mode) {
-||||||| 88a10c78b8
-=======
-  }
->>>>>>> 211afe9f
@@ -397,35 +226,2 @@ void ImageTest::TestWriteRead(ImageHeader::StorageMode storage_mode) {
-TEST_F(ImageTest, ImageHeaderIsValid) {
-    uint32_t image_begin = ART_BASE_ADDRESS;
-    uint32_t image_size_ = 16 * KB;
-    uint32_t image_roots = ART_BASE_ADDRESS + (1 * KB);
-    uint32_t oat_checksum = 0;
-    uint32_t oat_file_begin = ART_BASE_ADDRESS + (4 * KB);
-    uint32_t oat_data_begin = ART_BASE_ADDRESS + (8 * KB);
-    uint32_t oat_data_end = ART_BASE_ADDRESS + (9 * KB);
-    uint32_t oat_file_end = ART_BASE_ADDRESS + (10 * KB);
-    ImageSection sections[ImageHeader::kSectionCount];
-    ImageHeader image_header(image_begin,
-                             image_size_,
-                             sections,
-                             image_roots,
-                             oat_checksum,
-                             oat_file_begin,
-                             oat_data_begin,
-                             oat_data_end,
-                             oat_file_end,
-                                                 0U,
-                                                0U,
-                                               0U,
-                                               0U,
-                             sizeof(void*),
-                                            false,
-                                       false,
-                             ImageHeader::kDefaultStorageMode,
-                                          0u);
-    ASSERT_TRUE(image_header.IsValid());
-    ASSERT_TRUE(!image_header.IsAppImage());
-    char* magic = const_cast<char*>(image_header.GetMagic());
-    strcpy(magic, "");
-    ASSERT_FALSE(image_header.IsValid());
-    strcpy(magic, "art\n000");
-    ASSERT_FALSE(image_header.IsValid());
+TEST_F(ImageTest, WriteReadUncompressed) {
+  TestWriteRead(ImageHeader::kStorageModeUncompressed);
@@ -433,35 +229,2 @@ TEST_F(ImageTest, ImageHeaderIsValid) {
-TEST_F(ImageTest, ImageHeaderIsValid) {
-    uint32_t image_begin = ART_BASE_ADDRESS;
-    uint32_t image_size_ = 16 * KB;
-    uint32_t image_roots = ART_BASE_ADDRESS + (1 * KB);
-    uint32_t oat_checksum = 0;
-    uint32_t oat_file_begin = ART_BASE_ADDRESS + (4 * KB);
-    uint32_t oat_data_begin = ART_BASE_ADDRESS + (8 * KB);
-    uint32_t oat_data_end = ART_BASE_ADDRESS + (9 * KB);
-    uint32_t oat_file_end = ART_BASE_ADDRESS + (10 * KB);
-    ImageSection sections[ImageHeader::kSectionCount];
-    ImageHeader image_header(image_begin,
-                             image_size_,
-                             sections,
-                             image_roots,
-                             oat_checksum,
-                             oat_file_begin,
-                             oat_data_begin,
-                             oat_data_end,
-                             oat_file_end,
-                                                 0U,
-                                                0U,
-                                               0U,
-                                               0U,
-                             sizeof(void*),
-                                            false,
-                                       false,
-                             ImageHeader::kDefaultStorageMode,
-                                          0u);
-    ASSERT_TRUE(image_header.IsValid());
-    ASSERT_TRUE(!image_header.IsAppImage());
-    char* magic = const_cast<char*>(image_header.GetMagic());
-    strcpy(magic, "");
-    ASSERT_FALSE(image_header.IsValid());
-    strcpy(magic, "art\n000");
-    ASSERT_FALSE(image_header.IsValid());
+TEST_F(ImageTest, WriteReadLZ4) {
+  TestWriteRead(ImageHeader::kStorageModeLZ4);
@@ -469,35 +232,2 @@ TEST_F(ImageTest, ImageHeaderIsValid) {
-TEST_F(ImageTest, ImageHeaderIsValid) {
-    uint32_t image_begin = ART_BASE_ADDRESS;
-    uint32_t image_size_ = 16 * KB;
-    uint32_t image_roots = ART_BASE_ADDRESS + (1 * KB);
-    uint32_t oat_checksum = 0;
-    uint32_t oat_file_begin = ART_BASE_ADDRESS + (4 * KB);
-    uint32_t oat_data_begin = ART_BASE_ADDRESS + (8 * KB);
-    uint32_t oat_data_end = ART_BASE_ADDRESS + (9 * KB);
-    uint32_t oat_file_end = ART_BASE_ADDRESS + (10 * KB);
-    ImageSection sections[ImageHeader::kSectionCount];
-    ImageHeader image_header(image_begin,
-                             image_size_,
-                             sections,
-                             image_roots,
-                             oat_checksum,
-                             oat_file_begin,
-                             oat_data_begin,
-                             oat_data_end,
-                             oat_file_end,
-                                                 0U,
-                                                0U,
-                                               0U,
-                                               0U,
-                             sizeof(void*),
-                                            false,
-                                       false,
-                             ImageHeader::kDefaultStorageMode,
-                                          0u);
-    ASSERT_TRUE(image_header.IsValid());
-    ASSERT_TRUE(!image_header.IsAppImage());
-    char* magic = const_cast<char*>(image_header.GetMagic());
-    strcpy(magic, "");
-    ASSERT_FALSE(image_header.IsValid());
-    strcpy(magic, "art\n000");
-    ASSERT_FALSE(image_header.IsValid());
+TEST_F(ImageTest, WriteReadLZ4HC) {
+  TestWriteRead(ImageHeader::kStorageModeLZ4HC);
