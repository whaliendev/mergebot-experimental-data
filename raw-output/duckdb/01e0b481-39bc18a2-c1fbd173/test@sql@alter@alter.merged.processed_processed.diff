--- a/./output/duckdb/01e0b481-39bc18a2-c1fbd173/test@sql@alter@alter.no_comments_merged.cpp
+++ b/./output/duckdb/01e0b481-39bc18a2-c1fbd173/test@sql@alter@alter.no_comments_truth.cpp
@@ -5,7 +5 @@ using namespace std;
-<<<<<<< HEAD
-TEST_CASE("Test ALTER TABLE RENAME COLUMN", "[alter]") {
-||||||| c1fbd173f6
-TEST_CASE("Test ALTER TABLE", "[alter]") {
-=======
-TEST_CASE("Test ALTER TABLE", "[alter][.]") {
->>>>>>> 39bc18a2
+TEST_CASE("Test ALTER TABLE RENAME COLUMN", "[alter][.]") {
@@ -15,5 +8,0 @@ TEST_CASE("Test ALTER TABLE", "[alter][.]") {
-<<<<<<< HEAD
-||||||| c1fbd173f6
-=======
- return;
->>>>>>> 39bc18a2
@@ -21 +9,0 @@ TEST_CASE("Test ALTER TABLE", "[alter][.]") {
-<<<<<<< HEAD
@@ -28,17 +15,0 @@ TEST_CASE("Test ALTER TABLE", "[alter][.]") {
-||||||| c1fbd173f6
-     con.Query("CREATE TABLE IF NOT EXISTS test(i INTEGER, j INTEGER)"));
- REQUIRE_NO_FAIL(
-     con.Query("ALTER TABLE test ADD COLUMN k INTEGER"));
- result = con.Query(
-     "SELECT i, j, k FROM test");
- REQUIRE(result->names.size() == 3);
- REQUIRE(result->names[0] == "i");
- REQUIRE(result->names[0] == "j");
-=======
-     con.Query("CREATE TABLE IF NOT EXISTS test(i INTEGER, j INTEGER)"));
- REQUIRE_NO_FAIL(con.Query("ALTER TABLE test ADD COLUMN k INTEGER"));
- result = con.Query("SELECT i, j, k FROM test");
- REQUIRE(result->names.size() == 3);
- REQUIRE(result->names[0] == "i");
- REQUIRE(result->names[0] == "j");
->>>>>>> 39bc18a2
@@ -46 +16,0 @@ TEST_CASE("Test ALTER TABLE", "[alter][.]") {
-<<<<<<< HEAD
@@ -48 +18,7 @@ TEST_CASE("Test ALTER TABLE", "[alter][.]") {
-||||||| c1fbd173f6
+ REQUIRE_NO_FAIL(con.Query("DROP TABLE IF EXISTS test"));
+}
+TEST_CASE("Test ALTER TABLE RENAME COLUMN with transactions", "[alter]") {
+ unique_ptr<DuckDBResult> result;
+ DuckDB db(nullptr);
+ DuckDBConnection con(db);
+ DuckDBConnection con2(db);
@@ -50,8 +26,44 @@ TEST_CASE("Test ALTER TABLE", "[alter][.]") {
-     con.Query("ALTER TABLE integers ADD COLUMN l INTEGER"));
- result = con.Query(
-     "SELECT i, j, k, l FROM test");
- REQUIRE(result->names.size() == 4);
- REQUIRE(result->names[0] == "i");
- REQUIRE(result->names[0] == "j");
- REQUIRE(result->names[0] == "k");
- REQUIRE(result->names[0] == "l");
+     con.Query("CREATE TABLE test(i INTEGER, j INTEGER)"));
+ REQUIRE_NO_FAIL(con.Query("START TRANSACTION"));
+ REQUIRE_NO_FAIL(con2.Query("START TRANSACTION"));
+ REQUIRE_NO_FAIL(
+     con.Query("ALTER TABLE test RENAME COLUMN i TO k"));
+ REQUIRE_FAIL(con.Query("SELECT i FROM test"));
+ REQUIRE_NO_FAIL(con.Query("SELECT k FROM test"));
+ REQUIRE_NO_FAIL(con2.Query("SELECT i FROM test"));
+ REQUIRE_FAIL(con2.Query("SELECT k FROM test"));
+ REQUIRE_NO_FAIL(con.Query("COMMIT"));
+ REQUIRE_NO_FAIL(con2.Query("SELECT i FROM test"));
+ REQUIRE_FAIL(con2.Query("SELECT k FROM test"));
+ REQUIRE_NO_FAIL(con2.Query("COMMIT"));
+ REQUIRE_FAIL(con.Query("SELECT i FROM test"));
+ REQUIRE_NO_FAIL(con.Query("SELECT k FROM test"));
+}
+TEST_CASE("Test ALTER TABLE RENAME COLUMN with rollback", "[alter]") {
+ unique_ptr<DuckDBResult> result;
+ DuckDB db(nullptr);
+ DuckDBConnection con(db);
+ REQUIRE_NO_FAIL(
+     con.Query("CREATE TABLE test(i INTEGER, j INTEGER)"));
+ REQUIRE_NO_FAIL(con.Query("START TRANSACTION"));
+ REQUIRE_NO_FAIL(
+     con.Query("ALTER TABLE test RENAME COLUMN i TO k"));
+ REQUIRE_FAIL(con.Query("SELECT i FROM test"));
+ REQUIRE_NO_FAIL(con.Query("SELECT k FROM test"));
+ REQUIRE_NO_FAIL(con.Query("ROLLBACK"));
+ REQUIRE_NO_FAIL(con.Query("SELECT i FROM test"));
+ REQUIRE_FAIL(con.Query("SELECT k FROM test"));
+}
+TEST_CASE("Test failure conditions of ALTER TABLE", "[alter]") {
+ unique_ptr<DuckDBResult> result;
+ DuckDB db(nullptr);
+ DuckDBConnection con(db);
+ REQUIRE_NO_FAIL(
+     con.Query("CREATE TABLE test(i INTEGER, j INTEGER)"));
+ REQUIRE_FAIL(
+     con.Query("ALTER TABLE test RENAME COLUMN blablabla TO k"));
+ REQUIRE_FAIL(
+     con.Query("ALTER TABLE test RENAME COLUMN i TO j"));
+ REQUIRE_NO_FAIL(
+     con.Query("SELECT i, j FROM test"));
+}
