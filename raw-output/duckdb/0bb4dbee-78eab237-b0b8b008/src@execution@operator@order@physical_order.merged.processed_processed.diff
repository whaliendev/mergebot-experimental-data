--- a/./output/duckdb/0bb4dbee-78eab237-b0b8b008/src@execution@operator@order@physical_order.no_comments_merged.cpp
+++ b/./output/duckdb/0bb4dbee-78eab237-b0b8b008/src@execution@operator@order@physical_order.no_comments_truth.cpp
@@ -108 +108 @@ public:
- const SelectionVector *sel_ptr = &FlatVector::IncrementalSelectionVector;
+ const SelectionVector *sel_ptr = &FlatVector::INCREMENTAL_SELECTION_VECTOR;
@@ -199 +199 @@ template <class TYPE>
-static int8_t templated_compare_value(data_ptr_t &l_val, data_ptr_t &r_val) {
+static int8_t TemplatedCompareValue(data_ptr_t &l_val, data_ptr_t &r_val) {
@@ -210 +210 @@ static int8_t templated_compare_value(data_ptr_t &l_val, data_ptr_t &r_val) {
-static int32_t compare_value(data_ptr_t &l_nullmask, data_ptr_t &r_nullmask, data_ptr_t &l_val, data_ptr_t &r_val,
+static int32_t CompareValue(data_ptr_t &l_nullmask, data_ptr_t &r_nullmask, data_ptr_t &l_val, data_ptr_t &r_val,
@@ -224 +224 @@ static int32_t compare_value(data_ptr_t &l_nullmask, data_ptr_t &r_nullmask, dat
-  return templated_compare_value<int8_t>(l_val, r_val);
+  return TemplatedCompareValue<int8_t>(l_val, r_val);
@@ -226 +226 @@ static int32_t compare_value(data_ptr_t &l_nullmask, data_ptr_t &r_nullmask, dat
-  return templated_compare_value<int16_t>(l_val, r_val);
+  return TemplatedCompareValue<int16_t>(l_val, r_val);
@@ -228 +228 @@ static int32_t compare_value(data_ptr_t &l_nullmask, data_ptr_t &r_nullmask, dat
-  return templated_compare_value<int32_t>(l_val, r_val);
+  return TemplatedCompareValue<int32_t>(l_val, r_val);
@@ -230 +230 @@ static int32_t compare_value(data_ptr_t &l_nullmask, data_ptr_t &r_nullmask, dat
-  return templated_compare_value<int64_t>(l_val, r_val);
+  return TemplatedCompareValue<int64_t>(l_val, r_val);
@@ -232 +232 @@ static int32_t compare_value(data_ptr_t &l_nullmask, data_ptr_t &r_nullmask, dat
-  return templated_compare_value<uint8_t>(l_val, r_val);
+  return TemplatedCompareValue<uint8_t>(l_val, r_val);
@@ -234 +234 @@ static int32_t compare_value(data_ptr_t &l_nullmask, data_ptr_t &r_nullmask, dat
-  return templated_compare_value<uint16_t>(l_val, r_val);
+  return TemplatedCompareValue<uint16_t>(l_val, r_val);
@@ -236 +236 @@ static int32_t compare_value(data_ptr_t &l_nullmask, data_ptr_t &r_nullmask, dat
-  return templated_compare_value<uint32_t>(l_val, r_val);
+  return TemplatedCompareValue<uint32_t>(l_val, r_val);
@@ -238 +238 @@ static int32_t compare_value(data_ptr_t &l_nullmask, data_ptr_t &r_nullmask, dat
-  return templated_compare_value<uint64_t>(l_val, r_val);
+  return TemplatedCompareValue<uint64_t>(l_val, r_val);
@@ -240 +240 @@ static int32_t compare_value(data_ptr_t &l_nullmask, data_ptr_t &r_nullmask, dat
-  return templated_compare_value<hugeint_t>(l_val, r_val);
+  return TemplatedCompareValue<hugeint_t>(l_val, r_val);
@@ -242 +242 @@ static int32_t compare_value(data_ptr_t &l_nullmask, data_ptr_t &r_nullmask, dat
-  return templated_compare_value<float>(l_val, r_val);
+  return TemplatedCompareValue<float>(l_val, r_val);
@@ -244 +244 @@ static int32_t compare_value(data_ptr_t &l_nullmask, data_ptr_t &r_nullmask, dat
-  return templated_compare_value<double>(l_val, r_val);
+  return TemplatedCompareValue<double>(l_val, r_val);
@@ -246 +246 @@ static int32_t compare_value(data_ptr_t &l_nullmask, data_ptr_t &r_nullmask, dat
-  return templated_compare_value<string_t>(l_val, r_val);
+  return TemplatedCompareValue<string_t>(l_val, r_val);
@@ -248 +248 @@ static int32_t compare_value(data_ptr_t &l_nullmask, data_ptr_t &r_nullmask, dat
-  return templated_compare_value<interval_t>(l_val, r_val);
+  return TemplatedCompareValue<interval_t>(l_val, r_val);
@@ -257 +257 @@ static int compare_tuple(data_ptr_t &l_start, data_ptr_t &r_start, OrderGlobalSt
-  auto comp_res = compare_value(l_start, r_start, l_val, r_val, i, state);
+  auto comp_res = CompareValue(l_start, r_start, l_val, r_val, i, state);
@@ -447 +446,0 @@ void PhysicalOrder::Finalize(Pipeline &pipeline, ClientContext &context, unique_
-<<<<<<< HEAD
@@ -452,15 +450,0 @@ public:
-||||||| b0b8b00819
-void PhysicalOrder::GetChunkInternal(ExecutionContext &context, DataChunk &chunk, PhysicalOperatorState *state_) {
- auto state = reinterpret_cast<PhysicalOrderOperatorState *>(state_);
- auto &sink = (OrderByGlobalOperatorState &)*this->sink_state;
- ChunkCollection &big_data = sink.sorted_data;
- if (state->position >= big_data.Count()) {
-  return;
-=======
-void PhysicalOrder::GetChunkInternal(ExecutionContext &context, DataChunk &chunk, PhysicalOperatorState *state_p) {
- auto state = reinterpret_cast<PhysicalOrderOperatorState *>(state_p);
- auto &sink = (OrderByGlobalOperatorState &)*this->sink_state;
- ChunkCollection &big_data = sink.sorted_data;
- if (state->position >= big_data.Count()) {
-  return;
->>>>>>> 78eab237
@@ -474,2 +458,2 @@ unique_ptr<PhysicalOperatorState> PhysicalOrder::GetOperatorState() {
-void PhysicalOrder::GetChunkInternal(ExecutionContext &context, DataChunk &chunk, PhysicalOperatorState *state_) {
- auto state = reinterpret_cast<PhysicalOrderOperatorState *>(state_);
+void PhysicalOrder::GetChunkInternal(ExecutionContext &context, DataChunk &chunk, PhysicalOperatorState *state_p) {
+ auto state = reinterpret_cast<PhysicalOrderOperatorState *>(state_p);
