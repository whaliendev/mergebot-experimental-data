diff --git a/output/duckdb/4445969f-5a4e1a51-d0c19465/src@storage@buffer_manager.no_comments_mergebot.cpp b/output/duckdb/4445969f-5a4e1a51-d0c19465/src@storage@buffer_manager.no_comments_truth.cpp
index 6695df6..e734627 100644
--- a/output/duckdb/4445969f-5a4e1a51-d0c19465/src@storage@buffer_manager.no_comments_mergebot.cpp
+++ b/output/duckdb/4445969f-5a4e1a51-d0c19465/src@storage@buffer_manager.no_comments_truth.cpp
@@ -6,5 +5,0 @@
-#include "duckdb/common/set.hpp"
-#include "duckdb/storage/in_memory_block_manager.hpp"
-#include "duckdb/storage/storage_manager.hpp"
-#include "duckdb/main/attached_database.hpp"
-#include "duckdb/main/database.hpp"
@@ -12,28 +6,0 @@ namespace duckdb {
-unique_ptr<FileBuffer> BufferManager::ConstructManagedBuffer(idx_t size, unique_ptr<FileBuffer> &&source,
-                                                             FileBufferType type) {
-<<<<<<< HEAD
- throw NotImplementedException("This type of BufferManager can not construct managed buffers");
-||||||| d0c1946552
- if (source) {
-  auto tmp = std::move(source);
-  D_ASSERT(tmp->AllocSize() == BufferManager::GetAllocSize(size));
-  return make_unique<FileBuffer>(*tmp, type);
- } else {
-  return make_unique<FileBuffer>(Allocator::Get(db), type, size);
- }
-=======
- if (source) {
-  auto tmp = std::move(source);
-  D_ASSERT(tmp->AllocSize() == BufferManager::GetAllocSize(size));
-  return make_uniq<FileBuffer>(*tmp, type);
- } else {
-  return make_uniq<FileBuffer>(Allocator::Get(db), type, size);
- }
->>>>>>> 5a4e1a51
-}
-void BufferManager::AddToEvictionQueue(shared_ptr<BlockHandle> &handle) {
- throw NotImplementedException("This type of BufferManager does not support 'AddToEvictionQueue");
-}
-void BufferManager::SetTemporaryDirectory(const string &new_dir) {
- throw NotImplementedException("This type of BufferManager can not set a temporary directory");
-}
@@ -41 +8 @@ unique_ptr<BufferManager> BufferManager::CreateStandardBufferManager(DatabaseIns
- return make_unique<StandardBufferManager>(db, config.options.temporary_directory);
+ return make_uniq<StandardBufferManager>(db, config.options.temporary_directory);
@@ -46,2 +13,2 @@ shared_ptr<BlockHandle> BufferManager::RegisterSmallMemory(idx_t block_size) {
-void BufferManager::WriteTemporaryBuffer(block_id_t block_id, FileBuffer &buffer) {
- throw NotImplementedException("This type of BufferManager does not support 'WriteTemporaryBuffer");
+Allocator &BufferManager::GetBufferAllocator() {
+ throw NotImplementedException("This type of BufferManager does not have an Allocator");
@@ -49,2 +16,2 @@ void BufferManager::WriteTemporaryBuffer(block_id_t block_id, FileBuffer &buffer
-unique_ptr<FileBuffer> BufferManager::ReadTemporaryBuffer(block_id_t id, unique_ptr<FileBuffer> buffer) {
- throw NotImplementedException("This type of BufferManager does not support 'ReadTemporaryBuffer");
+void BufferManager::ReserveMemory(idx_t size) {
+ throw NotImplementedException("This type of BufferManager can not reserve memory");
@@ -52,2 +19,5 @@ unique_ptr<FileBuffer> BufferManager::ReadTemporaryBuffer(block_id_t id, unique_
-void BufferManager::DeleteTemporaryFile(block_id_t id) {
- throw NotImplementedException("This type of BufferManager does not support 'DeleteTemporaryFile");
+void BufferManager::FreeReservedMemory(idx_t size) {
+ throw NotImplementedException("This type of BufferManager can not free reserved memory");
+}
+void BufferManager::SetLimit(idx_t limit) {
+ throw NotImplementedException("This type of BufferManager can not set a limit");
@@ -64,11 +34,2 @@ BufferPool &BufferManager::GetBufferPool() {
-void BufferManager::ReserveMemory(idx_t size) {
- throw NotImplementedException("This type of BufferManager can not reserve memory");
-}
-void BufferManager::FreeReservedMemory(idx_t size) {
- throw NotImplementedException("This type of BufferManager can not free reserved memory");
-}
-void BufferManager::SetLimit(idx_t limit) {
- throw NotImplementedException("This type of BufferManager can not set a limit");
-}
-Allocator &BufferManager::GetBufferAllocator() {
- throw NotImplementedException("This type of BufferManager does not have an Allocator");
+void BufferManager::SetTemporaryDirectory(const string &new_dir) {
+ throw NotImplementedException("This type of BufferManager can not set a temporary directory");
@@ -81,0 +43,16 @@ bool BufferManager::HasTemporaryDirectory() const {
+unique_ptr<FileBuffer> BufferManager::ConstructManagedBuffer(idx_t size, unique_ptr<FileBuffer> &&source,
+                                                             FileBufferType type) {
+ throw NotImplementedException("This type of BufferManager can not construct managed buffers");
+}
+void BufferManager::AddToEvictionQueue(shared_ptr<BlockHandle> &handle) {
+ throw NotImplementedException("This type of BufferManager does not support 'AddToEvictionQueue");
+}
+void BufferManager::WriteTemporaryBuffer(block_id_t block_id, FileBuffer &buffer) {
+ throw NotImplementedException("This type of BufferManager does not support 'WriteTemporaryBuffer");
+}
+unique_ptr<FileBuffer> BufferManager::ReadTemporaryBuffer(block_id_t id, unique_ptr<FileBuffer> buffer) {
+ throw NotImplementedException("This type of BufferManager does not support 'ReadTemporaryBuffer");
+}
+void BufferManager::DeleteTemporaryFile(block_id_t id) {
+ throw NotImplementedException("This type of BufferManager does not support 'DeleteTemporaryFile");
+}
