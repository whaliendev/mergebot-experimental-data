--- a/./output/duckdb/4445969f-5a4e1a51-d0c19465/src@storage@buffer_manager.no_comments_merged.cpp
+++ b/./output/duckdb/4445969f-5a4e1a51-d0c19465/src@storage@buffer_manager.no_comments_truth.cpp
@@ -8 +8 @@ unique_ptr<BufferManager> BufferManager::CreateStandardBufferManager(DatabaseIns
- return make_unique<StandardBufferManager>(db, config.options.temporary_directory);
+ return make_uniq<StandardBufferManager>(db, config.options.temporary_directory);
@@ -45 +44,0 @@ unique_ptr<FileBuffer> BufferManager::ConstructManagedBuffer(idx_t size, unique_
-<<<<<<< HEAD
@@ -47,7 +45,0 @@ unique_ptr<FileBuffer> BufferManager::ConstructManagedBuffer(idx_t size, unique_
-||||||| d0c1946552
- if (source) {
-  auto tmp = std::move(source);
-  D_ASSERT(tmp->AllocSize() == BufferManager::GetAllocSize(size));
-  return make_unique<FileBuffer>(*tmp, type);
- } else {
-  return make_unique<FileBuffer>(Allocator::Get(db), type, size);
@@ -55,11 +46,0 @@ unique_ptr<FileBuffer> BufferManager::ConstructManagedBuffer(idx_t size, unique_
-=======
- if (source) {
-  auto tmp = std::move(source);
-  D_ASSERT(tmp->AllocSize() == BufferManager::GetAllocSize(size));
-  return make_uniq<FileBuffer>(*tmp, type);
- } else {
-  return make_uniq<FileBuffer>(Allocator::Get(db), type, size);
- }
->>>>>>> 5a4e1a51
-}
-<<<<<<< HEAD
@@ -68,903 +48,0 @@ void BufferManager::AddToEvictionQueue(shared_ptr<BlockHandle> &handle) {
-||||||| d0c1946552
-class TemporaryDirectoryHandle {
-public:
- TemporaryDirectoryHandle(DatabaseInstance &db, string path_p);
- ~TemporaryDirectoryHandle();
- TemporaryFileManager &GetTempFile();
-private:
- DatabaseInstance &db;
- string temp_directory;
- bool created_directory = false;
- unique_ptr<TemporaryFileManager> temp_file;
-};
-void BufferManager::SetTemporaryDirectory(string new_dir) {
- if (temp_directory_handle) {
-  throw NotImplementedException("Cannot switch temporary directory after the current one has been used");
- }
- this->temp_directory = std::move(new_dir);
-}
-BufferManager::BufferManager(DatabaseInstance &db, string tmp)
-    : db(db), buffer_pool(db.GetBufferPool()), temp_directory(std::move(tmp)), temporary_id(MAXIMUM_BLOCK),
-      buffer_allocator(BufferAllocatorAllocate, BufferAllocatorFree, BufferAllocatorRealloc,
-                       make_unique<BufferAllocatorData>(*this)) {
- temp_block_manager = make_unique<InMemoryBlockManager>(*this);
-}
-BufferManager::~BufferManager() {
-}
-template <typename... ARGS>
-TempBufferPoolReservation BufferManager::EvictBlocksOrThrow(idx_t memory_delta, unique_ptr<FileBuffer> *buffer,
-                                                            ARGS... args) {
- auto r = buffer_pool.EvictBlocks(memory_delta, buffer_pool.maximum_memory, buffer);
- if (!r.success) {
-  throw OutOfMemoryException(args..., InMemoryWarning());
- }
- return std::move(r.reservation);
-}
-shared_ptr<BlockHandle> BufferManager::RegisterSmallMemory(idx_t block_size) {
- D_ASSERT(block_size < Storage::BLOCK_SIZE);
- auto res = EvictBlocksOrThrow(block_size, nullptr, "could not allocate block of %lld bytes (%lld/%lld used) %s",
-                               block_size, GetUsedMemory(), GetMaxMemory());
- auto buffer = ConstructManagedBuffer(block_size, nullptr, FileBufferType::TINY_BUFFER);
- return make_shared<BlockHandle>(*temp_block_manager, ++temporary_id, std::move(buffer), false, block_size,
-                                 std::move(res));
-}
-shared_ptr<BlockHandle> BufferManager::RegisterMemory(idx_t block_size, bool can_destroy) {
- D_ASSERT(block_size >= Storage::BLOCK_SIZE);
- auto alloc_size = GetAllocSize(block_size);
- unique_ptr<FileBuffer> reusable_buffer;
- auto res =
-     EvictBlocksOrThrow(alloc_size, &reusable_buffer, "could not allocate block of %lld bytes (%lld/%lld used) %s",
-                        alloc_size, GetUsedMemory(), GetMaxMemory());
- auto buffer = ConstructManagedBuffer(block_size, std::move(reusable_buffer));
- return make_shared<BlockHandle>(*temp_block_manager, ++temporary_id, std::move(buffer), can_destroy, alloc_size,
-                                 std::move(res));
-}
-BufferHandle BufferManager::Allocate(idx_t block_size, bool can_destroy, shared_ptr<BlockHandle> *block) {
- shared_ptr<BlockHandle> local_block;
- auto block_ptr = block ? block : &local_block;
- *block_ptr = RegisterMemory(block_size, can_destroy);
- return Pin(*block_ptr);
-}
-void BufferManager::ReAllocate(shared_ptr<BlockHandle> &handle, idx_t block_size) {
- D_ASSERT(block_size >= Storage::BLOCK_SIZE);
- lock_guard<mutex> lock(handle->lock);
- D_ASSERT(handle->state == BlockState::BLOCK_LOADED);
- D_ASSERT(handle->memory_usage == handle->buffer->AllocSize());
- D_ASSERT(handle->memory_usage == handle->memory_charge.size);
- auto req = handle->buffer->CalculateMemory(block_size);
- int64_t memory_delta = (int64_t)req.alloc_size - handle->memory_usage;
- if (memory_delta == 0) {
-  return;
- } else if (memory_delta > 0) {
-  auto reservation = EvictBlocksOrThrow(memory_delta, nullptr, "failed to resize block from %lld to %lld%s",
-                                        handle->memory_usage, req.alloc_size);
-  handle->memory_charge.Merge(std::move(reservation));
- } else {
-  handle->memory_charge.Resize(req.alloc_size);
- }
- handle->buffer->Resize(block_size);
- handle->memory_usage += memory_delta;
- D_ASSERT(handle->memory_usage == handle->buffer->AllocSize());
-}
-BufferHandle BufferManager::Pin(shared_ptr<BlockHandle> &handle) {
- idx_t required_memory;
- {
-  lock_guard<mutex> lock(handle->lock);
-  if (handle->state == BlockState::BLOCK_LOADED) {
-   handle->readers++;
-   return handle->Load(handle);
-  }
-  required_memory = handle->memory_usage;
- }
- unique_ptr<FileBuffer> reusable_buffer;
- auto reservation =
-     EvictBlocksOrThrow(required_memory, &reusable_buffer, "failed to pin block of size %lld%s", required_memory);
- lock_guard<mutex> lock(handle->lock);
- if (handle->state == BlockState::BLOCK_LOADED) {
-  handle->readers++;
-  reservation.Resize(0);
-  return handle->Load(handle);
- }
- D_ASSERT(handle->readers == 0);
- handle->readers = 1;
- auto buf = handle->Load(handle, std::move(reusable_buffer));
- handle->memory_charge = std::move(reservation);
- int64_t delta = handle->buffer->AllocSize() - handle->memory_usage;
- if (delta) {
-  D_ASSERT(delta < 0);
-  handle->memory_usage += delta;
-  handle->memory_charge.Resize(handle->memory_usage);
- }
- D_ASSERT(handle->memory_usage == handle->buffer->AllocSize());
- return buf;
-}
-void BufferManager::VerifyZeroReaders(shared_ptr<BlockHandle> &handle) {
-#ifdef DUCKDB_DEBUG_DESTROY_BLOCKS
- auto replacement_buffer = make_unique<FileBuffer>(Allocator::Get(db), handle->buffer->type,
-                                                   handle->memory_usage - Storage::BLOCK_HEADER_SIZE);
- memcpy(replacement_buffer->buffer, handle->buffer->buffer, handle->buffer->size);
- memset(handle->buffer->buffer, 165, handle->buffer->size);
- handle->buffer = std::move(replacement_buffer);
-#endif
-}
-void BufferManager::Unpin(shared_ptr<BlockHandle> &handle) {
- lock_guard<mutex> lock(handle->lock);
- if (!handle->buffer || handle->buffer->type == FileBufferType::TINY_BUFFER) {
-  return;
- }
- D_ASSERT(handle->readers > 0);
- handle->readers--;
- if (handle->readers == 0) {
-  VerifyZeroReaders(handle);
-  buffer_pool.AddToEvictionQueue(handle);
- }
-}
-void BufferManager::IncreaseUsedMemory(idx_t size) {
- ReserveMemory(size);
-}
-void BufferManager::DecreaseUsedMemory(idx_t size) {
- FreeReservedMemory(size);
-}
-unique_ptr<FileBuffer> ReadTemporaryBufferInternal(BufferManager &buffer_manager, FileHandle &handle, idx_t position,
-                                                   idx_t size, block_id_t id, unique_ptr<FileBuffer> reusable_buffer) {
- auto buffer = buffer_manager.ConstructManagedBuffer(size, std::move(reusable_buffer));
- buffer->Read(handle, position);
- return buffer;
-}
-struct TemporaryFileIndex {
- explicit TemporaryFileIndex(idx_t file_index = DConstants::INVALID_INDEX,
-                             idx_t block_index = DConstants::INVALID_INDEX)
-     : file_index(file_index), block_index(block_index) {
- }
- idx_t file_index;
- idx_t block_index;
-public:
- bool IsValid() {
-  return block_index != DConstants::INVALID_INDEX;
- }
-};
-struct BlockIndexManager {
- BlockIndexManager() : max_index(0) {
- }
-public:
- idx_t GetNewBlockIndex() {
-  auto index = GetNewBlockIndexInternal();
-  indexes_in_use.insert(index);
-  return index;
- }
- bool RemoveIndex(idx_t index) {
-  auto entry = indexes_in_use.find(index);
-  if (entry == indexes_in_use.end()) {
-   throw InternalException("RemoveIndex - index %llu not found in indexes_in_use", index);
-  }
-  indexes_in_use.erase(entry);
-  free_indexes.insert(index);
-  auto max_index_in_use = indexes_in_use.empty() ? 0 : *indexes_in_use.rbegin();
-  if (max_index_in_use < max_index) {
-   max_index = indexes_in_use.empty() ? 0 : max_index_in_use + 1;
-   while (!free_indexes.empty()) {
-    auto max_entry = *free_indexes.rbegin();
-    if (max_entry < max_index) {
-     break;
-    }
-    free_indexes.erase(max_entry);
-   }
-   return true;
-  }
-  return false;
- }
- idx_t GetMaxIndex() {
-  return max_index;
- }
- bool HasFreeBlocks() {
-  return !free_indexes.empty();
- }
-private:
- idx_t GetNewBlockIndexInternal() {
-  if (free_indexes.empty()) {
-   return max_index++;
-  }
-  auto entry = free_indexes.begin();
-  auto index = *entry;
-  free_indexes.erase(entry);
-  return index;
- }
- idx_t max_index;
- set<idx_t> free_indexes;
- set<idx_t> indexes_in_use;
-};
-class TemporaryFileHandle {
- constexpr static idx_t MAX_ALLOWED_INDEX = 4000;
-public:
- TemporaryFileHandle(DatabaseInstance &db, const string &temp_directory, idx_t index)
-     : db(db), file_index(index), path(FileSystem::GetFileSystem(db).JoinPath(
-                                      temp_directory, "duckdb_temp_storage-" + to_string(index) + ".tmp")) {
- }
-public:
- struct TemporaryFileLock {
-  explicit TemporaryFileLock(mutex &mutex) : lock(mutex) {
-  }
-  lock_guard<mutex> lock;
- };
-public:
- TemporaryFileIndex TryGetBlockIndex() {
-  TemporaryFileLock lock(file_lock);
-  if (index_manager.GetMaxIndex() >= MAX_ALLOWED_INDEX && index_manager.HasFreeBlocks()) {
-   return TemporaryFileIndex();
-  }
-  CreateFileIfNotExists(lock);
-  auto block_index = index_manager.GetNewBlockIndex();
-  return TemporaryFileIndex(file_index, block_index);
- }
- void WriteTemporaryFile(FileBuffer &buffer, TemporaryFileIndex index) {
-  D_ASSERT(buffer.size == Storage::BLOCK_SIZE);
-  buffer.Write(*handle, GetPositionInFile(index.block_index));
- }
- unique_ptr<FileBuffer> ReadTemporaryBuffer(block_id_t id, idx_t block_index,
-                                            unique_ptr<FileBuffer> reusable_buffer) {
-  return ReadTemporaryBufferInternal(BufferManager::GetBufferManager(db), *handle, GetPositionInFile(block_index),
-                                     Storage::BLOCK_SIZE, id, std::move(reusable_buffer));
- }
- void EraseBlockIndex(block_id_t block_index) {
-  TemporaryFileLock lock(file_lock);
-  D_ASSERT(handle);
-  RemoveTempBlockIndex(lock, block_index);
- }
- bool DeleteIfEmpty() {
-  TemporaryFileLock lock(file_lock);
-  if (index_manager.GetMaxIndex() > 0) {
-   return false;
-  }
-  handle.reset();
-  auto &fs = FileSystem::GetFileSystem(db);
-  fs.RemoveFile(path);
-  return true;
- }
- TemporaryFileInformation GetTemporaryFile() {
-  TemporaryFileLock lock(file_lock);
-  TemporaryFileInformation info;
-  info.path = path;
-  info.size = GetPositionInFile(index_manager.GetMaxIndex());
-  return info;
- }
-private:
- void CreateFileIfNotExists(TemporaryFileLock &) {
-  if (handle) {
-   return;
-  }
-  auto &fs = FileSystem::GetFileSystem(db);
-  handle = fs.OpenFile(path, FileFlags::FILE_FLAGS_READ | FileFlags::FILE_FLAGS_WRITE |
-                                 FileFlags::FILE_FLAGS_FILE_CREATE);
- }
- void RemoveTempBlockIndex(TemporaryFileLock &, idx_t index) {
-  if (index_manager.RemoveIndex(index)) {
-#ifndef WIN32
-   auto max_index = index_manager.GetMaxIndex();
-   auto &fs = FileSystem::GetFileSystem(db);
-   fs.Truncate(*handle, GetPositionInFile(max_index + 1));
-#endif
-  }
- }
- idx_t GetPositionInFile(idx_t index) {
-  return index * Storage::BLOCK_ALLOC_SIZE;
- }
-private:
- DatabaseInstance &db;
- unique_ptr<FileHandle> handle;
- idx_t file_index;
- string path;
- mutex file_lock;
- BlockIndexManager index_manager;
-};
-class TemporaryFileManager {
-public:
- TemporaryFileManager(DatabaseInstance &db, const string &temp_directory_p)
-     : db(db), temp_directory(temp_directory_p) {
- }
-public:
- struct TemporaryManagerLock {
-  explicit TemporaryManagerLock(mutex &mutex) : lock(mutex) {
-  }
-  lock_guard<mutex> lock;
- };
- void WriteTemporaryBuffer(block_id_t block_id, FileBuffer &buffer) {
-  D_ASSERT(buffer.size == Storage::BLOCK_SIZE);
-  TemporaryFileIndex index;
-  TemporaryFileHandle *handle = nullptr;
-  {
-   TemporaryManagerLock lock(manager_lock);
-   for (auto &entry : files) {
-    auto &temp_file = entry.second;
-    index = temp_file->TryGetBlockIndex();
-    if (index.IsValid()) {
-     handle = entry.second.get();
-     break;
-    }
-   }
-   if (!handle) {
-    auto new_file_index = index_manager.GetNewBlockIndex();
-    auto new_file = make_unique<TemporaryFileHandle>(db, temp_directory, new_file_index);
-    handle = new_file.get();
-    files[new_file_index] = std::move(new_file);
-    index = handle->TryGetBlockIndex();
-   }
-   D_ASSERT(used_blocks.find(block_id) == used_blocks.end());
-   used_blocks[block_id] = index;
-  }
-  D_ASSERT(handle);
-  D_ASSERT(index.IsValid());
-  handle->WriteTemporaryFile(buffer, index);
- }
- bool HasTemporaryBuffer(block_id_t block_id) {
-  lock_guard<mutex> lock(manager_lock);
-  return used_blocks.find(block_id) != used_blocks.end();
- }
- unique_ptr<FileBuffer> ReadTemporaryBuffer(block_id_t id, unique_ptr<FileBuffer> reusable_buffer) {
-  TemporaryFileIndex index;
-  TemporaryFileHandle *handle;
-  {
-   TemporaryManagerLock lock(manager_lock);
-   index = GetTempBlockIndex(lock, id);
-   handle = GetFileHandle(lock, index.file_index);
-  }
-  auto buffer = handle->ReadTemporaryBuffer(id, index.block_index, std::move(reusable_buffer));
-  {
-   TemporaryManagerLock lock(manager_lock);
-   EraseUsedBlock(lock, id, handle, index);
-  }
-  return buffer;
- }
- void DeleteTemporaryBuffer(block_id_t id) {
-  TemporaryManagerLock lock(manager_lock);
-  auto index = GetTempBlockIndex(lock, id);
-  auto handle = GetFileHandle(lock, index.file_index);
-  EraseUsedBlock(lock, id, handle, index);
- }
- vector<TemporaryFileInformation> GetTemporaryFiles() {
-  lock_guard<mutex> lock(manager_lock);
-  vector<TemporaryFileInformation> result;
-  for (auto &file : files) {
-   result.push_back(file.second->GetTemporaryFile());
-  }
-  return result;
- }
-private:
- void EraseUsedBlock(TemporaryManagerLock &lock, block_id_t id, TemporaryFileHandle *handle,
-                     TemporaryFileIndex index) {
-  auto entry = used_blocks.find(id);
-  if (entry == used_blocks.end()) {
-   throw InternalException("EraseUsedBlock - Block %llu not found in used blocks", id);
-  }
-  used_blocks.erase(entry);
-  handle->EraseBlockIndex(index.block_index);
-  if (handle->DeleteIfEmpty()) {
-   EraseFileHandle(lock, index.file_index);
-  }
- }
- TemporaryFileHandle *GetFileHandle(TemporaryManagerLock &, idx_t index) {
-  return files[index].get();
- }
- TemporaryFileIndex GetTempBlockIndex(TemporaryManagerLock &, block_id_t id) {
-  D_ASSERT(used_blocks.find(id) != used_blocks.end());
-  return used_blocks[id];
- }
- void EraseFileHandle(TemporaryManagerLock &, idx_t file_index) {
-  files.erase(file_index);
-  index_manager.RemoveIndex(file_index);
- }
-private:
- DatabaseInstance &db;
- mutex manager_lock;
- string temp_directory;
- unordered_map<idx_t, unique_ptr<TemporaryFileHandle>> files;
- unordered_map<block_id_t, TemporaryFileIndex> used_blocks;
- BlockIndexManager index_manager;
-};
-TemporaryDirectoryHandle::TemporaryDirectoryHandle(DatabaseInstance &db, string path_p)
-    : db(db), temp_directory(std::move(path_p)), temp_file(make_unique<TemporaryFileManager>(db, temp_directory)) {
- auto &fs = FileSystem::GetFileSystem(db);
- if (!temp_directory.empty()) {
-  if (!fs.DirectoryExists(temp_directory)) {
-   fs.CreateDirectory(temp_directory);
-   created_directory = true;
-  }
- }
-}
-TemporaryDirectoryHandle::~TemporaryDirectoryHandle() {
- temp_file.reset();
- auto &fs = FileSystem::GetFileSystem(db);
- if (!temp_directory.empty()) {
-  bool delete_directory = created_directory;
-  vector<string> files_to_delete;
-  if (!created_directory) {
-   bool deleted_everything = true;
-   fs.ListFiles(temp_directory, [&](const string &path, bool isdir) {
-    if (isdir) {
-     deleted_everything = false;
-     return;
-    }
-    if (!StringUtil::StartsWith(path, "duckdb_temp_")) {
-     deleted_everything = false;
-     return;
-    }
-    files_to_delete.push_back(path);
-   });
-  }
-  if (delete_directory) {
-   fs.RemoveDirectory(temp_directory);
-  } else {
-   for (auto &file : files_to_delete) {
-    fs.RemoveFile(fs.JoinPath(temp_directory, file));
-   }
-  }
- }
-}
-TemporaryFileManager &TemporaryDirectoryHandle::GetTempFile() {
- return *temp_file;
-}
-string BufferManager::GetTemporaryPath(block_id_t id) {
- auto &fs = FileSystem::GetFileSystem(db);
- return fs.JoinPath(temp_directory, "duckdb_temp_block-" + to_string(id) + ".block");
-}
-void BufferManager::RequireTemporaryDirectory() {
- if (temp_directory.empty()) {
-  throw Exception(
-      "Out-of-memory: cannot write buffer because no temporary directory is specified!\nTo enable "
-      "temporary buffer eviction set a temporary directory using PRAGMA temp_directory='/path/to/tmp.tmp'");
- }
- lock_guard<mutex> temp_handle_guard(temp_handle_lock);
- if (!temp_directory_handle) {
-  temp_directory_handle = make_unique<TemporaryDirectoryHandle>(db, temp_directory);
- }
-=======
-class TemporaryDirectoryHandle {
-public:
- TemporaryDirectoryHandle(DatabaseInstance &db, string path_p);
- ~TemporaryDirectoryHandle();
- TemporaryFileManager &GetTempFile();
-private:
- DatabaseInstance &db;
- string temp_directory;
- bool created_directory = false;
- unique_ptr<TemporaryFileManager> temp_file;
-};
-void BufferManager::SetTemporaryDirectory(string new_dir) {
- if (temp_directory_handle) {
-  throw NotImplementedException("Cannot switch temporary directory after the current one has been used");
- }
- this->temp_directory = std::move(new_dir);
-}
-BufferManager::BufferManager(DatabaseInstance &db, string tmp)
-    : db(db), buffer_pool(db.GetBufferPool()), temp_directory(std::move(tmp)), temporary_id(MAXIMUM_BLOCK),
-      buffer_allocator(BufferAllocatorAllocate, BufferAllocatorFree, BufferAllocatorRealloc,
-                       make_uniq<BufferAllocatorData>(*this)) {
- temp_block_manager = make_uniq<InMemoryBlockManager>(*this);
-}
-BufferManager::~BufferManager() {
-}
-template <typename... ARGS>
-TempBufferPoolReservation BufferManager::EvictBlocksOrThrow(idx_t memory_delta, unique_ptr<FileBuffer> *buffer,
-                                                            ARGS... args) {
- auto r = buffer_pool.EvictBlocks(memory_delta, buffer_pool.maximum_memory, buffer);
- if (!r.success) {
-  throw OutOfMemoryException(args..., InMemoryWarning());
- }
- return std::move(r.reservation);
-}
-shared_ptr<BlockHandle> BufferManager::RegisterSmallMemory(idx_t block_size) {
- D_ASSERT(block_size < Storage::BLOCK_SIZE);
- auto res = EvictBlocksOrThrow(block_size, nullptr, "could not allocate block of %lld bytes (%lld/%lld used) %s",
-                               block_size, GetUsedMemory(), GetMaxMemory());
- auto buffer = ConstructManagedBuffer(block_size, nullptr, FileBufferType::TINY_BUFFER);
- return make_shared<BlockHandle>(*temp_block_manager, ++temporary_id, std::move(buffer), false, block_size,
-                                 std::move(res));
-}
-shared_ptr<BlockHandle> BufferManager::RegisterMemory(idx_t block_size, bool can_destroy) {
- D_ASSERT(block_size >= Storage::BLOCK_SIZE);
- auto alloc_size = GetAllocSize(block_size);
- unique_ptr<FileBuffer> reusable_buffer;
- auto res =
-     EvictBlocksOrThrow(alloc_size, &reusable_buffer, "could not allocate block of %lld bytes (%lld/%lld used) %s",
-                        alloc_size, GetUsedMemory(), GetMaxMemory());
- auto buffer = ConstructManagedBuffer(block_size, std::move(reusable_buffer));
- return make_shared<BlockHandle>(*temp_block_manager, ++temporary_id, std::move(buffer), can_destroy, alloc_size,
-                                 std::move(res));
-}
-BufferHandle BufferManager::Allocate(idx_t block_size, bool can_destroy, shared_ptr<BlockHandle> *block) {
- shared_ptr<BlockHandle> local_block;
- auto block_ptr = block ? block : &local_block;
- *block_ptr = RegisterMemory(block_size, can_destroy);
- return Pin(*block_ptr);
-}
-void BufferManager::ReAllocate(shared_ptr<BlockHandle> &handle, idx_t block_size) {
- D_ASSERT(block_size >= Storage::BLOCK_SIZE);
- lock_guard<mutex> lock(handle->lock);
- D_ASSERT(handle->state == BlockState::BLOCK_LOADED);
- D_ASSERT(handle->memory_usage == handle->buffer->AllocSize());
- D_ASSERT(handle->memory_usage == handle->memory_charge.size);
- auto req = handle->buffer->CalculateMemory(block_size);
- int64_t memory_delta = (int64_t)req.alloc_size - handle->memory_usage;
- if (memory_delta == 0) {
-  return;
- } else if (memory_delta > 0) {
-  auto reservation = EvictBlocksOrThrow(memory_delta, nullptr, "failed to resize block from %lld to %lld%s",
-                                        handle->memory_usage, req.alloc_size);
-  handle->memory_charge.Merge(std::move(reservation));
- } else {
-  handle->memory_charge.Resize(req.alloc_size);
- }
- handle->buffer->Resize(block_size);
- handle->memory_usage += memory_delta;
- D_ASSERT(handle->memory_usage == handle->buffer->AllocSize());
-}
-BufferHandle BufferManager::Pin(shared_ptr<BlockHandle> &handle) {
- idx_t required_memory;
- {
-  lock_guard<mutex> lock(handle->lock);
-  if (handle->state == BlockState::BLOCK_LOADED) {
-   handle->readers++;
-   return handle->Load(handle);
-  }
-  required_memory = handle->memory_usage;
- }
- unique_ptr<FileBuffer> reusable_buffer;
- auto reservation =
-     EvictBlocksOrThrow(required_memory, &reusable_buffer, "failed to pin block of size %lld%s", required_memory);
- lock_guard<mutex> lock(handle->lock);
- if (handle->state == BlockState::BLOCK_LOADED) {
-  handle->readers++;
-  reservation.Resize(0);
-  return handle->Load(handle);
- }
- D_ASSERT(handle->readers == 0);
- handle->readers = 1;
- auto buf = handle->Load(handle, std::move(reusable_buffer));
- handle->memory_charge = std::move(reservation);
- int64_t delta = handle->buffer->AllocSize() - handle->memory_usage;
- if (delta) {
-  D_ASSERT(delta < 0);
-  handle->memory_usage += delta;
-  handle->memory_charge.Resize(handle->memory_usage);
- }
- D_ASSERT(handle->memory_usage == handle->buffer->AllocSize());
- return buf;
-}
-void BufferManager::VerifyZeroReaders(shared_ptr<BlockHandle> &handle) {
-#ifdef DUCKDB_DEBUG_DESTROY_BLOCKS
- auto replacement_buffer = make_uniq<FileBuffer>(Allocator::Get(db), handle->buffer->type,
-                                                 handle->memory_usage - Storage::BLOCK_HEADER_SIZE);
- memcpy(replacement_buffer->buffer, handle->buffer->buffer, handle->buffer->size);
- memset(handle->buffer->buffer, 165, handle->buffer->size);
- handle->buffer = std::move(replacement_buffer);
-#endif
-}
-void BufferManager::Unpin(shared_ptr<BlockHandle> &handle) {
- lock_guard<mutex> lock(handle->lock);
- if (!handle->buffer || handle->buffer->type == FileBufferType::TINY_BUFFER) {
-  return;
- }
- D_ASSERT(handle->readers > 0);
- handle->readers--;
- if (handle->readers == 0) {
-  VerifyZeroReaders(handle);
-  buffer_pool.AddToEvictionQueue(handle);
- }
-}
-void BufferManager::IncreaseUsedMemory(idx_t size) {
- ReserveMemory(size);
-}
-void BufferManager::DecreaseUsedMemory(idx_t size) {
- FreeReservedMemory(size);
-}
-unique_ptr<FileBuffer> ReadTemporaryBufferInternal(BufferManager &buffer_manager, FileHandle &handle, idx_t position,
-                                                   idx_t size, block_id_t id, unique_ptr<FileBuffer> reusable_buffer) {
- auto buffer = buffer_manager.ConstructManagedBuffer(size, std::move(reusable_buffer));
- buffer->Read(handle, position);
- return buffer;
-}
-struct TemporaryFileIndex {
- explicit TemporaryFileIndex(idx_t file_index = DConstants::INVALID_INDEX,
-                             idx_t block_index = DConstants::INVALID_INDEX)
-     : file_index(file_index), block_index(block_index) {
- }
- idx_t file_index;
- idx_t block_index;
-public:
- bool IsValid() {
-  return block_index != DConstants::INVALID_INDEX;
- }
-};
-struct BlockIndexManager {
- BlockIndexManager() : max_index(0) {
- }
-public:
- idx_t GetNewBlockIndex() {
-  auto index = GetNewBlockIndexInternal();
-  indexes_in_use.insert(index);
-  return index;
- }
- bool RemoveIndex(idx_t index) {
-  auto entry = indexes_in_use.find(index);
-  if (entry == indexes_in_use.end()) {
-   throw InternalException("RemoveIndex - index %llu not found in indexes_in_use", index);
-  }
-  indexes_in_use.erase(entry);
-  free_indexes.insert(index);
-  auto max_index_in_use = indexes_in_use.empty() ? 0 : *indexes_in_use.rbegin();
-  if (max_index_in_use < max_index) {
-   max_index = indexes_in_use.empty() ? 0 : max_index_in_use + 1;
-   while (!free_indexes.empty()) {
-    auto max_entry = *free_indexes.rbegin();
-    if (max_entry < max_index) {
-     break;
-    }
-    free_indexes.erase(max_entry);
-   }
-   return true;
-  }
-  return false;
- }
- idx_t GetMaxIndex() {
-  return max_index;
- }
- bool HasFreeBlocks() {
-  return !free_indexes.empty();
- }
-private:
- idx_t GetNewBlockIndexInternal() {
-  if (free_indexes.empty()) {
-   return max_index++;
-  }
-  auto entry = free_indexes.begin();
-  auto index = *entry;
-  free_indexes.erase(entry);
-  return index;
- }
- idx_t max_index;
- set<idx_t> free_indexes;
- set<idx_t> indexes_in_use;
-};
-class TemporaryFileHandle {
- constexpr static idx_t MAX_ALLOWED_INDEX = 4000;
-public:
- TemporaryFileHandle(DatabaseInstance &db, const string &temp_directory, idx_t index)
-     : db(db), file_index(index), path(FileSystem::GetFileSystem(db).JoinPath(
-                                      temp_directory, "duckdb_temp_storage-" + to_string(index) + ".tmp")) {
- }
-public:
- struct TemporaryFileLock {
-  explicit TemporaryFileLock(mutex &mutex) : lock(mutex) {
-  }
-  lock_guard<mutex> lock;
- };
-public:
- TemporaryFileIndex TryGetBlockIndex() {
-  TemporaryFileLock lock(file_lock);
-  if (index_manager.GetMaxIndex() >= MAX_ALLOWED_INDEX && index_manager.HasFreeBlocks()) {
-   return TemporaryFileIndex();
-  }
-  CreateFileIfNotExists(lock);
-  auto block_index = index_manager.GetNewBlockIndex();
-  return TemporaryFileIndex(file_index, block_index);
- }
- void WriteTemporaryFile(FileBuffer &buffer, TemporaryFileIndex index) {
-  D_ASSERT(buffer.size == Storage::BLOCK_SIZE);
-  buffer.Write(*handle, GetPositionInFile(index.block_index));
- }
- unique_ptr<FileBuffer> ReadTemporaryBuffer(block_id_t id, idx_t block_index,
-                                            unique_ptr<FileBuffer> reusable_buffer) {
-  return ReadTemporaryBufferInternal(BufferManager::GetBufferManager(db), *handle, GetPositionInFile(block_index),
-                                     Storage::BLOCK_SIZE, id, std::move(reusable_buffer));
- }
- void EraseBlockIndex(block_id_t block_index) {
-  TemporaryFileLock lock(file_lock);
-  D_ASSERT(handle);
-  RemoveTempBlockIndex(lock, block_index);
- }
- bool DeleteIfEmpty() {
-  TemporaryFileLock lock(file_lock);
-  if (index_manager.GetMaxIndex() > 0) {
-   return false;
-  }
-  handle.reset();
-  auto &fs = FileSystem::GetFileSystem(db);
-  fs.RemoveFile(path);
-  return true;
- }
- TemporaryFileInformation GetTemporaryFile() {
-  TemporaryFileLock lock(file_lock);
-  TemporaryFileInformation info;
-  info.path = path;
-  info.size = GetPositionInFile(index_manager.GetMaxIndex());
-  return info;
- }
-private:
- void CreateFileIfNotExists(TemporaryFileLock &) {
-  if (handle) {
-   return;
-  }
-  auto &fs = FileSystem::GetFileSystem(db);
-  handle = fs.OpenFile(path, FileFlags::FILE_FLAGS_READ | FileFlags::FILE_FLAGS_WRITE |
-                                 FileFlags::FILE_FLAGS_FILE_CREATE);
- }
- void RemoveTempBlockIndex(TemporaryFileLock &, idx_t index) {
-  if (index_manager.RemoveIndex(index)) {
-#ifndef WIN32
-   auto max_index = index_manager.GetMaxIndex();
-   auto &fs = FileSystem::GetFileSystem(db);
-   fs.Truncate(*handle, GetPositionInFile(max_index + 1));
-#endif
-  }
- }
- idx_t GetPositionInFile(idx_t index) {
-  return index * Storage::BLOCK_ALLOC_SIZE;
- }
-private:
- DatabaseInstance &db;
- unique_ptr<FileHandle> handle;
- idx_t file_index;
- string path;
- mutex file_lock;
- BlockIndexManager index_manager;
-};
-class TemporaryFileManager {
-public:
- TemporaryFileManager(DatabaseInstance &db, const string &temp_directory_p)
-     : db(db), temp_directory(temp_directory_p) {
- }
-public:
- struct TemporaryManagerLock {
-  explicit TemporaryManagerLock(mutex &mutex) : lock(mutex) {
-  }
-  lock_guard<mutex> lock;
- };
- void WriteTemporaryBuffer(block_id_t block_id, FileBuffer &buffer) {
-  D_ASSERT(buffer.size == Storage::BLOCK_SIZE);
-  TemporaryFileIndex index;
-  TemporaryFileHandle *handle = nullptr;
-  {
-   TemporaryManagerLock lock(manager_lock);
-   for (auto &entry : files) {
-    auto &temp_file = entry.second;
-    index = temp_file->TryGetBlockIndex();
-    if (index.IsValid()) {
-     handle = entry.second.get();
-     break;
-    }
-   }
-   if (!handle) {
-    auto new_file_index = index_manager.GetNewBlockIndex();
-    auto new_file = make_uniq<TemporaryFileHandle>(db, temp_directory, new_file_index);
-    handle = new_file.get();
-    files[new_file_index] = std::move(new_file);
-    index = handle->TryGetBlockIndex();
-   }
-   D_ASSERT(used_blocks.find(block_id) == used_blocks.end());
-   used_blocks[block_id] = index;
-  }
-  D_ASSERT(handle);
-  D_ASSERT(index.IsValid());
-  handle->WriteTemporaryFile(buffer, index);
- }
- bool HasTemporaryBuffer(block_id_t block_id) {
-  lock_guard<mutex> lock(manager_lock);
-  return used_blocks.find(block_id) != used_blocks.end();
- }
- unique_ptr<FileBuffer> ReadTemporaryBuffer(block_id_t id, unique_ptr<FileBuffer> reusable_buffer) {
-  TemporaryFileIndex index;
-  TemporaryFileHandle *handle;
-  {
-   TemporaryManagerLock lock(manager_lock);
-   index = GetTempBlockIndex(lock, id);
-   handle = GetFileHandle(lock, index.file_index);
-  }
-  auto buffer = handle->ReadTemporaryBuffer(id, index.block_index, std::move(reusable_buffer));
-  {
-   TemporaryManagerLock lock(manager_lock);
-   EraseUsedBlock(lock, id, handle, index);
-  }
-  return buffer;
- }
- void DeleteTemporaryBuffer(block_id_t id) {
-  TemporaryManagerLock lock(manager_lock);
-  auto index = GetTempBlockIndex(lock, id);
-  auto handle = GetFileHandle(lock, index.file_index);
-  EraseUsedBlock(lock, id, handle, index);
- }
- vector<TemporaryFileInformation> GetTemporaryFiles() {
-  lock_guard<mutex> lock(manager_lock);
-  vector<TemporaryFileInformation> result;
-  for (auto &file : files) {
-   result.push_back(file.second->GetTemporaryFile());
-  }
-  return result;
- }
-private:
- void EraseUsedBlock(TemporaryManagerLock &lock, block_id_t id, TemporaryFileHandle *handle,
-                     TemporaryFileIndex index) {
-  auto entry = used_blocks.find(id);
-  if (entry == used_blocks.end()) {
-   throw InternalException("EraseUsedBlock - Block %llu not found in used blocks", id);
-  }
-  used_blocks.erase(entry);
-  handle->EraseBlockIndex(index.block_index);
-  if (handle->DeleteIfEmpty()) {
-   EraseFileHandle(lock, index.file_index);
-  }
- }
- TemporaryFileHandle *GetFileHandle(TemporaryManagerLock &, idx_t index) {
-  return files[index].get();
- }
- TemporaryFileIndex GetTempBlockIndex(TemporaryManagerLock &, block_id_t id) {
-  D_ASSERT(used_blocks.find(id) != used_blocks.end());
-  return used_blocks[id];
- }
- void EraseFileHandle(TemporaryManagerLock &, idx_t file_index) {
-  files.erase(file_index);
-  index_manager.RemoveIndex(file_index);
- }
-private:
- DatabaseInstance &db;
- mutex manager_lock;
- string temp_directory;
- unordered_map<idx_t, unique_ptr<TemporaryFileHandle>> files;
- unordered_map<block_id_t, TemporaryFileIndex> used_blocks;
- BlockIndexManager index_manager;
-};
-TemporaryDirectoryHandle::TemporaryDirectoryHandle(DatabaseInstance &db, string path_p)
-    : db(db), temp_directory(std::move(path_p)), temp_file(make_uniq<TemporaryFileManager>(db, temp_directory)) {
- auto &fs = FileSystem::GetFileSystem(db);
- if (!temp_directory.empty()) {
-  if (!fs.DirectoryExists(temp_directory)) {
-   fs.CreateDirectory(temp_directory);
-   created_directory = true;
-  }
- }
-}
-TemporaryDirectoryHandle::~TemporaryDirectoryHandle() {
- temp_file.reset();
- auto &fs = FileSystem::GetFileSystem(db);
- if (!temp_directory.empty()) {
-  bool delete_directory = created_directory;
-  vector<string> files_to_delete;
-  if (!created_directory) {
-   bool deleted_everything = true;
-   fs.ListFiles(temp_directory, [&](const string &path, bool isdir) {
-    if (isdir) {
-     deleted_everything = false;
-     return;
-    }
-    if (!StringUtil::StartsWith(path, "duckdb_temp_")) {
-     deleted_everything = false;
-     return;
-    }
-    files_to_delete.push_back(path);
-   });
-  }
-  if (delete_directory) {
-   fs.RemoveDirectory(temp_directory);
-  } else {
-   for (auto &file : files_to_delete) {
-    fs.RemoveFile(fs.JoinPath(temp_directory, file));
-   }
-  }
- }
-}
-TemporaryFileManager &TemporaryDirectoryHandle::GetTempFile() {
- return *temp_file;
-}
-string BufferManager::GetTemporaryPath(block_id_t id) {
- auto &fs = FileSystem::GetFileSystem(db);
- return fs.JoinPath(temp_directory, "duckdb_temp_block-" + to_string(id) + ".block");
-}
-void BufferManager::RequireTemporaryDirectory() {
- if (temp_directory.empty()) {
-  throw Exception(
-      "Out-of-memory: cannot write buffer because no temporary directory is specified!\nTo enable "
-      "temporary buffer eviction set a temporary directory using PRAGMA temp_directory='/path/to/tmp.tmp'");
- }
- lock_guard<mutex> temp_handle_guard(temp_handle_lock);
- if (!temp_directory_handle) {
-  temp_directory_handle = make_uniq<TemporaryDirectoryHandle>(db, temp_directory);
- }
->>>>>>> 5a4e1a51
