diff --git a/output/duckdb/7a2393a6-dffe931b-584a573b/src@include@duckdb@common@types.no_comments_mergebot.hpp b/output/duckdb/7a2393a6-dffe931b-584a573b/src@include@duckdb@common@types.no_comments_truth.hpp
index 9c1b4d8..279548c 100644
--- a/output/duckdb/7a2393a6-dffe931b-584a573b/src@include@duckdb@common@types.no_comments_mergebot.hpp
+++ b/output/duckdb/7a2393a6-dffe931b-584a573b/src@include@duckdb@common@types.no_comments_truth.hpp
@@ -18 +18,2 @@ public:
- DUCKDB_API hugeint_t() = default
+public:
+ DUCKDB_API hugeint_t() = default;
@@ -20,4 +21,4 @@ DUCKDB_API hugeint_t(int64_t value);
- DUCKDB_API hugeint_t(const hugeint_t &rhs) = default
- DUCKDB_API hugeint_t(hugeint_t &&rhs) = default
- DUCKDB_API hugeint_t &operator=(const hugeint_t &rhs) = default
- DUCKDB_API hugeint_t &operator=(hugeint_t &&rhs) = default
+ DUCKDB_API hugeint_t(const hugeint_t &rhs) = default;
+ DUCKDB_API hugeint_t(hugeint_t &&rhs) = default;
+ DUCKDB_API hugeint_t &operator=(const hugeint_t &rhs) = default;
+ DUCKDB_API hugeint_t &operator=(hugeint_t &&rhs) = default;
@@ -33 +34 @@ DUCKDB_API hugeint_t(int64_t value);
- DUCKDB_API hugeint_t operator&(const hugeint_t &rhs) const;
+ DUCKDB_API hugeint_t operator*(const hugeint_t &rhs) const;
@@ -54,0 +56,4 @@ struct string_t;
+template <class T>
+using child_list_t = std::vector<std::pair<std::string, T>>;
+template <class T>
+using buffer_ptr = shared_ptr<T>;
@@ -60 +65 @@ struct list_entry_t {
- list_entry_t()
+ list_entry_t() = default;
@@ -86 +91,2 @@ UNKNOWN = 205,
-BIT = 206, INVALID = 255
+ BIT = 206,
+ INVALID = 255
@@ -89 +95,2 @@ enum class LogicalTypeId : uint8_t {
-INVALID = 0,SQLNULL = 1,
+ INVALID = 0,
+ SQLNULL = 1,
@@ -93,3 +100,36 @@ USER = 4,
-BOOLEAN = 10,TINYINT = 11,SMALLINT = 12,INTEGER = 13,BIGINT = 14,DATE = 15,TIME = 16,TIMESTAMP_SEC = 17,TIMESTAMP_MS = 18,TIMESTAMP = 19,
-TIMESTAMP_NS = 20,DECIMAL = 21,FLOAT = 22,DOUBLE = 23,CHAR = 24,VARCHAR = 25,BLOB = 26,INTERVAL = 27,UTINYINT = 28,USMALLINT = 29,UINTEGER = 30,UBIGINT = 31,TIMESTAMP_TZ = 32,TIME_TZ = 34,HUGEINT = 50,POINTER = 51,
-VALIDITY = 53,UUID = 54,STRUCT = 100,LIST = 101,MAP = 102,TABLE = 103,ENUM = 104,AGGREGATE_STATE = 105,LAMBDA = 106, UNION = 107
+ BOOLEAN = 10,
+ TINYINT = 11,
+ SMALLINT = 12,
+ INTEGER = 13,
+ BIGINT = 14,
+ DATE = 15,
+ TIME = 16,
+ TIMESTAMP_SEC = 17,
+ TIMESTAMP_MS = 18,
+ TIMESTAMP = 19,
+ TIMESTAMP_NS = 20,
+ DECIMAL = 21,
+ FLOAT = 22,
+ DOUBLE = 23,
+ CHAR = 24,
+ VARCHAR = 25,
+ BLOB = 26,
+ INTERVAL = 27,
+ UTINYINT = 28,
+ USMALLINT = 29,
+ UINTEGER = 30,
+ UBIGINT = 31,
+ TIMESTAMP_TZ = 32,
+ TIME_TZ = 34,
+ HUGEINT = 50,
+ POINTER = 51,
+ VALIDITY = 53,
+ UUID = 54,
+ STRUCT = 100,
+ LIST = 101,
+ MAP = 102,
+ TABLE = 103,
+ ENUM = 104,
+ AGGREGATE_STATE = 105,
+ LAMBDA = 106,
+ UNION = 107
@@ -136,2 +176 @@ DUCKDB_API LogicalType(LogicalTypeId id);
-DUCKDB_API LogicalType TransformStringToLogicalType(const string &str);
-                               Deserialize(Deserializer &source);
+ DUCKDB_API static LogicalType Deserialize(Deserializer &source);
@@ -155,2 +194 @@ DUCKDB_API LogicalType TransformStringToLogicalType(const string &str);
-DUCKDB_API LogicalType TransformStringToLogicalType(const string &str);
-                               MaxLogicalType(const LogicalType &left, const LogicalType &right);
+ DUCKDB_API static LogicalType MaxLogicalType(const LogicalType &left, const LogicalType &right);
@@ -165,0 +204 @@ private:
+private:
@@ -201,22 +240,11 @@ public:
-DUCKDB_API LogicalType TransformStringToLogicalType(const string &str);
- DECIMAL(int width, int scale);
-DUCKDB_API LogicalType TransformStringToLogicalType(const string &str);
-VARCHAR_COLLATION(string collation);
-DUCKDB_API LogicalType TransformStringToLogicalType(const string &str);
-      LIST( LogicalType child);
-DUCKDB_API LogicalType TransformStringToLogicalType(const string &str);
-STRUCT( child_list_t<LogicalType> children);
-DUCKDB_API LogicalType TransformStringToLogicalType(const string &str);
-AGGREGATE_STATE(aggregate_state_t state_type);
-DUCKDB_API LogicalType TransformStringToLogicalType(const string &str);
-MAP( child_list_t<LogicalType> children);
-DUCKDB_API LogicalType TransformStringToLogicalType(const string &str);
-MAP(LogicalType key, LogicalType value);
-DUCKDB_API LogicalType TransformStringToLogicalType(const string &str);
-UNION( child_list_t<LogicalType> members);
-DUCKDB_API LogicalType TransformStringToLogicalType(const string &str);
-ENUM(const string &enum_name, Vector &ordered_data, idx_t size);
-DUCKDB_API LogicalType TransformStringToLogicalType(const string &str);
-          DEDUP_POINTER_ENUM();
-DUCKDB_API LogicalType TransformStringToLogicalType(const string &str);
-USER(const string &user_type_name);
+ DUCKDB_API static LogicalType DECIMAL(int width, int scale);
+ DUCKDB_API static LogicalType VARCHAR_COLLATION(string collation);
+ DUCKDB_API static LogicalType LIST( LogicalType child);
+ DUCKDB_API static LogicalType STRUCT( child_list_t<LogicalType> children);
+ DUCKDB_API static LogicalType AGGREGATE_STATE(aggregate_state_t state_type);
+ DUCKDB_API static LogicalType MAP( child_list_t<LogicalType> children);
+ DUCKDB_API static LogicalType MAP(LogicalType key, LogicalType value);
+ DUCKDB_API static LogicalType UNION( child_list_t<LogicalType> members);
+ DUCKDB_API static LogicalType ENUM(const string &enum_name, Vector &ordered_data, idx_t size);
+ DUCKDB_API static LogicalType DEDUP_POINTER_ENUM();
+ DUCKDB_API static LogicalType USER(const string &user_type_name);
@@ -274,0 +303 @@ DUCKDB_API LogicalType TransformStringToLogicalType(const string &str);
+DUCKDB_API LogicalType TransformStringToLogicalType(const string &str, ClientContext &context);
