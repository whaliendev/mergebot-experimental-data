diff --git a/./output/duckdb/7a2393a6-dffe931b-584a573b/src@include@duckdb@common@types.no_comments_merged.hpp b/./output/duckdb/7a2393a6-dffe931b-584a573b/src@include@duckdb@common@types.no_comments_truth.hpp
index a3c66e6..279548c 100644
--- a/./output/duckdb/7a2393a6-dffe931b-584a573b/src@include@duckdb@common@types.no_comments_merged.hpp
+++ b/./output/duckdb/7a2393a6-dffe931b-584a573b/src@include@duckdb@common@types.no_comments_truth.hpp
@@ -303 +302,0 @@ DUCKDB_API LogicalType TransformStringToLogicalType(const string &str);
-<<<<<<< HEAD
@@ -305,99 +303,0 @@ DUCKDB_API LogicalType TransformStringToLogicalType(const string &str, ClientCon
-template <class T>
-PhysicalType GetTypeId() {
- if (std::is_same<T, bool>()) {
-  return PhysicalType::BOOL;
- } else if (std::is_same<T, int8_t>()) {
-  return PhysicalType::INT8;
- } else if (std::is_same<T, int16_t>()) {
-  return PhysicalType::INT16;
- } else if (std::is_same<T, int32_t>()) {
-  return PhysicalType::INT32;
- } else if (std::is_same<T, int64_t>()) {
-  return PhysicalType::INT64;
- } else if (std::is_same<T, uint8_t>()) {
-  return PhysicalType::UINT8;
- } else if (std::is_same<T, uint16_t>()) {
-  return PhysicalType::UINT16;
- } else if (std::is_same<T, uint32_t>()) {
-  return PhysicalType::UINT32;
- } else if (std::is_same<T, uint64_t>()) {
-  return PhysicalType::UINT64;
- } else if (std::is_same<T, hugeint_t>()) {
-  return PhysicalType::INT128;
- } else if (std::is_same<T, date_t>()) {
-  return PhysicalType::INT32;
- } else if (std::is_same<T, dtime_t>()) {
-  return PhysicalType::INT64;
- } else if (std::is_same<T, timestamp_t>()) {
-  return PhysicalType::INT64;
- } else if (std::is_same<T, float>()) {
-  return PhysicalType::FLOAT;
- } else if (std::is_same<T, double>()) {
-  return PhysicalType::DOUBLE;
- } else if (std::is_same<T, const char *>() || std::is_same<T, char *>() || std::is_same<T, string_t>()) {
-  return PhysicalType::VARCHAR;
- } else if (std::is_same<T, interval_t>()) {
-  return PhysicalType::INTERVAL;
- } else {
-  return PhysicalType::INVALID;
- }
-}
-template<class T>
-bool TypeIsNumber() {
- return std::is_integral<T>() || std::is_floating_point<T>() || std::is_same<T, hugeint_t>();
-}
-template <class T>
-bool IsValidType() {
- return GetTypeId<T>() != PhysicalType::INVALID;
-}
-||||||| 584a573b5e
-template <class T>
-PhysicalType GetTypeId() {
- if (std::is_same<T, bool>()) {
-  return PhysicalType::BOOL;
- } else if (std::is_same<T, int8_t>()) {
-  return PhysicalType::INT8;
- } else if (std::is_same<T, int16_t>()) {
-  return PhysicalType::INT16;
- } else if (std::is_same<T, int32_t>()) {
-  return PhysicalType::INT32;
- } else if (std::is_same<T, int64_t>()) {
-  return PhysicalType::INT64;
- } else if (std::is_same<T, uint8_t>()) {
-  return PhysicalType::UINT8;
- } else if (std::is_same<T, uint16_t>()) {
-  return PhysicalType::UINT16;
- } else if (std::is_same<T, uint32_t>()) {
-  return PhysicalType::UINT32;
- } else if (std::is_same<T, uint64_t>()) {
-  return PhysicalType::UINT64;
- } else if (std::is_same<T, hugeint_t>()) {
-  return PhysicalType::INT128;
- } else if (std::is_same<T, date_t>()) {
-  return PhysicalType::INT32;
- } else if (std::is_same<T, dtime_t>()) {
-  return PhysicalType::INT64;
- } else if (std::is_same<T, timestamp_t>()) {
-  return PhysicalType::INT64;
- } else if (std::is_same<T, float>()) {
-  return PhysicalType::FLOAT;
- } else if (std::is_same<T, double>()) {
-  return PhysicalType::DOUBLE;
- } else if (std::is_same<T, const char *>() || std::is_same<T, char *>() || std::is_same<T, string_t>()) {
-  return PhysicalType::VARCHAR;
- } else if (std::is_same<T, interval_t>()) {
-  return PhysicalType::INTERVAL;
- } else {
-  return PhysicalType::INVALID;
- }
-}
-template<class T>
-bool TypeIsNumber() {
- return std::is_integral<T>() || std::is_floating_point<T>() || std::is_same<T, hugeint_t>();
-}
-template <class T>
-bool IsValidType() {
- return GetTypeId<T>() != PhysicalType::INVALID;
-}
-=======
->>>>>>> dffe931b
