diff --git a/output/duckdb/b3579b11-e4dd1e9d-d02b472c/src@common@enum_util.no_comments_mergebot.cpp b/output/duckdb/b3579b11-e4dd1e9d-d02b472c/src@common@enum_util.no_comments_truth.cpp
index 6526cb8..4b80c5d 100644
--- a/output/duckdb/b3579b11-e4dd1e9d-d02b472c/src@common@enum_util.no_comments_mergebot.cpp
+++ b/output/duckdb/b3579b11-e4dd1e9d-d02b472c/src@common@enum_util.no_comments_truth.cpp
@@ -413,6 +413,3 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
- }
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
+AppenderType EnumUtil::FromString<AppenderType>(const char *value) {
+ if (StringUtil::Equals(value, "LOGICAL")) {
+  return AppenderType::LOGICAL;
@@ -420,2 +417,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+ if (StringUtil::Equals(value, "PHYSICAL")) {
+  return AppenderType::PHYSICAL;
@@ -426,24 +422,0 @@ template<>
-const char* EnumUtil::ToChars<SecretPersistMode>(SecretPersistMode value) {
- switch(value) {
- case SecretPersistMode::DEFAULT:
-  return "DEFAULT";
- case SecretPersistMode::TEMPORARY:
-  return "TEMPORARY";
- case SecretPersistMode::PERSISTENT:
-  return "PERSISTENT";
- default:
-  throw NotImplementedException(StringUtil::Format("Enum value: '%d' not implemented", value));
- }
-}
-template<>
-const char* EnumUtil::ToChars<SecretDisplayType>(SecretDisplayType value) {
- switch(value) {
- case SecretDisplayType::REDACTED:
-  return "REDACTED";
- case SecretDisplayType::UNREDACTED:
-  return "UNREDACTED";
- default:
-  throw NotImplementedException(StringUtil::Format("Enum value: '%d' not implemented", value));
- }
-}
-template<>
@@ -471,3 +444,3 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
+ArrowDateTimeType EnumUtil::FromString<ArrowDateTimeType>(const char *value) {
+ if (StringUtil::Equals(value, "MILLISECONDS")) {
+  return ArrowDateTimeType::MILLISECONDS;
@@ -475,2 +448,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
+ if (StringUtil::Equals(value, "MICROSECONDS")) {
+  return ArrowDateTimeType::MICROSECONDS;
@@ -478,2 +451,14 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+ if (StringUtil::Equals(value, "NANOSECONDS")) {
+  return ArrowDateTimeType::NANOSECONDS;
+ }
+ if (StringUtil::Equals(value, "SECONDS")) {
+  return ArrowDateTimeType::SECONDS;
+ }
+ if (StringUtil::Equals(value, "DAYS")) {
+  return ArrowDateTimeType::DAYS;
+ }
+ if (StringUtil::Equals(value, "MONTHS")) {
+  return ArrowDateTimeType::MONTHS;
+ }
+ if (StringUtil::Equals(value, "MONTH_DAY_NANO")) {
+  return ArrowDateTimeType::MONTH_DAY_NANO;
@@ -497,3 +482,3 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
+ArrowVariableSizeType EnumUtil::FromString<ArrowVariableSizeType>(const char *value) {
+ if (StringUtil::Equals(value, "FIXED_SIZE")) {
+  return ArrowVariableSizeType::FIXED_SIZE;
@@ -501,2 +486,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
+ if (StringUtil::Equals(value, "NORMAL")) {
+  return ArrowVariableSizeType::NORMAL;
@@ -504,2 +489,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+ if (StringUtil::Equals(value, "SUPER_SIZE")) {
+  return ArrowVariableSizeType::SUPER_SIZE;
@@ -521,3 +506,3 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
+BindingMode EnumUtil::FromString<BindingMode>(const char *value) {
+ if (StringUtil::Equals(value, "STANDARD_BINDING")) {
+  return BindingMode::STANDARD_BINDING;
@@ -525,5 +510,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
- }
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+ if (StringUtil::Equals(value, "EXTRACT_NAMES")) {
+  return BindingMode::EXTRACT_NAMES;
@@ -553,3 +535,3 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
+BitpackingMode EnumUtil::FromString<BitpackingMode>(const char *value) {
+ if (StringUtil::Equals(value, "INVALID")) {
+  return BitpackingMode::INVALID;
@@ -557,2 +539,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
+ if (StringUtil::Equals(value, "AUTO")) {
+  return BitpackingMode::AUTO;
@@ -560,2 +542,11 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+ if (StringUtil::Equals(value, "CONSTANT")) {
+  return BitpackingMode::CONSTANT;
+ }
+ if (StringUtil::Equals(value, "CONSTANT_DELTA")) {
+  return BitpackingMode::CONSTANT_DELTA;
+ }
+ if (StringUtil::Equals(value, "DELTA_FOR")) {
+  return BitpackingMode::DELTA_FOR;
+ }
+ if (StringUtil::Equals(value, "FOR")) {
+  return BitpackingMode::FOR;
@@ -577,6 +568,3 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
- }
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
+BlockState EnumUtil::FromString<BlockState>(const char *value) {
+ if (StringUtil::Equals(value, "BLOCK_UNLOADED")) {
+  return BlockState::BLOCK_UNLOADED;
@@ -584,2 +572,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+ if (StringUtil::Equals(value, "BLOCK_LOADED")) {
+  return BlockState::BLOCK_LOADED;
@@ -605,3 +593,3 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
+CAPIResultSetType EnumUtil::FromString<CAPIResultSetType>(const char *value) {
+ if (StringUtil::Equals(value, "CAPI_RESULT_TYPE_NONE")) {
+  return CAPIResultSetType::CAPI_RESULT_TYPE_NONE;
@@ -609,2 +597,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
+ if (StringUtil::Equals(value, "CAPI_RESULT_TYPE_MATERIALIZED")) {
+  return CAPIResultSetType::CAPI_RESULT_TYPE_MATERIALIZED;
@@ -612,2 +600,5 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+ if (StringUtil::Equals(value, "CAPI_RESULT_TYPE_STREAMING")) {
+  return CAPIResultSetType::CAPI_RESULT_TYPE_STREAMING;
+ }
+ if (StringUtil::Equals(value, "CAPI_RESULT_TYPE_DEPRECATED")) {
+  return CAPIResultSetType::CAPI_RESULT_TYPE_DEPRECATED;
@@ -643,3 +634,3 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
+CSVState EnumUtil::FromString<CSVState>(const char *value) {
+ if (StringUtil::Equals(value, "STANDARD")) {
+  return CSVState::STANDARD;
@@ -647,2 +638,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
+ if (StringUtil::Equals(value, "DELIMITER")) {
+  return CSVState::DELIMITER;
@@ -650,2 +641,20 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+ if (StringUtil::Equals(value, "RECORD_SEPARATOR")) {
+  return CSVState::RECORD_SEPARATOR;
+ }
+ if (StringUtil::Equals(value, "CARRIAGE_RETURN")) {
+  return CSVState::CARRIAGE_RETURN;
+ }
+ if (StringUtil::Equals(value, "QUOTED")) {
+  return CSVState::QUOTED;
+ }
+ if (StringUtil::Equals(value, "UNQUOTED")) {
+  return CSVState::UNQUOTED;
+ }
+ if (StringUtil::Equals(value, "ESCAPE")) {
+  return CSVState::ESCAPE;
+ }
+ if (StringUtil::Equals(value, "EMPTY_LINE")) {
+  return CSVState::EMPTY_LINE;
+ }
+ if (StringUtil::Equals(value, "INVALID")) {
+  return CSVState::INVALID;
@@ -669,3 +678,3 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
+CTEMaterialize EnumUtil::FromString<CTEMaterialize>(const char *value) {
+ if (StringUtil::Equals(value, "CTE_MATERIALIZE_DEFAULT")) {
+  return CTEMaterialize::CTE_MATERIALIZE_DEFAULT;
@@ -673,2 +682,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
+ if (StringUtil::Equals(value, "CTE_MATERIALIZE_ALWAYS")) {
+  return CTEMaterialize::CTE_MATERIALIZE_ALWAYS;
@@ -676,2 +685,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+ if (StringUtil::Equals(value, "CTE_MATERIALIZE_NEVER")) {
+  return CTEMaterialize::CTE_MATERIALIZE_NEVER;
@@ -720 +729,4 @@ const char* EnumUtil::ToChars<CatalogType>(CatalogType value) {
-<<<<<<< HEAD
+ case CatalogType::RENAMED_ENTRY:
+  return "RENAMED_ENTRY";
+ case CatalogType::DEPENDENCY_ENTRY:
+  return "DEPENDENCY_ENTRY";
@@ -727,7 +738,0 @@ const char* EnumUtil::ToChars<CatalogType>(CatalogType value) {
-||||||| d02b472cbf
-=======
- case CatalogType::RENAMED_ENTRY:
-  return "RENAMED_ENTRY";
- case CatalogType::DEPENDENCY_ENTRY:
-  return "DEPENDENCY_ENTRY";
->>>>>>> e4dd1e9d
@@ -739,3 +744,3 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
+CatalogType EnumUtil::FromString<CatalogType>(const char *value) {
+ if (StringUtil::Equals(value, "INVALID")) {
+  return CatalogType::INVALID;
@@ -743,2 +748,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
+ if (StringUtil::Equals(value, "TABLE_ENTRY")) {
+  return CatalogType::TABLE_ENTRY;
@@ -746,2 +751,62 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+ if (StringUtil::Equals(value, "SCHEMA_ENTRY")) {
+  return CatalogType::SCHEMA_ENTRY;
+ }
+ if (StringUtil::Equals(value, "VIEW_ENTRY")) {
+  return CatalogType::VIEW_ENTRY;
+ }
+ if (StringUtil::Equals(value, "INDEX_ENTRY")) {
+  return CatalogType::INDEX_ENTRY;
+ }
+ if (StringUtil::Equals(value, "PREPARED_STATEMENT")) {
+  return CatalogType::PREPARED_STATEMENT;
+ }
+ if (StringUtil::Equals(value, "SEQUENCE_ENTRY")) {
+  return CatalogType::SEQUENCE_ENTRY;
+ }
+ if (StringUtil::Equals(value, "COLLATION_ENTRY")) {
+  return CatalogType::COLLATION_ENTRY;
+ }
+ if (StringUtil::Equals(value, "TYPE_ENTRY")) {
+  return CatalogType::TYPE_ENTRY;
+ }
+ if (StringUtil::Equals(value, "DATABASE_ENTRY")) {
+  return CatalogType::DATABASE_ENTRY;
+ }
+ if (StringUtil::Equals(value, "TABLE_FUNCTION_ENTRY")) {
+  return CatalogType::TABLE_FUNCTION_ENTRY;
+ }
+ if (StringUtil::Equals(value, "SCALAR_FUNCTION_ENTRY")) {
+  return CatalogType::SCALAR_FUNCTION_ENTRY;
+ }
+ if (StringUtil::Equals(value, "AGGREGATE_FUNCTION_ENTRY")) {
+  return CatalogType::AGGREGATE_FUNCTION_ENTRY;
+ }
+ if (StringUtil::Equals(value, "PRAGMA_FUNCTION_ENTRY")) {
+  return CatalogType::PRAGMA_FUNCTION_ENTRY;
+ }
+ if (StringUtil::Equals(value, "COPY_FUNCTION_ENTRY")) {
+  return CatalogType::COPY_FUNCTION_ENTRY;
+ }
+ if (StringUtil::Equals(value, "MACRO_ENTRY")) {
+  return CatalogType::MACRO_ENTRY;
+ }
+ if (StringUtil::Equals(value, "TABLE_MACRO_ENTRY")) {
+  return CatalogType::TABLE_MACRO_ENTRY;
+ }
+ if (StringUtil::Equals(value, "DELETED_ENTRY")) {
+  return CatalogType::DELETED_ENTRY;
+ }
+ if (StringUtil::Equals(value, "RENAMED_ENTRY")) {
+  return CatalogType::RENAMED_ENTRY;
+ }
+ if (StringUtil::Equals(value, "DEPENDENCY_ENTRY")) {
+  return CatalogType::DEPENDENCY_ENTRY;
+ }
+ if (StringUtil::Equals(value, "SECRET_ENTRY")) {
+  return CatalogType::SECRET_ENTRY;
+ }
+ if (StringUtil::Equals(value, "SECRET_TYPE_ENTRY")) {
+  return CatalogType::SECRET_TYPE_ENTRY;
+ }
+ if (StringUtil::Equals(value, "SECRET_FUNCTION_ENTRY")) {
+  return CatalogType::SECRET_FUNCTION_ENTRY;
@@ -767,3 +832,3 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
+CheckpointAbort EnumUtil::FromString<CheckpointAbort>(const char *value) {
+ if (StringUtil::Equals(value, "NO_ABORT")) {
+  return CheckpointAbort::NO_ABORT;
@@ -771,2 +836,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
+ if (StringUtil::Equals(value, "DEBUG_ABORT_BEFORE_TRUNCATE")) {
+  return CheckpointAbort::DEBUG_ABORT_BEFORE_TRUNCATE;
@@ -774,2 +839,5 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+ if (StringUtil::Equals(value, "DEBUG_ABORT_BEFORE_HEADER")) {
+  return CheckpointAbort::DEBUG_ABORT_BEFORE_HEADER;
+ }
+ if (StringUtil::Equals(value, "DEBUG_ABORT_AFTER_FREE_LIST_WRITE")) {
+  return CheckpointAbort::DEBUG_ABORT_AFTER_FREE_LIST_WRITE;
@@ -793,3 +861,3 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
+ChunkInfoType EnumUtil::FromString<ChunkInfoType>(const char *value) {
+ if (StringUtil::Equals(value, "CONSTANT_INFO")) {
+  return ChunkInfoType::CONSTANT_INFO;
@@ -797,2 +865,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
+ if (StringUtil::Equals(value, "VECTOR_INFO")) {
+  return ChunkInfoType::VECTOR_INFO;
@@ -800,2 +868,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+ if (StringUtil::Equals(value, "EMPTY_INFO")) {
+  return ChunkInfoType::EMPTY_INFO;
@@ -819,3 +887,3 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
+ColumnDataAllocatorType EnumUtil::FromString<ColumnDataAllocatorType>(const char *value) {
+ if (StringUtil::Equals(value, "BUFFER_MANAGER_ALLOCATOR")) {
+  return ColumnDataAllocatorType::BUFFER_MANAGER_ALLOCATOR;
@@ -823,2 +891,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
+ if (StringUtil::Equals(value, "IN_MEMORY_ALLOCATOR")) {
+  return ColumnDataAllocatorType::IN_MEMORY_ALLOCATOR;
@@ -826,2 +894,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+ if (StringUtil::Equals(value, "HYBRID")) {
+  return ColumnDataAllocatorType::HYBRID;
@@ -845,3 +913,3 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
+ColumnDataScanProperties EnumUtil::FromString<ColumnDataScanProperties>(const char *value) {
+ if (StringUtil::Equals(value, "INVALID")) {
+  return ColumnDataScanProperties::INVALID;
@@ -849,2 +917,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
+ if (StringUtil::Equals(value, "ALLOW_ZERO_COPY")) {
+  return ColumnDataScanProperties::ALLOW_ZERO_COPY;
@@ -852,2 +920,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+ if (StringUtil::Equals(value, "DISALLOW_ZERO_COPY")) {
+  return ColumnDataScanProperties::DISALLOW_ZERO_COPY;
@@ -869,3 +937,3 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
+ColumnSegmentType EnumUtil::FromString<ColumnSegmentType>(const char *value) {
+ if (StringUtil::Equals(value, "TRANSIENT")) {
+  return ColumnSegmentType::TRANSIENT;
@@ -873,5 +941,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
- }
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+ if (StringUtil::Equals(value, "PERSISTENT")) {
+  return ColumnSegmentType::PERSISTENT;
@@ -895,3 +960,3 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
+CompressedMaterializationDirection EnumUtil::FromString<CompressedMaterializationDirection>(const char *value) {
+ if (StringUtil::Equals(value, "INVALID")) {
+  return CompressedMaterializationDirection::INVALID;
@@ -899,2 +964,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
+ if (StringUtil::Equals(value, "COMPRESS")) {
+  return CompressedMaterializationDirection::COMPRESS;
@@ -902,2 +967,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+ if (StringUtil::Equals(value, "DECOMPRESS")) {
+  return CompressedMaterializationDirection::DECOMPRESS;
@@ -937,3 +1002,3 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
+CompressionType EnumUtil::FromString<CompressionType>(const char *value) {
+ if (StringUtil::Equals(value, "COMPRESSION_AUTO")) {
+  return CompressionType::COMPRESSION_AUTO;
@@ -941,2 +1006,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
+ if (StringUtil::Equals(value, "COMPRESSION_UNCOMPRESSED")) {
+  return CompressionType::COMPRESSION_UNCOMPRESSED;
@@ -944,2 +1009,26 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+ if (StringUtil::Equals(value, "COMPRESSION_CONSTANT")) {
+  return CompressionType::COMPRESSION_CONSTANT;
+ }
+ if (StringUtil::Equals(value, "COMPRESSION_RLE")) {
+  return CompressionType::COMPRESSION_RLE;
+ }
+ if (StringUtil::Equals(value, "COMPRESSION_DICTIONARY")) {
+  return CompressionType::COMPRESSION_DICTIONARY;
+ }
+ if (StringUtil::Equals(value, "COMPRESSION_PFOR_DELTA")) {
+  return CompressionType::COMPRESSION_PFOR_DELTA;
+ }
+ if (StringUtil::Equals(value, "COMPRESSION_BITPACKING")) {
+  return CompressionType::COMPRESSION_BITPACKING;
+ }
+ if (StringUtil::Equals(value, "COMPRESSION_FSST")) {
+  return CompressionType::COMPRESSION_FSST;
+ }
+ if (StringUtil::Equals(value, "COMPRESSION_CHIMP")) {
+  return CompressionType::COMPRESSION_CHIMP;
+ }
+ if (StringUtil::Equals(value, "COMPRESSION_PATAS")) {
+  return CompressionType::COMPRESSION_PATAS;
+ }
+ if (StringUtil::Equals(value, "COMPRESSION_COUNT")) {
+  return CompressionType::COMPRESSION_COUNT;
@@ -961,3 +1050,3 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
+ConflictManagerMode EnumUtil::FromString<ConflictManagerMode>(const char *value) {
+ if (StringUtil::Equals(value, "SCAN")) {
+  return ConflictManagerMode::SCAN;
@@ -965,5 +1054,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
- }
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+ if (StringUtil::Equals(value, "THROW")) {
+  return ConflictManagerMode::THROW;
@@ -991,3 +1077,3 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
+ConstraintType EnumUtil::FromString<ConstraintType>(const char *value) {
+ if (StringUtil::Equals(value, "INVALID")) {
+  return ConstraintType::INVALID;
@@ -995,2 +1081,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
+ if (StringUtil::Equals(value, "NOT_NULL")) {
+  return ConstraintType::NOT_NULL;
@@ -998,2 +1084,8 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+ if (StringUtil::Equals(value, "CHECK")) {
+  return ConstraintType::CHECK;
+ }
+ if (StringUtil::Equals(value, "UNIQUE")) {
+  return ConstraintType::UNIQUE;
+ }
+ if (StringUtil::Equals(value, "FOREIGN_KEY")) {
+  return ConstraintType::FOREIGN_KEY;
@@ -1019,3 +1111,3 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
+DataFileType EnumUtil::FromString<DataFileType>(const char *value) {
+ if (StringUtil::Equals(value, "FILE_DOES_NOT_EXIST")) {
+  return DataFileType::FILE_DOES_NOT_EXIST;
@@ -1023,2 +1115,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
+ if (StringUtil::Equals(value, "DUCKDB_FILE")) {
+  return DataFileType::DUCKDB_FILE;
@@ -1026,2 +1118,5 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+ if (StringUtil::Equals(value, "SQLITE_FILE")) {
+  return DataFileType::SQLITE_FILE;
+ }
+ if (StringUtil::Equals(value, "PARQUET_FILE")) {
+  return DataFileType::PARQUET_FILE;
@@ -1089,3 +1184,3 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
+DatePartSpecifier EnumUtil::FromString<DatePartSpecifier>(const char *value) {
+ if (StringUtil::Equals(value, "YEAR")) {
+  return DatePartSpecifier::YEAR;
@@ -1093,2 +1188,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
+ if (StringUtil::Equals(value, "MONTH")) {
+  return DatePartSpecifier::MONTH;
@@ -1096,2 +1191,68 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+ if (StringUtil::Equals(value, "DAY")) {
+  return DatePartSpecifier::DAY;
+ }
+ if (StringUtil::Equals(value, "DECADE")) {
+  return DatePartSpecifier::DECADE;
+ }
+ if (StringUtil::Equals(value, "CENTURY")) {
+  return DatePartSpecifier::CENTURY;
+ }
+ if (StringUtil::Equals(value, "MILLENNIUM")) {
+  return DatePartSpecifier::MILLENNIUM;
+ }
+ if (StringUtil::Equals(value, "MICROSECONDS")) {
+  return DatePartSpecifier::MICROSECONDS;
+ }
+ if (StringUtil::Equals(value, "MILLISECONDS")) {
+  return DatePartSpecifier::MILLISECONDS;
+ }
+ if (StringUtil::Equals(value, "SECOND")) {
+  return DatePartSpecifier::SECOND;
+ }
+ if (StringUtil::Equals(value, "MINUTE")) {
+  return DatePartSpecifier::MINUTE;
+ }
+ if (StringUtil::Equals(value, "HOUR")) {
+  return DatePartSpecifier::HOUR;
+ }
+ if (StringUtil::Equals(value, "DOW")) {
+  return DatePartSpecifier::DOW;
+ }
+ if (StringUtil::Equals(value, "ISODOW")) {
+  return DatePartSpecifier::ISODOW;
+ }
+ if (StringUtil::Equals(value, "WEEK")) {
+  return DatePartSpecifier::WEEK;
+ }
+ if (StringUtil::Equals(value, "ISOYEAR")) {
+  return DatePartSpecifier::ISOYEAR;
+ }
+ if (StringUtil::Equals(value, "QUARTER")) {
+  return DatePartSpecifier::QUARTER;
+ }
+ if (StringUtil::Equals(value, "DOY")) {
+  return DatePartSpecifier::DOY;
+ }
+ if (StringUtil::Equals(value, "YEARWEEK")) {
+  return DatePartSpecifier::YEARWEEK;
+ }
+ if (StringUtil::Equals(value, "ERA")) {
+  return DatePartSpecifier::ERA;
+ }
+ if (StringUtil::Equals(value, "TIMEZONE")) {
+  return DatePartSpecifier::TIMEZONE;
+ }
+ if (StringUtil::Equals(value, "TIMEZONE_HOUR")) {
+  return DatePartSpecifier::TIMEZONE_HOUR;
+ }
+ if (StringUtil::Equals(value, "TIMEZONE_MINUTE")) {
+  return DatePartSpecifier::TIMEZONE_MINUTE;
+ }
+ if (StringUtil::Equals(value, "EPOCH")) {
+  return DatePartSpecifier::EPOCH;
+ }
+ if (StringUtil::Equals(value, "JULIAN_DAY")) {
+  return DatePartSpecifier::JULIAN_DAY;
+ }
+ if (StringUtil::Equals(value, "INVALID")) {
+  return DatePartSpecifier::INVALID;
@@ -1115,3 +1276,3 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
+DebugInitialize EnumUtil::FromString<DebugInitialize>(const char *value) {
+ if (StringUtil::Equals(value, "NO_INITIALIZE")) {
+  return DebugInitialize::NO_INITIALIZE;
@@ -1119,2 +1280,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
+ if (StringUtil::Equals(value, "DEBUG_ZERO_INITIALIZE")) {
+  return DebugInitialize::DEBUG_ZERO_INITIALIZE;
@@ -1122,2 +1283,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+ if (StringUtil::Equals(value, "DEBUG_ONE_INITIALIZE")) {
+  return DebugInitialize::DEBUG_ONE_INITIALIZE;
@@ -1145,3 +1306,3 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
+DefaultOrderByNullType EnumUtil::FromString<DefaultOrderByNullType>(const char *value) {
+ if (StringUtil::Equals(value, "INVALID")) {
+  return DefaultOrderByNullType::INVALID;
@@ -1149,2 +1310,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
+ if (StringUtil::Equals(value, "NULLS_FIRST")) {
+  return DefaultOrderByNullType::NULLS_FIRST;
@@ -1152,2 +1313,8 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+ if (StringUtil::Equals(value, "NULLS_LAST")) {
+  return DefaultOrderByNullType::NULLS_LAST;
+ }
+ if (StringUtil::Equals(value, "NULLS_FIRST_ON_ASC_LAST_ON_DESC")) {
+  return DefaultOrderByNullType::NULLS_FIRST_ON_ASC_LAST_ON_DESC;
+ }
+ if (StringUtil::Equals(value, "NULLS_LAST_ON_ASC_FIRST_ON_DESC")) {
+  return DefaultOrderByNullType::NULLS_LAST_ON_ASC_FIRST_ON_DESC;
@@ -1169,3 +1336,3 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
+DependencyEntryType EnumUtil::FromString<DependencyEntryType>(const char *value) {
+ if (StringUtil::Equals(value, "SUBJECT")) {
+  return DependencyEntryType::SUBJECT;
@@ -1173,5 +1340,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
- }
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+ if (StringUtil::Equals(value, "DEPENDENT")) {
+  return DependencyEntryType::DEPENDENT;
@@ -1193,6 +1357,3 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
- }
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
+DistinctType EnumUtil::FromString<DistinctType>(const char *value) {
+ if (StringUtil::Equals(value, "DISTINCT")) {
+  return DistinctType::DISTINCT;
@@ -1200,2 +1361,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+ if (StringUtil::Equals(value, "DISTINCT_ON")) {
+  return DistinctType::DISTINCT_ON;
@@ -1223,3 +1384,3 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
+ErrorType EnumUtil::FromString<ErrorType>(const char *value) {
+ if (StringUtil::Equals(value, "UNSIGNED_EXTENSION")) {
+  return ErrorType::UNSIGNED_EXTENSION;
@@ -1227,2 +1388,8 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
+ if (StringUtil::Equals(value, "INVALIDATED_TRANSACTION")) {
+  return ErrorType::INVALIDATED_TRANSACTION;
+ }
+ if (StringUtil::Equals(value, "INVALIDATED_DATABASE")) {
+  return ErrorType::INVALIDATED_DATABASE;
+ }
+ if (StringUtil::Equals(value, "ERROR_COUNT")) {
+  return ErrorType::ERROR_COUNT;
@@ -1230,2 +1397,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+ if (StringUtil::Equals(value, "INVALID")) {
+  return ErrorType::INVALID;
@@ -1249,3 +1416,3 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
+ExceptionFormatValueType EnumUtil::FromString<ExceptionFormatValueType>(const char *value) {
+ if (StringUtil::Equals(value, "FORMAT_VALUE_TYPE_DOUBLE")) {
+  return ExceptionFormatValueType::FORMAT_VALUE_TYPE_DOUBLE;
@@ -1253,2 +1420,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
+ if (StringUtil::Equals(value, "FORMAT_VALUE_TYPE_INTEGER")) {
+  return ExceptionFormatValueType::FORMAT_VALUE_TYPE_INTEGER;
@@ -1256,2 +1423,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+ if (StringUtil::Equals(value, "FORMAT_VALUE_TYPE_STRING")) {
+  return ExceptionFormatValueType::FORMAT_VALUE_TYPE_STRING;
@@ -1275,3 +1442,3 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
+ExplainOutputType EnumUtil::FromString<ExplainOutputType>(const char *value) {
+ if (StringUtil::Equals(value, "ALL")) {
+  return ExplainOutputType::ALL;
@@ -1279,2 +1446,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
+ if (StringUtil::Equals(value, "OPTIMIZED_ONLY")) {
+  return ExplainOutputType::OPTIMIZED_ONLY;
@@ -1282,2 +1449,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+ if (StringUtil::Equals(value, "PHYSICAL_ONLY")) {
+  return ExplainOutputType::PHYSICAL_ONLY;
@@ -1299,3 +1466,3 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
+ExplainType EnumUtil::FromString<ExplainType>(const char *value) {
+ if (StringUtil::Equals(value, "EXPLAIN_STANDARD")) {
+  return ExplainType::EXPLAIN_STANDARD;
@@ -1303,5 +1470,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
- }
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+ if (StringUtil::Equals(value, "EXPLAIN_ANALYZE")) {
+  return ExplainType::EXPLAIN_ANALYZE;
@@ -1397,3 +1561,3 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
+ExpressionClass EnumUtil::FromString<ExpressionClass>(const char *value) {
+ if (StringUtil::Equals(value, "INVALID")) {
+  return ExpressionClass::INVALID;
@@ -1401,2 +1565,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
+ if (StringUtil::Equals(value, "AGGREGATE")) {
+  return ExpressionClass::AGGREGATE;
@@ -1404,2 +1568,110 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+ if (StringUtil::Equals(value, "CASE")) {
+  return ExpressionClass::CASE;
+ }
+ if (StringUtil::Equals(value, "CAST")) {
+  return ExpressionClass::CAST;
+ }
+ if (StringUtil::Equals(value, "COLUMN_REF")) {
+  return ExpressionClass::COLUMN_REF;
+ }
+ if (StringUtil::Equals(value, "COMPARISON")) {
+  return ExpressionClass::COMPARISON;
+ }
+ if (StringUtil::Equals(value, "CONJUNCTION")) {
+  return ExpressionClass::CONJUNCTION;
+ }
+ if (StringUtil::Equals(value, "CONSTANT")) {
+  return ExpressionClass::CONSTANT;
+ }
+ if (StringUtil::Equals(value, "DEFAULT")) {
+  return ExpressionClass::DEFAULT;
+ }
+ if (StringUtil::Equals(value, "FUNCTION")) {
+  return ExpressionClass::FUNCTION;
+ }
+ if (StringUtil::Equals(value, "OPERATOR")) {
+  return ExpressionClass::OPERATOR;
+ }
+ if (StringUtil::Equals(value, "STAR")) {
+  return ExpressionClass::STAR;
+ }
+ if (StringUtil::Equals(value, "SUBQUERY")) {
+  return ExpressionClass::SUBQUERY;
+ }
+ if (StringUtil::Equals(value, "WINDOW")) {
+  return ExpressionClass::WINDOW;
+ }
+ if (StringUtil::Equals(value, "PARAMETER")) {
+  return ExpressionClass::PARAMETER;
+ }
+ if (StringUtil::Equals(value, "COLLATE")) {
+  return ExpressionClass::COLLATE;
+ }
+ if (StringUtil::Equals(value, "LAMBDA")) {
+  return ExpressionClass::LAMBDA;
+ }
+ if (StringUtil::Equals(value, "POSITIONAL_REFERENCE")) {
+  return ExpressionClass::POSITIONAL_REFERENCE;
+ }
+ if (StringUtil::Equals(value, "BETWEEN")) {
+  return ExpressionClass::BETWEEN;
+ }
+ if (StringUtil::Equals(value, "LAMBDA_REF")) {
+  return ExpressionClass::LAMBDA_REF;
+ }
+ if (StringUtil::Equals(value, "BOUND_AGGREGATE")) {
+  return ExpressionClass::BOUND_AGGREGATE;
+ }
+ if (StringUtil::Equals(value, "BOUND_CASE")) {
+  return ExpressionClass::BOUND_CASE;
+ }
+ if (StringUtil::Equals(value, "BOUND_CAST")) {
+  return ExpressionClass::BOUND_CAST;
+ }
+ if (StringUtil::Equals(value, "BOUND_COLUMN_REF")) {
+  return ExpressionClass::BOUND_COLUMN_REF;
+ }
+ if (StringUtil::Equals(value, "BOUND_COMPARISON")) {
+  return ExpressionClass::BOUND_COMPARISON;
+ }
+ if (StringUtil::Equals(value, "BOUND_CONJUNCTION")) {
+  return ExpressionClass::BOUND_CONJUNCTION;
+ }
+ if (StringUtil::Equals(value, "BOUND_CONSTANT")) {
+  return ExpressionClass::BOUND_CONSTANT;
+ }
+ if (StringUtil::Equals(value, "BOUND_DEFAULT")) {
+  return ExpressionClass::BOUND_DEFAULT;
+ }
+ if (StringUtil::Equals(value, "BOUND_FUNCTION")) {
+  return ExpressionClass::BOUND_FUNCTION;
+ }
+ if (StringUtil::Equals(value, "BOUND_OPERATOR")) {
+  return ExpressionClass::BOUND_OPERATOR;
+ }
+ if (StringUtil::Equals(value, "BOUND_PARAMETER")) {
+  return ExpressionClass::BOUND_PARAMETER;
+ }
+ if (StringUtil::Equals(value, "BOUND_REF")) {
+  return ExpressionClass::BOUND_REF;
+ }
+ if (StringUtil::Equals(value, "BOUND_SUBQUERY")) {
+  return ExpressionClass::BOUND_SUBQUERY;
+ }
+ if (StringUtil::Equals(value, "BOUND_WINDOW")) {
+  return ExpressionClass::BOUND_WINDOW;
+ }
+ if (StringUtil::Equals(value, "BOUND_BETWEEN")) {
+  return ExpressionClass::BOUND_BETWEEN;
+ }
+ if (StringUtil::Equals(value, "BOUND_UNNEST")) {
+  return ExpressionClass::BOUND_UNNEST;
+ }
+ if (StringUtil::Equals(value, "BOUND_LAMBDA")) {
+  return ExpressionClass::BOUND_LAMBDA;
+ }
+ if (StringUtil::Equals(value, "BOUND_LAMBDA_REF")) {
+  return ExpressionClass::BOUND_LAMBDA_REF;
+ }
+ if (StringUtil::Equals(value, "BOUND_EXPRESSION")) {
+  return ExpressionClass::BOUND_EXPRESSION;
@@ -1553,3 +1825,3 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
+ExpressionType EnumUtil::FromString<ExpressionType>(const char *value) {
+ if (StringUtil::Equals(value, "INVALID")) {
+  return ExpressionType::INVALID;
@@ -1557,2 +1829,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
+ if (StringUtil::Equals(value, "OPERATOR_CAST")) {
+  return ExpressionType::OPERATOR_CAST;
@@ -1560,2 +1832,197 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+ if (StringUtil::Equals(value, "OPERATOR_NOT")) {
+  return ExpressionType::OPERATOR_NOT;
+ }
+ if (StringUtil::Equals(value, "OPERATOR_IS_NULL")) {
+  return ExpressionType::OPERATOR_IS_NULL;
+ }
+ if (StringUtil::Equals(value, "OPERATOR_IS_NOT_NULL")) {
+  return ExpressionType::OPERATOR_IS_NOT_NULL;
+ }
+ if (StringUtil::Equals(value, "COMPARE_EQUAL")) {
+  return ExpressionType::COMPARE_EQUAL;
+ }
+ if (StringUtil::Equals(value, "COMPARE_NOTEQUAL")) {
+  return ExpressionType::COMPARE_NOTEQUAL;
+ }
+ if (StringUtil::Equals(value, "COMPARE_LESSTHAN")) {
+  return ExpressionType::COMPARE_LESSTHAN;
+ }
+ if (StringUtil::Equals(value, "COMPARE_GREATERTHAN")) {
+  return ExpressionType::COMPARE_GREATERTHAN;
+ }
+ if (StringUtil::Equals(value, "COMPARE_LESSTHANOREQUALTO")) {
+  return ExpressionType::COMPARE_LESSTHANOREQUALTO;
+ }
+ if (StringUtil::Equals(value, "COMPARE_GREATERTHANOREQUALTO")) {
+  return ExpressionType::COMPARE_GREATERTHANOREQUALTO;
+ }
+ if (StringUtil::Equals(value, "COMPARE_IN")) {
+  return ExpressionType::COMPARE_IN;
+ }
+ if (StringUtil::Equals(value, "COMPARE_NOT_IN")) {
+  return ExpressionType::COMPARE_NOT_IN;
+ }
+ if (StringUtil::Equals(value, "COMPARE_DISTINCT_FROM")) {
+  return ExpressionType::COMPARE_DISTINCT_FROM;
+ }
+ if (StringUtil::Equals(value, "COMPARE_BETWEEN")) {
+  return ExpressionType::COMPARE_BETWEEN;
+ }
+ if (StringUtil::Equals(value, "COMPARE_NOT_BETWEEN")) {
+  return ExpressionType::COMPARE_NOT_BETWEEN;
+ }
+ if (StringUtil::Equals(value, "COMPARE_NOT_DISTINCT_FROM")) {
+  return ExpressionType::COMPARE_NOT_DISTINCT_FROM;
+ }
+ if (StringUtil::Equals(value, "CONJUNCTION_AND")) {
+  return ExpressionType::CONJUNCTION_AND;
+ }
+ if (StringUtil::Equals(value, "CONJUNCTION_OR")) {
+  return ExpressionType::CONJUNCTION_OR;
+ }
+ if (StringUtil::Equals(value, "VALUE_CONSTANT")) {
+  return ExpressionType::VALUE_CONSTANT;
+ }
+ if (StringUtil::Equals(value, "VALUE_PARAMETER")) {
+  return ExpressionType::VALUE_PARAMETER;
+ }
+ if (StringUtil::Equals(value, "VALUE_TUPLE")) {
+  return ExpressionType::VALUE_TUPLE;
+ }
+ if (StringUtil::Equals(value, "VALUE_TUPLE_ADDRESS")) {
+  return ExpressionType::VALUE_TUPLE_ADDRESS;
+ }
+ if (StringUtil::Equals(value, "VALUE_NULL")) {
+  return ExpressionType::VALUE_NULL;
+ }
+ if (StringUtil::Equals(value, "VALUE_VECTOR")) {
+  return ExpressionType::VALUE_VECTOR;
+ }
+ if (StringUtil::Equals(value, "VALUE_SCALAR")) {
+  return ExpressionType::VALUE_SCALAR;
+ }
+ if (StringUtil::Equals(value, "VALUE_DEFAULT")) {
+  return ExpressionType::VALUE_DEFAULT;
+ }
+ if (StringUtil::Equals(value, "AGGREGATE")) {
+  return ExpressionType::AGGREGATE;
+ }
+ if (StringUtil::Equals(value, "BOUND_AGGREGATE")) {
+  return ExpressionType::BOUND_AGGREGATE;
+ }
+ if (StringUtil::Equals(value, "GROUPING_FUNCTION")) {
+  return ExpressionType::GROUPING_FUNCTION;
+ }
+ if (StringUtil::Equals(value, "WINDOW_AGGREGATE")) {
+  return ExpressionType::WINDOW_AGGREGATE;
+ }
+ if (StringUtil::Equals(value, "WINDOW_RANK")) {
+  return ExpressionType::WINDOW_RANK;
+ }
+ if (StringUtil::Equals(value, "WINDOW_RANK_DENSE")) {
+  return ExpressionType::WINDOW_RANK_DENSE;
+ }
+ if (StringUtil::Equals(value, "WINDOW_NTILE")) {
+  return ExpressionType::WINDOW_NTILE;
+ }
+ if (StringUtil::Equals(value, "WINDOW_PERCENT_RANK")) {
+  return ExpressionType::WINDOW_PERCENT_RANK;
+ }
+ if (StringUtil::Equals(value, "WINDOW_CUME_DIST")) {
+  return ExpressionType::WINDOW_CUME_DIST;
+ }
+ if (StringUtil::Equals(value, "WINDOW_ROW_NUMBER")) {
+  return ExpressionType::WINDOW_ROW_NUMBER;
+ }
+ if (StringUtil::Equals(value, "WINDOW_FIRST_VALUE")) {
+  return ExpressionType::WINDOW_FIRST_VALUE;
+ }
+ if (StringUtil::Equals(value, "WINDOW_LAST_VALUE")) {
+  return ExpressionType::WINDOW_LAST_VALUE;
+ }
+ if (StringUtil::Equals(value, "WINDOW_LEAD")) {
+  return ExpressionType::WINDOW_LEAD;
+ }
+ if (StringUtil::Equals(value, "WINDOW_LAG")) {
+  return ExpressionType::WINDOW_LAG;
+ }
+ if (StringUtil::Equals(value, "WINDOW_NTH_VALUE")) {
+  return ExpressionType::WINDOW_NTH_VALUE;
+ }
+ if (StringUtil::Equals(value, "FUNCTION")) {
+  return ExpressionType::FUNCTION;
+ }
+ if (StringUtil::Equals(value, "BOUND_FUNCTION")) {
+  return ExpressionType::BOUND_FUNCTION;
+ }
+ if (StringUtil::Equals(value, "CASE_EXPR")) {
+  return ExpressionType::CASE_EXPR;
+ }
+ if (StringUtil::Equals(value, "OPERATOR_NULLIF")) {
+  return ExpressionType::OPERATOR_NULLIF;
+ }
+ if (StringUtil::Equals(value, "OPERATOR_COALESCE")) {
+  return ExpressionType::OPERATOR_COALESCE;
+ }
+ if (StringUtil::Equals(value, "ARRAY_EXTRACT")) {
+  return ExpressionType::ARRAY_EXTRACT;
+ }
+ if (StringUtil::Equals(value, "ARRAY_SLICE")) {
+  return ExpressionType::ARRAY_SLICE;
+ }
+ if (StringUtil::Equals(value, "STRUCT_EXTRACT")) {
+  return ExpressionType::STRUCT_EXTRACT;
+ }
+ if (StringUtil::Equals(value, "ARRAY_CONSTRUCTOR")) {
+  return ExpressionType::ARRAY_CONSTRUCTOR;
+ }
+ if (StringUtil::Equals(value, "ARROW")) {
+  return ExpressionType::ARROW;
+ }
+ if (StringUtil::Equals(value, "SUBQUERY")) {
+  return ExpressionType::SUBQUERY;
+ }
+ if (StringUtil::Equals(value, "STAR")) {
+  return ExpressionType::STAR;
+ }
+ if (StringUtil::Equals(value, "TABLE_STAR")) {
+  return ExpressionType::TABLE_STAR;
+ }
+ if (StringUtil::Equals(value, "PLACEHOLDER")) {
+  return ExpressionType::PLACEHOLDER;
+ }
+ if (StringUtil::Equals(value, "COLUMN_REF")) {
+  return ExpressionType::COLUMN_REF;
+ }
+ if (StringUtil::Equals(value, "FUNCTION_REF")) {
+  return ExpressionType::FUNCTION_REF;
+ }
+ if (StringUtil::Equals(value, "TABLE_REF")) {
+  return ExpressionType::TABLE_REF;
+ }
+ if (StringUtil::Equals(value, "LAMBDA_REF")) {
+  return ExpressionType::LAMBDA_REF;
+ }
+ if (StringUtil::Equals(value, "CAST")) {
+  return ExpressionType::CAST;
+ }
+ if (StringUtil::Equals(value, "BOUND_REF")) {
+  return ExpressionType::BOUND_REF;
+ }
+ if (StringUtil::Equals(value, "BOUND_COLUMN_REF")) {
+  return ExpressionType::BOUND_COLUMN_REF;
+ }
+ if (StringUtil::Equals(value, "BOUND_UNNEST")) {
+  return ExpressionType::BOUND_UNNEST;
+ }
+ if (StringUtil::Equals(value, "COLLATE")) {
+  return ExpressionType::COLLATE;
+ }
+ if (StringUtil::Equals(value, "LAMBDA")) {
+  return ExpressionType::LAMBDA;
+ }
+ if (StringUtil::Equals(value, "POSITIONAL_REFERENCE")) {
+  return ExpressionType::POSITIONAL_REFERENCE;
+ }
+ if (StringUtil::Equals(value, "BOUND_LAMBDA_REF")) {
+  return ExpressionType::BOUND_LAMBDA_REF;
@@ -1579,3 +2046,3 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
+ExtensionLoadResult EnumUtil::FromString<ExtensionLoadResult>(const char *value) {
+ if (StringUtil::Equals(value, "LOADED_EXTENSION")) {
+  return ExtensionLoadResult::LOADED_EXTENSION;
@@ -1583,2 +2050,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
+ if (StringUtil::Equals(value, "EXTENSION_UNKNOWN")) {
+  return ExtensionLoadResult::EXTENSION_UNKNOWN;
@@ -1586,2 +2053,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+ if (StringUtil::Equals(value, "NOT_LOADED")) {
+  return ExtensionLoadResult::NOT_LOADED;
@@ -1619,3 +2086,3 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
+ExtraTypeInfoType EnumUtil::FromString<ExtraTypeInfoType>(const char *value) {
+ if (StringUtil::Equals(value, "INVALID_TYPE_INFO")) {
+  return ExtraTypeInfoType::INVALID_TYPE_INFO;
@@ -1623,2 +2090,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
+ if (StringUtil::Equals(value, "GENERIC_TYPE_INFO")) {
+  return ExtraTypeInfoType::GENERIC_TYPE_INFO;
@@ -1626,2 +2093,23 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+ if (StringUtil::Equals(value, "DECIMAL_TYPE_INFO")) {
+  return ExtraTypeInfoType::DECIMAL_TYPE_INFO;
+ }
+ if (StringUtil::Equals(value, "STRING_TYPE_INFO")) {
+  return ExtraTypeInfoType::STRING_TYPE_INFO;
+ }
+ if (StringUtil::Equals(value, "LIST_TYPE_INFO")) {
+  return ExtraTypeInfoType::LIST_TYPE_INFO;
+ }
+ if (StringUtil::Equals(value, "STRUCT_TYPE_INFO")) {
+  return ExtraTypeInfoType::STRUCT_TYPE_INFO;
+ }
+ if (StringUtil::Equals(value, "ENUM_TYPE_INFO")) {
+  return ExtraTypeInfoType::ENUM_TYPE_INFO;
+ }
+ if (StringUtil::Equals(value, "USER_TYPE_INFO")) {
+  return ExtraTypeInfoType::USER_TYPE_INFO;
+ }
+ if (StringUtil::Equals(value, "AGGREGATE_STATE_TYPE_INFO")) {
+  return ExtraTypeInfoType::AGGREGATE_STATE_TYPE_INFO;
+ }
+ if (StringUtil::Equals(value, "ARRAY_TYPE_INFO")) {
+  return ExtraTypeInfoType::ARRAY_TYPE_INFO;
@@ -1645,3 +2133,3 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
+FileBufferType EnumUtil::FromString<FileBufferType>(const char *value) {
+ if (StringUtil::Equals(value, "BLOCK")) {
+  return FileBufferType::BLOCK;
@@ -1649,2 +2137,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
+ if (StringUtil::Equals(value, "MANAGED_BUFFER")) {
+  return FileBufferType::MANAGED_BUFFER;
@@ -1652,2 +2140,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+ if (StringUtil::Equals(value, "TINY_BUFFER")) {
+  return FileBufferType::TINY_BUFFER;
@@ -1673,3 +2161,3 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
+FileCompressionType EnumUtil::FromString<FileCompressionType>(const char *value) {
+ if (StringUtil::Equals(value, "AUTO_DETECT")) {
+  return FileCompressionType::AUTO_DETECT;
@@ -1677,2 +2165,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
+ if (StringUtil::Equals(value, "UNCOMPRESSED")) {
+  return FileCompressionType::UNCOMPRESSED;
@@ -1680,2 +2168,5 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+ if (StringUtil::Equals(value, "GZIP")) {
+  return FileCompressionType::GZIP;
+ }
+ if (StringUtil::Equals(value, "ZSTD")) {
+  return FileCompressionType::ZSTD;
@@ -1697,6 +2188,3 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
- }
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
+FileGlobOptions EnumUtil::FromString<FileGlobOptions>(const char *value) {
+ if (StringUtil::Equals(value, "DISALLOW_EMPTY")) {
+  return FileGlobOptions::DISALLOW_EMPTY;
@@ -1704,2 +2192,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+ if (StringUtil::Equals(value, "ALLOW_EMPTY")) {
+  return FileGlobOptions::ALLOW_EMPTY;
@@ -1723,3 +2211,3 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
+FileLockType EnumUtil::FromString<FileLockType>(const char *value) {
+ if (StringUtil::Equals(value, "NO_LOCK")) {
+  return FileLockType::NO_LOCK;
@@ -1727,2 +2215,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
+ if (StringUtil::Equals(value, "READ_LOCK")) {
+  return FileLockType::READ_LOCK;
@@ -1730,2 +2218,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+ if (StringUtil::Equals(value, "WRITE_LOCK")) {
+  return FileLockType::WRITE_LOCK;
@@ -1753,3 +2241,3 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
+FilterPropagateResult EnumUtil::FromString<FilterPropagateResult>(const char *value) {
+ if (StringUtil::Equals(value, "NO_PRUNING_POSSIBLE")) {
+  return FilterPropagateResult::NO_PRUNING_POSSIBLE;
@@ -1757,2 +2245,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
+ if (StringUtil::Equals(value, "FILTER_ALWAYS_TRUE")) {
+  return FilterPropagateResult::FILTER_ALWAYS_TRUE;
@@ -1760,2 +2248,8 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+ if (StringUtil::Equals(value, "FILTER_ALWAYS_FALSE")) {
+  return FilterPropagateResult::FILTER_ALWAYS_FALSE;
+ }
+ if (StringUtil::Equals(value, "FILTER_TRUE_OR_NULL")) {
+  return FilterPropagateResult::FILTER_TRUE_OR_NULL;
+ }
+ if (StringUtil::Equals(value, "FILTER_FALSE_OR_NULL")) {
+  return FilterPropagateResult::FILTER_FALSE_OR_NULL;
@@ -1779,3 +2273,3 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
+ForeignKeyType EnumUtil::FromString<ForeignKeyType>(const char *value) {
+ if (StringUtil::Equals(value, "FK_TYPE_PRIMARY_KEY_TABLE")) {
+  return ForeignKeyType::FK_TYPE_PRIMARY_KEY_TABLE;
@@ -1783,2 +2277,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
+ if (StringUtil::Equals(value, "FK_TYPE_FOREIGN_KEY_TABLE")) {
+  return ForeignKeyType::FK_TYPE_FOREIGN_KEY_TABLE;
@@ -1786,2 +2280,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+ if (StringUtil::Equals(value, "FK_TYPE_SELF_REFERENCE_TABLE")) {
+  return ForeignKeyType::FK_TYPE_SELF_REFERENCE_TABLE;
@@ -1803,3 +2297,3 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
+FunctionNullHandling EnumUtil::FromString<FunctionNullHandling>(const char *value) {
+ if (StringUtil::Equals(value, "DEFAULT_NULL_HANDLING")) {
+  return FunctionNullHandling::DEFAULT_NULL_HANDLING;
@@ -1807,5 +2301,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
- }
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+ if (StringUtil::Equals(value, "SPECIAL_HANDLING")) {
+  return FunctionNullHandling::SPECIAL_HANDLING;
@@ -1827,3 +2318,3 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
+FunctionSideEffects EnumUtil::FromString<FunctionSideEffects>(const char *value) {
+ if (StringUtil::Equals(value, "NO_SIDE_EFFECTS")) {
+  return FunctionSideEffects::NO_SIDE_EFFECTS;
@@ -1831,5 +2322,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
- }
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+ if (StringUtil::Equals(value, "HAS_SIDE_EFFECTS")) {
+  return FunctionSideEffects::HAS_SIDE_EFFECTS;
@@ -1849,9 +2337,3 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
- }
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
- }
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+HLLStorageType EnumUtil::FromString<HLLStorageType>(const char *value) {
+ if (StringUtil::Equals(value, "UNCOMPRESSED")) {
+  return HLLStorageType::UNCOMPRESSED;
@@ -1877,3 +2359,3 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
+IndexConstraintType EnumUtil::FromString<IndexConstraintType>(const char *value) {
+ if (StringUtil::Equals(value, "NONE")) {
+  return IndexConstraintType::NONE;
@@ -1881,2 +2363,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
+ if (StringUtil::Equals(value, "UNIQUE")) {
+  return IndexConstraintType::UNIQUE;
@@ -1884,2 +2366,5 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+ if (StringUtil::Equals(value, "PRIMARY")) {
+  return IndexConstraintType::PRIMARY;
+ }
+ if (StringUtil::Equals(value, "FOREIGN")) {
+  return IndexConstraintType::FOREIGN;
@@ -1903,3 +2388,3 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
+IndexType EnumUtil::FromString<IndexType>(const char *value) {
+ if (StringUtil::Equals(value, "INVALID")) {
+  return IndexType::INVALID;
@@ -1907,2 +2392,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
+ if (StringUtil::Equals(value, "ART")) {
+  return IndexType::ART;
@@ -1910,2 +2395,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+ if (StringUtil::Equals(value, "EXTENSION")) {
+  return IndexType::EXTENSION;
@@ -1926,10 +2411,7 @@ const char* EnumUtil::ToChars<InsertColumnOrder>(InsertColumnOrder value) {
-template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
- }
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
- }
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+template<>
+InsertColumnOrder EnumUtil::FromString<InsertColumnOrder>(const char *value) {
+ if (StringUtil::Equals(value, "INSERT_BY_POSITION")) {
+  return InsertColumnOrder::INSERT_BY_POSITION;
+ }
+ if (StringUtil::Equals(value, "INSERT_BY_NAME")) {
+  return InsertColumnOrder::INSERT_BY_NAME;
@@ -1953,3 +2435,3 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
+InterruptMode EnumUtil::FromString<InterruptMode>(const char *value) {
+ if (StringUtil::Equals(value, "NO_INTERRUPTS")) {
+  return InterruptMode::NO_INTERRUPTS;
@@ -1957,2 +2439,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
+ if (StringUtil::Equals(value, "TASK")) {
+  return InterruptMode::TASK;
@@ -1960,2 +2442,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+ if (StringUtil::Equals(value, "BLOCKING")) {
+  return InterruptMode::BLOCKING;
@@ -1985,3 +2467,3 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
+JoinRefType EnumUtil::FromString<JoinRefType>(const char *value) {
+ if (StringUtil::Equals(value, "REGULAR")) {
+  return JoinRefType::REGULAR;
@@ -1989,2 +2471,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
+ if (StringUtil::Equals(value, "NATURAL")) {
+  return JoinRefType::NATURAL;
@@ -1992,2 +2474,11 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+ if (StringUtil::Equals(value, "CROSS")) {
+  return JoinRefType::CROSS;
+ }
+ if (StringUtil::Equals(value, "POSITIONAL")) {
+  return JoinRefType::POSITIONAL;
+ }
+ if (StringUtil::Equals(value, "ASOF")) {
+  return JoinRefType::ASOF;
+ }
+ if (StringUtil::Equals(value, "DEPENDENT")) {
+  return JoinRefType::DEPENDENT;
@@ -2027,3 +2518,3 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
+JoinType EnumUtil::FromString<JoinType>(const char *value) {
+ if (StringUtil::Equals(value, "INVALID")) {
+  return JoinType::INVALID;
@@ -2031,2 +2522,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
+ if (StringUtil::Equals(value, "LEFT")) {
+  return JoinType::LEFT;
@@ -2034,2 +2525,26 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+ if (StringUtil::Equals(value, "RIGHT")) {
+  return JoinType::RIGHT;
+ }
+ if (StringUtil::Equals(value, "INNER")) {
+  return JoinType::INNER;
+ }
+ if (StringUtil::Equals(value, "FULL")) {
+  return JoinType::OUTER;
+ }
+ if (StringUtil::Equals(value, "SEMI")) {
+  return JoinType::SEMI;
+ }
+ if (StringUtil::Equals(value, "ANTI")) {
+  return JoinType::ANTI;
+ }
+ if (StringUtil::Equals(value, "MARK")) {
+  return JoinType::MARK;
+ }
+ if (StringUtil::Equals(value, "SINGLE")) {
+  return JoinType::SINGLE;
+ }
+ if (StringUtil::Equals(value, "RIGHT_SEMI")) {
+  return JoinType::RIGHT_SEMI;
+ }
+ if (StringUtil::Equals(value, "RIGHT_ANTI")) {
+  return JoinType::RIGHT_ANTI;
@@ -2055,3 +2570,3 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
+KeywordCategory EnumUtil::FromString<KeywordCategory>(const char *value) {
+ if (StringUtil::Equals(value, "KEYWORD_RESERVED")) {
+  return KeywordCategory::KEYWORD_RESERVED;
@@ -2059,2 +2574,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
+ if (StringUtil::Equals(value, "KEYWORD_UNRESERVED")) {
+  return KeywordCategory::KEYWORD_UNRESERVED;
@@ -2062,2 +2577,5 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+ if (StringUtil::Equals(value, "KEYWORD_TYPE_FUNC")) {
+  return KeywordCategory::KEYWORD_TYPE_FUNC;
+ }
+ if (StringUtil::Equals(value, "KEYWORD_COL_NAME")) {
+  return KeywordCategory::KEYWORD_COL_NAME;
@@ -2081,3 +2599,3 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
+LoadType EnumUtil::FromString<LoadType>(const char *value) {
+ if (StringUtil::Equals(value, "LOAD")) {
+  return LoadType::LOAD;
@@ -2085,2 +2603,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
+ if (StringUtil::Equals(value, "INSTALL")) {
+  return LoadType::INSTALL;
@@ -2088,2 +2606,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+ if (StringUtil::Equals(value, "FORCE_INSTALL")) {
+  return LoadType::FORCE_INSTALL;
@@ -2225,3 +2743,3 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
+LogicalOperatorType EnumUtil::FromString<LogicalOperatorType>(const char *value) {
+ if (StringUtil::Equals(value, "LOGICAL_INVALID")) {
+  return LogicalOperatorType::LOGICAL_INVALID;
@@ -2229,2 +2747,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
+ if (StringUtil::Equals(value, "LOGICAL_PROJECTION")) {
+  return LogicalOperatorType::LOGICAL_PROJECTION;
@@ -2232,2 +2750,179 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+ if (StringUtil::Equals(value, "LOGICAL_FILTER")) {
+  return LogicalOperatorType::LOGICAL_FILTER;
+ }
+ if (StringUtil::Equals(value, "LOGICAL_AGGREGATE_AND_GROUP_BY")) {
+  return LogicalOperatorType::LOGICAL_AGGREGATE_AND_GROUP_BY;
+ }
+ if (StringUtil::Equals(value, "LOGICAL_WINDOW")) {
+  return LogicalOperatorType::LOGICAL_WINDOW;
+ }
+ if (StringUtil::Equals(value, "LOGICAL_UNNEST")) {
+  return LogicalOperatorType::LOGICAL_UNNEST;
+ }
+ if (StringUtil::Equals(value, "LOGICAL_LIMIT")) {
+  return LogicalOperatorType::LOGICAL_LIMIT;
+ }
+ if (StringUtil::Equals(value, "LOGICAL_ORDER_BY")) {
+  return LogicalOperatorType::LOGICAL_ORDER_BY;
+ }
+ if (StringUtil::Equals(value, "LOGICAL_TOP_N")) {
+  return LogicalOperatorType::LOGICAL_TOP_N;
+ }
+ if (StringUtil::Equals(value, "LOGICAL_COPY_TO_FILE")) {
+  return LogicalOperatorType::LOGICAL_COPY_TO_FILE;
+ }
+ if (StringUtil::Equals(value, "LOGICAL_DISTINCT")) {
+  return LogicalOperatorType::LOGICAL_DISTINCT;
+ }
+ if (StringUtil::Equals(value, "LOGICAL_SAMPLE")) {
+  return LogicalOperatorType::LOGICAL_SAMPLE;
+ }
+ if (StringUtil::Equals(value, "LOGICAL_LIMIT_PERCENT")) {
+  return LogicalOperatorType::LOGICAL_LIMIT_PERCENT;
+ }
+ if (StringUtil::Equals(value, "LOGICAL_PIVOT")) {
+  return LogicalOperatorType::LOGICAL_PIVOT;
+ }
+ if (StringUtil::Equals(value, "LOGICAL_COPY_DATABASE")) {
+  return LogicalOperatorType::LOGICAL_COPY_DATABASE;
+ }
+ if (StringUtil::Equals(value, "LOGICAL_GET")) {
+  return LogicalOperatorType::LOGICAL_GET;
+ }
+ if (StringUtil::Equals(value, "LOGICAL_CHUNK_GET")) {
+  return LogicalOperatorType::LOGICAL_CHUNK_GET;
+ }
+ if (StringUtil::Equals(value, "LOGICAL_DELIM_GET")) {
+  return LogicalOperatorType::LOGICAL_DELIM_GET;
+ }
+ if (StringUtil::Equals(value, "LOGICAL_EXPRESSION_GET")) {
+  return LogicalOperatorType::LOGICAL_EXPRESSION_GET;
+ }
+ if (StringUtil::Equals(value, "LOGICAL_DUMMY_SCAN")) {
+  return LogicalOperatorType::LOGICAL_DUMMY_SCAN;
+ }
+ if (StringUtil::Equals(value, "LOGICAL_EMPTY_RESULT")) {
+  return LogicalOperatorType::LOGICAL_EMPTY_RESULT;
+ }
+ if (StringUtil::Equals(value, "LOGICAL_CTE_REF")) {
+  return LogicalOperatorType::LOGICAL_CTE_REF;
+ }
+ if (StringUtil::Equals(value, "LOGICAL_JOIN")) {
+  return LogicalOperatorType::LOGICAL_JOIN;
+ }
+ if (StringUtil::Equals(value, "LOGICAL_DELIM_JOIN")) {
+  return LogicalOperatorType::LOGICAL_DELIM_JOIN;
+ }
+ if (StringUtil::Equals(value, "LOGICAL_COMPARISON_JOIN")) {
+  return LogicalOperatorType::LOGICAL_COMPARISON_JOIN;
+ }
+ if (StringUtil::Equals(value, "LOGICAL_ANY_JOIN")) {
+  return LogicalOperatorType::LOGICAL_ANY_JOIN;
+ }
+ if (StringUtil::Equals(value, "LOGICAL_CROSS_PRODUCT")) {
+  return LogicalOperatorType::LOGICAL_CROSS_PRODUCT;
+ }
+ if (StringUtil::Equals(value, "LOGICAL_POSITIONAL_JOIN")) {
+  return LogicalOperatorType::LOGICAL_POSITIONAL_JOIN;
+ }
+ if (StringUtil::Equals(value, "LOGICAL_ASOF_JOIN")) {
+  return LogicalOperatorType::LOGICAL_ASOF_JOIN;
+ }
+ if (StringUtil::Equals(value, "LOGICAL_DEPENDENT_JOIN")) {
+  return LogicalOperatorType::LOGICAL_DEPENDENT_JOIN;
+ }
+ if (StringUtil::Equals(value, "LOGICAL_UNION")) {
+  return LogicalOperatorType::LOGICAL_UNION;
+ }
+ if (StringUtil::Equals(value, "LOGICAL_EXCEPT")) {
+  return LogicalOperatorType::LOGICAL_EXCEPT;
+ }
+ if (StringUtil::Equals(value, "LOGICAL_INTERSECT")) {
+  return LogicalOperatorType::LOGICAL_INTERSECT;
+ }
+ if (StringUtil::Equals(value, "LOGICAL_RECURSIVE_CTE")) {
+  return LogicalOperatorType::LOGICAL_RECURSIVE_CTE;
+ }
+ if (StringUtil::Equals(value, "LOGICAL_MATERIALIZED_CTE")) {
+  return LogicalOperatorType::LOGICAL_MATERIALIZED_CTE;
+ }
+ if (StringUtil::Equals(value, "LOGICAL_INSERT")) {
+  return LogicalOperatorType::LOGICAL_INSERT;
+ }
+ if (StringUtil::Equals(value, "LOGICAL_DELETE")) {
+  return LogicalOperatorType::LOGICAL_DELETE;
+ }
+ if (StringUtil::Equals(value, "LOGICAL_UPDATE")) {
+  return LogicalOperatorType::LOGICAL_UPDATE;
+ }
+ if (StringUtil::Equals(value, "LOGICAL_ALTER")) {
+  return LogicalOperatorType::LOGICAL_ALTER;
+ }
+ if (StringUtil::Equals(value, "LOGICAL_CREATE_TABLE")) {
+  return LogicalOperatorType::LOGICAL_CREATE_TABLE;
+ }
+ if (StringUtil::Equals(value, "LOGICAL_CREATE_INDEX")) {
+  return LogicalOperatorType::LOGICAL_CREATE_INDEX;
+ }
+ if (StringUtil::Equals(value, "LOGICAL_CREATE_SEQUENCE")) {
+  return LogicalOperatorType::LOGICAL_CREATE_SEQUENCE;
+ }
+ if (StringUtil::Equals(value, "LOGICAL_CREATE_VIEW")) {
+  return LogicalOperatorType::LOGICAL_CREATE_VIEW;
+ }
+ if (StringUtil::Equals(value, "LOGICAL_CREATE_SCHEMA")) {
+  return LogicalOperatorType::LOGICAL_CREATE_SCHEMA;
+ }
+ if (StringUtil::Equals(value, "LOGICAL_CREATE_MACRO")) {
+  return LogicalOperatorType::LOGICAL_CREATE_MACRO;
+ }
+ if (StringUtil::Equals(value, "LOGICAL_DROP")) {
+  return LogicalOperatorType::LOGICAL_DROP;
+ }
+ if (StringUtil::Equals(value, "LOGICAL_PRAGMA")) {
+  return LogicalOperatorType::LOGICAL_PRAGMA;
+ }
+ if (StringUtil::Equals(value, "LOGICAL_TRANSACTION")) {
+  return LogicalOperatorType::LOGICAL_TRANSACTION;
+ }
+ if (StringUtil::Equals(value, "LOGICAL_CREATE_TYPE")) {
+  return LogicalOperatorType::LOGICAL_CREATE_TYPE;
+ }
+ if (StringUtil::Equals(value, "LOGICAL_ATTACH")) {
+  return LogicalOperatorType::LOGICAL_ATTACH;
+ }
+ if (StringUtil::Equals(value, "LOGICAL_DETACH")) {
+  return LogicalOperatorType::LOGICAL_DETACH;
+ }
+ if (StringUtil::Equals(value, "LOGICAL_EXPLAIN")) {
+  return LogicalOperatorType::LOGICAL_EXPLAIN;
+ }
+ if (StringUtil::Equals(value, "LOGICAL_SHOW")) {
+  return LogicalOperatorType::LOGICAL_SHOW;
+ }
+ if (StringUtil::Equals(value, "LOGICAL_PREPARE")) {
+  return LogicalOperatorType::LOGICAL_PREPARE;
+ }
+ if (StringUtil::Equals(value, "LOGICAL_EXECUTE")) {
+  return LogicalOperatorType::LOGICAL_EXECUTE;
+ }
+ if (StringUtil::Equals(value, "LOGICAL_EXPORT")) {
+  return LogicalOperatorType::LOGICAL_EXPORT;
+ }
+ if (StringUtil::Equals(value, "LOGICAL_VACUUM")) {
+  return LogicalOperatorType::LOGICAL_VACUUM;
+ }
+ if (StringUtil::Equals(value, "LOGICAL_SET")) {
+  return LogicalOperatorType::LOGICAL_SET;
+ }
+ if (StringUtil::Equals(value, "LOGICAL_LOAD")) {
+  return LogicalOperatorType::LOGICAL_LOAD;
+ }
+ if (StringUtil::Equals(value, "LOGICAL_RESET")) {
+  return LogicalOperatorType::LOGICAL_RESET;
+ }
+ if (StringUtil::Equals(value, "LOGICAL_CREATE_SECRET")) {
+  return LogicalOperatorType::LOGICAL_CREATE_SECRET;
+ }
+ if (StringUtil::Equals(value, "LOGICAL_EXTENSION_OPERATOR")) {
+  return LogicalOperatorType::LOGICAL_EXTENSION_OPERATOR;
@@ -2331,3 +3026,105 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
+LogicalTypeId EnumUtil::FromString<LogicalTypeId>(const char *value) {
+ if (StringUtil::Equals(value, "INVALID")) {
+  return LogicalTypeId::INVALID;
+ }
+ if (StringUtil::Equals(value, "NULL")) {
+  return LogicalTypeId::SQLNULL;
+ }
+ if (StringUtil::Equals(value, "UNKNOWN")) {
+  return LogicalTypeId::UNKNOWN;
+ }
+ if (StringUtil::Equals(value, "ANY")) {
+  return LogicalTypeId::ANY;
+ }
+ if (StringUtil::Equals(value, "USER")) {
+  return LogicalTypeId::USER;
+ }
+ if (StringUtil::Equals(value, "BOOLEAN")) {
+  return LogicalTypeId::BOOLEAN;
+ }
+ if (StringUtil::Equals(value, "TINYINT")) {
+  return LogicalTypeId::TINYINT;
+ }
+ if (StringUtil::Equals(value, "SMALLINT")) {
+  return LogicalTypeId::SMALLINT;
+ }
+ if (StringUtil::Equals(value, "INTEGER")) {
+  return LogicalTypeId::INTEGER;
+ }
+ if (StringUtil::Equals(value, "BIGINT")) {
+  return LogicalTypeId::BIGINT;
+ }
+ if (StringUtil::Equals(value, "DATE")) {
+  return LogicalTypeId::DATE;
+ }
+ if (StringUtil::Equals(value, "TIME")) {
+  return LogicalTypeId::TIME;
+ }
+ if (StringUtil::Equals(value, "TIMESTAMP_S")) {
+  return LogicalTypeId::TIMESTAMP_SEC;
+ }
+ if (StringUtil::Equals(value, "TIMESTAMP_MS")) {
+  return LogicalTypeId::TIMESTAMP_MS;
+ }
+ if (StringUtil::Equals(value, "TIMESTAMP")) {
+  return LogicalTypeId::TIMESTAMP;
+ }
+ if (StringUtil::Equals(value, "TIMESTAMP_NS")) {
+  return LogicalTypeId::TIMESTAMP_NS;
+ }
+ if (StringUtil::Equals(value, "DECIMAL")) {
+  return LogicalTypeId::DECIMAL;
+ }
+ if (StringUtil::Equals(value, "FLOAT")) {
+  return LogicalTypeId::FLOAT;
+ }
+ if (StringUtil::Equals(value, "DOUBLE")) {
+  return LogicalTypeId::DOUBLE;
+ }
+ if (StringUtil::Equals(value, "CHAR")) {
+  return LogicalTypeId::CHAR;
+ }
+ if (StringUtil::Equals(value, "VARCHAR")) {
+  return LogicalTypeId::VARCHAR;
+ }
+ if (StringUtil::Equals(value, "BLOB")) {
+  return LogicalTypeId::BLOB;
+ }
+ if (StringUtil::Equals(value, "INTERVAL")) {
+  return LogicalTypeId::INTERVAL;
+ }
+ if (StringUtil::Equals(value, "UTINYINT")) {
+  return LogicalTypeId::UTINYINT;
+ }
+ if (StringUtil::Equals(value, "USMALLINT")) {
+  return LogicalTypeId::USMALLINT;
+ }
+ if (StringUtil::Equals(value, "UINTEGER")) {
+  return LogicalTypeId::UINTEGER;
+ }
+ if (StringUtil::Equals(value, "UBIGINT")) {
+  return LogicalTypeId::UBIGINT;
+ }
+ if (StringUtil::Equals(value, "TIMESTAMP WITH TIME ZONE")) {
+  return LogicalTypeId::TIMESTAMP_TZ;
+ }
+ if (StringUtil::Equals(value, "TIME WITH TIME ZONE")) {
+  return LogicalTypeId::TIME_TZ;
+ }
+ if (StringUtil::Equals(value, "BIT")) {
+  return LogicalTypeId::BIT;
+ }
+ if (StringUtil::Equals(value, "HUGEINT")) {
+  return LogicalTypeId::HUGEINT;
+ }
+ if (StringUtil::Equals(value, "POINTER")) {
+  return LogicalTypeId::POINTER;
+ }
+ if (StringUtil::Equals(value, "VALIDITY")) {
+  return LogicalTypeId::VALIDITY;
+ }
+ if (StringUtil::Equals(value, "UUID")) {
+  return LogicalTypeId::UUID;
+ }
+ if (StringUtil::Equals(value, "STRUCT")) {
+  return LogicalTypeId::STRUCT;
@@ -2336 +3133,19 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
-  return WithinCollection::LIST;
+  return LogicalTypeId::LIST;
+ }
+ if (StringUtil::Equals(value, "MAP")) {
+  return LogicalTypeId::MAP;
+ }
+ if (StringUtil::Equals(value, "TABLE")) {
+  return LogicalTypeId::TABLE;
+ }
+ if (StringUtil::Equals(value, "ENUM")) {
+  return LogicalTypeId::ENUM;
+ }
+ if (StringUtil::Equals(value, "AGGREGATE_STATE")) {
+  return LogicalTypeId::AGGREGATE_STATE;
+ }
+ if (StringUtil::Equals(value, "LAMBDA")) {
+  return LogicalTypeId::LAMBDA;
+ }
+ if (StringUtil::Equals(value, "UNION")) {
+  return LogicalTypeId::UNION;
@@ -2339 +3154 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
-  return WithinCollection::ARRAY;
+  return LogicalTypeId::ARRAY;
@@ -2357,3 +3172,3 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
+LookupResultType EnumUtil::FromString<LookupResultType>(const char *value) {
+ if (StringUtil::Equals(value, "LOOKUP_MISS")) {
+  return LookupResultType::LOOKUP_MISS;
@@ -2361,2 +3176,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
+ if (StringUtil::Equals(value, "LOOKUP_HIT")) {
+  return LookupResultType::LOOKUP_HIT;
@@ -2364,2 +3179,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+ if (StringUtil::Equals(value, "LOOKUP_NULL")) {
+  return LookupResultType::LOOKUP_NULL;
@@ -2383,3 +3198,3 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
+MacroType EnumUtil::FromString<MacroType>(const char *value) {
+ if (StringUtil::Equals(value, "VOID_MACRO")) {
+  return MacroType::VOID_MACRO;
@@ -2387,2 +3202,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
+ if (StringUtil::Equals(value, "TABLE_MACRO")) {
+  return MacroType::TABLE_MACRO;
@@ -2390,2 +3205,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+ if (StringUtil::Equals(value, "SCALAR_MACRO")) {
+  return MacroType::SCALAR_MACRO;
@@ -2411,3 +3226,3 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
+MapInvalidReason EnumUtil::FromString<MapInvalidReason>(const char *value) {
+ if (StringUtil::Equals(value, "VALID")) {
+  return MapInvalidReason::VALID;
@@ -2415,2 +3230,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
+ if (StringUtil::Equals(value, "NULL_KEY_LIST")) {
+  return MapInvalidReason::NULL_KEY_LIST;
@@ -2418,2 +3233,5 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+ if (StringUtil::Equals(value, "NULL_KEY")) {
+  return MapInvalidReason::NULL_KEY;
+ }
+ if (StringUtil::Equals(value, "DUPLICATE_KEY")) {
+  return MapInvalidReason::DUPLICATE_KEY;
@@ -2445,3 +3263,3 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
+NType EnumUtil::FromString<NType>(const char *value) {
+ if (StringUtil::Equals(value, "PREFIX")) {
+  return NType::PREFIX;
@@ -2449,2 +3267,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
+ if (StringUtil::Equals(value, "LEAF")) {
+  return NType::LEAF;
@@ -2452,2 +3270,14 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+ if (StringUtil::Equals(value, "NODE_4")) {
+  return NType::NODE_4;
+ }
+ if (StringUtil::Equals(value, "NODE_16")) {
+  return NType::NODE_16;
+ }
+ if (StringUtil::Equals(value, "NODE_48")) {
+  return NType::NODE_48;
+ }
+ if (StringUtil::Equals(value, "NODE_256")) {
+  return NType::NODE_256;
+ }
+ if (StringUtil::Equals(value, "LEAF_INLINED")) {
+  return NType::LEAF_INLINED;
@@ -2473,3 +3303,3 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
+NewLineIdentifier EnumUtil::FromString<NewLineIdentifier>(const char *value) {
+ if (StringUtil::Equals(value, "SINGLE")) {
+  return NewLineIdentifier::SINGLE;
@@ -2477,2 +3307,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
+ if (StringUtil::Equals(value, "CARRY_ON")) {
+  return NewLineIdentifier::CARRY_ON;
@@ -2480,2 +3310,5 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+ if (StringUtil::Equals(value, "MIX")) {
+  return NewLineIdentifier::MIX;
+ }
+ if (StringUtil::Equals(value, "NOT_SET")) {
+  return NewLineIdentifier::NOT_SET;
@@ -2501,3 +3334,3 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
+OnConflictAction EnumUtil::FromString<OnConflictAction>(const char *value) {
+ if (StringUtil::Equals(value, "THROW")) {
+  return OnConflictAction::THROW;
@@ -2505,2 +3338,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
+ if (StringUtil::Equals(value, "NOTHING")) {
+  return OnConflictAction::NOTHING;
@@ -2508,2 +3341,5 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+ if (StringUtil::Equals(value, "UPDATE")) {
+  return OnConflictAction::UPDATE;
+ }
+ if (StringUtil::Equals(value, "REPLACE")) {
+  return OnConflictAction::REPLACE;
@@ -2529,3 +3365,3 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
+OnCreateConflict EnumUtil::FromString<OnCreateConflict>(const char *value) {
+ if (StringUtil::Equals(value, "ERROR_ON_CONFLICT")) {
+  return OnCreateConflict::ERROR_ON_CONFLICT;
@@ -2533,2 +3369,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
+ if (StringUtil::Equals(value, "IGNORE_ON_CONFLICT")) {
+  return OnCreateConflict::IGNORE_ON_CONFLICT;
@@ -2536,2 +3372,5 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+ if (StringUtil::Equals(value, "REPLACE_ON_CONFLICT")) {
+  return OnCreateConflict::REPLACE_ON_CONFLICT;
+ }
+ if (StringUtil::Equals(value, "ALTER_ON_CONFLICT")) {
+  return OnCreateConflict::ALTER_ON_CONFLICT;
@@ -2553,6 +3392,3 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
- }
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
+OnEntryNotFound EnumUtil::FromString<OnEntryNotFound>(const char *value) {
+ if (StringUtil::Equals(value, "THROW_EXCEPTION")) {
+  return OnEntryNotFound::THROW_EXCEPTION;
@@ -2560,2 +3396,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+ if (StringUtil::Equals(value, "RETURN_NULL")) {
+  return OnEntryNotFound::RETURN_NULL;
@@ -2577,6 +3413,3 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
- }
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
+OperatorFinalizeResultType EnumUtil::FromString<OperatorFinalizeResultType>(const char *value) {
+ if (StringUtil::Equals(value, "HAVE_MORE_OUTPUT")) {
+  return OperatorFinalizeResultType::HAVE_MORE_OUTPUT;
@@ -2584,2 +3417,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+ if (StringUtil::Equals(value, "FINISHED")) {
+  return OperatorFinalizeResultType::FINISHED;
@@ -2605,3 +3438,3 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
+OperatorResultType EnumUtil::FromString<OperatorResultType>(const char *value) {
+ if (StringUtil::Equals(value, "NEED_MORE_INPUT")) {
+  return OperatorResultType::NEED_MORE_INPUT;
@@ -2609,2 +3442,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
+ if (StringUtil::Equals(value, "HAVE_MORE_OUTPUT")) {
+  return OperatorResultType::HAVE_MORE_OUTPUT;
@@ -2612,2 +3445,5 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+ if (StringUtil::Equals(value, "FINISHED")) {
+  return OperatorResultType::FINISHED;
+ }
+ if (StringUtil::Equals(value, "BLOCKED")) {
+  return OperatorResultType::BLOCKED;
@@ -2662,4 +3498,25 @@ const char* EnumUtil::ToChars<OptimizerType>(OptimizerType value) {
-template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
+template<>
+OptimizerType EnumUtil::FromString<OptimizerType>(const char *value) {
+ if (StringUtil::Equals(value, "INVALID")) {
+  return OptimizerType::INVALID;
+ }
+ if (StringUtil::Equals(value, "EXPRESSION_REWRITER")) {
+  return OptimizerType::EXPRESSION_REWRITER;
+ }
+ if (StringUtil::Equals(value, "FILTER_PULLUP")) {
+  return OptimizerType::FILTER_PULLUP;
+ }
+ if (StringUtil::Equals(value, "FILTER_PUSHDOWN")) {
+  return OptimizerType::FILTER_PUSHDOWN;
+ }
+ if (StringUtil::Equals(value, "REGEX_RANGE")) {
+  return OptimizerType::REGEX_RANGE;
+ }
+ if (StringUtil::Equals(value, "IN_CLAUSE")) {
+  return OptimizerType::IN_CLAUSE;
+ }
+ if (StringUtil::Equals(value, "JOIN_ORDER")) {
+  return OptimizerType::JOIN_ORDER;
+ }
+ if (StringUtil::Equals(value, "DELIMINATOR")) {
+  return OptimizerType::DELIMINATOR;
@@ -2667,2 +3524,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
+ if (StringUtil::Equals(value, "UNNEST_REWRITER")) {
+  return OptimizerType::UNNEST_REWRITER;
@@ -2670,2 +3527,29 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+ if (StringUtil::Equals(value, "UNUSED_COLUMNS")) {
+  return OptimizerType::UNUSED_COLUMNS;
+ }
+ if (StringUtil::Equals(value, "STATISTICS_PROPAGATION")) {
+  return OptimizerType::STATISTICS_PROPAGATION;
+ }
+ if (StringUtil::Equals(value, "COMMON_SUBEXPRESSIONS")) {
+  return OptimizerType::COMMON_SUBEXPRESSIONS;
+ }
+ if (StringUtil::Equals(value, "COMMON_AGGREGATE")) {
+  return OptimizerType::COMMON_AGGREGATE;
+ }
+ if (StringUtil::Equals(value, "COLUMN_LIFETIME")) {
+  return OptimizerType::COLUMN_LIFETIME;
+ }
+ if (StringUtil::Equals(value, "TOP_N")) {
+  return OptimizerType::TOP_N;
+ }
+ if (StringUtil::Equals(value, "COMPRESSED_MATERIALIZATION")) {
+  return OptimizerType::COMPRESSED_MATERIALIZATION;
+ }
+ if (StringUtil::Equals(value, "DUPLICATE_GROUPS")) {
+  return OptimizerType::DUPLICATE_GROUPS;
+ }
+ if (StringUtil::Equals(value, "REORDER_FILTER")) {
+  return OptimizerType::REORDER_FILTER;
+ }
+ if (StringUtil::Equals(value, "EXTENSION")) {
+  return OptimizerType::EXTENSION;
@@ -2691,3 +3575,3 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
+OrderByNullType EnumUtil::FromString<OrderByNullType>(const char *value) {
+ if (StringUtil::Equals(value, "INVALID")) {
+  return OrderByNullType::INVALID;
@@ -2695,2 +3579,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
+ if (StringUtil::Equals(value, "ORDER_DEFAULT") || StringUtil::Equals(value, "DEFAULT")) {
+  return OrderByNullType::ORDER_DEFAULT;
@@ -2698,2 +3582,5 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+ if (StringUtil::Equals(value, "NULLS_FIRST") || StringUtil::Equals(value, "NULLS FIRST")) {
+  return OrderByNullType::NULLS_FIRST;
+ }
+ if (StringUtil::Equals(value, "NULLS_LAST") || StringUtil::Equals(value, "NULLS LAST")) {
+  return OrderByNullType::NULLS_LAST;
@@ -2717,3 +3604,3 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
+OrderPreservationType EnumUtil::FromString<OrderPreservationType>(const char *value) {
+ if (StringUtil::Equals(value, "NO_ORDER")) {
+  return OrderPreservationType::NO_ORDER;
@@ -2721,2 +3608,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
+ if (StringUtil::Equals(value, "INSERTION_ORDER")) {
+  return OrderPreservationType::INSERTION_ORDER;
@@ -2724,2 +3611,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+ if (StringUtil::Equals(value, "FIXED_ORDER")) {
+  return OrderPreservationType::FIXED_ORDER;
@@ -2745,3 +3632,3 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
+OrderType EnumUtil::FromString<OrderType>(const char *value) {
+ if (StringUtil::Equals(value, "INVALID")) {
+  return OrderType::INVALID;
@@ -2749,2 +3636,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
+ if (StringUtil::Equals(value, "ORDER_DEFAULT") || StringUtil::Equals(value, "DEFAULT")) {
+  return OrderType::ORDER_DEFAULT;
@@ -2752,2 +3639,5 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+ if (StringUtil::Equals(value, "ASCENDING") || StringUtil::Equals(value, "ASC")) {
+  return OrderType::ASCENDING;
+ }
+ if (StringUtil::Equals(value, "DESCENDING") || StringUtil::Equals(value, "DESC")) {
+  return OrderType::DESCENDING;
@@ -2769,6 +3659,3 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
- }
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
+OutputStream EnumUtil::FromString<OutputStream>(const char *value) {
+ if (StringUtil::Equals(value, "STREAM_STDOUT")) {
+  return OutputStream::STREAM_STDOUT;
@@ -2776,2 +3663,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+ if (StringUtil::Equals(value, "STREAM_STDERR")) {
+  return OutputStream::STREAM_STDERR;
@@ -2815,3 +3702,3 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
+ParseInfoType EnumUtil::FromString<ParseInfoType>(const char *value) {
+ if (StringUtil::Equals(value, "ALTER_INFO")) {
+  return ParseInfoType::ALTER_INFO;
@@ -2819,2 +3706,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
+ if (StringUtil::Equals(value, "ATTACH_INFO")) {
+  return ParseInfoType::ATTACH_INFO;
@@ -2822,2 +3709,32 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+ if (StringUtil::Equals(value, "COPY_INFO")) {
+  return ParseInfoType::COPY_INFO;
+ }
+ if (StringUtil::Equals(value, "CREATE_INFO")) {
+  return ParseInfoType::CREATE_INFO;
+ }
+ if (StringUtil::Equals(value, "CREATE_SECRET_INFO")) {
+  return ParseInfoType::CREATE_SECRET_INFO;
+ }
+ if (StringUtil::Equals(value, "DETACH_INFO")) {
+  return ParseInfoType::DETACH_INFO;
+ }
+ if (StringUtil::Equals(value, "DROP_INFO")) {
+  return ParseInfoType::DROP_INFO;
+ }
+ if (StringUtil::Equals(value, "BOUND_EXPORT_DATA")) {
+  return ParseInfoType::BOUND_EXPORT_DATA;
+ }
+ if (StringUtil::Equals(value, "LOAD_INFO")) {
+  return ParseInfoType::LOAD_INFO;
+ }
+ if (StringUtil::Equals(value, "PRAGMA_INFO")) {
+  return ParseInfoType::PRAGMA_INFO;
+ }
+ if (StringUtil::Equals(value, "SHOW_SELECT_INFO")) {
+  return ParseInfoType::SHOW_SELECT_INFO;
+ }
+ if (StringUtil::Equals(value, "TRANSACTION_INFO")) {
+  return ParseInfoType::TRANSACTION_INFO;
+ }
+ if (StringUtil::Equals(value, "VACUUM_INFO")) {
+  return ParseInfoType::VACUUM_INFO;
@@ -2841,3 +3758,3 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
+ParserExtensionResultType EnumUtil::FromString<ParserExtensionResultType>(const char *value) {
+ if (StringUtil::Equals(value, "PARSE_SUCCESSFUL")) {
+  return ParserExtensionResultType::PARSE_SUCCESSFUL;
@@ -2845,2 +3762,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
+ if (StringUtil::Equals(value, "DISPLAY_ORIGINAL_ERROR")) {
+  return ParserExtensionResultType::DISPLAY_ORIGINAL_ERROR;
@@ -2848,2 +3765,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+ if (StringUtil::Equals(value, "DISPLAY_EXTENSION_ERROR")) {
+  return ParserExtensionResultType::DISPLAY_EXTENSION_ERROR;
@@ -2867,3 +3784,3 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
+ParserMode EnumUtil::FromString<ParserMode>(const char *value) {
+ if (StringUtil::Equals(value, "PARSING")) {
+  return ParserMode::PARSING;
@@ -2871,2 +3788,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
+ if (StringUtil::Equals(value, "SNIFFING_DATATYPES")) {
+  return ParserMode::SNIFFING_DATATYPES;
@@ -2874,2 +3791,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+ if (StringUtil::Equals(value, "PARSING_HEADER")) {
+  return ParserMode::PARSING_HEADER;
@@ -2897,3 +3814,3 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
+PartitionSortStage EnumUtil::FromString<PartitionSortStage>(const char *value) {
+ if (StringUtil::Equals(value, "INIT")) {
+  return PartitionSortStage::INIT;
@@ -2901,2 +3818,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
+ if (StringUtil::Equals(value, "SCAN")) {
+  return PartitionSortStage::SCAN;
@@ -2904,2 +3821,8 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+ if (StringUtil::Equals(value, "PREPARE")) {
+  return PartitionSortStage::PREPARE;
+ }
+ if (StringUtil::Equals(value, "MERGE")) {
+  return PartitionSortStage::MERGE;
+ }
+ if (StringUtil::Equals(value, "SORTED")) {
+  return PartitionSortStage::SORTED;
@@ -2923,3 +3846,3 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
+PartitionedColumnDataType EnumUtil::FromString<PartitionedColumnDataType>(const char *value) {
+ if (StringUtil::Equals(value, "INVALID")) {
+  return PartitionedColumnDataType::INVALID;
@@ -2927,2 +3850,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
+ if (StringUtil::Equals(value, "RADIX")) {
+  return PartitionedColumnDataType::RADIX;
@@ -2930,2 +3853,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+ if (StringUtil::Equals(value, "HIVE")) {
+  return PartitionedColumnDataType::HIVE;
@@ -2947,6 +3870,3 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
- }
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
+PartitionedTupleDataType EnumUtil::FromString<PartitionedTupleDataType>(const char *value) {
+ if (StringUtil::Equals(value, "INVALID")) {
+  return PartitionedTupleDataType::INVALID;
@@ -2954,2 +3874,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+ if (StringUtil::Equals(value, "RADIX")) {
+  return PartitionedTupleDataType::RADIX;
@@ -2975,3 +3895,3 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
+PendingExecutionResult EnumUtil::FromString<PendingExecutionResult>(const char *value) {
+ if (StringUtil::Equals(value, "RESULT_READY")) {
+  return PendingExecutionResult::RESULT_READY;
@@ -2979,2 +3899,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
+ if (StringUtil::Equals(value, "RESULT_NOT_READY")) {
+  return PendingExecutionResult::RESULT_NOT_READY;
@@ -2982,2 +3902,5 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+ if (StringUtil::Equals(value, "EXECUTION_ERROR")) {
+  return PendingExecutionResult::EXECUTION_ERROR;
+ }
+ if (StringUtil::Equals(value, "NO_TASKS_AVAILABLE")) {
+  return PendingExecutionResult::NO_TASKS_AVAILABLE;
@@ -3145,3 +4068,3 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
+PhysicalOperatorType EnumUtil::FromString<PhysicalOperatorType>(const char *value) {
+ if (StringUtil::Equals(value, "INVALID")) {
+  return PhysicalOperatorType::INVALID;
@@ -3149,2 +4072,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
+ if (StringUtil::Equals(value, "ORDER_BY")) {
+  return PhysicalOperatorType::ORDER_BY;
@@ -3152,2 +4075,218 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+ if (StringUtil::Equals(value, "LIMIT")) {
+  return PhysicalOperatorType::LIMIT;
+ }
+ if (StringUtil::Equals(value, "STREAMING_LIMIT")) {
+  return PhysicalOperatorType::STREAMING_LIMIT;
+ }
+ if (StringUtil::Equals(value, "LIMIT_PERCENT")) {
+  return PhysicalOperatorType::LIMIT_PERCENT;
+ }
+ if (StringUtil::Equals(value, "TOP_N")) {
+  return PhysicalOperatorType::TOP_N;
+ }
+ if (StringUtil::Equals(value, "WINDOW")) {
+  return PhysicalOperatorType::WINDOW;
+ }
+ if (StringUtil::Equals(value, "UNNEST")) {
+  return PhysicalOperatorType::UNNEST;
+ }
+ if (StringUtil::Equals(value, "UNGROUPED_AGGREGATE")) {
+  return PhysicalOperatorType::UNGROUPED_AGGREGATE;
+ }
+ if (StringUtil::Equals(value, "HASH_GROUP_BY")) {
+  return PhysicalOperatorType::HASH_GROUP_BY;
+ }
+ if (StringUtil::Equals(value, "PERFECT_HASH_GROUP_BY")) {
+  return PhysicalOperatorType::PERFECT_HASH_GROUP_BY;
+ }
+ if (StringUtil::Equals(value, "FILTER")) {
+  return PhysicalOperatorType::FILTER;
+ }
+ if (StringUtil::Equals(value, "PROJECTION")) {
+  return PhysicalOperatorType::PROJECTION;
+ }
+ if (StringUtil::Equals(value, "COPY_TO_FILE")) {
+  return PhysicalOperatorType::COPY_TO_FILE;
+ }
+ if (StringUtil::Equals(value, "BATCH_COPY_TO_FILE")) {
+  return PhysicalOperatorType::BATCH_COPY_TO_FILE;
+ }
+ if (StringUtil::Equals(value, "FIXED_BATCH_COPY_TO_FILE")) {
+  return PhysicalOperatorType::FIXED_BATCH_COPY_TO_FILE;
+ }
+ if (StringUtil::Equals(value, "RESERVOIR_SAMPLE")) {
+  return PhysicalOperatorType::RESERVOIR_SAMPLE;
+ }
+ if (StringUtil::Equals(value, "STREAMING_SAMPLE")) {
+  return PhysicalOperatorType::STREAMING_SAMPLE;
+ }
+ if (StringUtil::Equals(value, "STREAMING_WINDOW")) {
+  return PhysicalOperatorType::STREAMING_WINDOW;
+ }
+ if (StringUtil::Equals(value, "PIVOT")) {
+  return PhysicalOperatorType::PIVOT;
+ }
+ if (StringUtil::Equals(value, "COPY_DATABASE")) {
+  return PhysicalOperatorType::COPY_DATABASE;
+ }
+ if (StringUtil::Equals(value, "TABLE_SCAN")) {
+  return PhysicalOperatorType::TABLE_SCAN;
+ }
+ if (StringUtil::Equals(value, "DUMMY_SCAN")) {
+  return PhysicalOperatorType::DUMMY_SCAN;
+ }
+ if (StringUtil::Equals(value, "COLUMN_DATA_SCAN")) {
+  return PhysicalOperatorType::COLUMN_DATA_SCAN;
+ }
+ if (StringUtil::Equals(value, "CHUNK_SCAN")) {
+  return PhysicalOperatorType::CHUNK_SCAN;
+ }
+ if (StringUtil::Equals(value, "RECURSIVE_CTE_SCAN")) {
+  return PhysicalOperatorType::RECURSIVE_CTE_SCAN;
+ }
+ if (StringUtil::Equals(value, "CTE_SCAN")) {
+  return PhysicalOperatorType::CTE_SCAN;
+ }
+ if (StringUtil::Equals(value, "DELIM_SCAN")) {
+  return PhysicalOperatorType::DELIM_SCAN;
+ }
+ if (StringUtil::Equals(value, "EXPRESSION_SCAN")) {
+  return PhysicalOperatorType::EXPRESSION_SCAN;
+ }
+ if (StringUtil::Equals(value, "POSITIONAL_SCAN")) {
+  return PhysicalOperatorType::POSITIONAL_SCAN;
+ }
+ if (StringUtil::Equals(value, "BLOCKWISE_NL_JOIN")) {
+  return PhysicalOperatorType::BLOCKWISE_NL_JOIN;
+ }
+ if (StringUtil::Equals(value, "NESTED_LOOP_JOIN")) {
+  return PhysicalOperatorType::NESTED_LOOP_JOIN;
+ }
+ if (StringUtil::Equals(value, "HASH_JOIN")) {
+  return PhysicalOperatorType::HASH_JOIN;
+ }
+ if (StringUtil::Equals(value, "CROSS_PRODUCT")) {
+  return PhysicalOperatorType::CROSS_PRODUCT;
+ }
+ if (StringUtil::Equals(value, "PIECEWISE_MERGE_JOIN")) {
+  return PhysicalOperatorType::PIECEWISE_MERGE_JOIN;
+ }
+ if (StringUtil::Equals(value, "IE_JOIN")) {
+  return PhysicalOperatorType::IE_JOIN;
+ }
+ if (StringUtil::Equals(value, "DELIM_JOIN")) {
+  return PhysicalOperatorType::DELIM_JOIN;
+ }
+ if (StringUtil::Equals(value, "POSITIONAL_JOIN")) {
+  return PhysicalOperatorType::POSITIONAL_JOIN;
+ }
+ if (StringUtil::Equals(value, "ASOF_JOIN")) {
+  return PhysicalOperatorType::ASOF_JOIN;
+ }
+ if (StringUtil::Equals(value, "UNION")) {
+  return PhysicalOperatorType::UNION;
+ }
+ if (StringUtil::Equals(value, "RECURSIVE_CTE")) {
+  return PhysicalOperatorType::RECURSIVE_CTE;
+ }
+ if (StringUtil::Equals(value, "CTE")) {
+  return PhysicalOperatorType::CTE;
+ }
+ if (StringUtil::Equals(value, "INSERT")) {
+  return PhysicalOperatorType::INSERT;
+ }
+ if (StringUtil::Equals(value, "BATCH_INSERT")) {
+  return PhysicalOperatorType::BATCH_INSERT;
+ }
+ if (StringUtil::Equals(value, "DELETE_OPERATOR")) {
+  return PhysicalOperatorType::DELETE_OPERATOR;
+ }
+ if (StringUtil::Equals(value, "UPDATE")) {
+  return PhysicalOperatorType::UPDATE;
+ }
+ if (StringUtil::Equals(value, "CREATE_TABLE")) {
+  return PhysicalOperatorType::CREATE_TABLE;
+ }
+ if (StringUtil::Equals(value, "CREATE_TABLE_AS")) {
+  return PhysicalOperatorType::CREATE_TABLE_AS;
+ }
+ if (StringUtil::Equals(value, "BATCH_CREATE_TABLE_AS")) {
+  return PhysicalOperatorType::BATCH_CREATE_TABLE_AS;
+ }
+ if (StringUtil::Equals(value, "CREATE_INDEX")) {
+  return PhysicalOperatorType::CREATE_INDEX;
+ }
+ if (StringUtil::Equals(value, "ALTER")) {
+  return PhysicalOperatorType::ALTER;
+ }
+ if (StringUtil::Equals(value, "CREATE_SEQUENCE")) {
+  return PhysicalOperatorType::CREATE_SEQUENCE;
+ }
+ if (StringUtil::Equals(value, "CREATE_VIEW")) {
+  return PhysicalOperatorType::CREATE_VIEW;
+ }
+ if (StringUtil::Equals(value, "CREATE_SCHEMA")) {
+  return PhysicalOperatorType::CREATE_SCHEMA;
+ }
+ if (StringUtil::Equals(value, "CREATE_MACRO")) {
+  return PhysicalOperatorType::CREATE_MACRO;
+ }
+ if (StringUtil::Equals(value, "DROP")) {
+  return PhysicalOperatorType::DROP;
+ }
+ if (StringUtil::Equals(value, "PRAGMA")) {
+  return PhysicalOperatorType::PRAGMA;
+ }
+ if (StringUtil::Equals(value, "TRANSACTION")) {
+  return PhysicalOperatorType::TRANSACTION;
+ }
+ if (StringUtil::Equals(value, "CREATE_TYPE")) {
+  return PhysicalOperatorType::CREATE_TYPE;
+ }
+ if (StringUtil::Equals(value, "ATTACH")) {
+  return PhysicalOperatorType::ATTACH;
+ }
+ if (StringUtil::Equals(value, "DETACH")) {
+  return PhysicalOperatorType::DETACH;
+ }
+ if (StringUtil::Equals(value, "EXPLAIN")) {
+  return PhysicalOperatorType::EXPLAIN;
+ }
+ if (StringUtil::Equals(value, "EXPLAIN_ANALYZE")) {
+  return PhysicalOperatorType::EXPLAIN_ANALYZE;
+ }
+ if (StringUtil::Equals(value, "EMPTY_RESULT")) {
+  return PhysicalOperatorType::EMPTY_RESULT;
+ }
+ if (StringUtil::Equals(value, "EXECUTE")) {
+  return PhysicalOperatorType::EXECUTE;
+ }
+ if (StringUtil::Equals(value, "PREPARE")) {
+  return PhysicalOperatorType::PREPARE;
+ }
+ if (StringUtil::Equals(value, "VACUUM")) {
+  return PhysicalOperatorType::VACUUM;
+ }
+ if (StringUtil::Equals(value, "EXPORT")) {
+  return PhysicalOperatorType::EXPORT;
+ }
+ if (StringUtil::Equals(value, "SET")) {
+  return PhysicalOperatorType::SET;
+ }
+ if (StringUtil::Equals(value, "LOAD")) {
+  return PhysicalOperatorType::LOAD;
+ }
+ if (StringUtil::Equals(value, "INOUT_FUNCTION")) {
+  return PhysicalOperatorType::INOUT_FUNCTION;
+ }
+ if (StringUtil::Equals(value, "RESULT_COLLECTOR")) {
+  return PhysicalOperatorType::RESULT_COLLECTOR;
+ }
+ if (StringUtil::Equals(value, "RESET")) {
+  return PhysicalOperatorType::RESET;
+ }
+ if (StringUtil::Equals(value, "EXTENSION")) {
+  return PhysicalOperatorType::EXTENSION;
+ }
+ if (StringUtil::Equals(value, "CREATE_SECRET")) {
+  return PhysicalOperatorType::CREATE_SECRET;
@@ -3205,3 +4344,36 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
+PhysicalType EnumUtil::FromString<PhysicalType>(const char *value) {
+ if (StringUtil::Equals(value, "BOOL")) {
+  return PhysicalType::BOOL;
+ }
+ if (StringUtil::Equals(value, "UINT8")) {
+  return PhysicalType::UINT8;
+ }
+ if (StringUtil::Equals(value, "INT8")) {
+  return PhysicalType::INT8;
+ }
+ if (StringUtil::Equals(value, "UINT16")) {
+  return PhysicalType::UINT16;
+ }
+ if (StringUtil::Equals(value, "INT16")) {
+  return PhysicalType::INT16;
+ }
+ if (StringUtil::Equals(value, "UINT32")) {
+  return PhysicalType::UINT32;
+ }
+ if (StringUtil::Equals(value, "INT32")) {
+  return PhysicalType::INT32;
+ }
+ if (StringUtil::Equals(value, "UINT64")) {
+  return PhysicalType::UINT64;
+ }
+ if (StringUtil::Equals(value, "INT64")) {
+  return PhysicalType::INT64;
+ }
+ if (StringUtil::Equals(value, "FLOAT")) {
+  return PhysicalType::FLOAT;
+ }
+ if (StringUtil::Equals(value, "DOUBLE")) {
+  return PhysicalType::DOUBLE;
+ }
+ if (StringUtil::Equals(value, "INTERVAL")) {
+  return PhysicalType::INTERVAL;
@@ -3210 +4382,4 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
-  return WithinCollection::LIST;
+  return PhysicalType::LIST;
+ }
+ if (StringUtil::Equals(value, "STRUCT")) {
+  return PhysicalType::STRUCT;
@@ -3213 +4388,16 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
-  return WithinCollection::ARRAY;
+  return PhysicalType::ARRAY;
+ }
+ if (StringUtil::Equals(value, "VARCHAR")) {
+  return PhysicalType::VARCHAR;
+ }
+ if (StringUtil::Equals(value, "INT128")) {
+  return PhysicalType::INT128;
+ }
+ if (StringUtil::Equals(value, "UNKNOWN")) {
+  return PhysicalType::UNKNOWN;
+ }
+ if (StringUtil::Equals(value, "BIT")) {
+  return PhysicalType::BIT;
+ }
+ if (StringUtil::Equals(value, "INVALID")) {
+  return PhysicalType::INVALID;
@@ -3229,6 +4419,3 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
- }
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
+PragmaType EnumUtil::FromString<PragmaType>(const char *value) {
+ if (StringUtil::Equals(value, "PRAGMA_STATEMENT")) {
+  return PragmaType::PRAGMA_STATEMENT;
@@ -3236,2 +4423,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+ if (StringUtil::Equals(value, "PRAGMA_CALL")) {
+  return PragmaType::PRAGMA_CALL;
@@ -3257,3 +4444,3 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
+PreparedParamType EnumUtil::FromString<PreparedParamType>(const char *value) {
+ if (StringUtil::Equals(value, "AUTO_INCREMENT")) {
+  return PreparedParamType::AUTO_INCREMENT;
@@ -3261,2 +4448,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
+ if (StringUtil::Equals(value, "POSITIONAL")) {
+  return PreparedParamType::POSITIONAL;
@@ -3264,2 +4451,5 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+ if (StringUtil::Equals(value, "NAMED")) {
+  return PreparedParamType::NAMED;
+ }
+ if (StringUtil::Equals(value, "INVALID")) {
+  return PreparedParamType::INVALID;
@@ -3283,3 +4473,3 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
+ProfilerPrintFormat EnumUtil::FromString<ProfilerPrintFormat>(const char *value) {
+ if (StringUtil::Equals(value, "QUERY_TREE")) {
+  return ProfilerPrintFormat::QUERY_TREE;
@@ -3287,2 +4477,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
+ if (StringUtil::Equals(value, "JSON")) {
+  return ProfilerPrintFormat::JSON;
@@ -3290,2 +4480,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+ if (StringUtil::Equals(value, "QUERY_TREE_OPTIMIZER")) {
+  return ProfilerPrintFormat::QUERY_TREE_OPTIMIZER;
@@ -3313,3 +4503,3 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
+QuantileSerializationType EnumUtil::FromString<QuantileSerializationType>(const char *value) {
+ if (StringUtil::Equals(value, "NON_DECIMAL")) {
+  return QuantileSerializationType::NON_DECIMAL;
@@ -3317,2 +4507,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
+ if (StringUtil::Equals(value, "DECIMAL_DISCRETE")) {
+  return QuantileSerializationType::DECIMAL_DISCRETE;
@@ -3320,2 +4510,8 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+ if (StringUtil::Equals(value, "DECIMAL_DISCRETE_LIST")) {
+  return QuantileSerializationType::DECIMAL_DISCRETE_LIST;
+ }
+ if (StringUtil::Equals(value, "DECIMAL_CONTINUOUS")) {
+  return QuantileSerializationType::DECIMAL_CONTINUOUS;
+ }
+ if (StringUtil::Equals(value, "DECIMAL_CONTINUOUS_LIST")) {
+  return QuantileSerializationType::DECIMAL_CONTINUOUS_LIST;
@@ -3343,3 +4539,9 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
+QueryNodeType EnumUtil::FromString<QueryNodeType>(const char *value) {
+ if (StringUtil::Equals(value, "SELECT_NODE")) {
+  return QueryNodeType::SELECT_NODE;
+ }
+ if (StringUtil::Equals(value, "SET_OPERATION_NODE")) {
+  return QueryNodeType::SET_OPERATION_NODE;
+ }
+ if (StringUtil::Equals(value, "BOUND_SUBQUERY_NODE")) {
+  return QueryNodeType::BOUND_SUBQUERY_NODE;
@@ -3347,2 +4549,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
+ if (StringUtil::Equals(value, "RECURSIVE_CTE_NODE")) {
+  return QueryNodeType::RECURSIVE_CTE_NODE;
@@ -3350,2 +4552,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+ if (StringUtil::Equals(value, "CTE_NODE")) {
+  return QueryNodeType::CTE_NODE;
@@ -3369,3 +4571,3 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
+QueryResultType EnumUtil::FromString<QueryResultType>(const char *value) {
+ if (StringUtil::Equals(value, "MATERIALIZED_RESULT")) {
+  return QueryResultType::MATERIALIZED_RESULT;
@@ -3373,2 +4575,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
+ if (StringUtil::Equals(value, "STREAM_RESULT")) {
+  return QueryResultType::STREAM_RESULT;
@@ -3376,2 +4578,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+ if (StringUtil::Equals(value, "PENDING_RESULT")) {
+  return QueryResultType::PENDING_RESULT;
@@ -3395,3 +4597,3 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
+QuoteRule EnumUtil::FromString<QuoteRule>(const char *value) {
+ if (StringUtil::Equals(value, "QUOTES_RFC")) {
+  return QuoteRule::QUOTES_RFC;
@@ -3399,2 +4601,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
+ if (StringUtil::Equals(value, "QUOTES_OTHER")) {
+  return QuoteRule::QUOTES_OTHER;
@@ -3402,2 +4604,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+ if (StringUtil::Equals(value, "NO_QUOTES")) {
+  return QuoteRule::NO_QUOTES;
@@ -3465,3 +4667,3 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
+RelationType EnumUtil::FromString<RelationType>(const char *value) {
+ if (StringUtil::Equals(value, "INVALID_RELATION")) {
+  return RelationType::INVALID_RELATION;
@@ -3469,2 +4671,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
+ if (StringUtil::Equals(value, "TABLE_RELATION")) {
+  return RelationType::TABLE_RELATION;
@@ -3472,2 +4674,68 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+ if (StringUtil::Equals(value, "PROJECTION_RELATION")) {
+  return RelationType::PROJECTION_RELATION;
+ }
+ if (StringUtil::Equals(value, "FILTER_RELATION")) {
+  return RelationType::FILTER_RELATION;
+ }
+ if (StringUtil::Equals(value, "EXPLAIN_RELATION")) {
+  return RelationType::EXPLAIN_RELATION;
+ }
+ if (StringUtil::Equals(value, "CROSS_PRODUCT_RELATION")) {
+  return RelationType::CROSS_PRODUCT_RELATION;
+ }
+ if (StringUtil::Equals(value, "JOIN_RELATION")) {
+  return RelationType::JOIN_RELATION;
+ }
+ if (StringUtil::Equals(value, "AGGREGATE_RELATION")) {
+  return RelationType::AGGREGATE_RELATION;
+ }
+ if (StringUtil::Equals(value, "SET_OPERATION_RELATION")) {
+  return RelationType::SET_OPERATION_RELATION;
+ }
+ if (StringUtil::Equals(value, "DISTINCT_RELATION")) {
+  return RelationType::DISTINCT_RELATION;
+ }
+ if (StringUtil::Equals(value, "LIMIT_RELATION")) {
+  return RelationType::LIMIT_RELATION;
+ }
+ if (StringUtil::Equals(value, "ORDER_RELATION")) {
+  return RelationType::ORDER_RELATION;
+ }
+ if (StringUtil::Equals(value, "CREATE_VIEW_RELATION")) {
+  return RelationType::CREATE_VIEW_RELATION;
+ }
+ if (StringUtil::Equals(value, "CREATE_TABLE_RELATION")) {
+  return RelationType::CREATE_TABLE_RELATION;
+ }
+ if (StringUtil::Equals(value, "INSERT_RELATION")) {
+  return RelationType::INSERT_RELATION;
+ }
+ if (StringUtil::Equals(value, "VALUE_LIST_RELATION")) {
+  return RelationType::VALUE_LIST_RELATION;
+ }
+ if (StringUtil::Equals(value, "DELETE_RELATION")) {
+  return RelationType::DELETE_RELATION;
+ }
+ if (StringUtil::Equals(value, "UPDATE_RELATION")) {
+  return RelationType::UPDATE_RELATION;
+ }
+ if (StringUtil::Equals(value, "WRITE_CSV_RELATION")) {
+  return RelationType::WRITE_CSV_RELATION;
+ }
+ if (StringUtil::Equals(value, "WRITE_PARQUET_RELATION")) {
+  return RelationType::WRITE_PARQUET_RELATION;
+ }
+ if (StringUtil::Equals(value, "READ_CSV_RELATION")) {
+  return RelationType::READ_CSV_RELATION;
+ }
+ if (StringUtil::Equals(value, "SUBQUERY_RELATION")) {
+  return RelationType::SUBQUERY_RELATION;
+ }
+ if (StringUtil::Equals(value, "TABLE_FUNCTION_RELATION")) {
+  return RelationType::TABLE_FUNCTION_RELATION;
+ }
+ if (StringUtil::Equals(value, "VIEW_RELATION")) {
+  return RelationType::VIEW_RELATION;
+ }
+ if (StringUtil::Equals(value, "QUERY_RELATION")) {
+  return RelationType::QUERY_RELATION;
@@ -3489,6 +4757,3 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
- }
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
+RenderMode EnumUtil::FromString<RenderMode>(const char *value) {
+ if (StringUtil::Equals(value, "ROWS")) {
+  return RenderMode::ROWS;
@@ -3496,2 +4761,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+ if (StringUtil::Equals(value, "COLUMNS")) {
+  return RenderMode::COLUMNS;
@@ -3517,3 +4782,3 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
+ResultModifierType EnumUtil::FromString<ResultModifierType>(const char *value) {
+ if (StringUtil::Equals(value, "LIMIT_MODIFIER")) {
+  return ResultModifierType::LIMIT_MODIFIER;
@@ -3521,2 +4786,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
+ if (StringUtil::Equals(value, "ORDER_MODIFIER")) {
+  return ResultModifierType::ORDER_MODIFIER;
@@ -3524,2 +4789,5 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+ if (StringUtil::Equals(value, "DISTINCT_MODIFIER")) {
+  return ResultModifierType::DISTINCT_MODIFIER;
+ }
+ if (StringUtil::Equals(value, "LIMIT_PERCENT_MODIFIER")) {
+  return ResultModifierType::LIMIT_PERCENT_MODIFIER;
@@ -3543,3 +4811,3 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
+SampleMethod EnumUtil::FromString<SampleMethod>(const char *value) {
+ if (StringUtil::Equals(value, "System")) {
+  return SampleMethod::SYSTEM_SAMPLE;
@@ -3547,2 +4815,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
+ if (StringUtil::Equals(value, "Bernoulli")) {
+  return SampleMethod::BERNOULLI_SAMPLE;
@@ -3550,2 +4818,49 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+ if (StringUtil::Equals(value, "Reservoir")) {
+  return SampleMethod::RESERVOIR_SAMPLE;
+ }
+ throw NotImplementedException(StringUtil::Format("Enum value: '%s' not implemented", value));
+}
+template<>
+const char* EnumUtil::ToChars<SecretDisplayType>(SecretDisplayType value) {
+ switch(value) {
+ case SecretDisplayType::REDACTED:
+  return "REDACTED";
+ case SecretDisplayType::UNREDACTED:
+  return "UNREDACTED";
+ default:
+  throw NotImplementedException(StringUtil::Format("Enum value: '%d' not implemented", value));
+ }
+}
+template<>
+SecretDisplayType EnumUtil::FromString<SecretDisplayType>(const char *value) {
+ if (StringUtil::Equals(value, "REDACTED")) {
+  return SecretDisplayType::REDACTED;
+ }
+ if (StringUtil::Equals(value, "UNREDACTED")) {
+  return SecretDisplayType::UNREDACTED;
+ }
+ throw NotImplementedException(StringUtil::Format("Enum value: '%s' not implemented", value));
+}
+template<>
+const char* EnumUtil::ToChars<SecretPersistMode>(SecretPersistMode value) {
+ switch(value) {
+ case SecretPersistMode::DEFAULT:
+  return "DEFAULT";
+ case SecretPersistMode::TEMPORARY:
+  return "TEMPORARY";
+ case SecretPersistMode::PERSISTENT:
+  return "PERSISTENT";
+ default:
+  throw NotImplementedException(StringUtil::Format("Enum value: '%d' not implemented", value));
+ }
+}
+template<>
+SecretPersistMode EnumUtil::FromString<SecretPersistMode>(const char *value) {
+ if (StringUtil::Equals(value, "DEFAULT")) {
+  return SecretPersistMode::DEFAULT;
+ }
+ if (StringUtil::Equals(value, "TEMPORARY")) {
+  return SecretPersistMode::TEMPORARY;
+ }
+ if (StringUtil::Equals(value, "PERSISTENT")) {
+  return SecretPersistMode::PERSISTENT;
@@ -3575,3 +4890,3 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
+SequenceInfo EnumUtil::FromString<SequenceInfo>(const char *value) {
+ if (StringUtil::Equals(value, "SEQ_START")) {
+  return SequenceInfo::SEQ_START;
@@ -3579,2 +4894,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
+ if (StringUtil::Equals(value, "SEQ_INC")) {
+  return SequenceInfo::SEQ_INC;
@@ -3582,2 +4897,11 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+ if (StringUtil::Equals(value, "SEQ_MIN")) {
+  return SequenceInfo::SEQ_MIN;
+ }
+ if (StringUtil::Equals(value, "SEQ_MAX")) {
+  return SequenceInfo::SEQ_MAX;
+ }
+ if (StringUtil::Equals(value, "SEQ_CYCLE")) {
+  return SequenceInfo::SEQ_CYCLE;
+ }
+ if (StringUtil::Equals(value, "SEQ_OWN")) {
+  return SequenceInfo::SEQ_OWN;
@@ -3605,3 +4929,3 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
+SetOperationType EnumUtil::FromString<SetOperationType>(const char *value) {
+ if (StringUtil::Equals(value, "NONE")) {
+  return SetOperationType::NONE;
@@ -3609,2 +4933,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
+ if (StringUtil::Equals(value, "UNION")) {
+  return SetOperationType::UNION;
@@ -3612,2 +4936,8 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+ if (StringUtil::Equals(value, "EXCEPT")) {
+  return SetOperationType::EXCEPT;
+ }
+ if (StringUtil::Equals(value, "INTERSECT")) {
+  return SetOperationType::INTERSECT;
+ }
+ if (StringUtil::Equals(value, "UNION_BY_NAME")) {
+  return SetOperationType::UNION_BY_NAME;
@@ -3633,3 +4963,3 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
+SetScope EnumUtil::FromString<SetScope>(const char *value) {
+ if (StringUtil::Equals(value, "AUTOMATIC")) {
+  return SetScope::AUTOMATIC;
@@ -3637,2 +4967,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
+ if (StringUtil::Equals(value, "LOCAL")) {
+  return SetScope::LOCAL;
@@ -3640,2 +4970,5 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+ if (StringUtil::Equals(value, "SESSION")) {
+  return SetScope::SESSION;
+ }
+ if (StringUtil::Equals(value, "GLOBAL")) {
+  return SetScope::GLOBAL;
@@ -3657,3 +4990,3 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
+SetType EnumUtil::FromString<SetType>(const char *value) {
+ if (StringUtil::Equals(value, "SET")) {
+  return SetType::SET;
@@ -3661,5 +4994,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
- }
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+ if (StringUtil::Equals(value, "RESET")) {
+  return SetType::RESET;
@@ -3689,3 +5019,3 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
+SimplifiedTokenType EnumUtil::FromString<SimplifiedTokenType>(const char *value) {
+ if (StringUtil::Equals(value, "SIMPLIFIED_TOKEN_IDENTIFIER")) {
+  return SimplifiedTokenType::SIMPLIFIED_TOKEN_IDENTIFIER;
@@ -3693,2 +5023,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
+ if (StringUtil::Equals(value, "SIMPLIFIED_TOKEN_NUMERIC_CONSTANT")) {
+  return SimplifiedTokenType::SIMPLIFIED_TOKEN_NUMERIC_CONSTANT;
@@ -3696,2 +5026,11 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+ if (StringUtil::Equals(value, "SIMPLIFIED_TOKEN_STRING_CONSTANT")) {
+  return SimplifiedTokenType::SIMPLIFIED_TOKEN_STRING_CONSTANT;
+ }
+ if (StringUtil::Equals(value, "SIMPLIFIED_TOKEN_OPERATOR")) {
+  return SimplifiedTokenType::SIMPLIFIED_TOKEN_OPERATOR;
+ }
+ if (StringUtil::Equals(value, "SIMPLIFIED_TOKEN_KEYWORD")) {
+  return SimplifiedTokenType::SIMPLIFIED_TOKEN_KEYWORD;
+ }
+ if (StringUtil::Equals(value, "SIMPLIFIED_TOKEN_COMMENT")) {
+  return SimplifiedTokenType::SIMPLIFIED_TOKEN_COMMENT;
@@ -3713,6 +5052,3 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
- }
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
+SinkCombineResultType EnumUtil::FromString<SinkCombineResultType>(const char *value) {
+ if (StringUtil::Equals(value, "FINISHED")) {
+  return SinkCombineResultType::FINISHED;
@@ -3720,2 +5056,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+ if (StringUtil::Equals(value, "BLOCKED")) {
+  return SinkCombineResultType::BLOCKED;
@@ -3739,3 +5075,3 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
+SinkFinalizeType EnumUtil::FromString<SinkFinalizeType>(const char *value) {
+ if (StringUtil::Equals(value, "READY")) {
+  return SinkFinalizeType::READY;
@@ -3743,2 +5079,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
+ if (StringUtil::Equals(value, "NO_OUTPUT_POSSIBLE")) {
+  return SinkFinalizeType::NO_OUTPUT_POSSIBLE;
@@ -3746,2 +5082,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+ if (StringUtil::Equals(value, "BLOCKED")) {
+  return SinkFinalizeType::BLOCKED;
@@ -3763,6 +5099,3 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
- }
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
+SinkNextBatchType EnumUtil::FromString<SinkNextBatchType>(const char *value) {
+ if (StringUtil::Equals(value, "READY")) {
+  return SinkNextBatchType::READY;
@@ -3770,2 +5103,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+ if (StringUtil::Equals(value, "BLOCKED")) {
+  return SinkNextBatchType::BLOCKED;
@@ -3789,3 +5122,3 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
+SinkResultType EnumUtil::FromString<SinkResultType>(const char *value) {
+ if (StringUtil::Equals(value, "NEED_MORE_INPUT")) {
+  return SinkResultType::NEED_MORE_INPUT;
@@ -3793,2 +5126,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
+ if (StringUtil::Equals(value, "FINISHED")) {
+  return SinkResultType::FINISHED;
@@ -3796,2 +5129,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+ if (StringUtil::Equals(value, "BLOCKED")) {
+  return SinkResultType::BLOCKED;
@@ -3815,3 +5148,3 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
+SourceResultType EnumUtil::FromString<SourceResultType>(const char *value) {
+ if (StringUtil::Equals(value, "HAVE_MORE_OUTPUT")) {
+  return SourceResultType::HAVE_MORE_OUTPUT;
@@ -3819,2 +5152,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
+ if (StringUtil::Equals(value, "FINISHED")) {
+  return SourceResultType::FINISHED;
@@ -3822,2 +5155,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+ if (StringUtil::Equals(value, "BLOCKED")) {
+  return SourceResultType::BLOCKED;
@@ -3841,3 +5174,3 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
+StatementReturnType EnumUtil::FromString<StatementReturnType>(const char *value) {
+ if (StringUtil::Equals(value, "QUERY_RESULT")) {
+  return StatementReturnType::QUERY_RESULT;
@@ -3845,2 +5178,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
+ if (StringUtil::Equals(value, "CHANGED_ROWS")) {
+  return StatementReturnType::CHANGED_ROWS;
@@ -3848,2 +5181,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+ if (StringUtil::Equals(value, "NOTHING")) {
+  return StatementReturnType::NOTHING;
@@ -3921,3 +5254,3 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
+StatementType EnumUtil::FromString<StatementType>(const char *value) {
+ if (StringUtil::Equals(value, "INVALID_STATEMENT")) {
+  return StatementType::INVALID_STATEMENT;
@@ -3925,2 +5258,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
+ if (StringUtil::Equals(value, "SELECT_STATEMENT")) {
+  return StatementType::SELECT_STATEMENT;
@@ -3928,2 +5261,83 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+ if (StringUtil::Equals(value, "INSERT_STATEMENT")) {
+  return StatementType::INSERT_STATEMENT;
+ }
+ if (StringUtil::Equals(value, "UPDATE_STATEMENT")) {
+  return StatementType::UPDATE_STATEMENT;
+ }
+ if (StringUtil::Equals(value, "CREATE_STATEMENT")) {
+  return StatementType::CREATE_STATEMENT;
+ }
+ if (StringUtil::Equals(value, "DELETE_STATEMENT")) {
+  return StatementType::DELETE_STATEMENT;
+ }
+ if (StringUtil::Equals(value, "PREPARE_STATEMENT")) {
+  return StatementType::PREPARE_STATEMENT;
+ }
+ if (StringUtil::Equals(value, "EXECUTE_STATEMENT")) {
+  return StatementType::EXECUTE_STATEMENT;
+ }
+ if (StringUtil::Equals(value, "ALTER_STATEMENT")) {
+  return StatementType::ALTER_STATEMENT;
+ }
+ if (StringUtil::Equals(value, "TRANSACTION_STATEMENT")) {
+  return StatementType::TRANSACTION_STATEMENT;
+ }
+ if (StringUtil::Equals(value, "COPY_STATEMENT")) {
+  return StatementType::COPY_STATEMENT;
+ }
+ if (StringUtil::Equals(value, "ANALYZE_STATEMENT")) {
+  return StatementType::ANALYZE_STATEMENT;
+ }
+ if (StringUtil::Equals(value, "VARIABLE_SET_STATEMENT")) {
+  return StatementType::VARIABLE_SET_STATEMENT;
+ }
+ if (StringUtil::Equals(value, "CREATE_FUNC_STATEMENT")) {
+  return StatementType::CREATE_FUNC_STATEMENT;
+ }
+ if (StringUtil::Equals(value, "EXPLAIN_STATEMENT")) {
+  return StatementType::EXPLAIN_STATEMENT;
+ }
+ if (StringUtil::Equals(value, "DROP_STATEMENT")) {
+  return StatementType::DROP_STATEMENT;
+ }
+ if (StringUtil::Equals(value, "EXPORT_STATEMENT")) {
+  return StatementType::EXPORT_STATEMENT;
+ }
+ if (StringUtil::Equals(value, "PRAGMA_STATEMENT")) {
+  return StatementType::PRAGMA_STATEMENT;
+ }
+ if (StringUtil::Equals(value, "SHOW_STATEMENT")) {
+  return StatementType::SHOW_STATEMENT;
+ }
+ if (StringUtil::Equals(value, "VACUUM_STATEMENT")) {
+  return StatementType::VACUUM_STATEMENT;
+ }
+ if (StringUtil::Equals(value, "CALL_STATEMENT")) {
+  return StatementType::CALL_STATEMENT;
+ }
+ if (StringUtil::Equals(value, "SET_STATEMENT")) {
+  return StatementType::SET_STATEMENT;
+ }
+ if (StringUtil::Equals(value, "LOAD_STATEMENT")) {
+  return StatementType::LOAD_STATEMENT;
+ }
+ if (StringUtil::Equals(value, "RELATION_STATEMENT")) {
+  return StatementType::RELATION_STATEMENT;
+ }
+ if (StringUtil::Equals(value, "EXTENSION_STATEMENT")) {
+  return StatementType::EXTENSION_STATEMENT;
+ }
+ if (StringUtil::Equals(value, "LOGICAL_PLAN_STATEMENT")) {
+  return StatementType::LOGICAL_PLAN_STATEMENT;
+ }
+ if (StringUtil::Equals(value, "ATTACH_STATEMENT")) {
+  return StatementType::ATTACH_STATEMENT;
+ }
+ if (StringUtil::Equals(value, "DETACH_STATEMENT")) {
+  return StatementType::DETACH_STATEMENT;
+ }
+ if (StringUtil::Equals(value, "MULTI_STATEMENT")) {
+  return StatementType::MULTI_STATEMENT;
+ }
+ if (StringUtil::Equals(value, "COPY_DATABASE_STATEMENT")) {
+  return StatementType::COPY_DATABASE_STATEMENT;
@@ -3953,3 +5367,3 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
+StatisticsType EnumUtil::FromString<StatisticsType>(const char *value) {
+ if (StringUtil::Equals(value, "NUMERIC_STATS")) {
+  return StatisticsType::NUMERIC_STATS;
@@ -3957,2 +5371,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
+ if (StringUtil::Equals(value, "STRING_STATS")) {
+  return StatisticsType::STRING_STATS;
@@ -3960,2 +5374,11 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+ if (StringUtil::Equals(value, "LIST_STATS")) {
+  return StatisticsType::LIST_STATS;
+ }
+ if (StringUtil::Equals(value, "STRUCT_STATS")) {
+  return StatisticsType::STRUCT_STATS;
+ }
+ if (StringUtil::Equals(value, "BASE_STATS")) {
+  return StatisticsType::BASE_STATS;
+ }
+ if (StringUtil::Equals(value, "ARRAY_STATS")) {
+  return StatisticsType::ARRAY_STATS;
@@ -3983,3 +5406,3 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
+StatsInfo EnumUtil::FromString<StatsInfo>(const char *value) {
+ if (StringUtil::Equals(value, "CAN_HAVE_NULL_VALUES")) {
+  return StatsInfo::CAN_HAVE_NULL_VALUES;
@@ -3987,2 +5410,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
+ if (StringUtil::Equals(value, "CANNOT_HAVE_NULL_VALUES")) {
+  return StatsInfo::CANNOT_HAVE_NULL_VALUES;
@@ -3990,2 +5413,8 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+ if (StringUtil::Equals(value, "CAN_HAVE_VALID_VALUES")) {
+  return StatsInfo::CAN_HAVE_VALID_VALUES;
+ }
+ if (StringUtil::Equals(value, "CANNOT_HAVE_VALID_VALUES")) {
+  return StatsInfo::CANNOT_HAVE_VALID_VALUES;
+ }
+ if (StringUtil::Equals(value, "CAN_HAVE_NULL_AND_VALID_VALUES")) {
+  return StatsInfo::CAN_HAVE_NULL_AND_VALID_VALUES;
@@ -4074,4 +5503,25 @@ const char* EnumUtil::ToChars<StrTimeSpecifier>(StrTimeSpecifier value) {
-template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
+template<>
+StrTimeSpecifier EnumUtil::FromString<StrTimeSpecifier>(const char *value) {
+ if (StringUtil::Equals(value, "ABBREVIATED_WEEKDAY_NAME")) {
+  return StrTimeSpecifier::ABBREVIATED_WEEKDAY_NAME;
+ }
+ if (StringUtil::Equals(value, "FULL_WEEKDAY_NAME")) {
+  return StrTimeSpecifier::FULL_WEEKDAY_NAME;
+ }
+ if (StringUtil::Equals(value, "WEEKDAY_DECIMAL")) {
+  return StrTimeSpecifier::WEEKDAY_DECIMAL;
+ }
+ if (StringUtil::Equals(value, "DAY_OF_MONTH_PADDED")) {
+  return StrTimeSpecifier::DAY_OF_MONTH_PADDED;
+ }
+ if (StringUtil::Equals(value, "DAY_OF_MONTH")) {
+  return StrTimeSpecifier::DAY_OF_MONTH;
+ }
+ if (StringUtil::Equals(value, "ABBREVIATED_MONTH_NAME")) {
+  return StrTimeSpecifier::ABBREVIATED_MONTH_NAME;
+ }
+ if (StringUtil::Equals(value, "FULL_MONTH_NAME")) {
+  return StrTimeSpecifier::FULL_MONTH_NAME;
+ }
+ if (StringUtil::Equals(value, "MONTH_DECIMAL_PADDED")) {
+  return StrTimeSpecifier::MONTH_DECIMAL_PADDED;
@@ -4079,2 +5529,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
+ if (StringUtil::Equals(value, "MONTH_DECIMAL")) {
+  return StrTimeSpecifier::MONTH_DECIMAL;
@@ -4082,2 +5532,80 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+ if (StringUtil::Equals(value, "YEAR_WITHOUT_CENTURY_PADDED")) {
+  return StrTimeSpecifier::YEAR_WITHOUT_CENTURY_PADDED;
+ }
+ if (StringUtil::Equals(value, "YEAR_WITHOUT_CENTURY")) {
+  return StrTimeSpecifier::YEAR_WITHOUT_CENTURY;
+ }
+ if (StringUtil::Equals(value, "YEAR_DECIMAL")) {
+  return StrTimeSpecifier::YEAR_DECIMAL;
+ }
+ if (StringUtil::Equals(value, "HOUR_24_PADDED")) {
+  return StrTimeSpecifier::HOUR_24_PADDED;
+ }
+ if (StringUtil::Equals(value, "HOUR_24_DECIMAL")) {
+  return StrTimeSpecifier::HOUR_24_DECIMAL;
+ }
+ if (StringUtil::Equals(value, "HOUR_12_PADDED")) {
+  return StrTimeSpecifier::HOUR_12_PADDED;
+ }
+ if (StringUtil::Equals(value, "HOUR_12_DECIMAL")) {
+  return StrTimeSpecifier::HOUR_12_DECIMAL;
+ }
+ if (StringUtil::Equals(value, "AM_PM")) {
+  return StrTimeSpecifier::AM_PM;
+ }
+ if (StringUtil::Equals(value, "MINUTE_PADDED")) {
+  return StrTimeSpecifier::MINUTE_PADDED;
+ }
+ if (StringUtil::Equals(value, "MINUTE_DECIMAL")) {
+  return StrTimeSpecifier::MINUTE_DECIMAL;
+ }
+ if (StringUtil::Equals(value, "SECOND_PADDED")) {
+  return StrTimeSpecifier::SECOND_PADDED;
+ }
+ if (StringUtil::Equals(value, "SECOND_DECIMAL")) {
+  return StrTimeSpecifier::SECOND_DECIMAL;
+ }
+ if (StringUtil::Equals(value, "MICROSECOND_PADDED")) {
+  return StrTimeSpecifier::MICROSECOND_PADDED;
+ }
+ if (StringUtil::Equals(value, "MILLISECOND_PADDED")) {
+  return StrTimeSpecifier::MILLISECOND_PADDED;
+ }
+ if (StringUtil::Equals(value, "UTC_OFFSET")) {
+  return StrTimeSpecifier::UTC_OFFSET;
+ }
+ if (StringUtil::Equals(value, "TZ_NAME")) {
+  return StrTimeSpecifier::TZ_NAME;
+ }
+ if (StringUtil::Equals(value, "DAY_OF_YEAR_PADDED")) {
+  return StrTimeSpecifier::DAY_OF_YEAR_PADDED;
+ }
+ if (StringUtil::Equals(value, "DAY_OF_YEAR_DECIMAL")) {
+  return StrTimeSpecifier::DAY_OF_YEAR_DECIMAL;
+ }
+ if (StringUtil::Equals(value, "WEEK_NUMBER_PADDED_SUN_FIRST")) {
+  return StrTimeSpecifier::WEEK_NUMBER_PADDED_SUN_FIRST;
+ }
+ if (StringUtil::Equals(value, "WEEK_NUMBER_PADDED_MON_FIRST")) {
+  return StrTimeSpecifier::WEEK_NUMBER_PADDED_MON_FIRST;
+ }
+ if (StringUtil::Equals(value, "LOCALE_APPROPRIATE_DATE_AND_TIME")) {
+  return StrTimeSpecifier::LOCALE_APPROPRIATE_DATE_AND_TIME;
+ }
+ if (StringUtil::Equals(value, "LOCALE_APPROPRIATE_DATE")) {
+  return StrTimeSpecifier::LOCALE_APPROPRIATE_DATE;
+ }
+ if (StringUtil::Equals(value, "LOCALE_APPROPRIATE_TIME")) {
+  return StrTimeSpecifier::LOCALE_APPROPRIATE_TIME;
+ }
+ if (StringUtil::Equals(value, "NANOSECOND_PADDED")) {
+  return StrTimeSpecifier::NANOSECOND_PADDED;
+ }
+ if (StringUtil::Equals(value, "YEAR_ISO")) {
+  return StrTimeSpecifier::YEAR_ISO;
+ }
+ if (StringUtil::Equals(value, "WEEKDAY_ISO")) {
+  return StrTimeSpecifier::WEEKDAY_ISO;
+ }
+ if (StringUtil::Equals(value, "WEEK_NUMBER_ISO")) {
+  return StrTimeSpecifier::WEEK_NUMBER_ISO;
@@ -4105,3 +5633,3 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
+SubqueryType EnumUtil::FromString<SubqueryType>(const char *value) {
+ if (StringUtil::Equals(value, "INVALID")) {
+  return SubqueryType::INVALID;
@@ -4109,2 +5637,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
+ if (StringUtil::Equals(value, "SCALAR")) {
+  return SubqueryType::SCALAR;
@@ -4112,2 +5640,8 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+ if (StringUtil::Equals(value, "EXISTS")) {
+  return SubqueryType::EXISTS;
+ }
+ if (StringUtil::Equals(value, "NOT_EXISTS")) {
+  return SubqueryType::NOT_EXISTS;
+ }
+ if (StringUtil::Equals(value, "ANY")) {
+  return SubqueryType::ANY;
@@ -4129,6 +5663,3 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
- }
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
+TableColumnType EnumUtil::FromString<TableColumnType>(const char *value) {
+ if (StringUtil::Equals(value, "STANDARD")) {
+  return TableColumnType::STANDARD;
@@ -4136,2 +5667,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+ if (StringUtil::Equals(value, "GENERATED")) {
+  return TableColumnType::GENERATED;
@@ -4159,3 +5690,3 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
+TableFilterType EnumUtil::FromString<TableFilterType>(const char *value) {
+ if (StringUtil::Equals(value, "CONSTANT_COMPARISON")) {
+  return TableFilterType::CONSTANT_COMPARISON;
@@ -4163,2 +5694,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
+ if (StringUtil::Equals(value, "IS_NULL")) {
+  return TableFilterType::IS_NULL;
@@ -4166,2 +5697,8 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+ if (StringUtil::Equals(value, "IS_NOT_NULL")) {
+  return TableFilterType::IS_NOT_NULL;
+ }
+ if (StringUtil::Equals(value, "CONJUNCTION_OR")) {
+  return TableFilterType::CONJUNCTION_OR;
+ }
+ if (StringUtil::Equals(value, "CONJUNCTION_AND")) {
+  return TableFilterType::CONJUNCTION_AND;
@@ -4197,3 +5734,3 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
+TableReferenceType EnumUtil::FromString<TableReferenceType>(const char *value) {
+ if (StringUtil::Equals(value, "INVALID")) {
+  return TableReferenceType::INVALID;
@@ -4201,2 +5738,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
+ if (StringUtil::Equals(value, "BASE_TABLE")) {
+  return TableReferenceType::BASE_TABLE;
@@ -4204,2 +5741,20 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+ if (StringUtil::Equals(value, "SUBQUERY")) {
+  return TableReferenceType::SUBQUERY;
+ }
+ if (StringUtil::Equals(value, "JOIN")) {
+  return TableReferenceType::JOIN;
+ }
+ if (StringUtil::Equals(value, "TABLE_FUNCTION")) {
+  return TableReferenceType::TABLE_FUNCTION;
+ }
+ if (StringUtil::Equals(value, "EXPRESSION_LIST")) {
+  return TableReferenceType::EXPRESSION_LIST;
+ }
+ if (StringUtil::Equals(value, "CTE")) {
+  return TableReferenceType::CTE;
+ }
+ if (StringUtil::Equals(value, "EMPTY")) {
+  return TableReferenceType::EMPTY;
+ }
+ if (StringUtil::Equals(value, "PIVOT")) {
+  return TableReferenceType::PIVOT;
@@ -4225,3 +5780,3 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
+TableScanType EnumUtil::FromString<TableScanType>(const char *value) {
+ if (StringUtil::Equals(value, "TABLE_SCAN_REGULAR")) {
+  return TableScanType::TABLE_SCAN_REGULAR;
@@ -4229,2 +5784,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
+ if (StringUtil::Equals(value, "TABLE_SCAN_COMMITTED_ROWS")) {
+  return TableScanType::TABLE_SCAN_COMMITTED_ROWS;
@@ -4232,2 +5787,5 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+ if (StringUtil::Equals(value, "TABLE_SCAN_COMMITTED_ROWS_DISALLOW_UPDATES")) {
+  return TableScanType::TABLE_SCAN_COMMITTED_ROWS_DISALLOW_UPDATES;
+ }
+ if (StringUtil::Equals(value, "TABLE_SCAN_COMMITTED_ROWS_OMIT_PERMANENTLY_DELETED")) {
+  return TableScanType::TABLE_SCAN_COMMITTED_ROWS_OMIT_PERMANENTLY_DELETED;
@@ -4249,6 +5807,3 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
- }
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
+TaskExecutionMode EnumUtil::FromString<TaskExecutionMode>(const char *value) {
+ if (StringUtil::Equals(value, "PROCESS_ALL")) {
+  return TaskExecutionMode::PROCESS_ALL;
@@ -4256,2 +5811,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+ if (StringUtil::Equals(value, "PROCESS_PARTIAL")) {
+  return TaskExecutionMode::PROCESS_PARTIAL;
@@ -4277,3 +5832,3 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
+TaskExecutionResult EnumUtil::FromString<TaskExecutionResult>(const char *value) {
+ if (StringUtil::Equals(value, "TASK_FINISHED")) {
+  return TaskExecutionResult::TASK_FINISHED;
@@ -4281,2 +5836,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
+ if (StringUtil::Equals(value, "TASK_NOT_FINISHED")) {
+  return TaskExecutionResult::TASK_NOT_FINISHED;
@@ -4284,2 +5839,5 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+ if (StringUtil::Equals(value, "TASK_ERROR")) {
+  return TaskExecutionResult::TASK_ERROR;
+ }
+ if (StringUtil::Equals(value, "TASK_BLOCKED")) {
+  return TaskExecutionResult::TASK_BLOCKED;
@@ -4303,3 +5861,3 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
+TimestampCastResult EnumUtil::FromString<TimestampCastResult>(const char *value) {
+ if (StringUtil::Equals(value, "SUCCESS")) {
+  return TimestampCastResult::SUCCESS;
@@ -4307,2 +5865,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
+ if (StringUtil::Equals(value, "ERROR_INCORRECT_FORMAT")) {
+  return TimestampCastResult::ERROR_INCORRECT_FORMAT;
@@ -4310,2 +5868,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+ if (StringUtil::Equals(value, "ERROR_NON_UTC_TIMEZONE")) {
+  return TimestampCastResult::ERROR_NON_UTC_TIMEZONE;
@@ -4331,3 +5889,3 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
+TransactionType EnumUtil::FromString<TransactionType>(const char *value) {
+ if (StringUtil::Equals(value, "INVALID")) {
+  return TransactionType::INVALID;
@@ -4335,2 +5893,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
+ if (StringUtil::Equals(value, "BEGIN_TRANSACTION")) {
+  return TransactionType::BEGIN_TRANSACTION;
@@ -4338,2 +5896,5 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+ if (StringUtil::Equals(value, "COMMIT")) {
+  return TransactionType::COMMIT;
+ }
+ if (StringUtil::Equals(value, "ROLLBACK")) {
+  return TransactionType::ROLLBACK;
@@ -4361,3 +5922,3 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
+TupleDataPinProperties EnumUtil::FromString<TupleDataPinProperties>(const char *value) {
+ if (StringUtil::Equals(value, "INVALID")) {
+  return TupleDataPinProperties::INVALID;
@@ -4365,2 +5926,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
+ if (StringUtil::Equals(value, "KEEP_EVERYTHING_PINNED")) {
+  return TupleDataPinProperties::KEEP_EVERYTHING_PINNED;
@@ -4368,2 +5929,8 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+ if (StringUtil::Equals(value, "UNPIN_AFTER_DONE")) {
+  return TupleDataPinProperties::UNPIN_AFTER_DONE;
+ }
+ if (StringUtil::Equals(value, "DESTROY_AFTER_DONE")) {
+  return TupleDataPinProperties::DESTROY_AFTER_DONE;
+ }
+ if (StringUtil::Equals(value, "ALREADY_PINNED")) {
+  return TupleDataPinProperties::ALREADY_PINNED;
@@ -4391,3 +5958,3 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
+UndoFlags EnumUtil::FromString<UndoFlags>(const char *value) {
+ if (StringUtil::Equals(value, "EMPTY_ENTRY")) {
+  return UndoFlags::EMPTY_ENTRY;
@@ -4395,2 +5962,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
+ if (StringUtil::Equals(value, "CATALOG_ENTRY")) {
+  return UndoFlags::CATALOG_ENTRY;
@@ -4398,2 +5965,8 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+ if (StringUtil::Equals(value, "INSERT_TUPLE")) {
+  return UndoFlags::INSERT_TUPLE;
+ }
+ if (StringUtil::Equals(value, "DELETE_TUPLE")) {
+  return UndoFlags::DELETE_TUPLE;
+ }
+ if (StringUtil::Equals(value, "UPDATE_TUPLE")) {
+  return UndoFlags::UPDATE_TUPLE;
@@ -4423,3 +5996,3 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
+UnionInvalidReason EnumUtil::FromString<UnionInvalidReason>(const char *value) {
+ if (StringUtil::Equals(value, "VALID")) {
+  return UnionInvalidReason::VALID;
@@ -4427,2 +6000,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
+ if (StringUtil::Equals(value, "TAG_OUT_OF_RANGE")) {
+  return UnionInvalidReason::TAG_OUT_OF_RANGE;
@@ -4430,2 +6003,11 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+ if (StringUtil::Equals(value, "NO_MEMBERS")) {
+  return UnionInvalidReason::NO_MEMBERS;
+ }
+ if (StringUtil::Equals(value, "VALIDITY_OVERLAP")) {
+  return UnionInvalidReason::VALIDITY_OVERLAP;
+ }
+ if (StringUtil::Equals(value, "TAG_MISMATCH")) {
+  return UnionInvalidReason::TAG_MISMATCH;
+ }
+ if (StringUtil::Equals(value, "NULL_TAG")) {
+  return UnionInvalidReason::NULL_TAG;
@@ -4445,9 +6027,3 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
- }
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
- }
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+VectorAuxiliaryDataType EnumUtil::FromString<VectorAuxiliaryDataType>(const char *value) {
+ if (StringUtil::Equals(value, "ARROW_AUXILIARY")) {
+  return VectorAuxiliaryDataType::ARROW_AUXILIARY;
@@ -4485,3 +6061,3 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
+VectorBufferType EnumUtil::FromString<VectorBufferType>(const char *value) {
+ if (StringUtil::Equals(value, "STANDARD_BUFFER")) {
+  return VectorBufferType::STANDARD_BUFFER;
@@ -4489,2 +6065,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
+ if (StringUtil::Equals(value, "DICTIONARY_BUFFER")) {
+  return VectorBufferType::DICTIONARY_BUFFER;
@@ -4492,2 +6068,23 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+ if (StringUtil::Equals(value, "VECTOR_CHILD_BUFFER")) {
+  return VectorBufferType::VECTOR_CHILD_BUFFER;
+ }
+ if (StringUtil::Equals(value, "STRING_BUFFER")) {
+  return VectorBufferType::STRING_BUFFER;
+ }
+ if (StringUtil::Equals(value, "FSST_BUFFER")) {
+  return VectorBufferType::FSST_BUFFER;
+ }
+ if (StringUtil::Equals(value, "STRUCT_BUFFER")) {
+  return VectorBufferType::STRUCT_BUFFER;
+ }
+ if (StringUtil::Equals(value, "LIST_BUFFER")) {
+  return VectorBufferType::LIST_BUFFER;
+ }
+ if (StringUtil::Equals(value, "MANAGED_BUFFER")) {
+  return VectorBufferType::MANAGED_BUFFER;
+ }
+ if (StringUtil::Equals(value, "OPAQUE_BUFFER")) {
+  return VectorBufferType::OPAQUE_BUFFER;
+ }
+ if (StringUtil::Equals(value, "ARRAY_BUFFER")) {
+  return VectorBufferType::ARRAY_BUFFER;
@@ -4515,3 +6112,3 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
+VectorType EnumUtil::FromString<VectorType>(const char *value) {
+ if (StringUtil::Equals(value, "FLAT_VECTOR")) {
+  return VectorType::FLAT_VECTOR;
@@ -4519,2 +6116,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
+ if (StringUtil::Equals(value, "FSST_VECTOR")) {
+  return VectorType::FSST_VECTOR;
@@ -4522,2 +6119,8 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+ if (StringUtil::Equals(value, "CONSTANT_VECTOR")) {
+  return VectorType::CONSTANT_VECTOR;
+ }
+ if (StringUtil::Equals(value, "DICTIONARY_VECTOR")) {
+  return VectorType::DICTIONARY_VECTOR;
+ }
+ if (StringUtil::Equals(value, "SEQUENCE_VECTOR")) {
+  return VectorType::SEQUENCE_VECTOR;
@@ -4553,3 +6156,3 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
+VerificationType EnumUtil::FromString<VerificationType>(const char *value) {
+ if (StringUtil::Equals(value, "ORIGINAL")) {
+  return VerificationType::ORIGINAL;
@@ -4557,2 +6160,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
+ if (StringUtil::Equals(value, "COPIED")) {
+  return VerificationType::COPIED;
@@ -4560,2 +6163,20 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+ if (StringUtil::Equals(value, "DESERIALIZED")) {
+  return VerificationType::DESERIALIZED;
+ }
+ if (StringUtil::Equals(value, "PARSED")) {
+  return VerificationType::PARSED;
+ }
+ if (StringUtil::Equals(value, "UNOPTIMIZED")) {
+  return VerificationType::UNOPTIMIZED;
+ }
+ if (StringUtil::Equals(value, "NO_OPERATOR_CACHING")) {
+  return VerificationType::NO_OPERATOR_CACHING;
+ }
+ if (StringUtil::Equals(value, "PREPARED")) {
+  return VerificationType::PREPARED;
+ }
+ if (StringUtil::Equals(value, "EXTERNAL")) {
+  return VerificationType::EXTERNAL;
+ }
+ if (StringUtil::Equals(value, "INVALID")) {
+  return VerificationType::INVALID;
@@ -4579,3 +6200,3 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
+VerifyExistenceType EnumUtil::FromString<VerifyExistenceType>(const char *value) {
+ if (StringUtil::Equals(value, "APPEND")) {
+  return VerifyExistenceType::APPEND;
@@ -4583,2 +6204,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
+ if (StringUtil::Equals(value, "APPEND_FK")) {
+  return VerifyExistenceType::APPEND_FK;
@@ -4586,2 +6207,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+ if (StringUtil::Equals(value, "DELETE_FK")) {
+  return VerifyExistenceType::DELETE_FK;
@@ -4649,3 +6270,3 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
+WALType EnumUtil::FromString<WALType>(const char *value) {
+ if (StringUtil::Equals(value, "INVALID")) {
+  return WALType::INVALID;
@@ -4653,2 +6274,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
+ if (StringUtil::Equals(value, "CREATE_TABLE")) {
+  return WALType::CREATE_TABLE;
@@ -4656,2 +6277,68 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+ if (StringUtil::Equals(value, "DROP_TABLE")) {
+  return WALType::DROP_TABLE;
+ }
+ if (StringUtil::Equals(value, "CREATE_SCHEMA")) {
+  return WALType::CREATE_SCHEMA;
+ }
+ if (StringUtil::Equals(value, "DROP_SCHEMA")) {
+  return WALType::DROP_SCHEMA;
+ }
+ if (StringUtil::Equals(value, "CREATE_VIEW")) {
+  return WALType::CREATE_VIEW;
+ }
+ if (StringUtil::Equals(value, "DROP_VIEW")) {
+  return WALType::DROP_VIEW;
+ }
+ if (StringUtil::Equals(value, "CREATE_SEQUENCE")) {
+  return WALType::CREATE_SEQUENCE;
+ }
+ if (StringUtil::Equals(value, "DROP_SEQUENCE")) {
+  return WALType::DROP_SEQUENCE;
+ }
+ if (StringUtil::Equals(value, "SEQUENCE_VALUE")) {
+  return WALType::SEQUENCE_VALUE;
+ }
+ if (StringUtil::Equals(value, "CREATE_MACRO")) {
+  return WALType::CREATE_MACRO;
+ }
+ if (StringUtil::Equals(value, "DROP_MACRO")) {
+  return WALType::DROP_MACRO;
+ }
+ if (StringUtil::Equals(value, "CREATE_TYPE")) {
+  return WALType::CREATE_TYPE;
+ }
+ if (StringUtil::Equals(value, "DROP_TYPE")) {
+  return WALType::DROP_TYPE;
+ }
+ if (StringUtil::Equals(value, "ALTER_INFO")) {
+  return WALType::ALTER_INFO;
+ }
+ if (StringUtil::Equals(value, "CREATE_TABLE_MACRO")) {
+  return WALType::CREATE_TABLE_MACRO;
+ }
+ if (StringUtil::Equals(value, "DROP_TABLE_MACRO")) {
+  return WALType::DROP_TABLE_MACRO;
+ }
+ if (StringUtil::Equals(value, "CREATE_INDEX")) {
+  return WALType::CREATE_INDEX;
+ }
+ if (StringUtil::Equals(value, "DROP_INDEX")) {
+  return WALType::DROP_INDEX;
+ }
+ if (StringUtil::Equals(value, "USE_TABLE")) {
+  return WALType::USE_TABLE;
+ }
+ if (StringUtil::Equals(value, "INSERT_TUPLE")) {
+  return WALType::INSERT_TUPLE;
+ }
+ if (StringUtil::Equals(value, "DELETE_TUPLE")) {
+  return WALType::DELETE_TUPLE;
+ }
+ if (StringUtil::Equals(value, "UPDATE_TUPLE")) {
+  return WALType::UPDATE_TUPLE;
+ }
+ if (StringUtil::Equals(value, "CHECKPOINT")) {
+  return WALType::CHECKPOINT;
+ }
+ if (StringUtil::Equals(value, "WAL_FLUSH")) {
+  return WALType::WAL_FLUSH;
@@ -4675,3 +6362,3 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
+WindowAggregationMode EnumUtil::FromString<WindowAggregationMode>(const char *value) {
+ if (StringUtil::Equals(value, "WINDOW")) {
+  return WindowAggregationMode::WINDOW;
@@ -4679,2 +6366,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
+ if (StringUtil::Equals(value, "COMBINE")) {
+  return WindowAggregationMode::COMBINE;
@@ -4682,2 +6369,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+ if (StringUtil::Equals(value, "SEPARATE")) {
+  return WindowAggregationMode::SEPARATE;
@@ -4713,3 +6400,3 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
+WindowBoundary EnumUtil::FromString<WindowBoundary>(const char *value) {
+ if (StringUtil::Equals(value, "INVALID")) {
+  return WindowBoundary::INVALID;
@@ -4717,2 +6404,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
+ if (StringUtil::Equals(value, "UNBOUNDED_PRECEDING")) {
+  return WindowBoundary::UNBOUNDED_PRECEDING;
@@ -4720,2 +6407,20 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+ if (StringUtil::Equals(value, "UNBOUNDED_FOLLOWING")) {
+  return WindowBoundary::UNBOUNDED_FOLLOWING;
+ }
+ if (StringUtil::Equals(value, "CURRENT_ROW_RANGE")) {
+  return WindowBoundary::CURRENT_ROW_RANGE;
+ }
+ if (StringUtil::Equals(value, "CURRENT_ROW_ROWS")) {
+  return WindowBoundary::CURRENT_ROW_ROWS;
+ }
+ if (StringUtil::Equals(value, "EXPR_PRECEDING_ROWS")) {
+  return WindowBoundary::EXPR_PRECEDING_ROWS;
+ }
+ if (StringUtil::Equals(value, "EXPR_FOLLOWING_ROWS")) {
+  return WindowBoundary::EXPR_FOLLOWING_ROWS;
+ }
+ if (StringUtil::Equals(value, "EXPR_PRECEDING_RANGE")) {
+  return WindowBoundary::EXPR_PRECEDING_RANGE;
+ }
+ if (StringUtil::Equals(value, "EXPR_FOLLOWING_RANGE")) {
+  return WindowBoundary::EXPR_FOLLOWING_RANGE;
@@ -4741,3 +6446,3 @@ template<>
-WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "NO")) {
-  return WithinCollection::NO;
+WindowExcludeMode EnumUtil::FromString<WindowExcludeMode>(const char *value) {
+ if (StringUtil::Equals(value, "NO_OTHER")) {
+  return WindowExcludeMode::NO_OTHER;
@@ -4745,2 +6450,2 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "LIST")) {
-  return WithinCollection::LIST;
+ if (StringUtil::Equals(value, "CURRENT_ROW")) {
+  return WindowExcludeMode::CURRENT_ROW;
@@ -4748,2 +6453,5 @@ WithinCollection EnumUtil::FromString<WithinCollection>(const char *value) {
- if (StringUtil::Equals(value, "ARRAY")) {
-  return WithinCollection::ARRAY;
+ if (StringUtil::Equals(value, "GROUP")) {
+  return WindowExcludeMode::GROUP;
+ }
+ if (StringUtil::Equals(value, "TIES")) {
+  return WindowExcludeMode::TIES;
