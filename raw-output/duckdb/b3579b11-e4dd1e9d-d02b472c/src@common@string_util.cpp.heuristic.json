[
  {
    "code": [
      "bool StringUtil::CILessThan(const string &s1, const string &s2) {",
      "\tconst auto charmap = UpperFun::ascii_to_upper_map;",
      "",
      "\tunsigned char u1, u2;",
      "",
      "\tidx_t length = MinValue<idx_t>(s1.length(), s2.length());",
      "\tlength += s1.length() != s2.length();",
      "\tfor (idx_t i = 0; i < length; i++) {",
      "\t\tu1 = (unsigned char)s1[i];",
      "\t\tu2 = (unsigned char)s2[i];",
      "\t\tif (charmap[u1] != charmap[u2]) {",
      "\t\t\tbreak;",
      "\t\t}",
      "\t}",
      "\treturn (charmap[u1] - charmap[u2]) < 0;",
      "}",
      "bool StringUtil::CILessThan(const string &l1, const string &l2) {",
      "\tauto min_length = MinValue(l1.size(), l2.size());",
      "",
      "\tfor (idx_t c = 0; c < min_length; c++) {",
      "\t\tif (StringUtil::CharacterToLower(l1[c]) == StringUtil::CharacterToLower(l2[c])) {",
      "\t\t\tcontinue;",
      "\t\t}",
      "",
      "\t\treturn StringUtil::CharacterToLower(l1[c]) < StringUtil::CharacterToLower(l2[c]);",
      "\t}",
      "",
      "\treturn l1.size() < l2.size();",
      "}"
    ],
    "label": "",
    "index": 0,
    "confidence": 0.4,
    "desc": "List merge."
  }
]