--- a/./output/duckdb/b8717a28-d84e329b-4161f39c/src@planner@binder@tableref@bind_pivot.no_comments_merged.cpp
+++ b/./output/duckdb/b8717a28-d84e329b-4161f39c/src@planner@binder@tableref@bind_pivot.no_comments_truth.cpp
@@ -32 +31,0 @@ static void ConstructPivots(PivotRef &ref, vector<PivotValueElement> &pivot_valu
-<<<<<<< HEAD
@@ -34,23 +32,0 @@ static void ConstructPivots(PivotRef &ref, vector<PivotValueElement> &pivot_valu
-||||||| 4161f39ca1
-   auto column_ref = pivot.pivot_expressions[v]->Copy();
-   auto constant_value = make_unique<ConstantExpression>(value);
-   auto comp_expr = make_unique<ComparisonExpression>(ExpressionType::COMPARE_NOT_DISTINCT_FROM,
-                                                      std::move(column_ref), std::move(constant_value));
-   if (expr) {
-    expr = make_unique<ConjunctionExpression>(ExpressionType::CONJUNCTION_AND, std::move(expr),
-                                              std::move(comp_expr));
-   } else {
-    expr = std::move(comp_expr);
-   }
-=======
-   auto column_ref = pivot.pivot_expressions[v]->Copy();
-   auto constant_value = make_uniq<ConstantExpression>(value);
-   auto comp_expr = make_uniq<ComparisonExpression>(ExpressionType::COMPARE_NOT_DISTINCT_FROM,
-                                                    std::move(column_ref), std::move(constant_value));
-   if (expr) {
-    expr = make_uniq<ConjunctionExpression>(ExpressionType::CONJUNCTION_AND, std::move(expr),
-                                            std::move(comp_expr));
-   } else {
-    expr = std::move(comp_expr);
-   }
->>>>>>> d84e329b
@@ -97 +73 @@ static unique_ptr<SelectNode> PivotInitialAggregate(PivotBindState &bind_state,
- auto subquery_stage1 = make_unique<SelectNode>();
+ auto subquery_stage1 = make_uniq<SelectNode>();
@@ -107 +83 @@ static unique_ptr<SelectNode> PivotInitialAggregate(PivotBindState &bind_state,
-        make_unique<ConstantExpression>(Value::INTEGER(subquery_stage1->select_list.size() + 1)));
+        make_uniq<ConstantExpression>(Value::INTEGER(subquery_stage1->select_list.size() + 1)));
@@ -114 +90 @@ static unique_ptr<SelectNode> PivotInitialAggregate(PivotBindState &bind_state,
-       make_unique<ConstantExpression>(Value::INTEGER(subquery_stage1->select_list.size() + 1)));
+       make_uniq<ConstantExpression>(Value::INTEGER(subquery_stage1->select_list.size() + 1)));
@@ -134 +110 @@ static unique_ptr<SelectNode> PivotInitialAggregate(PivotBindState &bind_state,
-       make_unique<ConstantExpression>(Value::INTEGER(subquery_stage1->select_list.size() + 1)));
+       make_uniq<ConstantExpression>(Value::INTEGER(subquery_stage1->select_list.size() + 1)));
@@ -136 +112 @@ static unique_ptr<SelectNode> PivotInitialAggregate(PivotBindState &bind_state,
-   pivot_expr = make_unique<ColumnRefExpression>(std::move(pivot_alias));
+   pivot_expr = make_uniq<ColumnRefExpression>(std::move(pivot_alias));
@@ -151,2 +127,2 @@ static unique_ptr<SelectNode> PivotListAggregate(PivotBindState &bind_state, Piv
- auto subquery_stage2 = make_unique<SelectNode>();
- auto subquery_select = make_unique<SelectStatement>();
+ auto subquery_stage2 = make_uniq<SelectNode>();
+ auto subquery_select = make_uniq<SelectStatement>();
@@ -154 +130 @@ static unique_ptr<SelectNode> PivotListAggregate(PivotBindState &bind_state, Piv
- auto subquery_ref = make_unique<SubqueryRef>(std::move(subquery_select));
+ auto subquery_ref = make_uniq<SubqueryRef>(std::move(subquery_select));
@@ -157 +133 @@ static unique_ptr<SelectNode> PivotListAggregate(PivotBindState &bind_state, Piv
-      make_unique<ConstantExpression>(Value::INTEGER(subquery_stage2->select_list.size() + 1)));
+      make_uniq<ConstantExpression>(Value::INTEGER(subquery_stage2->select_list.size() + 1)));
@@ -166 +142 @@ static unique_ptr<SelectNode> PivotListAggregate(PivotBindState &bind_state, Piv
-  auto aggregate = make_unique<FunctionExpression>("list", std::move(list_children));
+  auto aggregate = make_uniq<FunctionExpression>("list", std::move(list_children));
@@ -174 +150 @@ static unique_ptr<SelectNode> PivotListAggregate(PivotBindState &bind_state, Piv
-   auto cast = make_unique<CastExpression>(LogicalType::VARCHAR, std::move(pivot_expr));
+   auto cast = make_uniq<CastExpression>(LogicalType::VARCHAR, std::move(pivot_expr));
@@ -177 +153 @@ static unique_ptr<SelectNode> PivotListAggregate(PivotBindState &bind_state, Piv
-   coalesce_children.push_back(make_unique<ConstantExpression>(Value("NULL")));
+   coalesce_children.push_back(make_uniq<ConstantExpression>(Value("NULL")));
@@ -179 +155 @@ static unique_ptr<SelectNode> PivotListAggregate(PivotBindState &bind_state, Piv
-       make_unique<OperatorExpression>(ExpressionType::OPERATOR_COALESCE, std::move(coalesce_children));
+       make_uniq<OperatorExpression>(ExpressionType::OPERATOR_COALESCE, std::move(coalesce_children));
@@ -185 +161 @@ static unique_ptr<SelectNode> PivotListAggregate(PivotBindState &bind_state, Piv
-    concat_children.push_back(make_unique<ConstantExpression>(Value("_")));
+    concat_children.push_back(make_uniq<ConstantExpression>(Value("_")));
@@ -187 +163 @@ static unique_ptr<SelectNode> PivotListAggregate(PivotBindState &bind_state, Piv
-    auto concat = make_unique<FunctionExpression>("concat", std::move(concat_children));
+    auto concat = make_uniq<FunctionExpression>("concat", std::move(concat_children));
@@ -194 +170 @@ static unique_ptr<SelectNode> PivotListAggregate(PivotBindState &bind_state, Piv
- auto aggregate = make_unique<FunctionExpression>("list", std::move(list_children));
+ auto aggregate = make_uniq<FunctionExpression>("list", std::move(list_children));
@@ -203,2 +179,2 @@ static unique_ptr<SelectNode> PivotFinalOperator(PivotBindState &bind_state, Piv
- auto final_pivot_operator = make_unique<SelectNode>();
- auto subquery_select = make_unique<SelectStatement>();
+ auto final_pivot_operator = make_uniq<SelectNode>();
+ auto subquery_select = make_uniq<SelectStatement>();
@@ -206,2 +182,2 @@ static unique_ptr<SelectNode> PivotFinalOperator(PivotBindState &bind_state, Piv
- auto subquery_ref = make_unique<SubqueryRef>(std::move(subquery_select));
- auto bound_pivot = make_unique<PivotRef>();
+ auto subquery_ref = make_uniq<SubqueryRef>(std::move(subquery_select));
+ auto bound_pivot = make_uniq<PivotRef>();
@@ -212 +188 @@ static unique_ptr<SelectNode> PivotFinalOperator(PivotBindState &bind_state, Piv
- final_pivot_operator->select_list.push_back(make_unique<StarExpression>());
+ final_pivot_operator->select_list.push_back(make_uniq<StarExpression>());
@@ -238 +214 @@ unique_ptr<BoundTableRef> Binder::BindBoundPivot(PivotRef &ref) {
- auto result = make_unique<BoundPivotRef>();
+ auto result = make_uniq<BoundPivotRef>();
@@ -300,6 +275,0 @@ unique_ptr<SelectNode> Binder::BindPivot(PivotRef &ref, vector<unique_ptr<Parsed
-<<<<<<< HEAD
-||||||| 4161f39ca1
- auto select_node = make_unique<SelectNode>();
-=======
- auto select_node = make_uniq<SelectNode>();
->>>>>>> d84e329b
@@ -354 +323,0 @@ unique_ptr<SelectNode> Binder::BindPivot(PivotRef &ref, vector<unique_ptr<Parsed
-<<<<<<< HEAD
@@ -362,49 +330,0 @@ unique_ptr<SelectNode> Binder::BindPivot(PivotRef &ref, vector<unique_ptr<Parsed
-||||||| 4161f39ca1
- if (ref.groups.empty()) {
-  for (auto &entry : all_columns) {
-   if (entry->type != ExpressionType::COLUMN_REF) {
-    throw InternalException("Unexpected child of pivot source - not a ColumnRef");
-   }
-   auto &columnref = (ColumnRefExpression &)*entry;
-   if (handled_columns.find(columnref.GetColumnName()) == handled_columns.end()) {
-    select_node->groups.group_expressions.push_back(
-        make_unique<ConstantExpression>(Value::INTEGER(select_node->select_list.size() + 1)));
-    select_node->select_list.push_back(std::move(entry));
-   }
-  }
- } else {
-  for (auto &row : ref.groups) {
-   select_node->groups.group_expressions.push_back(
-       make_unique<ConstantExpression>(Value::INTEGER(select_node->select_list.size() + 1)));
-   select_node->select_list.push_back(make_unique<ColumnRefExpression>(row));
-  }
- }
- for (auto &pivot_expr : pivot_expressions) {
-  select_node->select_list.push_back(std::move(pivot_expr));
- }
- return select_node;
-=======
- if (ref.groups.empty()) {
-  for (auto &entry : all_columns) {
-   if (entry->type != ExpressionType::COLUMN_REF) {
-    throw InternalException("Unexpected child of pivot source - not a ColumnRef");
-   }
-   auto &columnref = (ColumnRefExpression &)*entry;
-   if (handled_columns.find(columnref.GetColumnName()) == handled_columns.end()) {
-    select_node->groups.group_expressions.push_back(
-        make_uniq<ConstantExpression>(Value::INTEGER(select_node->select_list.size() + 1)));
-    select_node->select_list.push_back(std::move(entry));
-   }
-  }
- } else {
-  for (auto &row : ref.groups) {
-   select_node->groups.group_expressions.push_back(
-       make_uniq<ConstantExpression>(Value::INTEGER(select_node->select_list.size() + 1)));
-   select_node->select_list.push_back(make_uniq<ColumnRefExpression>(row));
-  }
- }
- for (auto &pivot_expr : pivot_expressions) {
-  select_node->select_list.push_back(std::move(pivot_expr));
- }
- return select_node;
->>>>>>> d84e329b
@@ -418,6 +337,0 @@ unique_ptr<SelectNode> Binder::BindUnpivot(Binder &child_binder, PivotRef &ref,
-<<<<<<< HEAD
- auto select_node = make_unique<SelectNode>();
- select_node->from_table = std::move(ref.source);
-||||||| 4161f39ca1
- auto select_node = make_unique<SelectNode>();
-=======
@@ -425 +339 @@ unique_ptr<SelectNode> Binder::BindUnpivot(Binder &child_binder, PivotRef &ref,
->>>>>>> d84e329b
+ select_node->from_table = std::move(ref.source);
@@ -542,7 +456 @@ unique_ptr<BoundTableRef> Binder::Bind(PivotRef &ref) {
-<<<<<<< HEAD
- star_binder->ExpandStarExpression(make_unique<StarExpression>(), all_columns);
-||||||| 4161f39ca1
- child_binder->ExpandStarExpression(make_unique<StarExpression>(), all_columns);
-=======
- child_binder->ExpandStarExpression(make_uniq<StarExpression>(), all_columns);
->>>>>>> d84e329b
+ star_binder->ExpandStarExpression(make_uniq<StarExpression>(), all_columns);
@@ -562,2 +470 @@ unique_ptr<BoundTableRef> Binder::Bind(PivotRef &ref) {
-<<<<<<< HEAD
- result = make_unique<BoundSubqueryRef>(std::move(child_binder), std::move(bound_select_node));
+ result = make_uniq<BoundSubqueryRef>(std::move(child_binder), std::move(bound_select_node));
@@ -566,9 +472,0 @@ unique_ptr<BoundTableRef> Binder::Bind(PivotRef &ref) {
-||||||| 4161f39ca1
- result = make_unique<BoundSubqueryRef>(std::move(child_binder), std::move(bound_select_node));
- auto alias = ref.alias.empty() ? "__unnamed_pivot" : ref.alias;
- SubqueryRef subquery_ref(nullptr, alias);
-=======
- result = make_uniq<BoundSubqueryRef>(std::move(child_binder), std::move(bound_select_node));
- auto alias = ref.alias.empty() ? "__unnamed_pivot" : ref.alias;
- SubqueryRef subquery_ref(nullptr, alias);
->>>>>>> d84e329b
