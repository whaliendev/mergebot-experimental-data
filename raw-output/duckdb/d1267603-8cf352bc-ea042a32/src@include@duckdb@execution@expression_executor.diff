diff --git a/output/duckdb/d1267603-8cf352bc-ea042a32/src@include@duckdb@execution@expression_executor.no_comments_mergebot.hpp b/output/duckdb/d1267603-8cf352bc-ea042a32/src@include@duckdb@execution@expression_executor.no_comments_truth.hpp
index 887e295..551d3df 100644
--- a/output/duckdb/d1267603-8cf352bc-ea042a32/src@include@duckdb@execution@expression_executor.no_comments_mergebot.hpp
+++ b/output/duckdb/d1267603-8cf352bc-ea042a32/src@include@duckdb@execution@expression_executor.no_comments_truth.hpp
@@ -2,2 +1,0 @@
-#include "duckdb/common/common.hpp"
-#include "duckdb/common/types/data_chunk.hpp"
@@ -10,15 +7,0 @@ class ExpressionExecutor {
-private:
- vector<unique_ptr<ExpressionExecutorState>> states;
-protected:
- void Initialize(Expression &expr, ExpressionExecutorState &state);
- static unique_ptr<ExpressionState> InitializeState(BoundReferenceExpression &expr, ExpressionExecutorState &state);
- static unique_ptr<ExpressionState> InitializeState(BoundCaseExpression &expr, ExpressionExecutorState &state);
- static unique_ptr<ExpressionState> InitializeState(BoundCastExpression &expr, ExpressionExecutorState &state);
- static unique_ptr<ExpressionState> InitializeState(CommonSubExpression &expr, ExpressionExecutorState &state);
- static unique_ptr<ExpressionState> InitializeState(BoundComparisonExpression &expr, ExpressionExecutorState &state);
- static unique_ptr<ExpressionState> InitializeState(BoundConjunctionExpression &expr, ExpressionExecutorState &state);
- static unique_ptr<ExpressionState> InitializeState(BoundConstantExpression &expr, ExpressionExecutorState &state);
- static unique_ptr<ExpressionState> InitializeState(BoundFunctionExpression &expr, ExpressionExecutorState &state);
- static unique_ptr<ExpressionState> InitializeState(BoundOperatorExpression &expr, ExpressionExecutorState &state);
- static unique_ptr<ExpressionState> InitializeState(BoundParameterExpression &expr, ExpressionExecutorState &state);
- void Execute(Expression &expr, ExpressionState *state, Vector &result);
@@ -31,0 +15,9 @@ public:
+ void Execute(DataChunk &input, DataChunk &result) {
+  Execute(&input, result);
+ }
+ void Execute(DataChunk &result) {
+  Execute(nullptr, result);
+ }
+ void ExecuteExpression(DataChunk &input, Vector &result);
+ void ExecuteExpression(Vector &result);
+ void ExecuteExpression(index_t expr_idx, Vector &result);
@@ -34 +26,4 @@ public:
- void SetChunk(DataChunk &chunk) {SetChunk(&chunk){
+ void SetChunk(DataChunk *chunk) {
+  this->chunk = chunk;
+ }
+ void SetChunk(DataChunk &chunk) {
@@ -39,0 +35,12 @@ protected:
+ void Initialize(Expression &expr, ExpressionExecutorState &state);
+ static unique_ptr<ExpressionState> InitializeState(BoundReferenceExpression &expr, ExpressionExecutorState &state);
+ static unique_ptr<ExpressionState> InitializeState(BoundCaseExpression &expr, ExpressionExecutorState &state);
+ static unique_ptr<ExpressionState> InitializeState(BoundCastExpression &expr, ExpressionExecutorState &state);
+ static unique_ptr<ExpressionState> InitializeState(CommonSubExpression &expr, ExpressionExecutorState &state);
+ static unique_ptr<ExpressionState> InitializeState(BoundComparisonExpression &expr, ExpressionExecutorState &state);
+ static unique_ptr<ExpressionState> InitializeState(BoundConjunctionExpression &expr, ExpressionExecutorState &state);
+ static unique_ptr<ExpressionState> InitializeState(BoundConstantExpression &expr, ExpressionExecutorState &state);
+ static unique_ptr<ExpressionState> InitializeState(BoundFunctionExpression &expr, ExpressionExecutorState &state);
+ static unique_ptr<ExpressionState> InitializeState(BoundOperatorExpression &expr, ExpressionExecutorState &state);
+ static unique_ptr<ExpressionState> InitializeState(BoundParameterExpression &expr, ExpressionExecutorState &state);
+ void Execute(Expression &expr, ExpressionState *state, Vector &result);
@@ -42,0 +50 @@ protected:
+ void Execute(CommonSubExpression &expr, ExpressionState *state, Vector &result);
@@ -45,9 +52,0 @@ protected:
- void Verify(Expression &expr, Vector &result);
-private:
- unordered_map<Expression *, unique_ptr<Vector>> cached_cse;
-public:
- void ExecuteExpression(DataChunk &input, Vector &result);
- void ExecuteExpression(Vector &result);
- void ExecuteExpression(index_t expr_idx, Vector &result);
-protected:
- void Execute(CommonSubExpression &expr, ExpressionState *state, Vector &result);
@@ -57,0 +57,4 @@ protected:
+ void Verify(Expression &expr, Vector &result);
+private:
+ vector<unique_ptr<ExpressionExecutorState>> states;
+ unordered_map<Expression *, unique_ptr<Vector>> cached_cse;
