[
  {
    "code": [
      "void ConfigHandler::setUploadStorage(const QString& uploadStorage)",
      "{",
      "    StorageManager storageManager;",
      "    if (storageManager.storageLocked().isEmpty()) {",
      "        m_settings.setValue(QStringLiteral(\"uploadStorage\"), uploadStorage);",
      "    } else {",
      "        m_settings.setValue(QStringLiteral(\"uploadStorage\"),",
      "                            storageManager.storageLocked());",
      "    }",
      "}",
      "const QString& ConfigHandler::uploadStorage()",
      "{",
      "    StorageManager storageManager;",
      "    // check for storage lock",
      "    if (!storageManager.storageLocked().isEmpty()) {",
      "        setUploadStorage(storageManager.storageLocked());",
      "    }",
      "",
      "    // get storage",
      "    m_strRes = m_settings.value(QStringLiteral(\"uploadStorage\")).toString();",
      "    if (m_strRes.isEmpty()) {",
      "        StorageManager storageManager;",
      "        m_strRes = storageManager.storageDefault();",
      "        setUploadStorage(m_strRes);",
      "    }",
      "    return m_strRes;",
      "}",
      "QString ConfigHandler::saveAfterCopyPathValue()",
      "{",
      "    return m_settings.value(QStringLiteral(\"saveAfterCopyPath\")).toString();",
      "}",
      "void ConfigHandler::setSaveAfterCopyPath(const QString& path)",
      "{",
      "    m_settings.setValue(QStringLiteral(\"saveAfterCopyPath\"), path);",
      "}"
    ],
    "label": "",
    "index": 0,
    "confidence": 0.4,
    "desc": "List merge."
  }
]