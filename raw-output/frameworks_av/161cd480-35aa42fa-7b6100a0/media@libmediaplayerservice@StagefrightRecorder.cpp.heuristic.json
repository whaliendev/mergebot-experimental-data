[
  {
    "code": [
      "status_t StagefrightRecorder::setParamSelfID(int32_t selfID) {",
      "    ALOGV(\"setParamSelfID: %x\", selfID);",
      "",
      "    mSelfID = selfID;",
      "    return OK;",
      "}",
      "",
      "status_t StagefrightRecorder::setParamVideoOpponentID(int32_t opponentID) {",
      "    mOpponentID = opponentID;",
      "    return OK;",
      "}",
      "",
      "status_t StagefrightRecorder::setParamPayloadType(int32_t payloadType) {",
      "    ALOGV(\"setParamPayloadType: %d\", payloadType);",
      "",
      "    mPayloadType = payloadType;",
      "",
      "    if (mStarted && mOutputFormat == OUTPUT_FORMAT_RTP_AVP) {",
      "        mWriter->updatePayloadType(mPayloadType);",
      "    }",
      "",
      "    return OK;",
      "}",
      "",
      "status_t StagefrightRecorder::setRTPCVOExtMap(int32_t extmap) {",
      "    ALOGV(\"setRtpCvoExtMap: %d\", extmap);",
      "",
      "    mRTPCVOExtMap = extmap;",
      "    return OK;",
      "}",
      "",
      "status_t StagefrightRecorder::setRTPCVODegrees(int32_t cvoDegrees) {",
      "    Mutex::Autolock autolock(mLock);",
      "    ALOGV(\"setRtpCvoDegrees: %d\", cvoDegrees);",
      "",
      "    mRTPCVODegrees = cvoDegrees;",
      "",
      "    if (mStarted && mOutputFormat == OUTPUT_FORMAT_RTP_AVP) {",
      "        mWriter->updateCVODegrees(mRTPCVODegrees);",
      "    }",
      "",
      "    return OK;",
      "}",
      "",
      "status_t StagefrightRecorder::setParamRtpDscp(int32_t dscp) {",
      "    ALOGV(\"setParamRtpDscp: %d\", dscp);",
      "",
      "    mRTPSockDscp = dscp;",
      "    return OK;",
      "}",
      "",
      "status_t StagefrightRecorder::setSocketNetwork(int64_t networkHandle) {",
      "    ALOGV(\"setSocketNetwork: %llu\", (unsigned long long) networkHandle);",
      "",
      "    mRTPSockNetwork = networkHandle;",
      "    if (mStarted && mOutputFormat == OUTPUT_FORMAT_RTP_AVP) {",
      "        mWriter->updateSocketNetwork(mRTPSockNetwork);",
      "    }",
      "    return OK;",
      "}",
      "",
      "status_t StagefrightRecorder::requestIDRFrame() {",
      "    status_t ret = BAD_VALUE;",
      "    if (mVideoEncoderSource != NULL) {",
      "        ret = mVideoEncoderSource->requestIDRFrame();",
      "    } else {",
      "        ALOGV(\"requestIDRFrame: Encoder not ready\");",
      "    }",
      "    return ret;",
      "}",
      ""
    ],
    "label": "",
    "index": 0,
    "confidence": 0.7,
    "desc": "Added code or method extraction, accept our side."
  },
  {
    "desc": "Added code or method extraction, accept our side.",
    "confidence": 0.7,
    "index": 1,
    "label": "",
    "code": [
      "    } else if (key == \"rtp-param-self-id\") {",
      "        int32_t selfID;",
      "        int64_t temp;",
      "        if (safe_strtoi64(value.string(), &temp)) {",
      "            selfID = static_cast<int32_t>(temp);",
      "            return setParamSelfID(selfID);",
      "        }",
      "    } else if (key == \"rtp-param-opponent-id\") {",
      "        int32_t opnId;",
      "        int64_t temp;",
      "        if (safe_strtoi64(value.string(), &temp)) {",
      "            opnId = static_cast<int32_t>(temp);",
      "            return setParamVideoOpponentID(opnId);",
      "        }",
      "    } else if (key == \"rtp-param-payload-type\") {",
      "        int32_t payloadType;",
      "        if (safe_strtoi32(value.string(), &payloadType)) {",
      "            return setParamPayloadType(payloadType);",
      "        }",
      "    } else if (key == \"rtp-param-ext-cvo-extmap\") {",
      "        int32_t extmap;",
      "        if (safe_strtoi32(value.string(), &extmap)) {",
      "            return setRTPCVOExtMap(extmap);",
      "        }",
      "    } else if (key == \"rtp-param-ext-cvo-degrees\") {",
      "        int32_t degrees;",
      "        if (safe_strtoi32(value.string(), &degrees)) {",
      "            return setRTPCVODegrees(degrees);",
      "        }",
      "    } else if (key == \"video-param-request-i-frame\") {",
      "        return requestIDRFrame();",
      "    } else if (key == \"rtp-param-set-socket-dscp\") {",
      "        int32_t dscp;",
      "        if (safe_strtoi32(value.string(), &dscp)) {",
      "            return setParamRtpDscp(dscp);",
      "        }",
      "    } else if (key == \"rtp-param-set-socket-network\") {",
      "        int64_t networkHandle;",
      "        if (safe_strtoi64(value.string(), &networkHandle)) {",
      "            return setSocketNetwork(networkHandle);",
      "        }"
    ]
  },
  {
    "code": [
      "            meta->setInt32(kKeySelfID, mSelfID);",
      "            meta->setInt32(kKeyPayloadType, mPayloadType);",
      "            meta->setInt64(kKeySocketNetwork, mRTPSockNetwork);",
      "            if (mRTPCVOExtMap > 0) {",
      "                meta->setInt32(kKeyRtpExtMap, mRTPCVOExtMap);",
      "                meta->setInt32(kKeyRtpCvoDegrees, mRTPCVODegrees);",
      "            }",
      "            if (mRTPSockDscp > 0) {",
      "                meta->setInt32(kKeyRtpDscp, mRTPSockDscp);",
      "            }",
      ""
    ],
    "label": "",
    "index": 2,
    "confidence": 0.7,
    "desc": "Added code or method extraction, accept our side."
  }
]