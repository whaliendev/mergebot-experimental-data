--- a/output/frameworks_av/161cd480-35aa42fa-7b6100a0/media@libmediaplayerservice@StagefrightRecorder.no_comments_mergebot.cpp
+++ b/output/frameworks_av/161cd480-35aa42fa-7b6100a0/media@libmediaplayerservice@StagefrightRecorder.no_comments_truth.cpp
@@ -772 +771,0 @@ status_t StagefrightRecorder::setParameter(
-<<<<<<< HEAD
@@ -814,10 +812,0 @@ status_t StagefrightRecorder::setParameter(
-||||||| 7b6100a0cd
-=======
-    } else if (key == "rtp-param-self-id") {
-        int32_t selfID;
-        int64_t temp;
-        if (safe_strtoi64(value.string(), &temp)) {
-            selfID = static_cast<int32_t>(temp);
-            return setParamSelfID(selfID);
-        }
->>>>>>> 35aa42fa
@@ -965 +953,0 @@ status_t StagefrightRecorder::start() {
-<<<<<<< HEAD
@@ -976,4 +963,0 @@ status_t StagefrightRecorder::start() {
-||||||| 7b6100a0cd
-=======
-            meta->setInt32(kKeySelfID, mSelfID);
->>>>>>> 35aa42fa
@@ -2012,66 +1996,5 @@ status_t StagefrightRecorder::getActiveMicrophones(
-status_t StagefrightRecorder::dump(
-        int fd, const Vector<String16>& args) const {
-    ALOGV("dump");
-    Mutex::Autolock autolock(mLock);
-    const size_t SIZE = 256;
-    char buffer[SIZE];
-    String8 result;
-    if (mWriter != 0) {
-        mWriter->dump(fd, args);
-    } else {
-        snprintf(buffer, SIZE, "   No file writer\n");
-        result.append(buffer);
-    }
-    snprintf(buffer, SIZE, "   Recorder: %p\n", this);
-    snprintf(buffer, SIZE, "   Output file (fd %d):\n", mOutputFd);
-    result.append(buffer);
-    snprintf(buffer, SIZE, "     File format: %d\n", mOutputFormat);
-    result.append(buffer);
-    snprintf(buffer, SIZE, "     Max file size (bytes): %" PRId64 "\n", mMaxFileSizeBytes);
-    result.append(buffer);
-    snprintf(buffer, SIZE, "     Max file duration (us): %" PRId64 "\n", mMaxFileDurationUs);
-    result.append(buffer);
-    snprintf(buffer, SIZE, "     File offset length (bits): %d\n", mUse64BitFileOffset? 64: 32);
-    result.append(buffer);
-    snprintf(buffer, SIZE, "     Interleave duration (us): %d\n", mInterleaveDurationUs);
-    result.append(buffer);
-    snprintf(buffer, SIZE, "     Progress notification: %" PRId64 " us\n", mTrackEveryTimeDurationUs);
-    result.append(buffer);
-    snprintf(buffer, SIZE, "   Audio\n");
-    result.append(buffer);
-    snprintf(buffer, SIZE, "     Source: %d\n", mAudioSource);
-    result.append(buffer);
-    snprintf(buffer, SIZE, "     Encoder: %d\n", mAudioEncoder);
-    result.append(buffer);
-    snprintf(buffer, SIZE, "     Bit rate (bps): %d\n", mAudioBitRate);
-    result.append(buffer);
-    snprintf(buffer, SIZE, "     Sampling rate (hz): %d\n", mSampleRate);
-    result.append(buffer);
-    snprintf(buffer, SIZE, "     Number of channels: %d\n", mAudioChannels);
-    result.append(buffer);
-    snprintf(buffer, SIZE, "     Max amplitude: %d\n", mAudioSourceNode == 0? 0: mAudioSourceNode->getMaxAmplitude());
-    result.append(buffer);
-    snprintf(buffer, SIZE, "   Video\n");
-    result.append(buffer);
-    snprintf(buffer, SIZE, "     Source: %d\n", mVideoSource);
-    result.append(buffer);
-    snprintf(buffer, SIZE, "     Camera Id: %d\n", mCameraId);
-    result.append(buffer);
-    snprintf(buffer, SIZE, "     Start time offset (ms): %d\n", mStartTimeOffsetMs);
-    result.append(buffer);
-    snprintf(buffer, SIZE, "     Encoder: %d\n", mVideoEncoder);
-    result.append(buffer);
-    snprintf(buffer, SIZE, "     Encoder profile: %d\n", mVideoEncoderProfile);
-    result.append(buffer);
-    snprintf(buffer, SIZE, "     Encoder level: %d\n", mVideoEncoderLevel);
-    result.append(buffer);
-    snprintf(buffer, SIZE, "     I frames interval (s): %d\n", mIFramesIntervalSec);
-    result.append(buffer);
-    snprintf(buffer, SIZE, "     Frame size (pixels): %dx%d\n", mVideoWidth, mVideoHeight);
-    result.append(buffer);
-    snprintf(buffer, SIZE, "     Frame rate (fps): %d\n", mFrameRate);
-    result.append(buffer);
-    snprintf(buffer, SIZE, "     Bit rate (bps): %d\n", mVideoBitRate);
-    result.append(buffer);
-    ::write(fd, result.string(), result.size());
-    return OK;
+status_t StagefrightRecorder::setPreferredMicrophoneDirection(audio_microphone_direction_t direction) {
+    ALOGV("setPreferredMicrophoneDirection(%d)", direction);
+    mSelectedMicDirection = direction;
+    if (mAudioSourceNode != 0) {
+        return mAudioSourceNode->setPreferredMicrophoneDirection(direction);
@@ -2079,66 +2002 @@ status_t StagefrightRecorder::dump(
-status_t StagefrightRecorder::dump(
-        int fd, const Vector<String16>& args) const {
-    ALOGV("dump");
-    Mutex::Autolock autolock(mLock);
-    const size_t SIZE = 256;
-    char buffer[SIZE];
-    String8 result;
-    if (mWriter != 0) {
-        mWriter->dump(fd, args);
-    } else {
-        snprintf(buffer, SIZE, "   No file writer\n");
-        result.append(buffer);
-    }
-    snprintf(buffer, SIZE, "   Recorder: %p\n", this);
-    snprintf(buffer, SIZE, "   Output file (fd %d):\n", mOutputFd);
-    result.append(buffer);
-    snprintf(buffer, SIZE, "     File format: %d\n", mOutputFormat);
-    result.append(buffer);
-    snprintf(buffer, SIZE, "     Max file size (bytes): %" PRId64 "\n", mMaxFileSizeBytes);
-    result.append(buffer);
-    snprintf(buffer, SIZE, "     Max file duration (us): %" PRId64 "\n", mMaxFileDurationUs);
-    result.append(buffer);
-    snprintf(buffer, SIZE, "     File offset length (bits): %d\n", mUse64BitFileOffset? 64: 32);
-    result.append(buffer);
-    snprintf(buffer, SIZE, "     Interleave duration (us): %d\n", mInterleaveDurationUs);
-    result.append(buffer);
-    snprintf(buffer, SIZE, "     Progress notification: %" PRId64 " us\n", mTrackEveryTimeDurationUs);
-    result.append(buffer);
-    snprintf(buffer, SIZE, "   Audio\n");
-    result.append(buffer);
-    snprintf(buffer, SIZE, "     Source: %d\n", mAudioSource);
-    result.append(buffer);
-    snprintf(buffer, SIZE, "     Encoder: %d\n", mAudioEncoder);
-    result.append(buffer);
-    snprintf(buffer, SIZE, "     Bit rate (bps): %d\n", mAudioBitRate);
-    result.append(buffer);
-    snprintf(buffer, SIZE, "     Sampling rate (hz): %d\n", mSampleRate);
-    result.append(buffer);
-    snprintf(buffer, SIZE, "     Number of channels: %d\n", mAudioChannels);
-    result.append(buffer);
-    snprintf(buffer, SIZE, "     Max amplitude: %d\n", mAudioSourceNode == 0? 0: mAudioSourceNode->getMaxAmplitude());
-    result.append(buffer);
-    snprintf(buffer, SIZE, "   Video\n");
-    result.append(buffer);
-    snprintf(buffer, SIZE, "     Source: %d\n", mVideoSource);
-    result.append(buffer);
-    snprintf(buffer, SIZE, "     Camera Id: %d\n", mCameraId);
-    result.append(buffer);
-    snprintf(buffer, SIZE, "     Start time offset (ms): %d\n", mStartTimeOffsetMs);
-    result.append(buffer);
-    snprintf(buffer, SIZE, "     Encoder: %d\n", mVideoEncoder);
-    result.append(buffer);
-    snprintf(buffer, SIZE, "     Encoder profile: %d\n", mVideoEncoderProfile);
-    result.append(buffer);
-    snprintf(buffer, SIZE, "     Encoder level: %d\n", mVideoEncoderLevel);
-    result.append(buffer);
-    snprintf(buffer, SIZE, "     I frames interval (s): %d\n", mIFramesIntervalSec);
-    result.append(buffer);
-    snprintf(buffer, SIZE, "     Frame size (pixels): %dx%d\n", mVideoWidth, mVideoHeight);
-    result.append(buffer);
-    snprintf(buffer, SIZE, "     Frame rate (fps): %d\n", mFrameRate);
-    result.append(buffer);
-    snprintf(buffer, SIZE, "     Bit rate (bps): %d\n", mVideoBitRate);
-    result.append(buffer);
-    ::write(fd, result.string(), result.size());
-    return OK;
+    return NO_INIT;
@@ -2146,66 +2004,13 @@ status_t StagefrightRecorder::dump(
-status_t StagefrightRecorder::dump(
-        int fd, const Vector<String16>& args) const {
-    ALOGV("dump");
-    Mutex::Autolock autolock(mLock);
-    const size_t SIZE = 256;
-    char buffer[SIZE];
-    String8 result;
-    if (mWriter != 0) {
-        mWriter->dump(fd, args);
-    } else {
-        snprintf(buffer, SIZE, "   No file writer\n");
-        result.append(buffer);
-    }
-    snprintf(buffer, SIZE, "   Recorder: %p\n", this);
-    snprintf(buffer, SIZE, "   Output file (fd %d):\n", mOutputFd);
-    result.append(buffer);
-    snprintf(buffer, SIZE, "     File format: %d\n", mOutputFormat);
-    result.append(buffer);
-    snprintf(buffer, SIZE, "     Max file size (bytes): %" PRId64 "\n", mMaxFileSizeBytes);
-    result.append(buffer);
-    snprintf(buffer, SIZE, "     Max file duration (us): %" PRId64 "\n", mMaxFileDurationUs);
-    result.append(buffer);
-    snprintf(buffer, SIZE, "     File offset length (bits): %d\n", mUse64BitFileOffset? 64: 32);
-    result.append(buffer);
-    snprintf(buffer, SIZE, "     Interleave duration (us): %d\n", mInterleaveDurationUs);
-    result.append(buffer);
-    snprintf(buffer, SIZE, "     Progress notification: %" PRId64 " us\n", mTrackEveryTimeDurationUs);
-    result.append(buffer);
-    snprintf(buffer, SIZE, "   Audio\n");
-    result.append(buffer);
-    snprintf(buffer, SIZE, "     Source: %d\n", mAudioSource);
-    result.append(buffer);
-    snprintf(buffer, SIZE, "     Encoder: %d\n", mAudioEncoder);
-    result.append(buffer);
-    snprintf(buffer, SIZE, "     Bit rate (bps): %d\n", mAudioBitRate);
-    result.append(buffer);
-    snprintf(buffer, SIZE, "     Sampling rate (hz): %d\n", mSampleRate);
-    result.append(buffer);
-    snprintf(buffer, SIZE, "     Number of channels: %d\n", mAudioChannels);
-    result.append(buffer);
-    snprintf(buffer, SIZE, "     Max amplitude: %d\n", mAudioSourceNode == 0? 0: mAudioSourceNode->getMaxAmplitude());
-    result.append(buffer);
-    snprintf(buffer, SIZE, "   Video\n");
-    result.append(buffer);
-    snprintf(buffer, SIZE, "     Source: %d\n", mVideoSource);
-    result.append(buffer);
-    snprintf(buffer, SIZE, "     Camera Id: %d\n", mCameraId);
-    result.append(buffer);
-    snprintf(buffer, SIZE, "     Start time offset (ms): %d\n", mStartTimeOffsetMs);
-    result.append(buffer);
-    snprintf(buffer, SIZE, "     Encoder: %d\n", mVideoEncoder);
-    result.append(buffer);
-    snprintf(buffer, SIZE, "     Encoder profile: %d\n", mVideoEncoderProfile);
-    result.append(buffer);
-    snprintf(buffer, SIZE, "     Encoder level: %d\n", mVideoEncoderLevel);
-    result.append(buffer);
-    snprintf(buffer, SIZE, "     I frames interval (s): %d\n", mIFramesIntervalSec);
-    result.append(buffer);
-    snprintf(buffer, SIZE, "     Frame size (pixels): %dx%d\n", mVideoWidth, mVideoHeight);
-    result.append(buffer);
-    snprintf(buffer, SIZE, "     Frame rate (fps): %d\n", mFrameRate);
-    result.append(buffer);
-    snprintf(buffer, SIZE, "     Bit rate (bps): %d\n", mVideoBitRate);
-    result.append(buffer);
-    ::write(fd, result.string(), result.size());
-    return OK;
+status_t StagefrightRecorder::setPreferredMicrophoneFieldDimension(float zoom) {
+    ALOGV("setPreferredMicrophoneFieldDimension(%f)", zoom);
+    mSelectedMicFieldDimension = zoom;
+    if (mAudioSourceNode != 0) {
+        return mAudioSourceNode->setPreferredMicrophoneFieldDimension(zoom);
+    }
+    return NO_INIT;
+}
+status_t StagefrightRecorder::getPortId(audio_port_handle_t *portId) const {
+    if (mAudioSourceNode != 0) {
+        return mAudioSourceNode->getPortId(portId);
+    }
+    return NO_INIT;
