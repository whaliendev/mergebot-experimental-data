[
  {
    "desc": "Declarations merge.",
    "confidence": 0.5,
    "index": 0,
    "label": "",
    "code": [
      "std::atomic<AudioHwDevice*> mPrimaryHardwareDev = nullptr;",
      "mutable audio_utils::mutex mHardwareMutex;",
      "DefaultKeyedVector<audio_module_handle_t, AudioHwDevice*> mAudioHwDevs{nullptr /* defValue */};"
    ]
  },
  {
    "code": [
      "    std::atomic<AudioHwDevice*> mPrimaryHardwareDev = nullptr;",
      "    DefaultKeyedVector<audio_module_handle_t, AudioHwDevice*> mAudioHwDevs",
      "            GUARDED_BY(hardwareMutex()) {nullptr /* defValue */};",
      "",
      "     const sp<DevicesFactoryHalInterface> mDevicesFactoryHal =",
      "             DevicesFactoryHalInterface::create();",
      "     /* const */ sp<DevicesFactoryHalCallback> mDevicesFactoryHalCallback;  // set onFirstRef()."
    ],
    "label": "",
    "index": 1,
    "confidence": 0.7,
    "desc": "Our side contains all the modifications, accept our side"
  },
  {
    "desc": "Declarations merge.",
    "confidence": 0.5,
    "index": 3,
    "label": "",
    "code": [
      "DefaultKeyedVector<pid_t, sp<NotificationClient>> mNotificationClients",
      "            GUARDED_BY(clientMutex());",
      "// member variables below are protected by mLock",
      "float mMasterVolume = 1.f;",
      "bool mMasterMute = false;",
      "float mMasterBalance = 0.f;",
      "// end of variables protected by mLock",
      "DefaultKeyedVector<audio_io_handle_t, sp<IAfRecordThread>> mRecordThreads;",
      "// protected by mClientLock",
      "DefaultKeyedVector< pid_t, sp<NotificationClient> >    mNotificationClients;"
    ]
  },
  {
    "desc": "Declarations merge.",
    "confidence": 0.5,
    "index": 4,
    "label": "",
    "code": [
      "std::atomic<bool> mIsLowRamDevice = true;",
      "bool mIsDeviceTypeKnown GUARDED_BY(mutex()) = false;",
      "int64_t mTotalMemory GUARDED_BY(mutex()) = 0;",
      "bool mIsDeviceTypeKnown = false;",
      "int64_t mTotalMemory = 0;",
      "std::atomic<size_t> mClientSharedHeapSize = kMinimumClientSharedHeapSizeBytes;"
    ]
  },
  {
    "code": [
      "nsecs_t mGlobalEffectEnableTime = 0;",
      "// when a global effect was last enabled",
      "nsecs_t mGlobalEffectEnableTime GUARDED_BY(mutex()) = 0;"
    ],
    "label": "",
    "index": 5,
    "confidence": 0.5,
    "desc": "Declarations merge."
  },
  {
    "code": [
      "bool mSystemReady GUARDED_BY(mutex()) = false;",
      "bool mSystemReady = false;",
      "std::atomic<bool> mAudioPolicyReady = false;"
    ],
    "label": "",
    "index": 6,
    "confidence": 0.5,
    "desc": "Declarations merge."
  }
]