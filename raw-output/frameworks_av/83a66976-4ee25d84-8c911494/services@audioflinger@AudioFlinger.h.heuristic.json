[
  {
    "desc": "De facto one-sided modification, accept their side.",
    "confidence": 0.7,
    "index": 2,
    "label": "",
    "code": [
      "    // below also used by IAfThreadCallback",
      "    audio_utils::mutex& mutex() const final",
      "            RETURN_CAPABILITY(audio_utils::AudioFlinger_Mutex)",
      "            EXCLUDES_BELOW_AudioFlinger_Mutex { return mMutex; }",
      "    sp<IAfThreadBase> checkOutputThread_l(audio_io_handle_t ioHandle) const final",
      "            REQUIRES(mutex());"
    ]
  },
  {
    "code": [],
    "label": "",
    "index": 8,
    "confidence": 0.7,
    "desc": "Single side deletion."
  },
  {
    "desc": "Declarations merge.",
    "confidence": 0.5,
    "index": 9,
    "label": "",
    "code": [
      "const sp<MediaLogNotifier> mMediaLogNotifier;",
      "const sp<MediaLogNotifier> mMediaLogNotifier = sp<MediaLogNotifier>::make();"
    ]
  },
  {
    "desc": "Declarations merge.",
    "confidence": 0.5,
    "index": 12,
    "label": "",
    "code": [
      "mutable audio_utils::mutex mMutex;",
      "mutable     Mutex                               mLock;"
    ]
  },
  {
    "code": [
      "mutable audio_utils::mutex mClientMutex;",
      "mutable Mutex mClientLock;"
    ],
    "label": "",
    "index": 13,
    "confidence": 0.5,
    "desc": "Declarations merge."
  },
  {
    "code": [
      "std::atomic<bool> mIsLowRamDevice;",
      "std::atomic<bool> mIsLowRamDevice = true;",
      "bool mIsDeviceTypeKnown GUARDED_BY(mutex()) = false;",
      "int64_t mTotalMemory GUARDED_BY(mutex()) = 0;",
      "std::atomic<size_t> mClientSharedHeapSize = kMinimumClientSharedHeapSizeBytes;",
      "bool    mIsDeviceTypeKnown;",
      "int64_t mTotalMemory;",
      "std::atomic<size_t> mClientSharedHeapSize;"
    ],
    "label": "",
    "index": 16,
    "confidence": 0.5,
    "desc": "Declarations merge."
  },
  {
    "code": [
      "sp<EffectsFactoryHalInterface> mEffectsFactoryHal;",
      "const sp<EffectsFactoryHalInterface> mEffectsFactoryHal =",
      "            audioflinger::EffectConfiguration::getEffectsFactoryHal();"
    ],
    "label": "",
    "index": 17,
    "confidence": 0.5,
    "desc": "Declarations merge."
  },
  {
    "code": [],
    "label": "",
    "index": 18,
    "confidence": 0.7,
    "desc": "Single side deletion."
  }
]