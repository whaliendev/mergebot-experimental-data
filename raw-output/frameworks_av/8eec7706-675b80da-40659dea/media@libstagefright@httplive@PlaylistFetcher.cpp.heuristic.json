[
  {
    "code": [
      "const int64_t PlaylistFetcher::kMaxMonitorDelayUs = 3000000ll;",
      "const int32_t PlaylistFetcher::kNumSkipFrames = 10;"
    ],
    "label": "",
    "index": 0,
    "confidence": 0.7,
    "desc": "Added code or method extraction, accept our side."
  },
  {
    "desc": "Added code or method extraction, accept our side.",
    "confidence": 0.7,
    "index": 1,
    "label": "",
    "code": [
      "status_t PlaylistFetcher::checkDecryptPadding(const sp<ABuffer> &buffer) {",
      "    status_t err;",
      "    AString method;",
      "    CHECK(buffer->meta()->findString(\"cipher-method\", &method));",
      "    if (method == \"NONE\") {",
      "        return OK;",
      "    }",
      "",
      "    uint8_t padding = 0;",
      "    if (buffer->size() > 0) {",
      "        padding = buffer->data()[buffer->size() - 1];",
      "    }",
      "",
      "    if (padding > 16) {",
      "        return ERROR_MALFORMED;",
      "    }",
      "",
      "    for (size_t i = buffer->size() - padding; i < padding; i++) {",
      "        if (buffer->data()[i] != padding) {",
      "            return ERROR_MALFORMED;",
      "        }",
      "    }",
      "",
      "    buffer->setRange(buffer->offset(), buffer->size() - padding);",
      "    return OK;",
      "}",
      "",
      "void PlaylistFetcher::postMonitorQueue(int64_t delayUs, int64_t minDelayUs) {",
      "    int64_t maxDelayUs = delayUsToRefreshPlaylist();",
      "    if (maxDelayUs < minDelayUs) {",
      "        maxDelayUs = minDelayUs;",
      "    }",
      "    if (delayUs > maxDelayUs) {",
      "        ALOGV(\"Need to refresh playlist in %lld\", maxDelayUs);",
      "        delayUs = maxDelayUs;",
      "    }"
    ]
  },
  {
    "code": [
      "        mPrepared = false;",
      "    }",
      "",
      "    if (startSeqNumberHint >= 0) {",
      "        mSeqNumber = startSeqNumberHint;"
    ],
    "label": "",
    "index": 2,
    "confidence": 0.7,
    "desc": "Added code or method extraction, accept our side."
  }
]