[
  {
    "desc": "Our side contains all the modifications, accept our side",
    "confidence": 0.7,
    "index": 0,
    "label": "",
    "code": [
      "    static const int64_t kMaxMonitorDelayUs;",
      "    static const int32_t kNumSkipFrames;"
    ]
  },
  {
    "code": [
      "    // Set first to true if decrypting the first segment of a playlist segment. When",
      "    // first is true, reset the initialization vector based on the available",
      "    // information in the manifest; otherwise, use the initialization vector as",
      "    // updated by the last call to AES_cbc_encrypt.",
      "    //",
      "    // For the input to decrypt correctly, decryptBuffer must be called on",
      "    // consecutive byte ranges on block boundaries, e.g. 0..15, 16..47, 48..63,",
      "    // and so on.",
      "    status_t decryptBuffer(",
      "            size_t playlistIndex, const sp<ABuffer> &buffer,",
      "            bool first = true);",
      "    status_t checkDecryptPadding(const sp<ABuffer> &buffer);",
      "",
      "    void postMonitorQueue(int64_t delayUs = 0, int64_t minDelayUs = 0);"
    ],
    "label": "",
    "index": 1,
    "confidence": 0.7,
    "desc": "Our side contains all the modifications, accept our side"
  }
]