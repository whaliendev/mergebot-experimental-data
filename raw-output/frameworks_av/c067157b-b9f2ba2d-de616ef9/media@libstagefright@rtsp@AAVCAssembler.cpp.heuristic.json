[
  {
    "code": [
      "    uint32_t rtpTime;",
      "    CHECK(buffer->meta()->findInt32(\"rtp-time\", (int32_t *)&rtpTime));",
      "    buffer->meta()->setObject(\"source\", source);",
      ""
    ],
    "label": "",
    "index": 1,
    "confidence": 0.7,
    "desc": "Added code or method extraction, accept our side."
  },
  {
    "desc": "List merge.",
    "confidence": 0.4,
    "index": 2,
    "label": "",
    "code": [
      "void AAVCAssembler::checkSpsUpdated(const sp<ABuffer> &buffer) {",
      "    const uint8_t *data = buffer->data();",
      "    unsigned nalType = data[0] & 0x1f;",
      "    if (nalType == 0x7) {",
      "        int32_t width = 0, height = 0;",
      "        FindAVCDimensions(buffer, &width, &height);",
      "        if (width != mWidth || height != mHeight) {",
      "            mFirstIFrameProvided = false;",
      "            mWidth = width;",
      "            mHeight = height;",
      "            ALOGD(\"found a new resolution (%u x %u)\", mWidth, mHeight);",
      "        }",
      "    }",
      "}",
      "void AAVCAssembler::checkIFrameProvided(const sp<ABuffer> &buffer) {",
      "    if (buffer->size() == 0) {",
      "        return;",
      "    }",
      "    const uint8_t *data = buffer->data();",
      "    unsigned nalType = data[0] & 0x1f;",
      "    if (nalType == 0x5) {",
      "        mLastIFrameProvidedAtMs = ALooper::GetNowUs() / 1000;",
      "        if (!mFirstIFrameProvided) {",
      "            mFirstIFrameProvided = true;",
      "",
      "            uint32_t rtpTime;",
      "            CHECK(buffer->meta()->findInt32(\"rtp-time\", (int32_t *)&rtpTime));",
      "            ALOGD(\"got First I-frame to be decoded. rtpTime=%d, size=%zu\", rtpTime, buffer->size());",
      "        }",
      "    }",
      "}",
      "void AAVCAssembler::checkIFrameProvided(const sp<ABuffer> &buffer) {",
      "    if (buffer->size() == 0) {",
      "        return;",
      "    }",
      "    const uint8_t *data = buffer->data();",
      "    unsigned nalType = data[0] & 0x1f;",
      "    if (nalType == 0x5) {",
      "        mFirstIFrameProvided = true;",
      "        mLastIFrameProvidedAtMs = ALooper::GetNowUs() / 1000;",
      "",
      "        uint32_t rtpTime;",
      "        CHECK(buffer->meta()->findInt32(\"rtp-time\", (int32_t *)&rtpTime));",
      "        ALOGD(\"got First I-frame to be decoded. rtpTime=%u, size=%zu\", rtpTime, buffer->size());",
      "    }",
      "}",
      "bool AAVCAssembler::dropFramesUntilIframe(const sp<ABuffer> &buffer) {",
      "    const uint8_t *data = buffer->data();",
      "    unsigned nalType = data[0] & 0x1f;",
      "    if (!mFirstIFrameProvided && nalType < 0x5) {",
      "        return true;",
      "    }",
      "",
      "    return false;",
      "}"
    ]
  },
  {
    "code": [
      "    checkSpsUpdated(buffer);",
      "    checkIFrameProvided(buffer);",
      ""
    ],
    "label": "",
    "index": 3,
    "confidence": 0.7,
    "desc": "Added code or method extraction, accept our side."
  }
]