[
  {
    "code": [
      "void ARTPSource::setMinMaxBitrate(int32_t min, int32_t max) {",
      "    mQualManager.setMinMaxBitrate(min, max);",
      "}",
      "void ARTPSource::setJbTime(const uint32_t jbTimeMs) {",
      "    mJbTimeMs = jbTimeMs;",
      "}",
      "void ARTPSource::setPeriodicFIR(bool enable) {",
      "    ALOGD(\"setPeriodicFIR %d\", enable);",
      "    mIssueFIRRequests = enable;",
      "}",
      "void ARTPSource::notifyPktInfo(int32_t bitrate, int64_t /*time*/) {",
      "    sp<AMessage> notify = mNotify->dup();",
      "    notify->setInt32(\"rtcp-event\", 1);",
      "    notify->setInt32(\"payload-type\", 102);",
      "    notify->setInt32(\"feedback-type\", 0);",
      "    // sending target bitrate up to application to share rtp quality.",
      "    notify->setInt32(\"bit-rate\", bitrate);",
      "    notify->setInt32(\"highest-seq-num\", mHighestSeqNumber);",
      "    notify->setInt32(\"base-seq-num\", mBaseSeqNumber);",
      "    notify->setInt32(\"prev-expected\", mPrevExpected);",
      "    notify->setInt32(\"num-buf-recv\", mNumBuffersReceived);",
      "    notify->setInt32(\"prev-num-buf-recv\", mPrevNumBuffersReceived);",
      "    notify->post();",
      "",
      "    uint32_t expected = mHighestSeqNumber - mBaseSeqNumber + 1;",
      "    mPrevExpected = expected;",
      "    mPrevNumBuffersReceived = mNumBuffersReceived;",
      "}",
      "void ARTPSource::onIssueFIRByAssembler() {",
      "    mIssueFIRByAssembler = true;",
      "}",
      "bool ARTPSource::isNeedToReport() {",
      "    int64_t intervalReceived = mNumBuffersReceived - mPrevNumBuffersReceived;",
      "    return (intervalReceived > 0) ? true : false;",
      "}"
    ],
    "label": "",
    "index": 1,
    "confidence": 0.4,
    "desc": "List merge."
  }
]