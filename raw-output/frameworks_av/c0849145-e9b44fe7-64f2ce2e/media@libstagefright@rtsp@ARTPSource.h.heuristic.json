[
  {
    "code": [
      "void addTMMBR(const sp<ABuffer> &buffer, int32_t targetBitrate);",
      "void addTMMBR(const sp<ABuffer> &buffer);",
      "int addNACK(const sp<ABuffer> &buffer);",
      "void setSeqNumToNACK(uint16_t seqNum, uint16_t mask, uint16_t nowJitterHeadSeqNum);",
      "uint32_t getSelfID();"
    ],
    "label": "",
    "index": 0,
    "confidence": 0.5,
    "desc": "Declarations merge."
  },
  {
    "desc": "Declarations merge.",
    "confidence": 0.5,
    "index": 1,
    "label": "",
    "code": [
      "void setMinMaxBitrate(int32_t min, int32_t max);",
      "void setJbTime(const uint32_t jbTimeMs);",
      "void setPeriodicFIR(bool enable);",
      "void notifyPktInfo(int32_t bitrate, int64_t time);",
      "bool isNeedToReport();",
      "// FIR needs to be sent by missing packet or broken video image.",
      "void onIssueFIRByAssembler();"
    ]
  },
  {
    "code": [
      "    struct QualManager {",
      "        QualManager() : mMinBitrate(-1), mMaxBitrate(-1), mTargetBitrate(-1) {};",
      "",
      "        int32_t mMinBitrate;",
      "        int32_t mMaxBitrate;",
      "        int32_t mBitrateStep;",
      "",
      "        int32_t mTargetBitrate;",
      "",
      "        void setTargetBitrate(uint8_t fraction) {",
      "            if (fraction <= (256 * 2 /100)) {           // loss less than 2%",
      "                mTargetBitrate += mBitrateStep;",
      "            } else if (fraction > (256 * 5 / 100)) {    // loss more than 5%",
      "                mTargetBitrate -= mBitrateStep;",
      "            }",
      "",
      "            if (mTargetBitrate > mMaxBitrate)",
      "                mTargetBitrate = mMaxBitrate;",
      "            else if (mTargetBitrate < mMinBitrate)",
      "                mTargetBitrate = mMinBitrate;",
      "        };",
      "",
      "        void setMinMaxBitrate(int32_t min, int32_t max) {",
      "            mMinBitrate = min;",
      "            mMaxBitrate = max;",
      "            mBitrateStep = (max - min) / 8;",
      "            mTargetBitrate = min;",
      "        };",
      "    } mQualManager;",
      ""
    ],
    "label": "",
    "index": 2,
    "confidence": 0.7,
    "desc": "De facto one-sided modification, accept their side."
  }
]