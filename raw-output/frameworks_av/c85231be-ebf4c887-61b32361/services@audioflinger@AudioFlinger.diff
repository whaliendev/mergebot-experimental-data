diff --git a/output/frameworks_av/c85231be-ebf4c887-61b32361/services@audioflinger@AudioFlinger.no_comments_mergebot.h b/output/frameworks_av/c85231be-ebf4c887-61b32361/services@audioflinger@AudioFlinger.no_comments_truth.h
index 1f780b0..746b17f 100644
--- a/output/frameworks_av/c85231be-ebf4c887-61b32361/services@audioflinger@AudioFlinger.no_comments_mergebot.h
+++ b/output/frameworks_av/c85231be-ebf4c887-61b32361/services@audioflinger@AudioFlinger.no_comments_truth.h
@@ -2,3 +1,0 @@
-#include "Configuration.h"
-#include "ResamplerBufferProvider.h"
-#include "IAfPatchPanel.h"
@@ -15,26 +11,0 @@
-#include <audio_utils/LinearMap.h>
-#include <audio_utils/TimestampVerifier.h>
-#include <sounddose/SoundDoseManager.h>
-#include <timing/MonotonicFrameCounter.h>
-#include <timing/SyncEvent.h>
-#include <timing/SynchronizedRecordState.h>
-#include <datapath/AudioHwDevice.h>
-#include <datapath/AudioStreamIn.h>
-#include <datapath/AudioStreamOut.h>
-#include <datapath/SpdifStreamOut.h>
-#include <datapath/ThreadMetrics.h>
-#include <datapath/TrackMetrics.h>
-#include <datapath/VolumeInterface.h>
-#include <fastpath/FastCapture.h>
-#include <fastpath/FastMixer.h>
-#include <media/nbaio/NBAIO.h>
-#include <android/os/IPowerManager.h>
-#include <media/nblog/NBLog.h>
-#include <private/media/AudioEffectShared.h>
-#include <private/media/AudioTrackShared.h>
-#include <vibrator/ExternalVibration.h>
-#include <vibrator/ExternalVibrationUtils.h>
-#include "android/media/BnAudioRecord.h"
-#include "android/media/BnEffect.h"
-#include <audio_utils/MelAggregator.h>
-#include <audio_utils/MelProcessor.h>
@@ -43,30 +13,0 @@
-#include <media/AudioSystem.h>
-#include <media/AudioTrack.h>
-#include <media/MmapStreamInterface.h>
-#include <mediautils/SharedMemoryAllocator.h>
-#include <mediautils/ThreadSnapshot.h>
-#include <afutils/AllocatorFactory.h>
-#include <afutils/AudioWatchdog.h>
-#include <afutils/NBAIO_Tee.h>
-#include <audio_utils/clock.h>
-#include <media/MmapStreamCallback.h>
-#include <utils/Errors.h>
-#include <utils/threads.h>
-#include <utils/SortedVector.h>
-#include <utils/TypeHelpers.h>
-#include <utils/Vector.h>
-#include <binder/AppOpsManager.h>
-#include <binder/BinderService.h>
-#include <binder/IAppOpsCallback.h>
-#include <binder/MemoryDealer.h>
-#include <system/audio.h>
-#include <system/audio_policy.h>
-#include <media/audiohal/EffectBufferHalInterface.h>
-#include <media/audiohal/StreamHalInterface.h>
-#include <media/AudioBufferProvider.h>
-#include <media/AudioContainers.h>
-#include <media/AudioDeviceTypeAddr.h>
-#include <media/AudioMixer.h>
-#include <media/DeviceDescriptorBase.h>
-#include <media/ExtendedAudioBufferProvider.h>
-#include <media/VolumeShaper.h>
@@ -80,18 +20,0 @@
-#include <mutex>
-#include <chrono>
-#include <numeric>
-#include <deque>
-#include <string>
-#include <vector>
-#include <stdint.h>
-#include <sys/types.h>
-#include <limits.h>
-#include <android/media/BnAudioTrack.h>
-#include <android/media/IAudioFlingerClient.h>
-#include <android/media/IAudioTrackCallback.h>
-#include <android/os/BnExternalVibrationController.h>
-#include <android/content/AttributionSourceState.h>
-#include <android-base/macros.h>
-#include <cutils/atomic.h>
-#include <cutils/compiler.h>
-#include <cutils/properties.h>
@@ -114,23 +37,3 @@ public:
-static void instantiate()private:
-    std::map<media::audio::common::AudioMMapPolicyType,
-             std::vector<media::audio::common::AudioMMapPolicyInfo>> mPolicyInfos;
-    audio_utils::mutex& hardwareMutex() const { return mHardwareMutex; }
-    mutable audio_utils::mutex mHardwareMutex;
-void dumpInternals_l(int fd, const Vector<String16>& args) status_t moveEffectChain_ll(audio_session_t sessionId,
-            IAfPlaybackThread* srcThread, IAfPlaybackThread* dstThread) final
-bool streamMute_l(audio_stream_type_t stream) const finalconst DefaultKeyedVector<audio_module_handle_t, AudioHwDevice*>&
-            getAudioHwDevs_l() const finalsp<IAfThreadBase> openInput_l(audio_module_handle_t module,
-            audio_io_handle_t* input,
-            audio_config_t* config,
-            audio_devices_t device,
-            const char* address,
-            audio_source_t source,
-            audio_input_flags_t flags,
-            audio_devices_t outputDevice,
-            const String8& outputDeviceAddress) final
-    audio_utils::mutex& mutex() const final
-                                                              () = delete;{
-                                                              return mStreamTypes[stream].mute;
-                                                              }
-    audio_utils::mutex& clientMutex() const final
-    status_t dump(int fd, const Vector<String16>& args) final
+    static void instantiate() ANDROID_API;
+private:
+    status_t dump(int fd, const Vector<String16>& args) final EXCLUDES_AudioFlinger_Mutex;
@@ -138 +41 @@ bool streamMute_l(audio_stream_type_t stream) const finalconst DefaultKeyedVecto
-            media::CreateTrackResponse& output) final
+            media::CreateTrackResponse& output) final EXCLUDES_AudioFlinger_Mutex;
@@ -140,12 +43,12 @@ bool streamMute_l(audio_stream_type_t stream) const finalconst DefaultKeyedVecto
-            media::CreateRecordResponse& output) final
-    uint32_t sampleRate(audio_io_handle_t ioHandle) const final
-    audio_format_t format(audio_io_handle_t output) const final
-    size_t frameCount(audio_io_handle_t ioHandle) const final
-    size_t frameCountHAL(audio_io_handle_t ioHandle) const final
-    uint32_t latency(audio_io_handle_t output) const final
-    status_t setMasterVolume(float value) final
-    status_t setMasterMute(bool muted) final
-    float masterVolume() const final
-    bool masterMute() const final
-    status_t setMasterBalance(float balance) final
-    status_t getMasterBalance(float* balance) const final
+            media::CreateRecordResponse& output) final EXCLUDES_AudioFlinger_Mutex;
+    uint32_t sampleRate(audio_io_handle_t ioHandle) const final EXCLUDES_AudioFlinger_Mutex;
+    audio_format_t format(audio_io_handle_t output) const final EXCLUDES_AudioFlinger_Mutex;
+    size_t frameCount(audio_io_handle_t ioHandle) const final EXCLUDES_AudioFlinger_Mutex;
+    size_t frameCountHAL(audio_io_handle_t ioHandle) const final EXCLUDES_AudioFlinger_Mutex;
+    uint32_t latency(audio_io_handle_t output) const final EXCLUDES_AudioFlinger_Mutex;
+    status_t setMasterVolume(float value) final EXCLUDES_AudioFlinger_Mutex;
+    status_t setMasterMute(bool muted) final EXCLUDES_AudioFlinger_Mutex;
+    float masterVolume() const final EXCLUDES_AudioFlinger_Mutex;
+    bool masterMute() const final EXCLUDES_AudioFlinger_Mutex;
+    status_t setMasterBalance(float balance) final EXCLUDES_AudioFlinger_Mutex;
+    status_t getMasterBalance(float* balance) const final EXCLUDES_AudioFlinger_Mutex;
@@ -153 +56 @@ bool streamMute_l(audio_stream_type_t stream) const finalconst DefaultKeyedVecto
-            audio_io_handle_t output) final
+            audio_io_handle_t output) final EXCLUDES_AudioFlinger_Mutex;
@@ -154,0 +58 @@ bool streamMute_l(audio_stream_type_t stream) const finalconst DefaultKeyedVecto
+            EXCLUDES_AudioFlinger_Mutex;
@@ -156,5 +60,5 @@ bool streamMute_l(audio_stream_type_t stream) const finalconst DefaultKeyedVecto
-            audio_io_handle_t output) const final
-    bool streamMute(audio_stream_type_t stream) const final
-    status_t setMode(audio_mode_t mode) final
-    status_t setMicMute(bool state) final
-    bool getMicMute() const final
+            audio_io_handle_t output) const final EXCLUDES_AudioFlinger_Mutex;
+    bool streamMute(audio_stream_type_t stream) const final EXCLUDES_AudioFlinger_Mutex;
+    status_t setMode(audio_mode_t mode) final EXCLUDES_AudioFlinger_Mutex;
+    status_t setMicMute(bool state) final EXCLUDES_AudioFlinger_Mutex;
+    bool getMicMute() const final EXCLUDES_AudioFlinger_Mutex;
@@ -161,0 +66 @@ bool streamMute_l(audio_stream_type_t stream) const finalconst DefaultKeyedVecto
+            EXCLUDES_AudioFlinger_Mutex;
@@ -162,0 +68 @@ bool streamMute_l(audio_stream_type_t stream) const finalconst DefaultKeyedVecto
+            EXCLUDES_AudioFlinger_Mutex;
@@ -163,0 +70 @@ bool streamMute_l(audio_stream_type_t stream) const finalconst DefaultKeyedVecto
+            EXCLUDES_AudioFlinger_Mutex;
@@ -164,0 +72 @@ bool streamMute_l(audio_stream_type_t stream) const finalconst DefaultKeyedVecto
+            EXCLUDES_AudioFlinger_Mutex;
@@ -166 +74 @@ bool streamMute_l(audio_stream_type_t stream) const finalconst DefaultKeyedVecto
-            audio_channel_mask_t channelMask) const final
+            audio_channel_mask_t channelMask) const final EXCLUDES_AudioFlinger_Mutex;
@@ -168 +76 @@ bool streamMute_l(audio_stream_type_t stream) const finalconst DefaultKeyedVecto
-            media::OpenOutputResponse* response) final
+            media::OpenOutputResponse* response) final EXCLUDES_AudioFlinger_Mutex;
@@ -170,4 +78,4 @@ bool streamMute_l(audio_stream_type_t stream) const finalconst DefaultKeyedVecto
-            audio_io_handle_t output2) final
-    status_t closeOutput(audio_io_handle_t output) final
-    status_t suspendOutput(audio_io_handle_t output) final
-    status_t restoreOutput(audio_io_handle_t output) final
+            audio_io_handle_t output2) final EXCLUDES_AudioFlinger_Mutex;
+    status_t closeOutput(audio_io_handle_t output) final EXCLUDES_AudioFlinger_Mutex;
+    status_t suspendOutput(audio_io_handle_t output) final EXCLUDES_AudioFlinger_Mutex;
+    status_t restoreOutput(audio_io_handle_t output) final EXCLUDES_AudioFlinger_Mutex;
@@ -175,3 +83,3 @@ bool streamMute_l(audio_stream_type_t stream) const finalconst DefaultKeyedVecto
-            media::OpenInputResponse* response) final
-    status_t closeInput(audio_io_handle_t input) final
-    status_t setVoiceVolume(float volume) final
+            media::OpenInputResponse* response) final EXCLUDES_AudioFlinger_Mutex;
+    status_t closeInput(audio_io_handle_t input) final EXCLUDES_AudioFlinger_Mutex;
+    status_t setVoiceVolume(float volume) final EXCLUDES_AudioFlinger_Mutex;
@@ -179 +87 @@ bool streamMute_l(audio_stream_type_t stream) const finalconst DefaultKeyedVecto
-            audio_io_handle_t output) const final
+            audio_io_handle_t output) const final EXCLUDES_AudioFlinger_Mutex;
@@ -180,0 +89 @@ bool streamMute_l(audio_stream_type_t stream) const finalconst DefaultKeyedVecto
+            EXCLUDES_AudioFlinger_Mutex;
@@ -181,0 +91 @@ bool streamMute_l(audio_stream_type_t stream) const finalconst DefaultKeyedVecto
+            EXCLUDES_AudioFlinger_Mutex;
@@ -182,0 +93 @@ bool streamMute_l(audio_stream_type_t stream) const finalconst DefaultKeyedVecto
+            EXCLUDES_AudioFlinger_Mutex;
@@ -184 +95,2 @@ bool streamMute_l(audio_stream_type_t stream) const finalconst DefaultKeyedVecto
-    status_t queryNumberEffects(uint32_t* numEffects) const final
+            EXCLUDES_AudioFlinger_Mutex;
+    status_t queryNumberEffects(uint32_t* numEffects) const final EXCLUDES_AudioFlinger_Mutex;
@@ -185,0 +98 @@ bool streamMute_l(audio_stream_type_t stream) const finalconst DefaultKeyedVecto
+            EXCLUDES_AudioFlinger_Mutex;
@@ -189 +102 @@ bool streamMute_l(audio_stream_type_t stream) const finalconst DefaultKeyedVecto
-            effect_descriptor_t* descriptor) const final
+            effect_descriptor_t* descriptor) const final EXCLUDES_AudioFlinger_Mutex;
@@ -191 +104 @@ bool streamMute_l(audio_stream_type_t stream) const finalconst DefaultKeyedVecto
-            media::CreateEffectResponse* response) final
+            media::CreateEffectResponse* response) final EXCLUDES_AudioFlinger_Mutex;
@@ -193 +106 @@ bool streamMute_l(audio_stream_type_t stream) const finalconst DefaultKeyedVecto
-            audio_io_handle_t dstOutput) final
+            audio_io_handle_t dstOutput) final EXCLUDES_AudioFlinger_Mutex;
@@ -196,4 +109,4 @@ bool streamMute_l(audio_stream_type_t stream) const finalconst DefaultKeyedVecto
-            bool suspended) final
-    audio_module_handle_t loadHwModule(const char* name) final
-    uint32_t getPrimaryOutputSamplingRate() const final
-    size_t getPrimaryOutputFrameCount() const final
+            bool suspended) final EXCLUDES_AudioFlinger_Mutex;
+    audio_module_handle_t loadHwModule(const char* name) final EXCLUDES_AudioFlinger_Mutex;
+    uint32_t getPrimaryOutputSamplingRate() const final EXCLUDES_AudioFlinger_Mutex;
+    size_t getPrimaryOutputFrameCount() const final EXCLUDES_AudioFlinger_Mutex;
@@ -201 +114,2 @@ bool streamMute_l(audio_stream_type_t stream) const finalconst DefaultKeyedVecto
-    status_t getAudioPort(struct audio_port_v7* port) const final
+            EXCLUDES_AudioFlinger_Mutex;
+    status_t getAudioPort(struct audio_port_v7* port) const final EXCLUDES_AudioFlinger_Mutex;
@@ -203,2 +117,2 @@ bool streamMute_l(audio_stream_type_t stream) const finalconst DefaultKeyedVecto
-            audio_patch_handle_t* handle) final
-    status_t releaseAudioPatch(audio_patch_handle_t handle) final
+            audio_patch_handle_t* handle) final EXCLUDES_AudioFlinger_Mutex;
+    status_t releaseAudioPatch(audio_patch_handle_t handle) final EXCLUDES_AudioFlinger_Mutex;
@@ -206 +120 @@ bool streamMute_l(audio_stream_type_t stream) const finalconst DefaultKeyedVecto
-            struct audio_patch* patches) const final
+            struct audio_patch* patches) const final EXCLUDES_AudioFlinger_Mutex;
@@ -207,0 +122 @@ bool streamMute_l(audio_stream_type_t stream) const finalconst DefaultKeyedVecto
+            EXCLUDES_AudioFlinger_Mutex;
@@ -209 +124,2 @@ bool streamMute_l(audio_stream_type_t stream) const finalconst DefaultKeyedVecto
-    status_t systemReady() final
+            EXCLUDES_AudioFlinger_Mutex;
+    status_t systemReady() final EXCLUDES_AudioFlinger_Mutex;
@@ -211,0 +128 @@ bool streamMute_l(audio_stream_type_t stream) const finalconst DefaultKeyedVecto
+            EXCLUDES_AudioFlinger_Mutex;
@@ -212,0 +130 @@ bool streamMute_l(audio_stream_type_t stream) const finalconst DefaultKeyedVecto
+            EXCLUDES_AudioFlinger_Mutex;
@@ -213,0 +132 @@ bool streamMute_l(audio_stream_type_t stream) const finalconst DefaultKeyedVecto
+            EXCLUDES_AudioFlinger_Mutex;
@@ -215,0 +135 @@ bool streamMute_l(audio_stream_type_t stream) const finalconst DefaultKeyedVecto
+            EXCLUDES_AudioFlinger_Mutex;
@@ -219,2 +139,3 @@ bool streamMute_l(audio_stream_type_t stream) const finalconst DefaultKeyedVecto
-    int32_t getAAudioMixerBurstCount() const final
-    int32_t getAAudioHardwareBurstMinUsec() const final
+            EXCLUDES_AudioFlinger_Mutex;
+    int32_t getAAudioMixerBurstCount() const final EXCLUDES_AudioFlinger_Mutex;
+    int32_t getAAudioHardwareBurstMinUsec() const final EXCLUDES_AudioFlinger_Mutex;
@@ -222,2 +143,2 @@ bool streamMute_l(audio_stream_type_t stream) const finalconst DefaultKeyedVecto
-            media::DeviceConnectedState state) final
-    status_t setSimulateDeviceConnections(bool enabled) final
+            media::DeviceConnectedState state) final EXCLUDES_AudioFlinger_Mutex;
+    status_t setSimulateDeviceConnections(bool enabled) final EXCLUDES_AudioFlinger_Mutex;
@@ -225,0 +147 @@ bool streamMute_l(audio_stream_type_t stream) const finalconst DefaultKeyedVecto
+            EXCLUDES_AudioFlinger_Mutex;
@@ -227,2 +149,2 @@ bool streamMute_l(audio_stream_type_t stream) const finalconst DefaultKeyedVecto
-            std::vector<audio_latency_mode_t>* modes) const final
-    status_t setBluetoothVariableLatencyEnabled(bool enabled) final
+            std::vector<audio_latency_mode_t>* modes) const final EXCLUDES_AudioFlinger_Mutex;
+    status_t setBluetoothVariableLatencyEnabled(bool enabled) final EXCLUDES_AudioFlinger_Mutex;
@@ -229,0 +152 @@ bool streamMute_l(audio_stream_type_t stream) const finalconst DefaultKeyedVecto
+            EXCLUDES_AudioFlinger_Mutex;
@@ -230,0 +154 @@ bool streamMute_l(audio_stream_type_t stream) const finalconst DefaultKeyedVecto
+            EXCLUDES_AudioFlinger_Mutex;
@@ -232 +156 @@ bool streamMute_l(audio_stream_type_t stream) const finalconst DefaultKeyedVecto
-            sp<media::ISoundDose>* soundDose) const final
+            sp<media::ISoundDose>* soundDose) const final EXCLUDES_AudioFlinger_Mutex;
@@ -233,0 +158 @@ bool streamMute_l(audio_stream_type_t stream) const finalconst DefaultKeyedVecto
+            EXCLUDES_AudioFlinger_Mutex;
@@ -234,0 +160 @@ bool streamMute_l(audio_stream_type_t stream) const finalconst DefaultKeyedVecto
+            EXCLUDES_AudioFlinger_Mutex;
@@ -236,2 +162,7 @@ bool streamMute_l(audio_stream_type_t stream) const finalconst DefaultKeyedVecto
-            const std::function<status_t()>& delegate) final
-    void removeNotificationClient(pid_t pid) final
+            const std::function<status_t()>& delegate) final EXCLUDES_AudioFlinger_Mutex;
+    audio_utils::mutex& clientMutex() const final
+            RETURN_CAPABILITY(audio_utils::AudioFlinger_ClientMutex) {
+        return mClientMutex;
+    }
+    void removeClient_l(pid_t pid) REQUIRES(clientMutex()) final;
+    void removeNotificationClient(pid_t pid) final EXCLUDES_AudioFlinger_Mutex;
@@ -241 +172 @@ bool streamMute_l(audio_stream_type_t stream) const finalconst DefaultKeyedVecto
-            sp<IAfPlaybackThread>* srcThread) final
+            sp<IAfPlaybackThread>* srcThread) final EXCLUDES_AudioFlinger_Mutex;
@@ -245,0 +177 @@ bool streamMute_l(audio_stream_type_t stream) const finalconst DefaultKeyedVecto
+            EXCLUDES_AudioFlinger_HardwareMutex;
@@ -248,5 +180,9 @@ bool streamMute_l(audio_stream_type_t stream) const finalconst DefaultKeyedVecto
-    std::map<media::audio::common::AudioMMapPolicyType,
-             std::vector<media::audio::common::AudioMMapPolicyInfo>> mPolicyInfos;
-    void closeThreadInternal_l(const sp<IAfRecordThread>& thread) final;
-    void closeThreadInternal_l(const sp<IAfRecordThread>& thread) final;
-    IAfPlaybackThread* primaryPlaybackThread_l() const final
+            EXCLUDES_AudioFlinger_HardwareMutex;
+    audio_utils::mutex& mutex() const final
+            RETURN_CAPABILITY(audio_utils::AudioFlinger_Mutex)
+            EXCLUDES_BELOW_AudioFlinger_Mutex { return mMutex; }
+    sp<IAfThreadBase> checkOutputThread_l(audio_io_handle_t ioHandle) const final
+            REQUIRES(mutex());
+    void closeThreadInternal_l(const sp<IAfPlaybackThread>& thread) final REQUIRES(mutex());
+    void closeThreadInternal_l(const sp<IAfRecordThread>& thread) final REQUIRES(mutex());
+    IAfPlaybackThread* primaryPlaybackThread_l() const final REQUIRES(mutex());
@@ -254,8 +190,12 @@ bool streamMute_l(audio_stream_type_t stream) const finalconst DefaultKeyedVecto
-    IAfRecordThread* checkRecordThread_l(audio_io_handle_t input) const final
-    IAfMmapThread* checkMmapThread_l(audio_io_handle_t io) const final
-                              RELEASE(mLock) { mLock.unlock(); }
-    std::map<media::audio::common::AudioMMapPolicyType,
-             std::vector<media::audio::common::AudioMMapPolicyInfo>> mPolicyInfos;
-                              RELEASE(mLock) { mLock.unlock(); }
-    std::map<media::audio::common::AudioMMapPolicyType,
-             std::vector<media::audio::common::AudioMMapPolicyInfo>> mPolicyInfos;
+            REQUIRES(mutex());
+    IAfRecordThread* checkRecordThread_l(audio_io_handle_t input) const final REQUIRES(mutex());
+    IAfMmapThread* checkMmapThread_l(audio_io_handle_t io) const final REQUIRES(mutex());
+    sp<IAfThreadBase> openInput_l(audio_module_handle_t module,
+            audio_io_handle_t* input,
+            audio_config_t* config,
+            audio_devices_t device,
+            const char* address,
+            audio_source_t source,
+            audio_input_flags_t flags,
+            audio_devices_t outputDevice,
+            const String8& outputDeviceAddress) final REQUIRES(mutex());
@@ -268 +208,5 @@ bool streamMute_l(audio_stream_type_t stream) const finalconst DefaultKeyedVecto
-            audio_output_flags_t flags) final
+            audio_output_flags_t flags) final REQUIRES(mutex());
+    const DefaultKeyedVector<audio_module_handle_t, AudioHwDevice*>&
+            getAudioHwDevs_l() const final REQUIRES(mutex()) { return mAudioHwDevs; }
+    void updateDownStreamPatches_l(const struct audio_patch* patch,
+            const std::set<audio_io_handle_t>& streams) final REQUIRES(mutex());
@@ -270 +214,2 @@ bool streamMute_l(audio_stream_type_t stream) const finalconst DefaultKeyedVecto
-    bool isNonOffloadableGlobalEffectEnabled_l() const final
+            REQUIRES(mutex());
+    bool isNonOffloadableGlobalEffectEnabled_l() const final REQUIRES(mutex());
@@ -272,3 +217,8 @@ bool streamMute_l(audio_stream_type_t stream) const finalconst DefaultKeyedVecto
-    float masterVolume_l() const final
-    bool masterMute_l() const final
-    float getMasterBalance_l() const
+    float masterVolume_l() const final REQUIRES(mutex());
+    bool masterMute_l() const final REQUIRES(mutex());
+    float getMasterBalance_l() const REQUIRES(mutex());
+    bool streamMute_l(audio_stream_type_t stream) const final REQUIRES(mutex()) {
+        return mStreamTypes[stream].mute;
+    }
+    audio_mode_t getMode() const final { return mMode; }
+    bool isLowRamDevice() const final { return mIsLowRamDevice; }
@@ -275,0 +226,2 @@ bool streamMute_l(audio_stream_type_t stream) const finalconst DefaultKeyedVecto
+    std::optional<media::AudioVibratorInfo> getDefaultVibratorInfo_l() const final
+            REQUIRES(mutex());
@@ -282,0 +235,4 @@ bool streamMute_l(audio_stream_type_t stream) const finalconst DefaultKeyedVecto
+            EXCLUDES_AudioFlinger_Mutex;
+    status_t moveEffectChain_ll(audio_session_t sessionId,
+            IAfPlaybackThread* srcThread, IAfPlaybackThread* dstThread) final
+            REQUIRES(mutex(), audio_utils::ThreadBase_Mutex);
@@ -284 +240 @@ bool streamMute_l(audio_stream_type_t stream) const finalconst DefaultKeyedVecto
-    sp<NBLog::Writer> newWriter_l(size_t size, const char *name) final
+    sp<NBLog::Writer> newWriter_l(size_t size, const char *name) final REQUIRES(mutex());
@@ -290 +246 @@ bool streamMute_l(audio_stream_type_t stream) const finalconst DefaultKeyedVecto
-            const wp<IAfTrackBase>& cookie) final
+            const wp<IAfTrackBase>& cookie) final EXCLUDES_AudioFlinger_Mutex;
@@ -293,2 +249,2 @@ bool streamMute_l(audio_stream_type_t stream) const finalconst DefaultKeyedVecto
-            pid_t pid = 0) final
-    void onNonOffloadableGlobalEffectEnable() final
+            pid_t pid = 0) final EXCLUDES_AudioFlinger_ClientMutex;
+    void onNonOffloadableGlobalEffectEnable() final EXCLUDES_AudioFlinger_Mutex;
@@ -296,0 +253 @@ bool streamMute_l(audio_stream_type_t stream) const finalconst DefaultKeyedVecto
+            EXCLUDES_AudioFlinger_ClientMutex;
@@ -297,0 +255 @@ bool streamMute_l(audio_stream_type_t stream) const finalconst DefaultKeyedVecto
+            EXCLUDES_AudioFlinger_Mutex;
@@ -309 +267 @@ public:
-            audio_port_handle_t *handle)
+            audio_port_handle_t *handle) EXCLUDES_AudioFlinger_Mutex;
@@ -316,2 +274 @@ sp<MemoryDealer> mLogMemoryDealer;
-              AudioFlinger() std::map<media::audio::common::AudioMMapPolicyType,
-             std::vector<media::audio::common::AudioMMapPolicyInfo>> mPolicyInfos;
+                            AudioFlinger() ANDROID_API;
@@ -323 +280 @@ sp<MemoryDealer> mLogMemoryDealer;
-            audio_devices_t deviceType)
+            audio_devices_t deviceType) REQUIRES(mutex());
@@ -326,2 +283,4 @@ sp<MemoryDealer> mLogMemoryDealer;
-void dumpClients_ll(int fd, const Vector<String16>& args)SimpleLog mThreadLog{16};
-    void dumpToThreadLog_l(const sp<IAfThreadBase>& thread)
+    void dumpClients_ll(int fd, const Vector<String16>& args) REQUIRES(mutex(), clientMutex());
+    void dumpInternals_l(int fd, const Vector<String16>& args) REQUIRES(mutex());
+    SimpleLog mThreadLog{16};
+    void dumpToThreadLog_l(const sp<IAfThreadBase>& thread) REQUIRES(mutex());
@@ -358,3 +317,20 @@ void dumpClients_ll(int fd, const Vector<String16>& args)SimpleLog mThreadLog{16
-    IAfPlaybackThread* checkMixerThread_l(audio_io_handle_t output) const
-              sp<VolumeInterface> getVolumeInterface_l(audio_io_handle_t output) const
-              std::vector<sp<VolumeInterface>> getAllVolumeInterfaces_l() const
+    template <typename T>
+    static audio_io_handle_t findIoHandleBySessionId_l(
+            audio_session_t sessionId, const T& threads)
+            REQUIRES(audio_utils::AudioFlinger_Mutex) {
+        audio_io_handle_t io = AUDIO_IO_HANDLE_NONE;
+        for (size_t i = 0; i < threads.size(); i++) {
+            const uint32_t sessionType = threads.valueAt(i)->hasAudioSession(sessionId);
+            if (sessionType != 0) {
+                io = threads.keyAt(i);
+                if ((sessionType & IAfThreadBase::EFFECT_SESSION) != 0) {
+                    break;
+                }
+            }
+        }
+        return io;
+    }
+    IAfThreadBase* checkThread_l(audio_io_handle_t ioHandle) const REQUIRES(mutex());
+    IAfPlaybackThread* checkMixerThread_l(audio_io_handle_t output) const REQUIRES(mutex());
+    sp<VolumeInterface> getVolumeInterface_l(audio_io_handle_t output) const REQUIRES(mutex());
+    std::vector<sp<VolumeInterface>> getAllVolumeInterfaces_l() const REQUIRES(mutex());
@@ -364,2 +340,2 @@ void dumpClients_ll(int fd, const Vector<String16>& args)SimpleLog mThreadLog{16
-              DeviceTypeSet primaryOutputDevice_l() const
-              IAfPlaybackThread* fastPlaybackThread_l() const
+    DeviceTypeSet primaryOutputDevice_l() const REQUIRES(mutex());
+    IAfPlaybackThread* fastPlaybackThread_l() const REQUIRES(mutex());
@@ -367 +343,2 @@ void dumpClients_ll(int fd, const Vector<String16>& args)SimpleLog mThreadLog{16
-              IAfThreadBase* hapticPlaybackThread_l() const
+            REQUIRES(mutex());
+    IAfThreadBase* hapticPlaybackThread_l() const REQUIRES(mutex());
@@ -371,6 +348,6 @@ void dumpClients_ll(int fd, const Vector<String16>& args)SimpleLog mThreadLog{16
-              const std::vector<audio_io_handle_t>& secondaryOutputs) const
-                bool isSessionAcquired_l(audio_session_t audioSession)
-                status_t putOrphanEffectChain_l(const sp<IAfEffectChain>& chain)
-                sp<IAfEffectChain> getOrphanEffectChain_l(audio_session_t session)
-                std::vector< sp<IAfEffectModule> > purgeStaleEffects_l()
-                void broadcastParametersToRecordThreads_l(const String8& keyValuePairs)
+            const std::vector<audio_io_handle_t>& secondaryOutputs) const REQUIRES(mutex());
+    bool isSessionAcquired_l(audio_session_t audioSession) REQUIRES(mutex());
+    status_t putOrphanEffectChain_l(const sp<IAfEffectChain>& chain) REQUIRES(mutex());
+    sp<IAfEffectChain> getOrphanEffectChain_l(audio_session_t session) REQUIRES(mutex());
+    std::vector< sp<IAfEffectModule> > purgeStaleEffects_l() REQUIRES(mutex());
+    void broadcastParametersToRecordThreads_l(const String8& keyValuePairs) REQUIRES(mutex());
@@ -379,0 +357 @@ void dumpClients_ll(int fd, const Vector<String16>& args)SimpleLog mThreadLog{16
+            REQUIRES(mutex());
@@ -390,2 +368,3 @@ void dumpClients_ll(int fd, const Vector<String16>& args)SimpleLog mThreadLog{16
-    std::map<media::audio::common::AudioMMapPolicyType,
-             std::vector<media::audio::common::AudioMMapPolicyInfo>> mPolicyInfos;
+    DefaultKeyedVector<pid_t, wp<Client>> mClients GUARDED_BY(clientMutex());
+    audio_utils::mutex& hardwareMutex() const { return mHardwareMutex; }
+    mutable audio_utils::mutex mHardwareMutex;
@@ -393,0 +373 @@ void dumpClients_ll(int fd, const Vector<String16>& args)SimpleLog mThreadLog{16
+            GUARDED_BY(hardwareMutex()) {nullptr };
@@ -424,10 +404,9 @@ mutable hardware_call_state mHardwareStatus = AUDIO_HW_IDLE;
-    std::map<media::audio::common::AudioMMapPolicyType,
-             std::vector<media::audio::common::AudioMMapPolicyInfo>> mPolicyInfos;
-                stream_type_t mStreamTypes[AUDIO_STREAM_CNT]
-                float mMasterVolume
-                bool mMasterMute
-                float mMasterBalance
-    std::map<media::audio::common::AudioMMapPolicyType,
-             std::vector<media::audio::common::AudioMMapPolicyInfo>> mPolicyInfos;
-    std::map<media::audio::common::AudioMMapPolicyType,
-             std::vector<media::audio::common::AudioMMapPolicyInfo>> mPolicyInfos;
+    DefaultKeyedVector<audio_io_handle_t, sp<IAfPlaybackThread>> mPlaybackThreads
+            GUARDED_BY(mutex());
+    stream_type_t mStreamTypes[AUDIO_STREAM_CNT] GUARDED_BY(mutex());
+    float mMasterVolume GUARDED_BY(mutex()) = 1.f;
+    bool mMasterMute GUARDED_BY(mutex()) = false;
+    float mMasterBalance GUARDED_BY(mutex()) = 0.f;
+    DefaultKeyedVector<audio_io_handle_t, sp<IAfRecordThread>> mRecordThreads GUARDED_BY(mutex());
+    DefaultKeyedVector<pid_t, sp<NotificationClient>> mNotificationClients
+            GUARDED_BY(clientMutex());
@@ -437,11 +416,10 @@ mutable hardware_call_state mHardwareStatus = AUDIO_HW_IDLE;
-                Vector<AudioSessionRef*> mAudioSessionRefs
-                AudioHwDevice* loadHwModule_ll(const char *name)
-                std::list<sp<audioflinger::SyncEvent>> mPendingSyncEvents
-    std::map<media::audio::common::AudioMMapPolicyType,
-             std::vector<media::audio::common::AudioMMapPolicyInfo>> mPolicyInfos;
-                DefaultKeyedVector<audio_session_t, audio_hw_sync_t> mHwAvSyncIds
-    std::map<media::audio::common::AudioMMapPolicyType,
-             std::vector<media::audio::common::AudioMMapPolicyInfo>> mPolicyInfos;
-sp<Client> registerPid(pid_t pid)
-    status_t closeOutput_nonvirtual(audio_io_handle_t output)
-    status_t closeInput_nonvirtual(audio_io_handle_t input)
+    Vector<AudioSessionRef*> mAudioSessionRefs GUARDED_BY(mutex());
+    AudioHwDevice* loadHwModule_ll(const char *name) REQUIRES(mutex(), hardwareMutex());
+    std::list<sp<audioflinger::SyncEvent>> mPendingSyncEvents GUARDED_BY(mutex());
+    DefaultKeyedVector<audio_session_t, sp<IAfEffectChain>> mOrphanEffectChains
+            GUARDED_BY(mutex());
+    DefaultKeyedVector<audio_session_t, audio_hw_sync_t> mHwAvSyncIds GUARDED_BY(mutex());
+    DefaultKeyedVector<audio_io_handle_t, sp<IAfMmapThread>> mMmapThreads GUARDED_BY(mutex());
+    sp<Client> registerPid(pid_t pid) EXCLUDES_AudioFlinger_ClientMutex;
+    status_t closeOutput_nonvirtual(audio_io_handle_t output) EXCLUDES_AudioFlinger_Mutex;
+    status_t closeInput_nonvirtual(audio_io_handle_t input) EXCLUDES_AudioFlinger_Mutex;
@@ -448,0 +427 @@ sp<Client> registerPid(pid_t pid)
+            REQUIRES(mutex());
@@ -456,2 +435,2 @@ sp<Client> registerPid(pid_t pid)
-    bool mIsDeviceTypeKnown
-    int64_t mTotalMemory
+    bool mIsDeviceTypeKnown GUARDED_BY(mutex()) = false;
+    int64_t mTotalMemory GUARDED_BY(mutex()) = 0;
@@ -460 +439 @@ static constexpr size_t kMinimumClientSharedHeapSizeBytes = 1024 * 1024;
-nsecs_t mGlobalEffectEnableTime
+    nsecs_t mGlobalEffectEnableTime GUARDED_BY(mutex()) = 0;
@@ -467 +446 @@ sp<MelReporter> mMelReporter;
-    bool mSystemReady
+    bool mSystemReady GUARDED_BY(mutex()) = false;
@@ -468,0 +448 @@ sp<MelReporter> mMelReporter;
+    mediautils::UidInfo mUidInfo GUARDED_BY(mutex());
@@ -472 +452 @@ sp<MelReporter> mMelReporter;
-    std::vector<media::AudioVibratorInfo> mAudioVibratorInfos
+    std::vector<media::AudioVibratorInfo> mAudioVibratorInfos GUARDED_BY(mutex());
@@ -475,3 +455,4 @@ sp<MelReporter> mMelReporter;
-             std::vector<media::audio::common::AudioMMapPolicyInfo>> mPolicyInfos;
-    int32_t mAAudioBurstsPerBuffer
-    int32_t mAAudioHwBurstMinMicros
+             std::vector<media::audio::common::AudioMMapPolicyInfo>> mPolicyInfos
+             GUARDED_BY(mutex());
+    int32_t mAAudioBurstsPerBuffer GUARDED_BY(mutex()) = 0;
+    int32_t mAAudioHwBurstMinMicros GUARDED_BY(mutex()) = 0;
