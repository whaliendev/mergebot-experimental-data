[
  {
    "desc": "List merge.",
    "confidence": 0.4,
    "index": 0,
    "label": "",
    "code": [
      "void MtpServer::addEditObject(MtpObjectHandle handle, MtpString& path,",
      "        uint64_t size, MtpObjectFormat format, int fd) {",
      "    ObjectEdit*  edit = new ObjectEdit;",
      "    edit->handle = handle;",
      "    edit->path = path;",
      "    edit->size = size;",
      "    edit->format = format;",
      "    edit->fd = fd;",
      "    mObjectEditList.add(edit);",
      "}",
      "void MtpServer::addEditObject(MtpObjectHandle handle, MtpString& path,",
      "        uint64_t size, MtpObjectFormat format, int fd) {",
      "    ObjectEdit*  edit = new ObjectEdit(handle, path, size, format, fd);",
      "    mObjectEditList.add(edit);",
      "}",
      "MtpServer::ObjectEdit* MtpServer::getEditObject(MtpObjectHandle handle) {",
      "    int count = mObjectEditList.size();",
      "    for (int i = 0; i < count; i++) {",
      "        ObjectEdit* edit = mObjectEditList[i];",
      "        if (edit->mHandle == handle) return edit;",
      "    }",
      "    return NULL;",
      "}",
      "void MtpServer::removeEditObject(MtpObjectHandle handle) {",
      "    int count = mObjectEditList.size();",
      "    for (int i = 0; i < count; i++) {",
      "        ObjectEdit* edit = mObjectEditList[i];",
      "        if (edit->mHandle == handle) {",
      "            delete edit;",
      "            mObjectEditList.removeAt(i);",
      "            return;",
      "        }",
      "    }",
      "    LOGE(\"ObjectEdit not found in removeEditObject\");",
      "}",
      "void MtpServer::commitEdit(ObjectEdit* edit) {",
      "    mDatabase->endSendObject((const char *)edit->mPath, edit->mHandle, edit->mFormat, true);",
      "}",
      "MtpServer::ObjectEdit* MtpServer::getEditObject(MtpObjectHandle handle) {",
      "    int count = mObjectEditList.size();",
      "    for (int i = 0; i < count; i++) {",
      "        ObjectEdit* edit = mObjectEditList[i];",
      "        if (edit->handle == handle) return edit;",
      "    }",
      "    return NULL;",
      "}",
      "void MtpServer::removeEditObject(MtpObjectHandle handle) {",
      "    int count = mObjectEditList.size();",
      "    for (int i = 0; i < count; i++) {",
      "        ObjectEdit* edit = mObjectEditList[i];",
      "        if (edit->handle == handle) {",
      "            delete edit;",
      "            mObjectEditList.removeAt(i);",
      "            return;",
      "        }",
      "    }",
      "    LOGE(\"ObjectEdit not found in removeEditObject\");",
      "}",
      "void MtpServer::commitEdit(ObjectEdit* edit) {",
      "    mDatabase->endSendObject((const char *)edit->path, edit->handle, edit->format, true);",
      "}"
    ]
  },
  {
    "code": [
      "MtpResponseCode MtpServer::doGetThumb() {",
      "    MtpObjectHandle handle = mRequest.getParameter(1);",
      "    size_t thumbSize;",
      "    void* thumb = mDatabase->getThumbnail(handle, thumbSize);",
      "    if (thumb) {",
      "        // send data",
      "        mData.setOperationCode(mRequest.getOperationCode());",
      "        mData.setTransactionID(mRequest.getTransactionID());",
      "        mData.writeData(mFD, thumb, thumbSize);",
      "        free(thumb);",
      "        return MTP_RESPONSE_OK;",
      "    } else {",
      "        return MTP_RESPONSE_GENERAL_ERROR;",
      "    }",
      "}",
      "",
      "MtpResponseCode MtpServer::doGetPartialObject(MtpOperationCode operation) {"
    ],
    "label": "",
    "index": 2,
    "confidence": 0.7,
    "desc": "Added code or method extraction, accept our side."
  }
]