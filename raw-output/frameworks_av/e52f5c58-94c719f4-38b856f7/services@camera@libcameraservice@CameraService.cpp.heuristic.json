[
  {
    "desc": "Merge conflict caused by formatting issues.",
    "confidence": 0.7,
    "index": 5,
    "label": "",
    "code": [
      "        if (isHeadlessSystemUserMode()",
      "                && (clientUserId == USER_SYSTEM)",
      "                && !hasPermissionsForCameraHeadlessSystemUser(cameraId, callingPid, callingUid)) {"
    ]
  },
  {
    "code": [
      "static bool isAutomotiveDevice() {",
      "    // Checks the property ro.hardware.type and returns true if it is",
      "    // automotive.",
      "    char value[PROPERTY_VALUE_MAX] = {0};",
      "    property_get(\"ro.hardware.type\", value, \"\");",
      "    return strncmp(value, \"automotive\", PROPERTY_VALUE_MAX) == 0;",
      "}",
      "static bool isHeadlessSystemUserMode() {",
      "    // Checks if the device is running in headless system user mode",
      "    // by checking the property ro.fw.mu.headless_system_user.",
      "    char value[PROPERTY_VALUE_MAX] = {0};",
      "    property_get(\"ro.fw.mu.headless_system_user\", value, \"\");",
      "    return strncmp(value, \"true\", PROPERTY_VALUE_MAX) == 0;",
      "}",
      "static bool isAutomotivePrivilegedClient(int32_t uid) {",
      "    // Returns false if this is not an automotive device type.",
      "    if (!isAutomotiveDevice())",
      "        return false;",
      "",
      "    // Returns true if the uid is AID_AUTOMOTIVE_EVS which is a",
      "    // privileged client uid used for safety critical use cases such as",
      "    // rear view and surround view.",
      "    return uid == AID_AUTOMOTIVE_EVS;",
      "}",
      "bool CameraService::isAutomotiveExteriorSystemCamera(const std::string& cam_id) const{",
      "bool CameraService::isAutomotiveExteriorSystemCamera(const std::string& cam_id) const {"
    ],
    "label": "",
    "index": 1,
    "confidence": 0.4,
    "desc": "List merge."
  },
  {
    "desc": "Single side deletion.",
    "confidence": 0.7,
    "index": 2,
    "label": "",
    "code": []
  },
  {
    "desc": "Single side deletion.",
    "confidence": 0.7,
    "index": 3,
    "label": "",
    "code": []
  },
  {
    "code": [],
    "label": "",
    "index": 7,
    "confidence": 0.7,
    "desc": "Single side deletion."
  }
]