[
  {
    "desc": "De facto one-sided modification, accept their side.",
    "confidence": 0.7,
    "index": 3,
    "label": "",
    "code": [
      "    float masterVolume_l() const final REQUIRES(mutex());",
      "    bool masterMute_l() const final REQUIRES(mutex());",
      "    float getMasterBalance_l() const REQUIRES(mutex());",
      "    // no range check, AudioFlinger::mutex() held",
      "    bool streamMute_l(audio_stream_type_t stream) const final REQUIRES(mutex()) {",
      "        return mStreamTypes[stream].mute;",
      "    }"
    ]
  },
  {
    "code": [
      "    DefaultKeyedVector<pid_t, wp<Client>> mClients GUARDED_BY(clientMutex());   // see ~Client()"
    ],
    "label": "",
    "index": 4,
    "confidence": 0.7,
    "desc": "De facto one-sided modification, accept their side."
  },
  {
    "desc": "De facto one-sided modification, accept their side.",
    "confidence": 0.7,
    "index": 5,
    "label": "",
    "code": [
      "    DefaultKeyedVector<audio_io_handle_t, sp<IAfRecordThread>> mRecordThreads GUARDED_BY(mutex());"
    ]
  },
  {
    "desc": "De facto one-sided modification, accept their side.",
    "confidence": 0.7,
    "index": 6,
    "label": "",
    "code": [
      "    DefaultKeyedVector<pid_t, sp<NotificationClient>> mNotificationClients",
      "            GUARDED_BY(clientMutex());"
    ]
  },
  {
    "code": [
      "    Vector<AudioSessionRef*> mAudioSessionRefs GUARDED_BY(mutex());"
    ],
    "label": "",
    "index": 7,
    "confidence": 0.7,
    "desc": "De facto one-sided modification, accept their side."
  }
]