diff --git a/output/frameworks_av/f1dbb32c-817baca4-d6bfd2c0/services@audioflinger@AudioFlinger.no_comments_mergebot.h b/output/frameworks_av/f1dbb32c-817baca4-d6bfd2c0/services@audioflinger@AudioFlinger.no_comments_truth.h
index 3127f28..b7bbc12 100644
--- a/output/frameworks_av/f1dbb32c-817baca4-d6bfd2c0/services@audioflinger@AudioFlinger.no_comments_mergebot.h
+++ b/output/frameworks_av/f1dbb32c-817baca4-d6bfd2c0/services@audioflinger@AudioFlinger.no_comments_truth.h
@@ -2,3 +1,0 @@
-#include "Configuration.h"
-#include "ResamplerBufferProvider.h"
-#include "IAfPatchPanel.h"
@@ -9,26 +5,0 @@
-#include <audio_utils/LinearMap.h>
-#include <audio_utils/TimestampVerifier.h>
-#include <sounddose/SoundDoseManager.h>
-#include <timing/MonotonicFrameCounter.h>
-#include <timing/SyncEvent.h>
-#include <timing/SynchronizedRecordState.h>
-#include <datapath/AudioHwDevice.h>
-#include <datapath/AudioStreamIn.h>
-#include <datapath/AudioStreamOut.h>
-#include <datapath/SpdifStreamOut.h>
-#include <datapath/ThreadMetrics.h>
-#include <datapath/TrackMetrics.h>
-#include <datapath/VolumeInterface.h>
-#include <fastpath/FastCapture.h>
-#include <fastpath/FastMixer.h>
-#include <media/nbaio/NBAIO.h>
-#include <android/os/IPowerManager.h>
-#include <media/nblog/NBLog.h>
-#include <private/media/AudioEffectShared.h>
-#include <private/media/AudioTrackShared.h>
-#include <vibrator/ExternalVibration.h>
-#include <vibrator/ExternalVibrationUtils.h>
-#include "android/media/BnAudioRecord.h"
-#include "android/media/BnEffect.h"
-#include <audio_utils/MelAggregator.h>
-#include <audio_utils/MelProcessor.h>
@@ -37,30 +7,0 @@
-#include <media/AudioSystem.h>
-#include <media/AudioTrack.h>
-#include <media/MmapStreamInterface.h>
-#include <mediautils/SharedMemoryAllocator.h>
-#include <mediautils/ThreadSnapshot.h>
-#include <afutils/AllocatorFactory.h>
-#include <afutils/AudioWatchdog.h>
-#include <afutils/NBAIO_Tee.h>
-#include <audio_utils/clock.h>
-#include <media/MmapStreamCallback.h>
-#include <utils/Errors.h>
-#include <utils/threads.h>
-#include <utils/SortedVector.h>
-#include <utils/TypeHelpers.h>
-#include <utils/Vector.h>
-#include <binder/AppOpsManager.h>
-#include <binder/BinderService.h>
-#include <binder/IAppOpsCallback.h>
-#include <binder/MemoryDealer.h>
-#include <system/audio.h>
-#include <system/audio_policy.h>
-#include <media/audiohal/EffectBufferHalInterface.h>
-#include <media/audiohal/StreamHalInterface.h>
-#include <media/AudioBufferProvider.h>
-#include <media/AudioContainers.h>
-#include <media/AudioDeviceTypeAddr.h>
-#include <media/AudioMixer.h>
-#include <media/DeviceDescriptorBase.h>
-#include <media/ExtendedAudioBufferProvider.h>
-#include <media/VolumeShaper.h>
@@ -69,18 +9,0 @@
-#include <mutex>
-#include <chrono>
-#include <numeric>
-#include <deque>
-#include <string>
-#include <vector>
-#include <stdint.h>
-#include <sys/types.h>
-#include <limits.h>
-#include <android/media/BnAudioTrack.h>
-#include <android/media/IAudioFlingerClient.h>
-#include <android/media/IAudioTrackCallback.h>
-#include <android/os/BnExternalVibrationController.h>
-#include <android/content/AttributionSourceState.h>
-#include <android-base/macros.h>
-#include <cutils/atomic.h>
-#include <cutils/compiler.h>
-#include <cutils/properties.h>
@@ -102 +24,0 @@ namespace android {
-<<<<<<< HEAD
@@ -110,6 +31,0 @@ class AudioFlinger
-||||||| d6bfd2c02d
-class AudioFlinger : public AudioFlingerServerAdapter::Delegate
-=======
-class AudioFlinger
-    : public AudioFlingerServerAdapter::Delegate
->>>>>>> 817baca4
@@ -119,4 +35 @@ public:
-static void instantiate()private:
-    std::map<media::audio::common::AudioMMapPolicyType,
-             std::vector<media::audio::common::AudioMMapPolicyInfo>> mPolicyInfos;
-public:
+    static void instantiate() ANDROID_API;
@@ -187 +99,0 @@ private:
-public:
@@ -189 +100,0 @@ public:
-private:
@@ -191 +101,0 @@ private:
-public:
@@ -193 +102,0 @@ public:
-private:
@@ -210 +118,0 @@ private:
-<<<<<<< HEAD
@@ -212,6 +119,0 @@ private:
-||||||| d6bfd2c02d
-            std::vector<media::audio::common::AudioMMapPolicyInfo> *policyInfos);
-=======
-            std::vector<media::audio::common::AudioMMapPolicyInfo>* policyInfos) override;
->>>>>>> 817baca4
-public:
@@ -219 +120,0 @@ public:
-private:
@@ -229 +129,0 @@ private:
-public:
@@ -231 +130,0 @@ public:
-private:
@@ -233 +131,0 @@ private:
-public:
@@ -236 +133,0 @@ public:
-private:
@@ -242,6 +139,6 @@ private:
-public:
-private:
-<<<<<<< HEAD
-||||||| d6bfd2c02d
-=======
->>>>>>> 817baca4
+    void removeClient_l(pid_t pid) final;
+    void removeNotificationClient(pid_t pid) final;
+    status_t moveAuxEffectToIo(
+            int effectId,
+            const sp<IAfPlaybackThread>& dstThread,
+            sp<IAfPlaybackThread>* srcThread) final;
@@ -250,3 +147,55 @@ private:
-public:
-    status_t listAudioPorts(unsigned int* num_ports, struct audio_port* ports) const;
-private:
+    status_t addEffectToHal(
+            const struct audio_port_config* device, const sp<EffectHalInterface>& effect) final;
+    status_t removeEffectFromHal(
+            const struct audio_port_config* device, const sp<EffectHalInterface>& effect) final;
+    Mutex& mutex() const final { return mLock; }
+    sp<IAfThreadBase> checkOutputThread_l(audio_io_handle_t ioHandle) const final REQUIRES(mLock);
+    void closeThreadInternal_l(const sp<IAfPlaybackThread>& thread) final;
+    void closeThreadInternal_l(const sp<IAfRecordThread>& thread) final;
+    IAfPlaybackThread* primaryPlaybackThread_l() const final;
+    IAfPlaybackThread* checkPlaybackThread_l(audio_io_handle_t output) const final;
+    IAfRecordThread* checkRecordThread_l(audio_io_handle_t input) const final;
+    IAfMmapThread* checkMmapThread_l(audio_io_handle_t io) const final;
+    void lock() const final ACQUIRE(mLock) { mLock.lock(); }
+    void unlock() const final RELEASE(mLock) { mLock.unlock(); }
+    sp<IAfThreadBase> openInput_l(audio_module_handle_t module,
+            audio_io_handle_t* input,
+            audio_config_t* config,
+            audio_devices_t device,
+            const char* address,
+            audio_source_t source,
+            audio_input_flags_t flags,
+            audio_devices_t outputDevice,
+            const String8& outputDeviceAddress) final;
+    sp<IAfThreadBase> openOutput_l(audio_module_handle_t module,
+            audio_io_handle_t* output,
+            audio_config_t* halConfig,
+            audio_config_base_t* mixerConfig,
+            audio_devices_t deviceType,
+            const String8& address,
+            audio_output_flags_t flags) final;
+    const DefaultKeyedVector<audio_module_handle_t, AudioHwDevice*>&
+            getAudioHwDevs_l() const final { return mAudioHwDevs; }
+    void updateDownStreamPatches_l(const struct audio_patch* patch,
+            const std::set<audio_io_handle_t>& streams) final;
+    void updateOutDevicesForRecordThreads_l(const DeviceDescriptorBaseVector& devices) final;
+    bool isNonOffloadableGlobalEffectEnabled_l() const final;
+    bool btNrecIsOff() const final { return mBtNrecIsOff.load(); }
+    float masterVolume_l() const final;
+    bool masterMute_l() const final;
+    float getMasterBalance_l() const;
+    bool streamMute_l(audio_stream_type_t stream) const final { return mStreamTypes[stream].mute; }
+    audio_mode_t getMode() const final { return mMode; }
+    bool isLowRamDevice() const final { return mIsLowRamDevice; }
+    uint32_t getScreenState() const final { return mScreenState; }
+    std::optional<media::AudioVibratorInfo> getDefaultVibratorInfo_l() const final;
+    const sp<IAfPatchPanel>& getPatchPanel() const final { return mPatchPanel; }
+    const sp<MelReporter>& getMelReporter() const final { return mMelReporter; }
+    const sp<EffectsFactoryHalInterface>& getEffectsFactoryHal() const final {
+        return mEffectsFactoryHal;
+    }
+    sp<IAudioManager> getOrCreateAudioManager() final;
+    bool updateOrphanEffectChains(const sp<IAfEffectModule>& effect) final;
+    status_t moveEffectChain_l(audio_session_t sessionId,
+            IAfPlaybackThread* srcThread, IAfPlaybackThread* dstThread) final;
+    void requestLogMerge() final;
@@ -254,0 +204,12 @@ private:
+    sp<audioflinger::SyncEvent> createSyncEvent(AudioSystem::sync_event_t type,
+            audio_session_t triggerSession,
+            audio_session_t listenerSession,
+            const audioflinger::SyncEventCallback& callBack,
+            const wp<IAfTrackBase>& cookie) final;
+    void ioConfigChanged(audio_io_config_event_t event,
+            const sp<AudioIoDescriptor>& ioDesc,
+            pid_t pid = 0) final;
+    void onNonOffloadableGlobalEffectEnable() final;
+    void onSupportedLatencyModesChanged(
+            audio_io_handle_t output, const std::vector<audio_latency_mode_t>& modes) final;
+    status_t listAudioPorts(unsigned int* num_ports, struct audio_port* ports) const;
@@ -256,0 +218 @@ public:
+    static inline std::atomic<AudioFlinger*> gAudioFlinger = nullptr;
@@ -267,7 +228,0 @@ private:
-    status_t addEffectToHal(
-            const struct audio_port_config* device, const sp<EffectHalInterface>& effect) final;
-    status_t removeEffectFromHal(
-            const struct audio_port_config* device, const sp<EffectHalInterface>& effect) final;
-    Mutex& mutex() const final { return mLock; }
-    void updateDownStreamPatches_l(const struct audio_patch* patch,
-            const std::set<audio_io_handle_t>& streams) final;
@@ -278,16 +233 @@ sp<MemoryDealer> mLogMemoryDealer;
-              AudioFlinger()public:
-    static inline std::atomic<AudioFlinger*> gAudioFlinger = nullptr;
-private:
-    sp<audioflinger::SyncEvent> createSyncEvent(AudioSystem::sync_event_t type,
-            audio_session_t triggerSession,
-            audio_session_t listenerSession,
-            const audioflinger::SyncEventCallback& callBack,
-            const wp<IAfTrackBase>& cookie) final;
-    bool btNrecIsOff() const final { return mBtNrecIsOff.load(); }
-               audio_mode_t getMode() const final { return mMode; }
-               audio_mode_t getMode() const final { return mMode; }
-               audio_mode_t getMode() const final { return mMode; }
-    std::map<media::audio::common::AudioMMapPolicyType,
-             std::vector<media::audio::common::AudioMMapPolicyInfo>> mPolicyInfos;
-    std::map<media::audio::common::AudioMMapPolicyType,
-             std::vector<media::audio::common::AudioMMapPolicyInfo>> mPolicyInfos;
+                            AudioFlinger() ANDROID_API;
@@ -336 +275,0 @@ SimpleLog mThreadLog{16};
-    void requestLogMerge() final;
@@ -353,3 +291,0 @@ SimpleLog mThreadLog{16};
-sp<IAfThreadBase> checkOutputThread_l(audio_io_handle_t ioHandle) const final std::map<media::audio::common::AudioMMapPolicyType,
-             std::vector<media::audio::common::AudioMMapPolicyInfo>> mPolicyInfos;
-    IAfPlaybackThread* checkPlaybackThread_l(audio_io_handle_t output) const final;
@@ -357,3 +292,0 @@ sp<IAfThreadBase> checkOutputThread_l(audio_io_handle_t ioHandle) const final st
-    IAfRecordThread* checkRecordThread_l(audio_io_handle_t input) const final;
-    IAfMmapThread* checkMmapThread_l(audio_io_handle_t io) const final;
-void lock() const final RELEASE(mLock){ mLock.unlock(); }
@@ -362,8 +294,0 @@ void lock() const final RELEASE(mLock){ mLock.unlock(); }
-    sp<IAfThreadBase> openOutput_l(audio_module_handle_t module,
-            audio_io_handle_t* output,
-            audio_config_t* halConfig,
-            audio_config_base_t* mixerConfig,
-            audio_devices_t deviceType,
-            const String8& address,
-            audio_output_flags_t flags) final;
-    const DefaultKeyedVector<audio_module_handle_t, AudioHwDevice*>&getAudioHwDevs_l() const final { return mAudioHwDevs; }
@@ -372,6 +296,0 @@ void lock() const final RELEASE(mLock){ mLock.unlock(); }
-              bool streamMute_l(audio_stream_type_t stream) const final { return mStreamTypes[stream].mute; }
-              void ioConfigChanged(audio_io_config_event_t event,
-              const sp<AudioIoDescriptor>& ioDesc,
-              pid_t pid = 0) final;
-              void onSupportedLatencyModesChanged(
-              audio_io_handle_t output, const std::vector<audio_latency_mode_t>& modes) final;
@@ -379,7 +297,0 @@ void lock() const final RELEASE(mLock){ mLock.unlock(); }
-              status_t moveEffectChain_l(audio_session_t sessionId,
-              IAfPlaybackThread* srcThread, IAfPlaybackThread* dstThread) final;
-              status_t moveAuxEffectToIo(
-              int effectId,
-              const sp<IAfPlaybackThread>& dstThread,
-              sp<IAfPlaybackThread>* srcThread) final;
-              IAfPlaybackThread* primaryPlaybackThread_l() const final;
@@ -394,3 +305,0 @@ void lock() const final RELEASE(mLock){ mLock.unlock(); }
-                void removeClient_l(pid_t pid) final;
-                void removeNotificationClient(pid_t pid) final;
-                void onNonOffloadableGlobalEffectEnable() final;
@@ -400 +308,0 @@ void lock() const final RELEASE(mLock){ mLock.unlock(); }
-                bool updateOrphanEffectChains(const sp<IAfEffectModule>& effect) final;
@@ -403,2 +310,0 @@ void lock() const final RELEASE(mLock){ mLock.unlock(); }
-                void updateOutDevicesForRecordThreads_l(const DeviceDescriptorBaseVector& devices) final;
-    bool isNonOffloadableGlobalEffectEnabled_l() const final;
@@ -418,2 +324 @@ void lock() const final RELEASE(mLock){ mLock.unlock(); }
-    std::map<media::audio::common::AudioMMapPolicyType,
-             std::vector<media::audio::common::AudioMMapPolicyInfo>> mPolicyInfos;
+                DefaultKeyedVector< pid_t, wp<Client> > mClients;
@@ -452,2 +357 @@ mutable hardware_call_state mHardwareStatus;
-    std::map<media::audio::common::AudioMMapPolicyType,
-             std::vector<media::audio::common::AudioMMapPolicyInfo>> mPolicyInfos;
+    DefaultKeyedVector<audio_io_handle_t, sp<IAfPlaybackThread>> mPlaybackThreads;
@@ -458,4 +362,2 @@ mutable hardware_call_state mHardwareStatus;
-    std::map<media::audio::common::AudioMMapPolicyType,
-             std::vector<media::audio::common::AudioMMapPolicyInfo>> mPolicyInfos;
-    std::map<media::audio::common::AudioMMapPolicyType,
-             std::vector<media::audio::common::AudioMMapPolicyInfo>> mPolicyInfos;
+    DefaultKeyedVector<audio_io_handle_t, sp<IAfRecordThread>> mRecordThreads;
+                DefaultKeyedVector< pid_t, sp<NotificationClient> > mNotificationClients;
@@ -466,3 +367,0 @@ mutable hardware_call_state mHardwareStatus;
-                float masterVolume_l() const final;
-                float getMasterBalance_l() const;
-                bool masterMute_l() const final;
@@ -471,2 +370 @@ mutable hardware_call_state mHardwareStatus;
-    std::map<media::audio::common::AudioMMapPolicyType,
-             std::vector<media::audio::common::AudioMMapPolicyInfo>> mPolicyInfos;
+                DefaultKeyedVector<audio_session_t, sp<IAfEffectChain>> mOrphanEffectChains;
@@ -474,2 +372 @@ mutable hardware_call_state mHardwareStatus;
-    std::map<media::audio::common::AudioMMapPolicyType,
-             std::vector<media::audio::common::AudioMMapPolicyInfo>> mPolicyInfos;
+    DefaultKeyedVector<audio_io_handle_t, sp<IAfMmapThread>> mMmapThreads;
@@ -478 +374,0 @@ sp<Client> registerPid(pid_t pid);
-    void closeThreadInternal_l(const sp<IAfRecordThread>& thread);
@@ -480 +375,0 @@ sp<Client> registerPid(pid_t pid);
-    void closeThreadInternal_l(const sp<IAfRecordThread>& thread);
@@ -487,9 +381,0 @@ sp<Client> registerPid(pid_t pid);
-    sp<IAudioManager> getOrCreateAudioManager() final;
-    bool isLowRamDevice() const final { return mIsLowRamDevice; }
-    uint32_t getScreenState() const final { return mScreenState; }
-    std::optional<media::AudioVibratorInfo> getDefaultVibratorInfo_l() const final;
-    const sp<IAfPatchPanel>& getPatchPanel() const final { return mPatchPanel; }
-    const sp<MelReporter>& getMelReporter() const final { return mMelReporter; }
-    const sp<EffectsFactoryHalInterface>& getEffectsFactoryHal() const final {
-        return mEffectsFactoryHal;
-    }
