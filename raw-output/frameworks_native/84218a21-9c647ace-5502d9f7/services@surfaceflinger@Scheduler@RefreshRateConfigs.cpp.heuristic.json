[
  {
    "desc": "Single side deletion.",
    "confidence": 0.7,
    "index": 0,
    "label": "",
    "code": []
  },
  {
    "code": [
      "bool RefreshRateConfigs::isFractionalPairOrMultiple(Fps smaller, Fps bigger) {",
      "    if (smaller.getValue() > bigger.getValue()) {",
      "        return isFractionalPairOrMultiple(bigger, smaller);",
      "    }",
      "",
      "    const auto multiplier = std::round(bigger.getValue() / smaller.getValue());",
      "    constexpr float kCoef = 1000.f / 1001.f;",
      "    return bigger.equalsWithMargin(Fps(smaller.getValue() * multiplier / kCoef)) ||",
      "            bigger.equalsWithMargin(Fps(smaller.getValue() * multiplier * kCoef));",
      "}",
      "bool RefreshRateConfigs::isFractionalPairOrMultiple(Fps smaller, Fps bigger) {",
      "    if (isStrictlyLess(bigger, smaller)) {",
      "        return isFractionalPairOrMultiple(bigger, smaller);",
      "    }",
      "",
      "    const auto multiplier = std::round(bigger.getValue() / smaller.getValue());",
      "    constexpr float kCoef = 1000.f / 1001.f;",
      "    return isApproxEqual(bigger, Fps::fromValue(smaller.getValue() * multiplier / kCoef)) ||",
      "            isApproxEqual(bigger, Fps::fromValue(smaller.getValue() * multiplier * kCoef));",
      "}"
    ],
    "label": "",
    "index": 1,
    "confidence": 0.4,
    "desc": "List merge."
  }
]