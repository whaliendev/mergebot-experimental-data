[
  {
    "code": [
      "bool GraphicsEnv::shouldUseSystemAngle() {",
      "    return mShouldUseSystemAngle;",
      "}",
      "",
      "bool GraphicsEnv::shouldUseNativeDriver() {",
      "    return mShouldUseNativeDriver;",
      "}",
      "",
      "/**",
      " * APIs for debuggable layers",
      " */",
      "",
      "void GraphicsEnv::setLayerPaths(NativeLoaderNamespace* appNamespace,",
      "                                const std::string& layerPaths) {",
      "    if (mLayerPaths.empty()) {",
      "        mLayerPaths = layerPaths;",
      "        mAppNamespace = appNamespace;",
      "    } else {",
      "        ALOGV(\"Vulkan layer search path already set, not clobbering with '%s' for namespace %p'\",",
      "              layerPaths.c_str(), appNamespace);",
      "    }",
      "}",
      "",
      "NativeLoaderNamespace* GraphicsEnv::getAppNamespace() {",
      "    return mAppNamespace;",
      "}",
      "",
      "const std::string& GraphicsEnv::getLayerPaths() {",
      "    return mLayerPaths;",
      "}",
      "",
      "const std::string& GraphicsEnv::getDebugLayers() {",
      "    return mDebugLayers;",
      "}",
      "",
      "const std::string& GraphicsEnv::getDebugLayersGLES() {",
      "    return mDebugLayersGLES;",
      "}",
      "",
      "void GraphicsEnv::setDebugLayers(const std::string& layers) {",
      "    mDebugLayers = layers;",
      "}",
      "",
      "void GraphicsEnv::setDebugLayersGLES(const std::string& layers) {",
      "    mDebugLayersGLES = layers;",
      "}",
      ""
    ],
    "label": "",
    "index": 2,
    "confidence": 0.7,
    "desc": "Added code or method extraction, accept our side."
  }
]