[
  {
    "desc": "List merge.",
    "confidence": 0.4,
    "index": 0,
    "label": "",
    "code": [
      "void Layer::setGeometry(const sp<const DisplayDevice>& displayDevice, uint32_t z)",
      "{",
      "    const auto hwcId = displayDevice->getHwcDisplayId();",
      "    if (!hasHwcLayer(hwcId)) {",
      "        return;",
      "    }",
      "    auto& hwcInfo = getBE().mHwcLayers[hwcId];",
      "void Layer::setGeometry(const sp<const DisplayDevice>& display, uint32_t z) {",
      "    const auto displayId = display->getId();",
      "    if (!hasHwcLayer(displayId)) {",
      "        ALOGE(\"[%s] failed to setGeometry: no HWC layer found (%d)\",",
      "              mName.string(), displayId);",
      "        return;",
      "    }",
      "    auto& hwcInfo = getBE().mHwcLayers[displayId];",
      "",
      "    // Device or Cursor layers",
      "    if (mPotentialCursor) {",
      "        ALOGV(\"[%s] Requesting Cursor composition\", mName.string());",
      "        setCompositionType(displayId, HWC2::Composition::Cursor);",
      "    } else {",
      "        ALOGV(\"[%s] Requesting Device composition\", mName.string());",
      "        setCompositionType(displayId, HWC2::Composition::Device);",
      "    }",
      "",
      "    // Need to program geometry parts",
      "    getBE().compositionInfo.hwc.skipGeometry = false;"
    ]
  },
  {
    "code": [
      "void Layer::writeToProto(LayerProto* layerInfo, int32_t hwcId) {",
      "    if (!hasHwcLayer(hwcId)) {",
      "        return;",
      "    }",
      "void Layer::writeToProto(LayerProto* layerInfo, int32_t displayId) {",
      "    if (!hasHwcLayer(displayId)) {",
      "        return;",
      "    }"
    ],
    "label": "",
    "index": 1,
    "confidence": 0.4,
    "desc": "List merge."
  }
]