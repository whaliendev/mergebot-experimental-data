diff --git a/output/grpc/0a94f3c8-3410c8d7-0bb3986f/src@core@ext@filters@client_channel@client_channel.no_comments_mergebot.c b/output/grpc/0a94f3c8-3410c8d7-0bb3986f/src@core@ext@filters@client_channel@client_channel.no_comments_truth.c
index 8f38bda..8a6bd50 100644
--- a/output/grpc/0a94f3c8-3410c8d7-0bb3986f/src@core@ext@filters@client_channel@client_channel.no_comments_mergebot.c
+++ b/output/grpc/0a94f3c8-3410c8d7-0bb3986f/src@core@ext@filters@client_channel@client_channel.no_comments_truth.c
@@ -19 +18,0 @@
-#include "src/core/lib/channel/deadline_filter.h"
@@ -118,20 +116,0 @@ static void *method_parameters_create_from_json(const grpc_json *json) {
-typedef struct client_channel_channel_data {
-  grpc_resolver *resolver;
-  bool started_resolving;
-  bool deadline_checking_enabled;
-  grpc_client_channel_factory *client_channel_factory;
-  grpc_combiner *combiner;
-  grpc_lb_policy *lb_policy;
-  grpc_server_retry_throttle_data *retry_throttle_data;
-  grpc_slice_hash_table *method_params_table;
-  grpc_channel_args *resolver_result;
-  grpc_closure_list waiting_for_config_closures;
-  grpc_closure on_resolver_result_changed;
-  grpc_connectivity_state_tracker state_tracker;
-  bool exit_idle_when_lb_policy_arrives;
-  grpc_channel_stack *owning_stack;
-  grpc_pollset_set *interested_parties;
-  gpr_mu info_mu;
-  char *info_lb_policy_name;
-  char *info_service_config_json;
-} channel_data;
@@ -141,0 +121 @@ typedef struct client_channel_channel_data {
+  bool deadline_checking_enabled;
@@ -283 +263,2 @@ typedef struct wrapped_on_pick_closure_arg {
-static void wrapped_on_pick_closure_cb(grpc_exec_ctx *exec_ctx, void *arg, grpc_error *error) {
+static void wrapped_on_pick_closure_cb(grpc_exec_ctx *exec_ctx, void *arg,
+                                       grpc_error *error) {
@@ -632,0 +614,2 @@ static void cc_destroy_channel_elem(grpc_exec_ctx *exec_ctx,
+#define GET_CALL(call_data) \
+  ((grpc_subchannel_call *)(gpr_atm_acq_load(&(call_data)->subchannel_call)))
@@ -829 +812,2 @@ static void continue_picking_locked(grpc_exec_ctx *exec_ctx, void *arg,
-static void cancel_pick_locked(grpc_exec_ctx *exec_ctx, grpc_call_element *elem, grpc_error *error) {
+static void cancel_pick_locked(grpc_exec_ctx *exec_ctx, grpc_call_element *elem,
+                               grpc_error *error) {
@@ -1193 +1177,2 @@ typedef struct external_connectivity_watcher {
-static external_connectivity_watcher *lookup_external_connectivity_watcher(channel_data *chand, grpc_closure *on_complete) {
+static external_connectivity_watcher *lookup_external_connectivity_watcher(
+    channel_data *chand, grpc_closure *on_complete) {
@@ -1203 +1188,2 @@ static external_connectivity_watcher *lookup_external_connectivity_watcher(chann
-static void external_connectivity_watcher_list_append(channel_data *chand, external_connectivity_watcher *w) {
+static void external_connectivity_watcher_list_append(
+    channel_data *chand, external_connectivity_watcher *w) {
@@ -1211 +1197,2 @@ static void external_connectivity_watcher_list_append(channel_data *chand, exter
-static void external_connectivity_watcher_list_remove(channel_data *chand, external_connectivity_watcher *too_remove) {
+static void external_connectivity_watcher_list_remove(
+    channel_data *chand, external_connectivity_watcher *too_remove) {
@@ -1232 +1219,2 @@ static void external_connectivity_watcher_list_remove(channel_data *chand, exter
-int grpc_client_channel_num_external_connectivity_watchers(grpc_channel_element *elem) {
+int grpc_client_channel_num_external_connectivity_watchers(
+    grpc_channel_element *elem) {
@@ -1283 +1271,4 @@ static void watch_connectivity_state_locked(grpc_exec_ctx *exec_ctx, void *arg,
-void grpc_client_channel_watch_connectivity_state(grpc_exec_ctx *exec_ctx, grpc_channel_element *elem, grpc_pollset *pollset, grpc_connectivity_state *state, grpc_closure *closure, grpc_closure *on_complete, grpc_closure *watcher_timer_init) {
+void grpc_client_channel_watch_connectivity_state(
+    grpc_exec_ctx *exec_ctx, grpc_channel_element *elem, grpc_pollset *pollset,
+    grpc_connectivity_state *state, grpc_closure *closure,
+    grpc_closure *watcher_timer_init) {
