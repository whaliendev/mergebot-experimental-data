diff --git a/output/grpc/c757f34d-3bd96959-230e8529/test@core@end2end@dualstack_socket_test.no_comments_mergebot.c b/output/grpc/c757f34d-3bd96959-230e8529/test@core@end2end@dualstack_socket_test.no_comments_truth.c
index 076357c..e5a70b4 100644
--- a/output/grpc/c757f34d-3bd96959-230e8529/test@core@end2end@dualstack_socket_test.no_comments_mergebot.c
+++ b/output/grpc/c757f34d-3bd96959-230e8529/test@core@end2end@dualstack_socket_test.no_comments_truth.c
@@ -10,3 +9,0 @@
-#include "src/core/iomgr/resolve_address.h"
-#include "src/core/iomgr/socket_utils_posix.h"
-#include "src/core/support/string.h"
@@ -201,31 +198,2 @@ int main(int argc, char **argv) {
-  char *me = argv[0];
-  char *lslash = strrchr(me, '/');
-  char *lunder = strrchr(me, '_');
-  char *tmp;
-  char root[1024];
-  char test[64];
-  int port = grpc_pick_unused_port_or_die();
-  char *args[10];
-  int status;
-  size_t i;
-  gpr_subprocess *svr;
-  if (lslash) {
-    memcpy(root, me, (size_t)(lslash - me));
-    root[lslash - me] = 0;
-  } else {
-    strcpy(root, ".");
-  }
-  if (argc == 2) {
-    gpr_setenv("GRPC_DEFAULT_SSL_ROOTS_FILE_PATH", argv[1]);
-  }
-  tmp = lunder - 1;
-  while (*tmp != '_') tmp--;
-  tmp++;
-  memcpy(test, tmp, (size_t)(lunder - tmp));
-  gpr_asprintf(&args[0], "%s/bad_ssl_%s_server%s", root, test,
-               gpr_subprocess_binary_extension());
-  args[1] = "--bind";
-  gpr_join_host_port(&args[2], "::", port);
-  svr = gpr_subprocess_create(4, (const char **)args);
-  gpr_free(args[0]);
-  for (i = 3; i <= 4; i++) {
+  int do_ipv6 = 1;
+  grpc_test_init(argc, argv);
@@ -233,2 +201,3 @@ int main(int argc, char **argv) {
-    run_test(args[2], i);
-    grpc_shutdown();
+  if (!grpc_ipv6_loopback_available()) {
+    gpr_log(GPR_INFO, "Can't bind to ::1.  Skipping IPv6 tests.");
+    do_ipv6 = 0;
@@ -236,5 +205,51 @@ int main(int argc, char **argv) {
-  gpr_free(args[2]);
-  gpr_subprocess_interrupt(svr);
-  status = gpr_subprocess_join(svr);
-  gpr_subprocess_destroy(svr);
-  return status;
+  for (grpc_forbid_dualstack_sockets_for_testing = 0;
+       grpc_forbid_dualstack_sockets_for_testing <= 1;
+       grpc_forbid_dualstack_sockets_for_testing++) {
+    test_connect("::", "127.0.0.1", 0, 1);
+    test_connect("::", "::ffff:127.0.0.1", 0, 1);
+    test_connect("::", "ipv4:127.0.0.1", 0, 1);
+    test_connect("::", "ipv6:[::ffff:127.0.0.1]", 0, 1);
+    test_connect("::", "localhost", 0, 1);
+    test_connect("0.0.0.0", "127.0.0.1", 0, 1);
+    test_connect("0.0.0.0", "::ffff:127.0.0.1", 0, 1);
+    test_connect("0.0.0.0", "ipv4:127.0.0.1", 0, 1);
+    test_connect("0.0.0.0", "ipv4:127.0.0.1,127.0.0.2,127.0.0.3", 0, 1);
+    test_connect("0.0.0.0", "ipv6:[::ffff:127.0.0.1],[::ffff:127.0.0.2]", 0, 1);
+    test_connect("0.0.0.0", "localhost", 0, 1);
+    if (do_ipv6) {
+      test_connect("::", "::1", 0, 1);
+      test_connect("0.0.0.0", "::1", 0, 1);
+      test_connect("::", "ipv6:[::1]", 0, 1);
+      test_connect("0.0.0.0", "ipv6:[::1]", 0, 1);
+    }
+    test_connect("127.0.0.1", "127.0.0.1", 0, 1);
+    test_connect("127.0.0.1", "ipv4:127.0.0.1", 0, 1);
+    if (do_ipv6) {
+      test_connect("::1", "::1", 0, 1);
+      test_connect("::1", "127.0.0.1", 0, 0);
+      test_connect("127.0.0.1", "::1", 0, 0);
+      test_connect("::1", "ipv6:[::1]", 0, 1);
+      test_connect("::1", "ipv4:127.0.0.1", 0, 0);
+      test_connect("127.0.0.1", "ipv6:[::1]", 0, 0);
+    }
+    if (!external_dns_works("loopback46.unittest.grpc.io")) {
+      gpr_log(GPR_INFO, "Skipping tests that depend on *.unittest.grpc.io.");
+    } else {
+      test_connect("loopback46.unittest.grpc.io", "loopback4.unittest.grpc.io",
+                   0, 1);
+      test_connect("loopback4.unittest.grpc.io", "loopback46.unittest.grpc.io",
+                   0, 1);
+      if (do_ipv6) {
+        test_connect("loopback46.unittest.grpc.io",
+                     "loopback6.unittest.grpc.io", 0, 1);
+        test_connect("loopback6.unittest.grpc.io",
+                     "loopback46.unittest.grpc.io", 0, 1);
+        test_connect("loopback4.unittest.grpc.io", "loopback6.unittest.grpc.io",
+                     0, 0);
+        test_connect("loopback6.unittest.grpc.io", "loopback4.unittest.grpc.io",
+                     0, 0);
+      }
+    }
+  }
+  grpc_shutdown();
+  return 0;
