[
  {
    "code": [
      "/* Wrapper around redisSecureConnection to avoid hiredis_ssl dependencies if",
      " * not building with TLS support.",
      " */",
      "static int cliSecureConnection(redisContext *c, const char **err) {",
      "#ifdef USE_OPENSSL",
      "    static SSL_CTX *ssl_ctx = NULL;",
      "",
      "    if (!ssl_ctx) {",
      "        ssl_ctx = SSL_CTX_new(SSLv23_client_method());",
      "        if (!ssl_ctx) {",
      "            *err = \"Failed to create SSL_CTX\";",
      "            goto error;",
      "        }",
      "",
      "        SSL_CTX_set_options(ssl_ctx, SSL_OP_NO_SSLv2 | SSL_OP_NO_SSLv3);",
      "        SSL_CTX_set_verify(ssl_ctx, SSL_VERIFY_PEER, NULL);",
      "",
      "        if (config.cacert || config.cacertdir) {",
      "            if (!SSL_CTX_load_verify_locations(ssl_ctx, config.cacert, config.cacertdir)) {",
      "                *err = \"Invalid CA Certificate File/Directory\";",
      "                goto error;",
      "            }",
      "        } else {",
      "            if (!SSL_CTX_set_default_verify_paths(ssl_ctx)) {",
      "                *err = \"Failed to use default CA paths\";",
      "                goto error;",
      "            }",
      "        }",
      "",
      "        if (config.cert && !SSL_CTX_use_certificate_chain_file(ssl_ctx, config.cert)) {",
      "            *err = \"Invalid client certificate\";",
      "            goto error;",
      "        }",
      "",
      "        if (config.key && !SSL_CTX_use_PrivateKey_file(ssl_ctx, config.key, SSL_FILETYPE_PEM)) {",
      "            *err = \"Invalid private key\";",
      "            goto error;",
      "        }",
      "    }",
      "",
      "    SSL *ssl = SSL_new(ssl_ctx);",
      "    if (!ssl) {",
      "        *err = \"Failed to create SSL object\";",
      "        return REDIS_ERR;",
      "    }",
      "",
      "    if (config.sni && !SSL_set_tlsext_host_name(ssl, config.sni)) {",
      "        *err = \"Failed to configure SNI\";",
      "        SSL_free(ssl);",
      "        return REDIS_ERR;",
      "    }",
      "",
      "    return redisInitiateSSL(c, ssl);",
      "",
      "error:",
      "    SSL_CTX_free(ssl_ctx);",
      "    ssl_ctx = NULL;",
      "    return REDIS_ERR;",
      "#else",
      "    (void) c;",
      "    (void) err;",
      "    return REDIS_OK;",
      "#endif",
      "}",
      "/* Select RESP3 mode if redis-cli was started with the -3 option.  */",
      "static int cliSwitchProto(void) {",
      "    redisReply *reply;",
      "    if (config.resp3 == 0) return REDIS_OK;",
      "",
      "    reply = redisCommand(context,\"HELLO 3\");",
      "    if (reply != NULL) {",
      "        int result = REDIS_OK;",
      "        if (reply->type == REDIS_REPLY_ERROR) result = REDIS_ERR;",
      "        freeReplyObject(reply);",
      "        return result;",
      "    }",
      "    return REDIS_ERR;",
      "}"
    ],
    "label": "",
    "index": 0,
    "confidence": 0.4,
    "desc": "List merge."
  }
]