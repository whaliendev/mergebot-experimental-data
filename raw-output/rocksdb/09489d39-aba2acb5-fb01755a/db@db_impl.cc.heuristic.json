[
  {
    "code": [
      "void DBImpl::CompactRange(const ColumnFamilyHandle& column_family,",
      "                          const Slice* begin, const Slice* end,",
      "                          bool reduce_level, int target_level) {",
      "  FlushMemTable(FlushOptions());",
      "Status DBImpl::CompactRange(const Slice* begin,",
      "                            const Slice* end,",
      "                            bool reduce_level,",
      "                            int target_level) {",
      "  Status s = FlushMemTable(FlushOptions());",
      "  if (!s.ok()) {",
      "    LogFlush(options_.info_log);",
      "    return s;",
      "  }"
    ],
    "label": "",
    "index": 0,
    "confidence": 0.4,
    "desc": "List merge."
  },
  {
    "desc": "List merge.",
    "confidence": 0.4,
    "index": 1,
    "label": "",
    "code": [
      "uint64_t DBImpl::CurrentVersionNumber() const {",
      "  return super_version_number_.load();",
      "}",
      "Status DBImpl::Flush(const FlushOptions& options,",
      "                     const ColumnFamilyHandle& column_family) {",
      "Status DBImpl::Flush(const FlushOptions& options) {"
    ]
  },
  {
    "code": [
      "Iterator* DBImpl::NewIterator(const ReadOptions& options,",
      "                              const ColumnFamilyHandle& column_family) {",
      "  SequenceNumber latest_snapshot;",
      "  Iterator* iter = NewInternalIterator(options, &latest_snapshot);",
      "  iter = NewDBIterator(",
      "             &dbname_, env_, options_, user_comparator(), iter,",
      "             (options.snapshot != nullptr",
      "              ? reinterpret_cast<const SnapshotImpl*>(options.snapshot)->number_",
      "              : latest_snapshot));",
      "Iterator* DBImpl::NewIterator(const ReadOptions& options) {",
      "  Iterator* iter;",
      "",
      "  if (options.tailing) {",
      "    iter = new TailingIterator(this, options, user_comparator());",
      "  } else {",
      "    SequenceNumber latest_snapshot;",
      "    iter = NewInternalIterator(options, &latest_snapshot);",
      "",
      "    iter = NewDBIterator(",
      "      &dbname_, env_, options_, user_comparator(), iter,",
      "      (options.snapshot != nullptr",
      "       ? reinterpret_cast<const SnapshotImpl*>(options.snapshot)->number_",
      "       : latest_snapshot));",
      "  }"
    ],
    "label": "",
    "index": 2,
    "confidence": 0.4,
    "desc": "List merge."
  }
]