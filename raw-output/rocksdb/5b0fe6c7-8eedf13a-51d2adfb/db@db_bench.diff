diff --git a/output/rocksdb/5b0fe6c7-8eedf13a-51d2adfb/db@db_bench.no_comments_mergebot.cc b/output/rocksdb/5b0fe6c7-8eedf13a-51d2adfb/db@db_bench.no_comments_truth.cc
index a7034b3..595e8d2 100644
--- a/output/rocksdb/5b0fe6c7-8eedf13a-51d2adfb/db@db_bench.no_comments_mergebot.cc
+++ b/output/rocksdb/5b0fe6c7-8eedf13a-51d2adfb/db@db_bench.no_comments_truth.cc
@@ -198 +198,2 @@ public:
-                "... thread %d: (%ld,%ld) ops (interval,total) in %.6f seconds and %.2f ops/sec\n",
+                "%s thread %d: (%ld,%ld) ops (interval,total) in %.6f seconds and %.2f ops/sec\n",
+                FLAGS_env->TimeToString((uint64_t) now/1000000).c_str(),
@@ -256,176 +257,3 @@ Random rand;
-  ThreadState(int index): tid(index), rand(1000 + index) {
-  }
-};
-}
-namespace {
-class RandomGenerator {
-private:
-  std::string data_;
-  int pos_;
-public:
-  RandomGenerator(){
-    Random rnd(301);
-    std::string piece;
-    while (data_.size() < 1048576) {
-      test::CompressibleString(&rnd, FLAGS_compression_ratio, 100, &piece);
-      data_.append(piece);
-    }
-    pos_ = 0;
-  }
-  Slice Generate(int len) {
-    if (pos_ + len > data_.size()) {
-      pos_ = 0;
-      assert(len < data_.size());
-    }
-    pos_ += len;
-    return Slice(data_.data() + pos_ - len, len);
-  }
-};
-static Slice TrimSpace(Slice s) {
-  int start = 0;
-  while (start < s.size() && isspace(s[start])) {
-    start++;
-  }
-  int limit = s.size();
-  while (limit > start && isspace(s[limit-1])) {
-    limit--;
-  }
-  return Slice(s.data() + start, limit - start);
-}
-static void AppendWithSpace(std::string* str, Slice msg) {
-  if (msg.empty()) return;
-  if (!str->empty()) {
-    str->push_back(' ');
-  }
-  str->append(msg.data(), msg.size());
-}
-class Stats {
-private:
-  int id_;
-  double start_;
-  double finish_;
-  double seconds_;
-  long done_;
-  long last_report_done_;
-  int next_report_;
-  int64_t bytes_;
-  double last_op_finish_;
-  double last_report_finish_;
-  Histogram hist_;
-  std::string message_;
-public:
-  Stats(){ Start(-1); }
-  void Start(int id) {
-    id_ = id;
-    next_report_ = FLAGS_stats_interval ? FLAGS_stats_interval : 100;
-    last_op_finish_ = start_;
-    hist_.Clear();
-    done_ = 0;
-    last_report_done_ = 0;
-    bytes_ = 0;
-    seconds_ = 0;
-    start_ = FLAGS_env->NowMicros();
-    finish_ = start_;
-    last_report_finish_ = start_;
-    message_.clear();
-  }
-  void Merge(const Stats& other) {
-    hist_.Merge(other.hist_);
-    done_ += other.done_;
-    bytes_ += other.bytes_;
-    seconds_ += other.seconds_;
-    if (other.start_ < start_) start_ = other.start_;
-    if (other.finish_ > finish_) finish_ = other.finish_;
-    if (message_.empty()) message_ = other.message_;
-  }
-  void Stop() {
-    finish_ = FLAGS_env->NowMicros();
-    seconds_ = (finish_ - start_) * 1e-6;
-  }
-  void AddMessage(Slice msg) {
-    AppendWithSpace(&message_, msg);
-  }
-  void SetId(int id) { id_ = id; }
-  void FinishedSingleOp() {
-    if (FLAGS_histogram) {
-      double now = FLAGS_env->NowMicros();
-      double micros = now - last_op_finish_;
-      hist_.Add(micros);
-      if (micros > 20000 && !FLAGS_stats_interval) {
-        fprintf(stderr, "long op: %.1f micros%30s\r", micros, "");
-        fflush(stderr);
-      }
-      last_op_finish_ = now;
-    }
-    done_++;
-    if (done_ >= next_report_) {
-      if (!FLAGS_stats_interval) {
-        if (next_report_ < 1000) next_report_ += 100;
-        else if (next_report_ < 5000) next_report_ += 500;
-        else if (next_report_ < 10000) next_report_ += 1000;
-        else if (next_report_ < 50000) next_report_ += 5000;
-        else if (next_report_ < 100000) next_report_ += 10000;
-        else if (next_report_ < 500000) next_report_ += 50000;
-        else next_report_ += 100000;
-        fprintf(stderr, "... finished %ld ops%30s\r", done_, "");
-        fflush(stderr);
-      } else {
-        double now = FLAGS_env->NowMicros();
-        fprintf(stderr,
-                "%s thread %d: %ld ops in %.6f seconds and %.2f ops/sec\n",
-                FLAGS_env->TimeToString((uint64_t) now/1000000).c_str(),
-                id_,
-                done_ - last_report_done_,
-                (now - last_report_finish_) / 1000000.0,
-                (done_ - last_report_done_) /
-                ((now - last_report_finish_) / 1000000.0));
-        fflush(stderr);
-        next_report_ += FLAGS_stats_interval;
-        last_report_finish_ = now;
-        last_report_done_ = done_;
-      }
-    }
-  }
-  void AddBytes(int64_t n) {
-    bytes_ += n;
-  }
-  void Report(const Slice& name) {
-    if (done_ < 1) done_ = 1;
-    std::string extra;
-    if (bytes_ > 0) {
-      double elapsed = (finish_ - start_) * 1e-6;
-      char rate[100];
-      snprintf(rate, sizeof(rate), "%6.1f MB/s",
-               (bytes_ / 1048576.0) / elapsed);
-      extra = rate;
-    }
-    AppendWithSpace(&extra, message_);
-    double elapsed = (finish_ - start_) * 1e-6;
-    double throughput = (double)done_/elapsed;
-    fprintf(stdout, "%-12s : %11.3f micros/op %ld ops/sec;%s%s\n",
-            name.ToString().c_str(),
-            seconds_ * 1e6 / done_,
-            (long)throughput,
-            (extra.empty() ? "" : " "),
-            extra.c_str());
-    if (FLAGS_histogram) {
-      fprintf(stdout, "Microseconds per op:\n%s\n", hist_.ToString().c_str());
-    }
-    fflush(stdout);
-  }
-};
-struct SharedState {
-  port::Mutex mu;
-  port::CondVar cv;
-  int total;
-  long num_initialized;
-  long num_done;
-  bool start;
-  SharedState(): cv(&mu) { }
-};
-struct ThreadState {
-int tid;
-Random rand;
-  Stats stats;
-  SharedState* shared;
-  ThreadState(int index): tid(index), rand(1000 + index) {
+  ThreadState(int index)
+      : tid(index),
+        rand(1000 + index) {
@@ -593,4 +420,0 @@ public:
-  }{
-    delete db_;
-    delete cache_;
-    delete filter_policy_;
@@ -1124,0 +949 @@ int main(int argc, char** argv) {
+  FLAGS_max_write_buffer_number = leveldb::Options().max_write_buffer_number;
@@ -1125,0 +951,2 @@ int main(int argc, char** argv) {
+  FLAGS_max_background_compactions =
+    leveldb::Options().max_background_compactions;
@@ -1153,0 +981,4 @@ int main(int argc, char** argv) {
+    } else if (sscanf(argv[i], "--max_write_buffer_number=%d%c", &n, &junk) == 1) {
+      FLAGS_max_write_buffer_number = n;
+    } else if (sscanf(argv[i], "--max_background_compactions=%d%c", &n, &junk) == 1) {
+      FLAGS_max_background_compactions = n;
@@ -1261,0 +1093 @@ int main(int argc, char** argv) {
+  FLAGS_env->SetBackgroundThreads(FLAGS_max_background_compactions);
