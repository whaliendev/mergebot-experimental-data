[
  {
    "code": [
      "#include \"leveldb/universal_compaction.h\"",
      "#include \"leveldb/memtablerep.h\""
    ],
    "label": "",
    "index": 0,
    "confidence": 0.7,
    "desc": "Headers merge."
  },
  {
    "desc": "De facto one-sided modification, accept their side.",
    "confidence": 0.7,
    "index": 1,
    "label": "",
    "code": [
      "  // The compaction style. Default: kCompactionStyleLevel",
      "  CompactionStyle compaction_style;",
      "",
      "  // The options needed to support Universal Style compactions",
      "  CompactionOptionsUniversal compaction_options_universal;",
      "",
      "  // Use bloom-filter for deletes when this is true.",
      "  // db->Delete first calls KeyMayExist which checks memtable,immutable-memtable",
      "  // and bloom-filters to determine if the key does not exist in the database.",
      "  // If the key definitely does not exist, then the delete is a noop.KeyMayExist",
      "  // only incurs in-memory look up. This optimization avoids writing the delete",
      "  // to storage when appropriate."
    ]
  },
  {
    "code": [
      "  bool filter_deletes;",
      "",
      "  // This is a factory that provides MemTableRep objects.",
      "  // Default: a factory that provides a skip-list-based implementation of",
      "  // MemTableRep.",
      "  std::shared_ptr<MemTableRepFactory> memtable_factory;",
      ""
    ],
    "label": "",
    "index": 2,
    "confidence": 0.7,
    "desc": "De facto one-sided modification, accept their side."
  }
]