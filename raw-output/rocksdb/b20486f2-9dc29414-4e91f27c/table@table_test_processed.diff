--- a/output/rocksdb/b20486f2-9dc29414-4e91f27c/table@table_test.no_comments_mergebot.cc
+++ b/output/rocksdb/b20486f2-9dc29414-4e91f27c/table@table_test.no_comments_truth.cc
@@ -17,0 +18 @@
+#include "rocksdb/plain_table_factory.h"
@@ -153 +154 @@ public:
-  DB* db() const { return constructor_->db(){ return constructor_->db(); }
+  virtual DB* db() const { return nullptr; }
@@ -165,2 +165,0 @@ public:
-  }{
-    delete block_;
@@ -194 +193 @@ private:
-class TableConstructor: public Constructor {
+class KeyConvertingIterator: public Iterator {
@@ -196 +195,8 @@ public:
-  explicitTableConstructor(const Comparator* cmp, bool convert_to_internal_key = false): Constructor(cmp), convert_to_internal_key_(convert_to_internal_key) {
+  explicit KeyConvertingIterator(Iterator* iter) : iter_(iter) { }
+  virtual ~KeyConvertingIterator() { delete iter_; }
+  virtual bool Valid() const { return iter_->Valid(); }
+  virtual void Seek(const Slice& target) {
+    ParsedInternalKey ikey(target, kMaxSequenceNumber, kTypeValue);
+    std::string encoded;
+    AppendInternalKey(&encoded, ikey);
+    iter_->Seek(encoded);
@@ -198,2 +204,16 @@ public:
-  ~TableConstructor() {
-    Reset();
+  virtual void SeekToFirst() { iter_->SeekToFirst(); }
+  virtual void SeekToLast() { iter_->SeekToLast(); }
+  virtual void Next() { iter_->Next(); }
+  virtual void Prev() { iter_->Prev(); }
+  virtual Slice key() const {
+    assert(Valid());
+    ParsedInternalKey key;
+    if (!ParseInternalKey(iter_->key(), &key)) {
+      status_ = Status::Corruption("malformed internal key");
+      return Slice("corrupted key");
+    }
+    return key.user_key;
+  }
+  virtual Slice value() const { return iter_->value(); }
+  virtual Status status() const {
+    return status_.ok() ? iter_->status() : status_;
@@ -200,0 +221,12 @@ public:
+ private:
+  mutable Status status_;
+  Iterator* iter_;
+  KeyConvertingIterator(const KeyConvertingIterator&);
+  void operator=(const KeyConvertingIterator&);
+};
+class TableConstructor: public Constructor {
+ public:
+  explicit TableConstructor(const Comparator* cmp,
+                            bool convert_to_internal_key = false)
+      : Constructor(cmp), convert_to_internal_key_(convert_to_internal_key) {}
+  ~TableConstructor() { Reset(); }
@@ -225,3 +257 @@ public:
-<<<<<<< HEAD
-    source_.reset(
-        new StringSource(sink_->contents(), uniq_id_,
+    source_.reset(new StringSource(sink_->contents(), uniq_id_,
@@ -229,10 +259,2 @@ public:
-    unique_ptr<TableFactory> table_factory;
-||||||| 4e91f27c3
-    source_.reset(new StringSource(sink_->contents(), uniq_id_));
-    unique_ptr<TableFactory> table_factory;
-=======
-    source_.reset(new StringSource(sink_->contents(), uniq_id_));
->>>>>>> 9dc29414
-    return options.table_factory->GetTableReader(options, soptions,
-                                                 std::move(source_),
-                                                 sink_->contents().size(),
+    return options.table_factory->GetTableReader(
+        options, soptions, std::move(source_), sink_->contents().size(),
@@ -280,34 +301,0 @@ private:
-class KeyConvertingIterator: public Iterator {
-public:
-  explicit KeyConvertingIterator(Iterator* iter) : iter_(iter) { }
-  virtual ~KeyConvertingIterator() { delete iter_; }{ delete iter_; }
-  virtual bool Valid() const { return iter_->Valid(){ return iter_->Valid(); }
-  virtual void Seek(const Slice& target) {
-    ParsedInternalKey ikey(target, kMaxSequenceNumber, kTypeValue);
-    std::string encoded;
-    AppendInternalKey(&encoded, ikey);
-    iter_->Seek(encoded);
-  }
-  virtual void SeekToFirst() { iter_->SeekToFirst(){ iter_->SeekToFirst(); }
-  virtual void SeekToLast() { iter_->SeekToLast(){ iter_->SeekToLast(); }
-  virtual void Next() { iter_->Next(){ iter_->Next(); }
-  virtual void Prev() { iter_->Prev(){ iter_->Prev(); }
-  virtual Slice key() const {
-    assert(Valid());
-    ParsedInternalKey key;
-    if (!ParseInternalKey(iter_->key(), &key)) {
-      status_ = Status::Corruption("malformed internal key");
-      return Slice("corrupted key");
-    }
-    return key.user_key;
-  }
-  virtual Slice value() const { return iter_->value(){ return iter_->value(); }
-  virtual Status status() const {
-    return status_.ok() ? iter_->status() : status_;
-  }
-private:
-  mutable Status status_;
-  Iterator* iter_;
-  KeyConvertingIterator(const KeyConvertingIterator&);
-  void operator=(const KeyConvertingIterator&);
-};
@@ -328,2 +315,0 @@ public:
-  }{
-    delete memtable_->Unref();
@@ -364,2 +349,0 @@ public:
-  }{
-    delete db_;
@@ -424,2 +408,7 @@ enum TestType {
-BLOCK_TEST,MEMTABLE_TEST, DB_TEST
-BLOCK_BASED_TABLE_TEST,PLAIN_TABLE_SEMI_FIXED_PREFIX,PLAIN_TABLE_FULL_STR_PREFIX,};
+  BLOCK_BASED_TABLE_TEST,
+  PLAIN_TABLE_SEMI_FIXED_PREFIX,
+  PLAIN_TABLE_FULL_STR_PREFIX,
+  BLOCK_TEST,
+  MEMTABLE_TEST,
+  DB_TEST
+};
@@ -521 +511 @@ public:
-    BlockBasedTableFactory::TableOptions table_options;
+    BlockBasedTableOptions table_options;
@@ -561,2 +550,0 @@ public:
-  }{
-    delete constructor_;
@@ -670,3 +658,2 @@ public:
-  std::string ToString(const KVMap& data,
-                       const KVMap::const_reverse_iterator& it) {
-    if (it == data.rend()) {
+  std::string ToString(const KVMap& data, const KVMap::const_iterator& it) {
+    if (it == data.end()) {
@@ -719 +706 @@ public:
-  DB* db() const { return constructor_->db(){ return constructor_->db(); }
+  DB* db() const { return constructor_->db(); }
@@ -728,8 +714,0 @@ private:
-public:
-  std::string ToString(const KVMap& data, const KVMap::const_iterator& it) {
-    if (it == data.end()) {
-      return "END";
-    } else {
-      return "'" + it->first + "->" + it->second + "'";
-    }
-  }
@@ -736,0 +716,2 @@ public:
+std::unique_ptr<const SliceTransform> Harness::noop_transform(
+    NewNoopTransform());
@@ -739,454 +720,7 @@ std::unique_ptr<const SliceTransform> Harness::prefix_transform(
-TEST(DBTest, TailingIteratorPrefixSeek) {
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  auto prefix_extractor = NewFixedPrefixTransform(8);
-  env_->count_random_reads_ = true;
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-  Options options = CurrentOptions();
-  options.env = env_;
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = prefix_extractor;
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-  options.create_if_missing = true;
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
+static bool Between(uint64_t val, uint64_t low, uint64_t high) {
+  bool result = (val >= low) && (val <= high);
+  if (!result) {
+    fprintf(stderr, "Value %llu is not in range [%llu, %llu]\n",
+            (unsigned long long)(val),
+            (unsigned long long)(low),
+            (unsigned long long)(high));
@@ -1194,13 +728 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
+  return result;
@@ -1208,12 +730,37 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
+class GeneralTableTest {};
+class BlockBasedTableTest {};
+class PlainTableTest {};
+TEST(BlockBasedTableTest, BasicBlockBasedTableProperties) {
+  TableConstructor c(BytewiseComparator());
+  c.Add("a1", "val1");
+  c.Add("b2", "val2");
+  c.Add("c3", "val3");
+  c.Add("d4", "val4");
+  c.Add("e5", "val5");
+  c.Add("f6", "val6");
+  c.Add("g7", "val7");
+  c.Add("h8", "val8");
+  c.Add("j9", "val9");
+  std::vector<std::string> keys;
+  KVMap kvmap;
+  Options options;
+  options.compression = kNoCompression;
+  options.block_restart_interval = 1;
+  c.Finish(options, &keys, &kvmap);
+  auto& props = c.table_reader()->GetTableProperties();
+  ASSERT_EQ(kvmap.size(), props.num_entries);
+  auto raw_key_size = kvmap.size() * 2ul;
+  auto raw_value_size = kvmap.size() * 4ul;
+  ASSERT_EQ(raw_key_size, props.raw_key_size);
+  ASSERT_EQ(raw_value_size, props.raw_value_size);
+  ASSERT_EQ(1ul, props.num_data_blocks);
+  ASSERT_EQ("", props.filter_policy_name);
+  BlockBuilder block_builder(options);
+  for (const auto& item : kvmap) {
+    block_builder.Add(item.first, item.second);
+  }
+  Slice content = block_builder.Finish();
+  ASSERT_EQ(
+      content.size() + kBlockTrailerSize,
+      props.data_size
+  );
@@ -1221 +768,13 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-    count++;
+TEST(BlockBasedTableTest, FilterPolicyNameProperties) {
+  TableConstructor c(BytewiseComparator());
+  c.Add("a1", "val1");
+  std::vector<std::string> keys;
+  KVMap kvmap;
+  Options options;
+  std::unique_ptr<const FilterPolicy> filter_policy(
+    NewBloomFilterPolicy(10)
+  );
+  options.filter_policy = filter_policy.get();
+  c.Finish(options, &keys, &kvmap);
+  auto& props = c.table_reader()->GetTableProperties();
+  ASSERT_EQ("rocksdb.BuiltinBloomFilter", props.filter_policy_name);
@@ -1223,20 +782,4 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
+static std::string RandomString(Random* rnd, int len) {
+  std::string r;
+  test::RandomString(rnd, len, &r);
+  return r;
@@ -1244,13 +787,6 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
+TEST(BlockBasedTableTest, IndexSizeStat) {
+  uint64_t last_index_size = 0;
+  Random rnd(test::RandomSeed());
+  std::vector<std::string> keys;
+  for (int i = 0; i < 100; ++i) {
+    keys.push_back(RandomString(&rnd, 10000));
@@ -1258,12 +794,4 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
+  for (size_t i = 1; i < keys.size(); ++i) {
+    TableConstructor c(BytewiseComparator());
+    for (size_t j = 0; j < i; ++j) {
+      c.Add(keys[j], "val");
@@ -1271 +799,10 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-    count++;
+    std::vector<std::string> ks;
+    KVMap kvmap;
+    Options options;
+    options.compression = kNoCompression;
+    options.block_restart_interval = 1;
+    c.Finish(options, &ks, &kvmap);
+    auto index_size =
+      c.table_reader()->GetTableProperties().index_size;
+    ASSERT_GT(index_size, last_index_size);
+    last_index_size = index_size;
@@ -1273,20 +809,0 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
@@ -1294,13 +811,9 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
+TEST(BlockBasedTableTest, NumBlockStat) {
+  Random rnd(test::RandomSeed());
+  TableConstructor c(BytewiseComparator());
+  Options options;
+  options.compression = kNoCompression;
+  options.block_restart_interval = 1;
+  options.block_size = 1000;
+  for (int i = 0; i < 10; ++i) {
+    c.Add(RandomString(&rnd, 900), "val");
@@ -1308,12 +821,7 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
+  std::vector<std::string> ks;
+  KVMap kvmap;
+  c.Finish(options, &ks, &kvmap);
+  ASSERT_EQ(
+      kvmap.size(),
+      c.table_reader()->GetTableProperties().num_data_blocks
+  );
@@ -1321 +829,9 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-    count++;
+class BlockCacheProperties {
+ public:
+  explicit BlockCacheProperties(Statistics* statistics) {
+    block_cache_miss = statistics->getTickerCount(BLOCK_CACHE_MISS);
+    block_cache_hit = statistics->getTickerCount(BLOCK_CACHE_HIT);
+    index_block_cache_miss = statistics->getTickerCount(BLOCK_CACHE_INDEX_MISS);
+    index_block_cache_hit = statistics->getTickerCount(BLOCK_CACHE_INDEX_HIT);
+    data_block_cache_miss = statistics->getTickerCount(BLOCK_CACHE_DATA_MISS);
+    data_block_cache_hit = statistics->getTickerCount(BLOCK_CACHE_DATA_HIT);
@@ -1323,20 +839,17 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
+  void AssertEqual(
+      long index_block_cache_miss,
+      long index_block_cache_hit,
+      long data_block_cache_miss,
+      long data_block_cache_hit) const {
+    ASSERT_EQ(index_block_cache_miss, this->index_block_cache_miss);
+    ASSERT_EQ(index_block_cache_hit, this->index_block_cache_hit);
+    ASSERT_EQ(data_block_cache_miss, this->data_block_cache_miss);
+    ASSERT_EQ(data_block_cache_hit, this->data_block_cache_hit);
+    ASSERT_EQ(
+        index_block_cache_miss + data_block_cache_miss,
+        this->block_cache_miss
+    );
+    ASSERT_EQ(
+        index_block_cache_hit + data_block_cache_hit,
+        this->block_cache_hit
+    );
@@ -1344,13 +857,30 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
+ private:
+  long block_cache_miss = 0;
+  long block_cache_hit = 0;
+  long index_block_cache_miss = 0;
+  long index_block_cache_hit = 0;
+  long data_block_cache_miss = 0;
+  long data_block_cache_hit = 0;
+};
+TEST(BlockBasedTableTest, BlockCacheTest) {
+  Options options;
+  options.create_if_missing = true;
+  options.statistics = CreateDBStatistics();
+  options.block_cache = NewLRUCache(1024);
+  BlockBasedTableOptions table_options;
+  table_options.cache_index_and_filter_blocks = true;
+  options.table_factory.reset(new BlockBasedTableFactory(table_options));
+  std::vector<std::string> keys;
+  KVMap kvmap;
+  TableConstructor c(BytewiseComparator());
+  c.Add("key", "value");
+  c.Finish(options, &keys, &kvmap);
+  unique_ptr<Iterator> iter;
+  {
+    BlockCacheProperties props(options.statistics.get());
+    props.AssertEqual(
+        1,
+        0,
+        0,
+        0
+    );
@@ -1358,12 +888,9 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
+  {
+    iter.reset(c.NewIterator());
+    BlockCacheProperties props(options.statistics.get());
+    props.AssertEqual(
+        1,
+        0 + 1,
+        0,
+        0
+    );
@@ -1371 +898,9 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-    count++;
+  {
+    iter->SeekToFirst();
+    BlockCacheProperties props(options.statistics.get());
+    props.AssertEqual(
+        1,
+        1,
+        0 + 1,
+        0
+    );
@@ -1373,20 +908,10 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
+  {
+    iter.reset(c.NewIterator());
+    iter->SeekToFirst();
+    BlockCacheProperties props(options.statistics.get());
+    props.AssertEqual(
+        1,
+        1 + 1,
+        1,
+        0 + 1
+    );
@@ -1394,13 +919,21 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
+  iter.reset();
+  options.block_cache.reset();
+  options.statistics = CreateDBStatistics();
+  c.Reopen(options);
+  {
+    iter.reset(c.NewIterator());
+    iter->SeekToFirst();
+    ASSERT_EQ("key", iter->key().ToString());
+    BlockCacheProperties props(options.statistics.get());
+    props.AssertEqual(0, 0, 0, 0);
+  }
+  options.block_cache = NewLRUCache(1);
+  c.Reopen(options);
+  {
+    BlockCacheProperties props(options.statistics.get());
+    props.AssertEqual(
+        1,
+        0,
+        0,
+        0
+    );
@@ -1408,12 +941,9 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
+  {
+    iter.reset(c.NewIterator());
+    BlockCacheProperties props(options.statistics.get());
+    props.AssertEqual(
+        1 + 1,
+        0,
+        0,
+        0
+    );
@@ -1421 +951,9 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-    count++;
+  {
+    iter->SeekToFirst();
+    BlockCacheProperties props(options.statistics.get());
+    props.AssertEqual(
+        2,
+        0,
+        0 + 1,
+        0
+    );
@@ -1423,20 +960,0 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
@@ -1444,13 +962,23 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
+TEST(BlockBasedTableTest, BlockCacheLeak) {
+  Options opt;
+  opt.block_size = 1024;
+  opt.compression = kNoCompression;
+  opt.block_cache =
+      NewLRUCache(16 * 1024 * 1024);
+  TableConstructor c(BytewiseComparator());
+  c.Add("k01", "hello");
+  c.Add("k02", "hello2");
+  c.Add("k03", std::string(10000, 'x'));
+  c.Add("k04", std::string(200000, 'x'));
+  c.Add("k05", std::string(300000, 'x'));
+  c.Add("k06", "hello3");
+  c.Add("k07", std::string(100000, 'x'));
+  std::vector<std::string> keys;
+  KVMap kvmap;
+  c.Finish(opt, &keys, &kvmap);
+  unique_ptr<Iterator> iter(c.NewIterator());
+  iter->SeekToFirst();
+  while (iter->Valid()) {
+    iter->key();
+    iter->value();
+    iter->Next();
@@ -1459,13 +987,3 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
+  ASSERT_OK(c.Reopen(opt));
+  for (const std::string& key : keys) {
+    ASSERT_TRUE(c.table_reader()->TEST_KeyInCache(ReadOptions(), key));
@@ -1473,20 +990,0 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
@@ -1494,13 +992,51 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
+extern const uint64_t kPlainTableMagicNumber;
+TEST(PlainTableTest, BasicPlainTableProperties) {
+  PlainTableFactory factory(8, 8, 0);
+  StringSink sink;
+  std::unique_ptr<TableBuilder> builder(
+      factory.GetTableBuilder(Options(), &sink, kNoCompression));
+  for (char c = 'a'; c <= 'z'; ++c) {
+    std::string key(16, c);
+    std::string value(28, c + 42);
+    builder->Add(key, value);
+  }
+  ASSERT_OK(builder->Finish());
+  StringSource source(sink.contents(), 72242, true);
+  TableProperties props;
+  auto s = ReadTableProperties(&source, sink.contents().size(),
+                               kPlainTableMagicNumber, Env::Default(), nullptr,
+                               &props);
+  ASSERT_OK(s);
+  ASSERT_EQ(0ul, props.index_size);
+  ASSERT_EQ(0ul, props.filter_size);
+  ASSERT_EQ(16ul * 26, props.raw_key_size);
+  ASSERT_EQ(28ul * 26, props.raw_value_size);
+  ASSERT_EQ(26ul, props.num_entries);
+  ASSERT_EQ(1ul, props.num_data_blocks);
+}
+TEST(GeneralTableTest, ApproximateOffsetOfPlain) {
+  TableConstructor c(BytewiseComparator());
+  c.Add("k01", "hello");
+  c.Add("k02", "hello2");
+  c.Add("k03", std::string(10000, 'x'));
+  c.Add("k04", std::string(200000, 'x'));
+  c.Add("k05", std::string(300000, 'x'));
+  c.Add("k06", "hello3");
+  c.Add("k07", std::string(100000, 'x'));
+  std::vector<std::string> keys;
+  KVMap kvmap;
+  Options options;
+  options.block_size = 1024;
+  options.compression = kNoCompression;
+  c.Finish(options, &keys, &kvmap);
+  ASSERT_TRUE(Between(c.ApproximateOffsetOf("abc"), 0, 0));
+  ASSERT_TRUE(Between(c.ApproximateOffsetOf("k01"), 0, 0));
+  ASSERT_TRUE(Between(c.ApproximateOffsetOf("k01a"), 0, 0));
+  ASSERT_TRUE(Between(c.ApproximateOffsetOf("k02"), 0, 0));
+  ASSERT_TRUE(Between(c.ApproximateOffsetOf("k03"), 0, 0));
+  ASSERT_TRUE(Between(c.ApproximateOffsetOf("k04"), 10000, 11000));
+  ASSERT_TRUE(Between(c.ApproximateOffsetOf("k04a"), 210000, 211000));
+  ASSERT_TRUE(Between(c.ApproximateOffsetOf("k05"), 210000, 211000));
+  ASSERT_TRUE(Between(c.ApproximateOffsetOf("k06"), 510000, 511000));
+  ASSERT_TRUE(Between(c.ApproximateOffsetOf("k07"), 510000, 511000));
+  ASSERT_TRUE(Between(c.ApproximateOffsetOf("xyz"), 610000, 612000));
@@ -1508,12 +1044,20 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
+static void DoCompressionTest(CompressionType comp) {
+  Random rnd(301);
+  TableConstructor c(BytewiseComparator());
+  std::string tmp;
+  c.Add("k01", "hello");
+  c.Add("k02", test::CompressibleString(&rnd, 0.25, 10000, &tmp));
+  c.Add("k03", "hello3");
+  c.Add("k04", test::CompressibleString(&rnd, 0.25, 10000, &tmp));
+  std::vector<std::string> keys;
+  KVMap kvmap;
+  Options options;
+  options.block_size = 1024;
+  options.compression = comp;
+  c.Finish(options, &keys, &kvmap);
+  ASSERT_TRUE(Between(c.ApproximateOffsetOf("abc"), 0, 0));
+  ASSERT_TRUE(Between(c.ApproximateOffsetOf("k01"), 0, 0));
+  ASSERT_TRUE(Between(c.ApproximateOffsetOf("k02"), 0, 0));
+  ASSERT_TRUE(Between(c.ApproximateOffsetOf("k03"), 2000, 3000));
+  ASSERT_TRUE(Between(c.ApproximateOffsetOf("k04"), 2000, 3000));
+  ASSERT_TRUE(Between(c.ApproximateOffsetOf("xyz"), 4000, 6100));
@@ -1521 +1065,8 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-    count++;
+TEST(GeneralTableTest, ApproximateOffsetOfCompressed) {
+  CompressionType compression_state[2];
+  int valid = 0;
+  if (!SnappyCompressionSupported()) {
+    fprintf(stderr, "skipping snappy compression tests\n");
+  } else {
+    compression_state[valid] = kSnappyCompression;
+    valid++;
@@ -1523,16679 +1074,51 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
->>>>>>> 9dc29414
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-<<<<<<< HEAD
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-||||||| 4e91f27c3
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
->>>>>>> 9dc29414
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-=======
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-}
-extern const uint64_t kPlainTableMagicNumber;
-TEST(DBTest, TailingIteratorPrefixSeek) {
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  auto prefix_extractor = NewFixedPrefixTransform(8);
-  env_->count_random_reads_ = true;
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-  Options options = CurrentOptions();
-  options.env = env_;
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = prefix_extractor;
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-  options.create_if_missing = true;
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
->>>>>>> 9dc29414
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-<<<<<<< HEAD
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-||||||| 4e91f27c3
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
->>>>>>> 9dc29414
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-=======
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-}
-TEST(DBTest, TailingIteratorPrefixSeek) {
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  auto prefix_extractor = NewFixedPrefixTransform(8);
-  env_->count_random_reads_ = true;
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-  Options options = CurrentOptions();
-  options.env = env_;
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = prefix_extractor;
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-  options.create_if_missing = true;
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
->>>>>>> 9dc29414
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-<<<<<<< HEAD
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-||||||| 4e91f27c3
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
->>>>>>> 9dc29414
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-=======
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-}
-TEST(DBTest, TailingIteratorPrefixSeek) {
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  auto prefix_extractor = NewFixedPrefixTransform(8);
-  env_->count_random_reads_ = true;
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-  Options options = CurrentOptions();
-  options.env = env_;
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = prefix_extractor;
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-  options.create_if_missing = true;
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
->>>>>>> 9dc29414
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-<<<<<<< HEAD
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-||||||| 4e91f27c3
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
->>>>>>> 9dc29414
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-=======
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-}
-static bool Between(uint64_t val, uint64_t low, uint64_t high) {
-  bool result = (val >= low) && (val <= high);
-  if (!result) {
-    fprintf(stderr, "Value %llu is not in range [%llu, %llu]\n",
-            (unsigned long long)(val),
-            (unsigned long long)(low),
-            (unsigned long long)(high));
-  }
-  return result;
-}
-class GeneralTableTest {};
-class BlockBasedTableTest {};
-class PlainTableTest {};
-TEST(DBTest, TailingIteratorPrefixSeek) {
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  auto prefix_extractor = NewFixedPrefixTransform(8);
-  env_->count_random_reads_ = true;
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-  Options options = CurrentOptions();
-  options.env = env_;
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = prefix_extractor;
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-  options.create_if_missing = true;
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
->>>>>>> 9dc29414
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-<<<<<<< HEAD
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-||||||| 4e91f27c3
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
->>>>>>> 9dc29414
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-=======
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-}
-TEST(DBTest, TailingIteratorPrefixSeek) {
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  auto prefix_extractor = NewFixedPrefixTransform(8);
-  env_->count_random_reads_ = true;
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-  Options options = CurrentOptions();
-  options.env = env_;
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = prefix_extractor;
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-  options.create_if_missing = true;
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
->>>>>>> 9dc29414
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-<<<<<<< HEAD
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-||||||| 4e91f27c3
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
->>>>>>> 9dc29414
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-=======
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-}
-static std::string RandomString(Random* rnd, int len) {
-  std::string r;
-  test::RandomString(rnd, len, &r);
-  return r;
-}
-TEST(DBTest, TailingIteratorPrefixSeek) {
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  auto prefix_extractor = NewFixedPrefixTransform(8);
-  env_->count_random_reads_ = true;
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-  Options options = CurrentOptions();
-  options.env = env_;
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = prefix_extractor;
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-  options.create_if_missing = true;
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
->>>>>>> 9dc29414
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-<<<<<<< HEAD
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-||||||| 4e91f27c3
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
->>>>>>> 9dc29414
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-=======
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-}
-TEST(DBTest, TailingIteratorPrefixSeek) {
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  auto prefix_extractor = NewFixedPrefixTransform(8);
-  env_->count_random_reads_ = true;
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-  Options options = CurrentOptions();
-  options.env = env_;
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = prefix_extractor;
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-  options.create_if_missing = true;
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
->>>>>>> 9dc29414
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-<<<<<<< HEAD
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-||||||| 4e91f27c3
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
->>>>>>> 9dc29414
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-=======
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-}
-class BlockCacheProperties {
-public:
-  explicit BlockCacheProperties(Statistics* statistics) {
-    block_cache_miss = statistics->getTickerCount(BLOCK_CACHE_MISS);
-    block_cache_hit = statistics->getTickerCount(BLOCK_CACHE_HIT);
-    index_block_cache_miss = statistics->getTickerCount(BLOCK_CACHE_INDEX_MISS);
-    index_block_cache_hit = statistics->getTickerCount(BLOCK_CACHE_INDEX_HIT);
-    data_block_cache_miss = statistics->getTickerCount(BLOCK_CACHE_DATA_MISS);
-    data_block_cache_hit = statistics->getTickerCount(BLOCK_CACHE_DATA_HIT);
-  }
-  void AssertEqual(
-      long index_block_cache_miss,
-      long index_block_cache_hit,
-      long data_block_cache_miss,
-      long data_block_cache_hit) const {
-    ASSERT_EQ(index_block_cache_miss, this->index_block_cache_miss);
-    ASSERT_EQ(index_block_cache_hit, this->index_block_cache_hit);
-    ASSERT_EQ(data_block_cache_miss, this->data_block_cache_miss);
-    ASSERT_EQ(data_block_cache_hit, this->data_block_cache_hit);
-    ASSERT_EQ(
-        index_block_cache_miss + data_block_cache_miss,
-        this->block_cache_miss
-    );
-    ASSERT_EQ(
-        index_block_cache_hit + data_block_cache_hit,
-        this->block_cache_hit
-    );
-  }
-private:
-  long block_cache_miss = 0;
-  long block_cache_hit = 0;
-  long index_block_cache_miss = 0;
-  long index_block_cache_hit = 0;
-  long data_block_cache_miss = 0;
-  long data_block_cache_hit = 0;
-};
-TEST(DBTest, TailingIteratorPrefixSeek) {
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  auto prefix_extractor = NewFixedPrefixTransform(8);
-  env_->count_random_reads_ = true;
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-  Options options = CurrentOptions();
-  options.env = env_;
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = prefix_extractor;
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-  options.create_if_missing = true;
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
->>>>>>> 9dc29414
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-<<<<<<< HEAD
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-||||||| 4e91f27c3
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
->>>>>>> 9dc29414
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-=======
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-}
-TEST(DBTest, TailingIteratorPrefixSeek) {
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  auto prefix_extractor = NewFixedPrefixTransform(8);
-  env_->count_random_reads_ = true;
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-  Options options = CurrentOptions();
-  options.env = env_;
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = prefix_extractor;
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-  options.create_if_missing = true;
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
->>>>>>> 9dc29414
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-<<<<<<< HEAD
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-||||||| 4e91f27c3
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
->>>>>>> 9dc29414
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-=======
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-}
-static void DoCompressionTest(CompressionType comp) {
-  Random rnd(301);
-  TableConstructor c(BytewiseComparator());
-  std::string tmp;
-  c.Add("k01", "hello");
-  c.Add("k02", test::CompressibleString(&rnd, 0.25, 10000, &tmp));
-  c.Add("k03", "hello3");
-  c.Add("k04", test::CompressibleString(&rnd, 0.25, 10000, &tmp));
-  std::vector<std::string> keys;
-  KVMap kvmap;
-  Options options;
-  options.block_size = 1024;
-  options.compression = comp;
-  c.Finish(options, &keys, &kvmap);
-  ASSERT_TRUE(Between(c.ApproximateOffsetOf("abc"), 0, 0));
-  ASSERT_TRUE(Between(c.ApproximateOffsetOf("k01"), 0, 0));
-  ASSERT_TRUE(Between(c.ApproximateOffsetOf("k02"), 0, 0));
-  ASSERT_TRUE(Between(c.ApproximateOffsetOf("k03"), 2000, 3000));
-  ASSERT_TRUE(Between(c.ApproximateOffsetOf("k04"), 2000, 3000));
-  ASSERT_TRUE(Between(c.ApproximateOffsetOf("xyz"), 4000, 6100));
-}
-TEST(DBTest, TailingIteratorPrefixSeek) {
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  auto prefix_extractor = NewFixedPrefixTransform(8);
-  env_->count_random_reads_ = true;
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-  Options options = CurrentOptions();
-  options.env = env_;
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = prefix_extractor;
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-  options.create_if_missing = true;
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
->>>>>>> 9dc29414
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-<<<<<<< HEAD
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-||||||| 4e91f27c3
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
->>>>>>> 9dc29414
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-=======
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-}
-TEST(DBTest, TailingIteratorPrefixSeek) {
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  auto prefix_extractor = NewFixedPrefixTransform(8);
-  env_->count_random_reads_ = true;
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-  Options options = CurrentOptions();
-  options.env = env_;
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = prefix_extractor;
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-  options.create_if_missing = true;
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
->>>>>>> 9dc29414
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-<<<<<<< HEAD
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-||||||| 4e91f27c3
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
->>>>>>> 9dc29414
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-=======
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-}
-TEST(DBTest, TailingIteratorPrefixSeek) {
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  auto prefix_extractor = NewFixedPrefixTransform(8);
-  env_->count_random_reads_ = true;
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-  Options options = CurrentOptions();
-  options.env = env_;
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = prefix_extractor;
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-  options.create_if_missing = true;
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
->>>>>>> 9dc29414
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-<<<<<<< HEAD
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-||||||| 4e91f27c3
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
->>>>>>> 9dc29414
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-=======
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-}
-TEST(DBTest, TailingIteratorPrefixSeek) {
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  auto prefix_extractor = NewFixedPrefixTransform(8);
-  env_->count_random_reads_ = true;
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-  Options options = CurrentOptions();
-  options.env = env_;
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = prefix_extractor;
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-  options.create_if_missing = true;
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
->>>>>>> 9dc29414
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-<<<<<<< HEAD
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-||||||| 4e91f27c3
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
->>>>>>> 9dc29414
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-=======
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
+  if (!ZlibCompressionSupported()) {
+    fprintf(stderr, "skipping zlib compression tests\n");
+  } else {
+    compression_state[valid] = kZlibCompression;
+    valid++;
+  }
+  for(int i =0; i < valid; i++)
+  {
+    DoCompressionTest(compression_state[i]);
+  }
+}
+TEST(Harness, Randomized) {
+  std::vector<TestArgs> args = GenerateArgList();
+  for (unsigned int i = 0; i < args.size(); i++) {
+    Init(args[i]);
+    Random rnd(test::RandomSeed() + 5);
+    for (int num_entries = 0; num_entries < 2000;
+         num_entries += (num_entries < 50 ? 1 : 200)) {
+      if ((num_entries % 10) == 0) {
+        fprintf(stderr, "case %d of %d: num_entries = %d\n",
+                (i + 1), int(args.size()), num_entries);
+      }
+      for (int e = 0; e < num_entries; e++) {
+        std::string v;
+        Add(test::RandomKey(&rnd, rnd.Skewed(4)),
+            test::RandomString(&rnd, rnd.Skewed(5), &v).ToString());
+      }
+      Test(&rnd);
+    }
+  }
+}
+TEST(Harness, RandomizedLongDB) {
+  Random rnd(test::RandomSeed());
+  TestArgs args = { DB_TEST, false, 16, kNoCompression };
+  Init(args);
+  int num_entries = 100000;
+  for (int e = 0; e < num_entries; e++) {
+    std::string v;
+    Add(test::RandomKey(&rnd, rnd.Skewed(4)),
+        test::RandomString(&rnd, rnd.Skewed(5), &v).ToString());
+  }
+  Test(&rnd);
+  int files = 0;
+  for (int level = 0; level < db()->NumberLevels(); level++) {
+    std::string value;
+    char name[100];
+    snprintf(name, sizeof(name), "rocksdb.num-files-at-level%d", level);
+    ASSERT_TRUE(db()->GetProperty(name, &value));
+    files += atoi(value.c_str());
+  }
+  ASSERT_GT(files, 0);
@@ -18204,918 +1127,21 @@ class MemTableTest {};
-TEST(DBTest, TailingIteratorPrefixSeek) {
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  env_->count_random_reads_ = true;
-||||||| 4e91f27c3
-  ReadOptions ro = ReadOptions();
-  int count;
-  Slice prefix;
-  Slice key;
-  char buf[100];
-  Iterator* iter;
-  snprintf(buf, sizeof(buf), "03______:");
-  prefix = Slice(buf, 8);
-  key = Slice(buf, 9);
-  auto prefix_extractor = NewFixedPrefixTransform(8);
-  env_->count_random_reads_ = true;
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-=======
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
->>>>>>> 9dc29414
-  Options options = CurrentOptions();
-  options.env = env_;
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = NewFixedPrefixTransform(8);
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-||||||| 4e91f27c3
-  options.no_block_cache = true;
-  options.filter_policy = NewBloomFilterPolicy(10);
-  options.prefix_extractor = prefix_extractor;
-  options.whole_key_filtering = false;
-  options.disable_auto_compactions = true;
-  options.max_background_compactions = 2;
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-=======
->>>>>>> 9dc29414
-  options.create_if_missing = true;
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
-    }
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
-  }
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->Seek(key); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
+TEST(MemTableTest, Simple) {
+  InternalKeyComparator cmp(BytewiseComparator());
+  auto table_factory = std::make_shared<SkipListFactory>();
+  Options options;
+  options.memtable_factory = table_factory;
+  MemTable* memtable = new MemTable(cmp, options);
+  memtable->Ref();
+  WriteBatch batch;
+  WriteBatchInternal::SetSequence(&batch, 100);
+  batch.Put(std::string("k1"), std::string("v1"));
+  batch.Put(std::string("k2"), std::string("v2"));
+  batch.Put(std::string("k3"), std::string("v3"));
+  batch.Put(std::string("largekey"), std::string("vlarge"));
+  ASSERT_TRUE(WriteBatchInternal::InsertInto(&batch, memtable, &options).ok());
+  Iterator* iter = memtable->NewIterator();
+  iter->SeekToFirst();
+  while (iter->Valid()) {
+    fprintf(stderr, "key: '%s' -> '%s'\n",
+            iter->key().ToString().c_str(),
+            iter->value().ToString().c_str());
+    iter->Next();
@@ -19123 +1148,0 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  ASSERT_OK(iter->status());
@@ -19125,10 +1150 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
+  delete memtable->Unref();
@@ -19136 +1152,7 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-    count++;
+TEST(Harness, SimpleEmptyKey) {
+  auto args = GenerateArgList();
+  for (const auto& arg : args) {
+    Init(arg);
+    Random rnd(test::RandomSeed() + 1);
+    Add("", "v");
+    Test(&rnd);
@@ -19138,33 +1159,0 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
->>>>>>> 9dc29414
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-<<<<<<< HEAD
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
@@ -19172 +1161,7 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-    count++;
+TEST(Harness, SimpleSingle) {
+  auto args = GenerateArgList();
+  for (const auto& arg : args) {
+    Init(arg);
+    Random rnd(test::RandomSeed() + 2);
+    Add("abc", "v");
+    Test(&rnd);
@@ -19174,21 +1168,0 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-||||||| 4e91f27c3
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
@@ -19196,18 +1170,9 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  ro.prefix = &prefix;
-  iter = db_->NewIterator(ro);
-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
-    assert(iter->key().starts_with(prefix));
-    count++;
+TEST(Harness, SimpleMulti) {
+  auto args = GenerateArgList();
+  for (const auto& arg : args) {
+    Init(arg);
+    Random rnd(test::RandomSeed() + 3);
+    Add("abc", "v");
+    Add("abcd", "v");
+    Add("ac", "v2");
+    Test(&rnd);
@@ -19215,40 +1179,0 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
-||||||| 4e91f27c3
-<<<<<<< HEAD
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(
-      NewHashSkipListRepFactory(options.prefix_extractor));
-||||||| 4e91f27c3
-  options.disable_seek_compaction = true;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
->>>>>>> 9dc29414
-  DestroyAndReopen(&options);
-  PrefixScanInit(this);
-  count = 0;
-  env_->random_read_counter_.Reset();
-  iter = db_->NewIterator(ReadOptions());
-  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
-    if (! iter->key().starts_with(prefix)) {
-      break;
@@ -19256 +1181,7 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-    count++;
+TEST(Harness, SimpleSpecialKey) {
+  auto args = GenerateArgList();
+  for (const auto& arg : args) {
+    Init(arg);
+    Random rnd(test::RandomSeed() + 4);
+    Add("\xff\xff", "v3");
+    Test(&rnd);
@@ -19258,187 +1188,0 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  ASSERT_OK(iter->status());
-  delete iter;
-  ASSERT_EQ(count, 2);
-  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
-  Close();
-  delete options.filter_policy;
-=======
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
-=======
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
->>>>>>> 9dc29414
@@ -19448,7 +1191,0 @@ int main(int argc, char** argv) {
-  if (argc > 1 && std::string(argv[1]) == "--benchmark") {
-    rocksdb::BM_LogAndApply(1000, 1);
-    rocksdb::BM_LogAndApply(1000, 100);
-    rocksdb::BM_LogAndApply(1000, 10000);
-    rocksdb::BM_LogAndApply(100, 100000);
-    return 0;
-  }
