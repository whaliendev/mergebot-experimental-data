--- a/output/rocksdb/e86d7dff-577556d5-b9ce156e/db@db_test.no_comments_mergebot.cc
+++ b/output/rocksdb/e86d7dff-577556d5-b9ce156e/db@db_test.no_comments_truth.cc
@@ -258 +257,0 @@ public:
-    last_options_.max_background_flushes = 0;
@@ -270,5 +268,0 @@ public:
-  }{
-    Close();
-    ASSERT_OK(DestroyDB(dbname_, Options()));
-    delete env_;
-    delete filter_policy_;
@@ -319,2 +312,0 @@ public:
-    options.paranoid_checks = false;
-    options.max_background_flushes = 0;
@@ -544,0 +546,52 @@ public:
+  std::string AllEntriesFor(const Slice& user_key, int cf = 0) {
+    Iterator* iter;
+    if (cf == 0) {
+      iter = dbfull()->TEST_NewInternalIterator();
+    } else {
+      iter = dbfull()->TEST_NewInternalIterator(handles_[cf]);
+    }
+    InternalKey target(user_key, kMaxSequenceNumber, kTypeValue);
+    iter->Seek(target.Encode());
+    std::string result;
+    if (!iter->status().ok()) {
+      result = iter->status().ToString();
+    } else {
+      result = "[ ";
+      bool first = true;
+      while (iter->Valid()) {
+        ParsedInternalKey ikey(Slice(), 0, kTypeValue);
+        if (!ParseInternalKey(iter->key(), &ikey)) {
+          result += "CORRUPTED";
+        } else {
+          if (last_options_.comparator->Compare(ikey.user_key, user_key) != 0) {
+            break;
+          }
+          if (!first) {
+            result += ", ";
+          }
+          first = false;
+          switch (ikey.type) {
+            case kTypeValue:
+              result += iter->value().ToString();
+              break;
+            case kTypeMerge:
+              result += iter->value().ToString();
+              break;
+            case kTypeDeletion:
+              result += "DEL";
+              break;
+            default:
+              assert(false);
+              break;
+          }
+        }
+        iter->Next();
+      }
+      if (!first) {
+        result += " ";
+      }
+      result += "]";
+    }
+    delete iter;
+    return result;
+  }
@@ -556,0 +610,27 @@ public:
+  int TotalTableFiles(int cf = 0, int levels = -1) {
+    if (levels == -1) {
+      levels = CurrentOptions().num_levels;
+    }
+    int result = 0;
+    for (int level = 0; level < levels; level++) {
+      result += NumTableFilesAtLevel(level, cf);
+    }
+    return result;
+  }
+  std::string FilesPerLevel(int cf = 0) {
+    int num_levels =
+        (cf == 0) ? db_->NumberLevels() : db_->NumberLevels(handles_[1]);
+    std::string result;
+    int last_non_zero_offset = 0;
+    for (int level = 0; level < num_levels; level++) {
+      int f = NumTableFilesAtLevel(level, cf);
+      char buf[100];
+      snprintf(buf, sizeof(buf), "%s%d", (level ? "," : ""), f);
+      result += buf;
+      if (f > 0) {
+        last_non_zero_offset = result.size();
+      }
+    }
+    result.resize(last_non_zero_offset);
+    return result;
+  }
@@ -729,79 +809,0 @@ public:
-  std::string AllEntriesFor(const Slice& user_key, int cf = 0) {
-    Iterator* iter;
-    if (cf == 0) {
-      iter = dbfull()->TEST_NewInternalIterator();
-    } else {
-      iter = dbfull()->TEST_NewInternalIterator(handles_[cf]);
-    }
-    InternalKey target(user_key, kMaxSequenceNumber, kTypeValue);
-    iter->Seek(target.Encode());
-    std::string result;
-    if (!iter->status().ok()) {
-      result = iter->status().ToString();
-    } else {
-      result = "[ ";
-      bool first = true;
-      while (iter->Valid()) {
-        ParsedInternalKey ikey(Slice(), 0, kTypeValue);
-        if (!ParseInternalKey(iter->key(), &ikey)) {
-          result += "CORRUPTED";
-        } else {
-          if (last_options_.comparator->Compare(ikey.user_key, user_key) != 0) {
-            break;
-          }
-          if (!first) {
-            result += ", ";
-          }
-          first = false;
-          switch (ikey.type) {
-            case kTypeValue:
-              result += iter->value().ToString();
-              break;
-            case kTypeMerge:
-              result += iter->value().ToString();
-              break;
-            case kTypeDeletion:
-              result += "DEL";
-              break;
-            default:
-              assert(false);
-              break;
-          }
-        }
-        iter->Next();
-      }
-      if (!first) {
-        result += " ";
-      }
-      result += "]";
-    }
-    delete iter;
-    return result;
-  }
-  int TotalTableFiles(int cf = 0, int levels = -1) {
-    if (levels == -1) {
-      levels = CurrentOptions().num_levels;
-    }
-    int result = 0;
-    for (int level = 0; level < levels; level++) {
-      result += NumTableFilesAtLevel(level, cf);
-    }
-    return result;
-  }
-  std::string FilesPerLevel(int cf = 0) {
-    int num_levels =
-        (cf == 0) ? db_->NumberLevels() : db_->NumberLevels(handles_[1]);
-    std::string result;
-    int last_non_zero_offset = 0;
-    for (int level = 0; level < num_levels; level++) {
-      int f = NumTableFilesAtLevel(level, cf);
-      char buf[100];
-      snprintf(buf, sizeof(buf), "%s%d", (level ? "," : ""), f);
-      result += buf;
-      if (f > 0) {
-        last_non_zero_offset = result.size();
-      }
-    }
-    result.resize(last_non_zero_offset);
-    return result;
-  }
@@ -849,4 +851,2 @@ void AddRandomKV(MemTable* memtable, Random* rnd, size_t arena_block_size) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
+TEST(DBTest, Empty) {
+  do {
@@ -854,0 +855,33 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
+    options.write_buffer_size = 100000;
+    CreateAndReopenWithCF({"pikachu"}, &options);
+    ASSERT_OK(Put(1, "foo", "v1"));
+    ASSERT_EQ("v1", Get(1, "foo"));
+    env_->delay_sstable_sync_.Release_Store(env_);
+    Put(1, "k1", std::string(100000, 'x'));
+    Put(1, "k2", std::string(100000, 'y'));
+    ASSERT_EQ("v1", Get(1, "foo"));
+    env_->delay_sstable_sync_.Release_Store(nullptr);
+  } while (ChangeOptions());
+}
+TEST(DBTest, ReadOnlyDB) {
+  ASSERT_OK(Put("foo", "v1"));
+  ASSERT_OK(Put("bar", "v2"));
+  ASSERT_OK(Put("foo", "v3"));
+  Close();
+  Options options;
+  ASSERT_OK(ReadOnlyReopen(&options));
+  ASSERT_EQ("v3", Get("foo"));
+  ASSERT_EQ("v2", Get("bar"));
+  Iterator* iter = db_->NewIterator(ReadOptions());
+  int count = 0;
+  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
+    ASSERT_OK(iter->status());
+    ++count;
+  }
+  ASSERT_EQ(count, 2);
+  delete iter;
+}
+TEST(DBTest, IndexAndFilterBlocksOfNewTableAddedToCache) {
+  Options options = CurrentOptions();
+  std::unique_ptr<const FilterPolicy> filter_policy(NewBloomFilterPolicy(20));
+  options.filter_policy = filter_policy.get();
@@ -856,15 +889,36 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.disable_auto_compactions = true;
-  options.prefix_extractor.reset(NewFixedPrefixTransform(2));
-  options.memtable_factory.reset(NewHashSkipListRepFactory());
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+  options.statistics = rocksdb::CreateDBStatistics();
+  BlockBasedTableOptions table_options;
+  table_options.cache_index_and_filter_blocks = true;
+  options.table_factory.reset(new BlockBasedTableFactory(table_options));
+  CreateAndReopenWithCF({"pikachu"}, &options);
+  ASSERT_OK(Put(1, "key", "val"));
+  ASSERT_OK(Flush(1));
+  ASSERT_EQ(1, TestGetTickerCount(options, BLOCK_CACHE_INDEX_MISS));
+  ASSERT_EQ(1, TestGetTickerCount(options, BLOCK_CACHE_FILTER_MISS));
+  ASSERT_EQ(2,
+            TestGetTickerCount(options, BLOCK_CACHE_ADD));
+  ASSERT_EQ(0, TestGetTickerCount(options, BLOCK_CACHE_DATA_MISS));
+  std::string value;
+  ReadOptions ropt;
+  db_->KeyMayExist(ReadOptions(), handles_[1], "key", &value);
+  ASSERT_EQ(1, TestGetTickerCount(options, BLOCK_CACHE_FILTER_MISS));
+  ASSERT_EQ(1, TestGetTickerCount(options, BLOCK_CACHE_FILTER_HIT));
+  db_->KeyMayExist(ReadOptions(), handles_[1], "key", &value);
+  ASSERT_EQ(1, TestGetTickerCount(options, BLOCK_CACHE_FILTER_MISS));
+  ASSERT_EQ(2, TestGetTickerCount(options, BLOCK_CACHE_FILTER_HIT));
+  auto index_block_hit = TestGetTickerCount(options, BLOCK_CACHE_FILTER_HIT);
+  value = Get(1, "key");
+  ASSERT_EQ(1, TestGetTickerCount(options, BLOCK_CACHE_FILTER_MISS));
+  ASSERT_EQ(index_block_hit + 1,
+            TestGetTickerCount(options, BLOCK_CACHE_FILTER_HIT));
+  value = Get(1, "key");
+  ASSERT_EQ(1, TestGetTickerCount(options, BLOCK_CACHE_FILTER_MISS));
+  ASSERT_EQ(index_block_hit + 2,
+            TestGetTickerCount(options, BLOCK_CACHE_FILTER_HIT));
+}
+TEST(DBTest, GetPropertiesOfAllTablesTest) {
+  Options options = CurrentOptions();
+  Reopen(&options);
+  for (int table = 0; table < 4; ++table) {
+    for (int i = 0; i < 10 + table; ++i) {
+      db_->Put(WriteOptions(), std::to_string(table * 100 + i), "val");
@@ -872,16 +926 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-namespace {
-static const int kGCNumThreads = 4;
-static const int kGCNumKeys = 1000;
-struct GCThread {
-  DB* db;
-  int id;
-  std::atomic<bool> done;
-};
-static void GCThreadBody(void* arg) {
-  GCThread* t = reinterpret_cast<GCThread*>(arg);
-  int id = t->id;
-  DB* db = t->db;
-  WriteOptions wo;
-  for (int i = 0; i < kGCNumKeys; ++i) {
-    std::string kv(std::to_string(i + id * kGCNumKeys));
-    ASSERT_OK(db->Put(wo, kv, kv));
+    db_->Flush(FlushOptions());
@@ -889 +928,5 @@ static void GCThreadBody(void* arg) {
-  t->done = true;
+  Reopen(&options);
+  VerifyTableProperties(db_, 10 + 11 + 12 + 13);
+  Reopen(&options);
+  for (int i = 0; i < 2; ++i) {
+    Get(std::to_string(i * 100 + 0));
@@ -890,0 +934,4 @@ static void GCThreadBody(void* arg) {
+  VerifyTableProperties(db_, 10 + 11 + 12 + 13);
+  Reopen(&options);
+  for (int i = 0; i < 4; ++i) {
+    Get(std::to_string(i * 100 + 0));
@@ -892,22 +939 @@ static void GCThreadBody(void* arg) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  Options options = CurrentOptions();
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor.reset(NewFixedPrefixTransform(2));
-  options.memtable_factory.reset(NewHashSkipListRepFactory());
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+  VerifyTableProperties(db_, 10 + 11 + 12 + 13);
@@ -915,4 +941 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
+TEST(DBTest, LevelLimitReopen) {
@@ -920,22 +943,50 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor.reset(NewFixedPrefixTransform(2));
-  options.memtable_factory.reset(NewHashSkipListRepFactory());
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
-}
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
+  CreateAndReopenWithCF({"pikachu"}, &options);
+  const std::string value(1024 * 1024, ' ');
+  int i = 0;
+  while (NumTableFilesAtLevel(2, 1) == 0) {
+    ASSERT_OK(Put(1, Key(i++), value));
+  }
+  options.num_levels = 1;
+  options.max_bytes_for_level_multiplier_additional.resize(1, 1);
+  Status s = TryReopenWithColumnFamilies({"default", "pikachu"}, &options);
+  ASSERT_EQ(s.IsInvalidArgument(), true);
+  ASSERT_EQ(s.ToString(),
+            "Invalid argument: db has more levels than options.num_levels");
+  options.num_levels = 10;
+  options.max_bytes_for_level_multiplier_additional.resize(10, 1);
+  ASSERT_OK(TryReopenWithColumnFamilies({"default", "pikachu"}, &options));
+}
+TEST(DBTest, Preallocation) {
+  const std::string src = dbname_ + "/alloc_test";
+  unique_ptr<WritableFile> srcfile;
+  const EnvOptions soptions;
+  ASSERT_OK(env_->NewWritableFile(src, &srcfile, soptions));
+  srcfile->SetPreallocationBlockSize(1024 * 1024);
+  size_t block_size, last_allocated_block;
+  srcfile->GetPreallocationStatus(&block_size, &last_allocated_block);
+  ASSERT_EQ(last_allocated_block, 0UL);
+  srcfile->Append("test");
+  srcfile->GetPreallocationStatus(&block_size, &last_allocated_block);
+  ASSERT_EQ(last_allocated_block, 1UL);
+  std::string buf(block_size, ' ');
+  srcfile->Append(buf);
+  srcfile->GetPreallocationStatus(&block_size, &last_allocated_block);
+  ASSERT_EQ(last_allocated_block, 2UL);
+  buf = std::string(block_size * 5, ' ');
+  srcfile->Append(buf);
+  srcfile->GetPreallocationStatus(&block_size, &last_allocated_block);
+  ASSERT_EQ(last_allocated_block, 7UL);
+}
+TEST(DBTest, PutDeleteGet) {
+  do {
+    CreateAndReopenWithCF({"pikachu"});
+    ASSERT_OK(Put(1, "foo", "v1"));
+    ASSERT_EQ("v1", Get(1, "foo"));
+    ASSERT_OK(Put(1, "foo", "v2"));
+    ASSERT_EQ("v2", Get(1, "foo"));
+    ASSERT_OK(Delete(1, "foo"));
+    ASSERT_EQ("NOT_FOUND", Get(1, "foo"));
+  } while (ChangeOptions());
+}
+TEST(DBTest, GetFromImmutableLayer) {
+  do {
@@ -944,16 +995,156 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor.reset(NewFixedPrefixTransform(2));
-  options.memtable_factory.reset(NewHashSkipListRepFactory());
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+    options.write_buffer_size = 100000;
+    CreateAndReopenWithCF({"pikachu"}, &options);
+    ASSERT_OK(Put(1, "foo", "v1"));
+    ASSERT_EQ("v1", Get(1, "foo"));
+    env_->delay_sstable_sync_.Release_Store(env_);
+    Put(1, "k1", std::string(100000, 'x'));
+    Put(1, "k2", std::string(100000, 'y'));
+    ASSERT_EQ("v1", Get(1, "foo"));
+    ASSERT_EQ("NOT_FOUND", Get(0, "foo"));
+    env_->delay_sstable_sync_.Release_Store(nullptr);
+  } while (ChangeOptions());
+}
+TEST(DBTest, GetFromVersions) {
+  do {
+    CreateAndReopenWithCF({"pikachu"});
+    ASSERT_OK(Put(1, "foo", "v1"));
+    ASSERT_OK(Flush(1));
+    ASSERT_EQ("v1", Get(1, "foo"));
+    ASSERT_EQ("NOT_FOUND", Get(0, "foo"));
+  } while (ChangeOptions());
+}
+TEST(DBTest, GetSnapshot) {
+  do {
+    CreateAndReopenWithCF({"pikachu"});
+    for (int i = 0; i < 2; i++) {
+      std::string key = (i == 0) ? std::string("foo") : std::string(200, 'x');
+      ASSERT_OK(Put(1, key, "v1"));
+      const Snapshot* s1 = db_->GetSnapshot();
+      ASSERT_OK(Put(1, key, "v2"));
+      ASSERT_EQ("v2", Get(1, key));
+      ASSERT_EQ("v1", Get(1, key, s1));
+      ASSERT_OK(Flush(1));
+      ASSERT_EQ("v2", Get(1, key));
+      ASSERT_EQ("v1", Get(1, key, s1));
+      db_->ReleaseSnapshot(s1);
+    }
+  } while (ChangeOptions());
+}
+TEST(DBTest, GetLevel0Ordering) {
+  do {
+    CreateAndReopenWithCF({"pikachu"});
+    ASSERT_OK(Put(1, "bar", "b"));
+    ASSERT_OK(Put(1, "foo", "v1"));
+    ASSERT_OK(Flush(1));
+    ASSERT_OK(Put(1, "foo", "v2"));
+    ASSERT_OK(Flush(1));
+    ASSERT_EQ("v2", Get(1, "foo"));
+  } while (ChangeOptions());
+}
+TEST(DBTest, GetOrderedByLevels) {
+  do {
+    CreateAndReopenWithCF({"pikachu"});
+    ASSERT_OK(Put(1, "foo", "v1"));
+    Compact(1, "a", "z");
+    ASSERT_EQ("v1", Get(1, "foo"));
+    ASSERT_OK(Put(1, "foo", "v2"));
+    ASSERT_EQ("v2", Get(1, "foo"));
+    ASSERT_OK(Flush(1));
+    ASSERT_EQ("v2", Get(1, "foo"));
+  } while (ChangeOptions());
+}
+TEST(DBTest, GetPicksCorrectFile) {
+  do {
+    CreateAndReopenWithCF({"pikachu"});
+    ASSERT_OK(Put(1, "a", "va"));
+    Compact(1, "a", "b");
+    ASSERT_OK(Put(1, "x", "vx"));
+    Compact(1, "x", "y");
+    ASSERT_OK(Put(1, "f", "vf"));
+    Compact(1, "f", "g");
+    ASSERT_EQ("va", Get(1, "a"));
+    ASSERT_EQ("vf", Get(1, "f"));
+    ASSERT_EQ("vx", Get(1, "x"));
+  } while (ChangeOptions());
+}
+TEST(DBTest, GetEncountersEmptyLevel) {
+  do {
+    CreateAndReopenWithCF({"pikachu"});
+    int compaction_count = 0;
+    while (NumTableFilesAtLevel(0, 1) == 0 || NumTableFilesAtLevel(2, 1) == 0) {
+      ASSERT_LE(compaction_count, 100) << "could not fill levels 0 and 2";
+      compaction_count++;
+      Put(1, "a", "begin");
+      Put(1, "z", "end");
+      ASSERT_OK(Flush(1));
+    }
+    dbfull()->TEST_CompactRange(1, nullptr, nullptr, handles_[1]);
+    ASSERT_EQ(NumTableFilesAtLevel(0, 1), 1);
+    ASSERT_EQ(NumTableFilesAtLevel(1, 1), 0);
+    ASSERT_EQ(NumTableFilesAtLevel(2, 1), 1);
+    for (int i = 0; i < 1000; i++) {
+      ASSERT_EQ("NOT_FOUND", Get(1, "missing"));
+    }
+    env_->SleepForMicroseconds(1000000);
+    ASSERT_EQ(NumTableFilesAtLevel(0, 1), 1);
+  } while (ChangeOptions(kSkipUniversalCompaction));
+}
+TEST(DBTest, KeyMayExist) {
+  do {
+    ReadOptions ropts;
+    std::string value;
+    Options options = CurrentOptions();
+    options.filter_policy = NewBloomFilterPolicy(20);
+    options.statistics = rocksdb::CreateDBStatistics();
+    CreateAndReopenWithCF({"pikachu"}, &options);
+    ASSERT_TRUE(!db_->KeyMayExist(ropts, handles_[1], "a", &value));
+    ASSERT_OK(Put(1, "a", "b"));
+    bool value_found = false;
+    ASSERT_TRUE(
+        db_->KeyMayExist(ropts, handles_[1], "a", &value, &value_found));
+    ASSERT_TRUE(value_found);
+    ASSERT_EQ("b", value);
+    ASSERT_OK(Flush(1));
+    value.clear();
+    long numopen = TestGetTickerCount(options, NO_FILE_OPENS);
+    long cache_added = TestGetTickerCount(options, BLOCK_CACHE_ADD);
+    ASSERT_TRUE(
+        db_->KeyMayExist(ropts, handles_[1], "a", &value, &value_found));
+    ASSERT_TRUE(!value_found);
+    ASSERT_EQ(numopen, TestGetTickerCount(options, NO_FILE_OPENS));
+    ASSERT_EQ(cache_added, TestGetTickerCount(options, BLOCK_CACHE_ADD));
+    ASSERT_OK(Delete(1, "a"));
+    numopen = TestGetTickerCount(options, NO_FILE_OPENS);
+    cache_added = TestGetTickerCount(options, BLOCK_CACHE_ADD);
+    ASSERT_TRUE(!db_->KeyMayExist(ropts, handles_[1], "a", &value));
+    ASSERT_EQ(numopen, TestGetTickerCount(options, NO_FILE_OPENS));
+    ASSERT_EQ(cache_added, TestGetTickerCount(options, BLOCK_CACHE_ADD));
+    ASSERT_OK(Flush(1));
+    db_->CompactRange(handles_[1], nullptr, nullptr);
+    numopen = TestGetTickerCount(options, NO_FILE_OPENS);
+    cache_added = TestGetTickerCount(options, BLOCK_CACHE_ADD);
+    ASSERT_TRUE(!db_->KeyMayExist(ropts, handles_[1], "a", &value));
+    ASSERT_EQ(numopen, TestGetTickerCount(options, NO_FILE_OPENS));
+    ASSERT_EQ(cache_added, TestGetTickerCount(options, BLOCK_CACHE_ADD));
+    ASSERT_OK(Delete(1, "c"));
+    numopen = TestGetTickerCount(options, NO_FILE_OPENS);
+    cache_added = TestGetTickerCount(options, BLOCK_CACHE_ADD);
+    ASSERT_TRUE(!db_->KeyMayExist(ropts, handles_[1], "c", &value));
+    ASSERT_EQ(numopen, TestGetTickerCount(options, NO_FILE_OPENS));
+    ASSERT_EQ(cache_added, TestGetTickerCount(options, BLOCK_CACHE_ADD));
+    delete options.filter_policy;
+  } while (ChangeOptions(kSkipPlainTable));
+}
+TEST(DBTest, NonBlockingIteration) {
+  do {
+    ReadOptions non_blocking_opts, regular_opts;
+    Options options = CurrentOptions();
+    options.statistics = rocksdb::CreateDBStatistics();
+    non_blocking_opts.read_tier = kBlockCacheTier;
+    CreateAndReopenWithCF({"pikachu"}, &options);
+    ASSERT_OK(Put(1, "a", "b"));
+    Iterator* iter = db_->NewIterator(non_blocking_opts, handles_[1]);
+    int count = 0;
+    for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
+      ASSERT_OK(iter->status());
+      count++;
@@ -961,4 +1152,32 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
+    ASSERT_EQ(count, 1);
+    delete iter;
+    ASSERT_OK(Flush(1));
+    long numopen = TestGetTickerCount(options, NO_FILE_OPENS);
+    long cache_added = TestGetTickerCount(options, BLOCK_CACHE_ADD);
+    iter = db_->NewIterator(non_blocking_opts, handles_[1]);
+    count = 0;
+    for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
+      count++;
+    }
+    ASSERT_EQ(count, 0);
+    ASSERT_TRUE(iter->status().IsIncomplete());
+    ASSERT_EQ(numopen, TestGetTickerCount(options, NO_FILE_OPENS));
+    ASSERT_EQ(cache_added, TestGetTickerCount(options, BLOCK_CACHE_ADD));
+    delete iter;
+    ASSERT_EQ(Get(1, "a"), "b");
+    numopen = TestGetTickerCount(options, NO_FILE_OPENS);
+    cache_added = TestGetTickerCount(options, BLOCK_CACHE_ADD);
+    iter = db_->NewIterator(non_blocking_opts, handles_[1]);
+    count = 0;
+    for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
+      ASSERT_OK(iter->status());
+      count++;
+    }
+    ASSERT_EQ(count, 1);
+    ASSERT_EQ(numopen, TestGetTickerCount(options, NO_FILE_OPENS));
+    ASSERT_EQ(cache_added, TestGetTickerCount(options, BLOCK_CACHE_ADD));
+    delete iter;
+  } while (ChangeOptions(kSkipPlainTable));
+}
+TEST(DBTest, FilterDeletes) {
+  do {
@@ -966,15 +1185,56 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor.reset(NewFixedPrefixTransform(2));
-  options.memtable_factory.reset(NewHashSkipListRepFactory());
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
+    options.filter_policy = NewBloomFilterPolicy(20);
+    options.filter_deletes = true;
+    CreateAndReopenWithCF({"pikachu"}, &options);
+    WriteBatch batch;
+    batch.Delete(handles_[1], "a");
+    dbfull()->Write(WriteOptions(), &batch);
+    ASSERT_EQ(AllEntriesFor("a", 1), "[ ]");
+    batch.Clear();
+    batch.Put(handles_[1], "a", "b");
+    batch.Delete(handles_[1], "a");
+    dbfull()->Write(WriteOptions(), &batch);
+    ASSERT_EQ(Get(1, "a"), "NOT_FOUND");
+    ASSERT_EQ(AllEntriesFor("a", 1), "[ DEL, b ]");
+    batch.Clear();
+    batch.Delete(handles_[1], "c");
+    batch.Put(handles_[1], "c", "d");
+    dbfull()->Write(WriteOptions(), &batch);
+    ASSERT_EQ(Get(1, "c"), "d");
+    ASSERT_EQ(AllEntriesFor("c", 1), "[ d ]");
+    batch.Clear();
+    ASSERT_OK(Flush(1));
+    batch.Delete(handles_[1], "c");
+    dbfull()->Write(WriteOptions(), &batch);
+    ASSERT_EQ(AllEntriesFor("c", 1), "[ DEL, d ]");
+    batch.Clear();
+    delete options.filter_policy;
+  } while (ChangeCompactOptions());
+}
+TEST(DBTest, IterSeekBeforePrev) {
+  ASSERT_OK(Put("a", "b"));
+  ASSERT_OK(Put("c", "d"));
+  dbfull()->Flush(FlushOptions());
+  ASSERT_OK(Put("0", "f"));
+  ASSERT_OK(Put("1", "h"));
+  dbfull()->Flush(FlushOptions());
+  ASSERT_OK(Put("2", "j"));
+  auto iter = db_->NewIterator(ReadOptions());
+  iter->Seek(Slice("c"));
+  iter->Prev();
+  iter->Seek(Slice("a"));
+  iter->Prev();
+  delete iter;
+}
+TEST(DBTest, IterNextWithNewerSeq) {
+  ASSERT_OK(Put("0", "0"));
+  dbfull()->Flush(FlushOptions());
+  ASSERT_OK(Put("a", "b"));
+  ASSERT_OK(Put("c", "d"));
+  ASSERT_OK(Put("d", "e"));
+  auto iter = db_->NewIterator(ReadOptions());
+  for (uint64_t i = 0; i < last_options_.max_sequential_skip_in_iterations + 1;
+       i++) {
+    ASSERT_OK(Put("b", "f"));
+  }
+  iter->Seek(Slice("a"));
+  ASSERT_EQ(IterStatus(iter), "a->b");
@@ -982 +1242,2 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  ASSERT_TRUE(!iter->Valid());
+  ASSERT_EQ(IterStatus(iter), "c->d");
+  delete iter;
@@ -984,20 +1245,58 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  Options options = CurrentOptions();
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor.reset(NewFixedPrefixTransform(2));
-  options.memtable_factory.reset(NewHashSkipListRepFactory());
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
+TEST(DBTest, IterPrevWithNewerSeq) {
+  ASSERT_OK(Put("0", "0"));
+  dbfull()->Flush(FlushOptions());
+  ASSERT_OK(Put("a", "b"));
+  ASSERT_OK(Put("c", "d"));
+  ASSERT_OK(Put("d", "e"));
+  auto iter = db_->NewIterator(ReadOptions());
+  for (uint64_t i = 0; i < last_options_.max_sequential_skip_in_iterations + 1;
+       i++) {
+    ASSERT_OK(Put("b", "f"));
+  }
+  iter->Seek(Slice("d"));
+  ASSERT_EQ(IterStatus(iter), "d->e");
+  iter->Prev();
+  ASSERT_EQ(IterStatus(iter), "c->d");
+  iter->Prev();
+  ASSERT_EQ(IterStatus(iter), "a->b");
+  iter->Prev();
+  delete iter;
+}
+TEST(DBTest, IterPrevWithNewerSeq2) {
+  ASSERT_OK(Put("0", "0"));
+  dbfull()->Flush(FlushOptions());
+  ASSERT_OK(Put("a", "b"));
+  ASSERT_OK(Put("c", "d"));
+  ASSERT_OK(Put("d", "e"));
+  auto iter = db_->NewIterator(ReadOptions());
+  iter->Seek(Slice("c"));
+  ASSERT_EQ(IterStatus(iter), "c->d");
+  for (uint64_t i = 0; i < last_options_.max_sequential_skip_in_iterations + 1;
+      i++) {
+    ASSERT_OK(Put("b", "f"));
+  }
+  iter->Prev();
+  ASSERT_EQ(IterStatus(iter), "a->b");
+  iter->Prev();
+  delete iter;
+}
+TEST(DBTest, IterEmpty) {
+  do {
+    CreateAndReopenWithCF({"pikachu"});
+    Iterator* iter = db_->NewIterator(ReadOptions(), handles_[1]);
+    iter->SeekToFirst();
+    ASSERT_EQ(IterStatus(iter), "(invalid)");
+    iter->SeekToLast();
+    ASSERT_EQ(IterStatus(iter), "(invalid)");
+    iter->Seek("foo");
+    ASSERT_EQ(IterStatus(iter), "(invalid)");
+    delete iter;
+  } while (ChangeCompactOptions());
+}
+TEST(DBTest, IterSingle) {
+  do {
+    CreateAndReopenWithCF({"pikachu"});
+    ASSERT_OK(Put(1, "a", "va"));
+    Iterator* iter = db_->NewIterator(ReadOptions(), handles_[1]);
+    iter->SeekToFirst();
+    ASSERT_EQ(IterStatus(iter), "a->va");
@@ -1005 +1304,25 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  ASSERT_TRUE(!iter->Valid());
+    ASSERT_EQ(IterStatus(iter), "(invalid)");
+    iter->SeekToFirst();
+    ASSERT_EQ(IterStatus(iter), "a->va");
+    iter->Prev();
+    ASSERT_EQ(IterStatus(iter), "(invalid)");
+    iter->SeekToLast();
+    ASSERT_EQ(IterStatus(iter), "a->va");
+    iter->Next();
+    ASSERT_EQ(IterStatus(iter), "(invalid)");
+    iter->SeekToLast();
+    ASSERT_EQ(IterStatus(iter), "a->va");
+    iter->Prev();
+    ASSERT_EQ(IterStatus(iter), "(invalid)");
+    iter->Seek("");
+    ASSERT_EQ(IterStatus(iter), "a->va");
+    iter->Next();
+    ASSERT_EQ(IterStatus(iter), "(invalid)");
+    iter->Seek("a");
+    ASSERT_EQ(IterStatus(iter), "a->va");
+    iter->Next();
+    ASSERT_EQ(IterStatus(iter), "(invalid)");
+    iter->Seek("b");
+    ASSERT_EQ(IterStatus(iter), "(invalid)");
+    delete iter;
+  } while (ChangeCompactOptions());
@@ -1007,20 +1330,9 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  Options options = CurrentOptions();
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor.reset(NewFixedPrefixTransform(2));
-  options.memtable_factory.reset(NewHashSkipListRepFactory());
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
+TEST(DBTest, IterMulti) {
+  do {
+    CreateAndReopenWithCF({"pikachu"});
+    ASSERT_OK(Put(1, "a", "va"));
+    ASSERT_OK(Put(1, "b", "vb"));
+    ASSERT_OK(Put(1, "c", "vc"));
+    Iterator* iter = db_->NewIterator(ReadOptions(), handles_[1]);
+    iter->SeekToFirst();
+    ASSERT_EQ(IterStatus(iter), "a->va");
@@ -1028 +1340,64 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  ASSERT_TRUE(!iter->Valid());
+    ASSERT_EQ(IterStatus(iter), "b->vb");
+    iter->Next();
+    ASSERT_EQ(IterStatus(iter), "c->vc");
+    iter->Next();
+    ASSERT_EQ(IterStatus(iter), "(invalid)");
+    iter->SeekToFirst();
+    ASSERT_EQ(IterStatus(iter), "a->va");
+    iter->Prev();
+    ASSERT_EQ(IterStatus(iter), "(invalid)");
+    iter->SeekToLast();
+    ASSERT_EQ(IterStatus(iter), "c->vc");
+    iter->Prev();
+    ASSERT_EQ(IterStatus(iter), "b->vb");
+    iter->Prev();
+    ASSERT_EQ(IterStatus(iter), "a->va");
+    iter->Prev();
+    ASSERT_EQ(IterStatus(iter), "(invalid)");
+    iter->SeekToLast();
+    ASSERT_EQ(IterStatus(iter), "c->vc");
+    iter->Next();
+    ASSERT_EQ(IterStatus(iter), "(invalid)");
+    iter->Seek("");
+    ASSERT_EQ(IterStatus(iter), "a->va");
+    iter->Seek("a");
+    ASSERT_EQ(IterStatus(iter), "a->va");
+    iter->Seek("ax");
+    ASSERT_EQ(IterStatus(iter), "b->vb");
+    iter->Seek("b");
+    ASSERT_EQ(IterStatus(iter), "b->vb");
+    iter->Seek("z");
+    ASSERT_EQ(IterStatus(iter), "(invalid)");
+    iter->SeekToLast();
+    iter->Prev();
+    iter->Prev();
+    iter->Next();
+    ASSERT_EQ(IterStatus(iter), "b->vb");
+    iter->SeekToFirst();
+    iter->Next();
+    iter->Next();
+    iter->Prev();
+    ASSERT_EQ(IterStatus(iter), "b->vb");
+    ASSERT_OK(Put(1, "a", "va2"));
+    ASSERT_OK(Put(1, "a2", "va3"));
+    ASSERT_OK(Put(1, "b", "vb2"));
+    ASSERT_OK(Put(1, "c", "vc2"));
+    ASSERT_OK(Delete(1, "b"));
+    iter->SeekToFirst();
+    ASSERT_EQ(IterStatus(iter), "a->va");
+    iter->Next();
+    ASSERT_EQ(IterStatus(iter), "b->vb");
+    iter->Next();
+    ASSERT_EQ(IterStatus(iter), "c->vc");
+    iter->Next();
+    ASSERT_EQ(IterStatus(iter), "(invalid)");
+    iter->SeekToLast();
+    ASSERT_EQ(IterStatus(iter), "c->vc");
+    iter->Prev();
+    ASSERT_EQ(IterStatus(iter), "b->vb");
+    iter->Prev();
+    ASSERT_EQ(IterStatus(iter), "a->va");
+    iter->Prev();
+    ASSERT_EQ(IterStatus(iter), "(invalid)");
+    delete iter;
+  } while (ChangeCompactOptions());
@@ -1030,4 +1405 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
+TEST(DBTest, IterReseek) {
@@ -1035 +1407 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.env = env_;
+  options.max_sequential_skip_in_iterations = 3;
@@ -1037,3 +1409 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.disable_auto_compactions = true;
-  options.prefix_extractor.reset(NewFixedPrefixTransform(2));
-  options.memtable_factory.reset(NewHashSkipListRepFactory());
+  options.statistics = rocksdb::CreateDBStatistics();
@@ -1041,9 +1411,8 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
+  CreateAndReopenWithCF({"pikachu"}, &options);
+  ASSERT_OK(Put(1, "a", "one"));
+  ASSERT_OK(Put(1, "a", "two"));
+  ASSERT_OK(Put(1, "b", "bone"));
+  Iterator* iter = db_->NewIterator(ReadOptions(), handles_[1]);
+  iter->SeekToFirst();
+  ASSERT_EQ(TestGetTickerCount(options, NUMBER_OF_RESEEKS_IN_ITERATION), 0);
+  ASSERT_EQ(IterStatus(iter), "a->two");
@@ -1051 +1420,45 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  ASSERT_TRUE(!iter->Valid());
+  ASSERT_EQ(TestGetTickerCount(options, NUMBER_OF_RESEEKS_IN_ITERATION), 0);
+  ASSERT_EQ(IterStatus(iter), "b->bone");
+  delete iter;
+  ASSERT_OK(Put(1, "a", "three"));
+  iter = db_->NewIterator(ReadOptions(), handles_[1]);
+  iter->SeekToFirst();
+  ASSERT_EQ(IterStatus(iter), "a->three");
+  iter->Next();
+  ASSERT_EQ(TestGetTickerCount(options, NUMBER_OF_RESEEKS_IN_ITERATION), 0);
+  ASSERT_EQ(IterStatus(iter), "b->bone");
+  delete iter;
+  ASSERT_OK(Put(1, "a", "four"));
+  iter = db_->NewIterator(ReadOptions(), handles_[1]);
+  iter->SeekToFirst();
+  ASSERT_EQ(IterStatus(iter), "a->four");
+  ASSERT_EQ(TestGetTickerCount(options, NUMBER_OF_RESEEKS_IN_ITERATION), 0);
+  iter->Next();
+  ASSERT_EQ(TestGetTickerCount(options, NUMBER_OF_RESEEKS_IN_ITERATION), 1);
+  ASSERT_EQ(IterStatus(iter), "b->bone");
+  delete iter;
+  int num_reseeks =
+      (int)TestGetTickerCount(options, NUMBER_OF_RESEEKS_IN_ITERATION);
+  ASSERT_OK(Put(1, "b", "btwo"));
+  iter = db_->NewIterator(ReadOptions(), handles_[1]);
+  iter->SeekToLast();
+  ASSERT_EQ(IterStatus(iter), "b->btwo");
+  ASSERT_EQ(TestGetTickerCount(options, NUMBER_OF_RESEEKS_IN_ITERATION),
+            num_reseeks);
+  iter->Prev();
+  ASSERT_EQ(TestGetTickerCount(options, NUMBER_OF_RESEEKS_IN_ITERATION),
+            num_reseeks + 1);
+  ASSERT_EQ(IterStatus(iter), "a->four");
+  delete iter;
+  ASSERT_OK(Put(1, "b", "bthree"));
+  ASSERT_OK(Put(1, "b", "bfour"));
+  iter = db_->NewIterator(ReadOptions(), handles_[1]);
+  iter->SeekToLast();
+  ASSERT_EQ(IterStatus(iter), "b->bfour");
+  ASSERT_EQ(TestGetTickerCount(options, NUMBER_OF_RESEEKS_IN_ITERATION),
+            num_reseeks + 2);
+  iter->Prev();
+  ASSERT_EQ(TestGetTickerCount(options, NUMBER_OF_RESEEKS_IN_ITERATION),
+            num_reseeks + 3);
+  ASSERT_EQ(IterStatus(iter), "a->four");
+  delete iter;
@@ -1053,20 +1466,102 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  Options options = CurrentOptions();
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor.reset(NewFixedPrefixTransform(2));
-  options.memtable_factory.reset(NewHashSkipListRepFactory());
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
+TEST(DBTest, IterSmallAndLargeMix) {
+  do {
+    CreateAndReopenWithCF({"pikachu"});
+    ASSERT_OK(Put(1, "a", "va"));
+    ASSERT_OK(Put(1, "b", std::string(100000, 'b')));
+    ASSERT_OK(Put(1, "c", "vc"));
+    ASSERT_OK(Put(1, "d", std::string(100000, 'd')));
+    ASSERT_OK(Put(1, "e", std::string(100000, 'e')));
+    Iterator* iter = db_->NewIterator(ReadOptions(), handles_[1]);
+    iter->SeekToFirst();
+    ASSERT_EQ(IterStatus(iter), "a->va");
+    iter->Next();
+    ASSERT_EQ(IterStatus(iter), "b->" + std::string(100000, 'b'));
+    iter->Next();
+    ASSERT_EQ(IterStatus(iter), "c->vc");
+    iter->Next();
+    ASSERT_EQ(IterStatus(iter), "d->" + std::string(100000, 'd'));
+    iter->Next();
+    ASSERT_EQ(IterStatus(iter), "e->" + std::string(100000, 'e'));
+    iter->Next();
+    ASSERT_EQ(IterStatus(iter), "(invalid)");
+    iter->SeekToLast();
+    ASSERT_EQ(IterStatus(iter), "e->" + std::string(100000, 'e'));
+    iter->Prev();
+    ASSERT_EQ(IterStatus(iter), "d->" + std::string(100000, 'd'));
+    iter->Prev();
+    ASSERT_EQ(IterStatus(iter), "c->vc");
+    iter->Prev();
+    ASSERT_EQ(IterStatus(iter), "b->" + std::string(100000, 'b'));
+    iter->Prev();
+    ASSERT_EQ(IterStatus(iter), "a->va");
+    iter->Prev();
+    ASSERT_EQ(IterStatus(iter), "(invalid)");
+    delete iter;
+  } while (ChangeCompactOptions());
+}
+TEST(DBTest, IterMultiWithDelete) {
+  do {
+    CreateAndReopenWithCF({"pikachu"});
+    ASSERT_OK(Put(1, "a", "va"));
+    ASSERT_OK(Put(1, "b", "vb"));
+    ASSERT_OK(Put(1, "c", "vc"));
+    ASSERT_OK(Delete(1, "b"));
+    ASSERT_EQ("NOT_FOUND", Get(1, "b"));
+    Iterator* iter = db_->NewIterator(ReadOptions(), handles_[1]);
+    iter->Seek("c");
+    ASSERT_EQ(IterStatus(iter), "c->vc");
+    if (!CurrentOptions().merge_operator) {
+      iter->Prev();
+      ASSERT_EQ(IterStatus(iter), "a->va");
+    }
+    delete iter;
+  } while (ChangeOptions());
+}
+TEST(DBTest, IterPrevMaxSkip) {
+  do {
+    CreateAndReopenWithCF({"pikachu"});
+    for (int i = 0; i < 2; i++) {
+      ASSERT_OK(Put(1, "key1", "v1"));
+      ASSERT_OK(Put(1, "key2", "v2"));
+      ASSERT_OK(Put(1, "key3", "v3"));
+      ASSERT_OK(Put(1, "key4", "v4"));
+      ASSERT_OK(Put(1, "key5", "v5"));
+    }
+    VerifyIterLast("key5->v5", 1);
+    ASSERT_OK(Delete(1, "key5"));
+    VerifyIterLast("key4->v4", 1);
+    ASSERT_OK(Delete(1, "key4"));
+    VerifyIterLast("key3->v3", 1);
+    ASSERT_OK(Delete(1, "key3"));
+    VerifyIterLast("key2->v2", 1);
+    ASSERT_OK(Delete(1, "key2"));
+    VerifyIterLast("key1->v1", 1);
+    ASSERT_OK(Delete(1, "key1"));
+    VerifyIterLast("(invalid)", 1);
+  } while (ChangeOptions(kSkipMergePut));
+}
+TEST(DBTest, IterWithSnapshot) {
+  do {
+    CreateAndReopenWithCF({"pikachu"});
+    ASSERT_OK(Put(1, "key1", "val1"));
+    ASSERT_OK(Put(1, "key2", "val2"));
+    ASSERT_OK(Put(1, "key3", "val3"));
+    ASSERT_OK(Put(1, "key4", "val4"));
+    ASSERT_OK(Put(1, "key5", "val5"));
+    const Snapshot *snapshot = db_->GetSnapshot();
+    ReadOptions options;
+    options.snapshot = snapshot;
+    Iterator* iter = db_->NewIterator(options, handles_[1]);
+    ASSERT_OK(Put(1, "key100", "val100"));
+    ASSERT_OK(Put(1, "key101", "val101"));
+    iter->Seek("key5");
+    ASSERT_EQ(IterStatus(iter), "key5->val5");
+    if (!CurrentOptions().merge_operator) {
+      iter->Prev();
+      ASSERT_EQ(IterStatus(iter), "key4->val4");
+      iter->Prev();
+      ASSERT_EQ(IterStatus(iter), "key3->val3");
+      iter->Next();
+      ASSERT_EQ(IterStatus(iter), "key4->val4");
+      iter->Next();
+      ASSERT_EQ(IterStatus(iter), "key5->val5");
@@ -1076,4 +1571,25 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
+    db_->ReleaseSnapshot(snapshot);
+    delete iter;
+  } while (ChangeOptions());
+}
+TEST(DBTest, Recover) {
+  do {
+    CreateAndReopenWithCF({"pikachu"});
+    ASSERT_OK(Put(1, "foo", "v1"));
+    ASSERT_OK(Put(1, "baz", "v5"));
+    ReopenWithColumnFamilies({"default", "pikachu"});
+    ASSERT_EQ("v1", Get(1, "foo"));
+    ASSERT_EQ("v1", Get(1, "foo"));
+    ASSERT_EQ("v5", Get(1, "baz"));
+    ASSERT_OK(Put(1, "bar", "v2"));
+    ASSERT_OK(Put(1, "foo", "v3"));
+    ReopenWithColumnFamilies({"default", "pikachu"});
+    ASSERT_EQ("v3", Get(1, "foo"));
+    ASSERT_OK(Put(1, "foo", "v4"));
+    ASSERT_EQ("v4", Get(1, "foo"));
+    ASSERT_EQ("v2", Get(1, "bar"));
+    ASSERT_EQ("v5", Get(1, "baz"));
+  } while (ChangeOptions());
+}
+TEST(DBTest, RecoverWithTableHandle) {
+  do {
@@ -1081 +1596,0 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.env = env_;
@@ -1082,0 +1598 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
+    options.write_buffer_size = 100;
@@ -1084,2 +1599,0 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.prefix_extractor.reset(NewFixedPrefixTransform(2));
-  options.memtable_factory.reset(NewHashSkipListRepFactory());
@@ -1087,11 +1601,22 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+    CreateAndReopenWithCF({"pikachu"}, &options);
+    ASSERT_OK(Put(1, "foo", "v1"));
+    ASSERT_OK(Put(1, "bar", "v2"));
+    ASSERT_OK(Flush(1));
+    ASSERT_OK(Put(1, "foo", "v3"));
+    ASSERT_OK(Put(1, "bar", "v4"));
+    ASSERT_OK(Flush(1));
+    ASSERT_OK(Put(1, "big", std::string(100, 'a')));
+    ReopenWithColumnFamilies({"default", "pikachu"});
+    std::vector<std::vector<FileMetaData>> files;
+    dbfull()->TEST_GetFilesMetaData(handles_[1], &files);
+    int total_files = 0;
+    for (const auto& level : files) {
+      total_files += level.size();
+    }
+    ASSERT_EQ(total_files, 3);
+    for (const auto& level : files) {
+      for (const auto& file : level) {
+        if (kInfiniteMaxOpenFiles == option_config_) {
+          ASSERT_TRUE(file.table_reader_handle != nullptr);
+        } else {
+          ASSERT_TRUE(file.table_reader_handle == nullptr);
@@ -1099,4 +1624,15 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
+      }
+    }
+  } while (ChangeOptions());
+}
+TEST(DBTest, IgnoreRecoveredLog) {
+  std::string backup_logs = dbname_ + "/backup_logs";
+  env_->CreateDirIfMissing(backup_logs);
+  std::vector<std::string> old_files;
+  env_->GetChildren(backup_logs, &old_files);
+  for (auto& file : old_files) {
+    if (file != "." && file != "..") {
+      env_->DeleteFile(backup_logs + "/" + file);
+    }
+  }
+  do {
@@ -1104 +1639,0 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.env = env_;
@@ -1106,3 +1641,2 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.disable_auto_compactions = true;
-  options.prefix_extractor.reset(NewFixedPrefixTransform(2));
-  options.memtable_factory.reset(NewHashSkipListRepFactory());
+    options.merge_operator = MergeOperators::CreateUInt64AddOperator();
+    options.wal_dir = dbname_ + "/logs";
@@ -1110,11 +1644,20 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+    std::string one, two;
+    PutFixed64(&one, 1);
+    PutFixed64(&two, 2);
+    ASSERT_OK(db_->Merge(WriteOptions(), Slice("foo"), Slice(one)));
+    ASSERT_OK(db_->Merge(WriteOptions(), Slice("foo"), Slice(one)));
+    ASSERT_OK(db_->Merge(WriteOptions(), Slice("bar"), Slice(one)));
+    std::vector<std::string> logs;
+    env_->GetChildren(options.wal_dir, &logs);
+    for (auto& log : logs) {
+      if (log != ".." && log != ".") {
+        CopyFile(options.wal_dir + "/" + log, backup_logs + "/" + log);
+      }
+    }
+    Reopen(&options);
+    ASSERT_EQ(two, Get("foo"));
+    ASSERT_EQ(one, Get("bar"));
+    Close();
+    for (auto& log : logs) {
+      if (log != ".." && log != ".") {
+        CopyFile(backup_logs + "/" + log, options.wal_dir + "/" + log);
@@ -1122,22 +1664,0 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  Options options = CurrentOptions();
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor.reset(NewFixedPrefixTransform(2));
-  options.memtable_factory.reset(NewHashSkipListRepFactory());
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
@@ -1145,4 +1666,62 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
+    Reopen(&options);
+    ASSERT_EQ(two, Get("foo"));
+    ASSERT_EQ(one, Get("bar"));
+    Close();
+    Destroy(&options);
+    env_->CreateDirIfMissing(options.wal_dir);
+    for (auto& log : logs) {
+      if (log != ".." && log != ".") {
+        CopyFile(backup_logs + "/" + log, options.wal_dir + "/" + log);
+        env_->DeleteFile(backup_logs + "/" + log);
+      }
+    }
+    Reopen(&options);
+    ASSERT_EQ(two, Get("foo"));
+    ASSERT_EQ(one, Get("bar"));
+    Close();
+  } while (ChangeOptions());
+}
+TEST(DBTest, RollLog) {
+  do {
+    CreateAndReopenWithCF({"pikachu"});
+    ASSERT_OK(Put(1, "foo", "v1"));
+    ASSERT_OK(Put(1, "baz", "v5"));
+    ReopenWithColumnFamilies({"default", "pikachu"});
+    for (int i = 0; i < 10; i++) {
+      ReopenWithColumnFamilies({"default", "pikachu"});
+    }
+    ASSERT_OK(Put(1, "foo", "v4"));
+    for (int i = 0; i < 10; i++) {
+      ReopenWithColumnFamilies({"default", "pikachu"});
+    }
+  } while (ChangeOptions());
+}
+TEST(DBTest, WAL) {
+  do {
+    CreateAndReopenWithCF({"pikachu"});
+    WriteOptions writeOpt = WriteOptions();
+    writeOpt.disableWAL = true;
+    ASSERT_OK(dbfull()->Put(writeOpt, handles_[1], "foo", "v1"));
+    ASSERT_OK(dbfull()->Put(writeOpt, handles_[1], "bar", "v1"));
+    ReopenWithColumnFamilies({"default", "pikachu"});
+    ASSERT_EQ("v1", Get(1, "foo"));
+    ASSERT_EQ("v1", Get(1, "bar"));
+    writeOpt.disableWAL = false;
+    ASSERT_OK(dbfull()->Put(writeOpt, handles_[1], "bar", "v2"));
+    writeOpt.disableWAL = true;
+    ASSERT_OK(dbfull()->Put(writeOpt, handles_[1], "foo", "v2"));
+    ReopenWithColumnFamilies({"default", "pikachu"});
+    ASSERT_EQ("v2", Get(1, "bar"));
+    ASSERT_EQ("v2", Get(1, "foo"));
+    writeOpt.disableWAL = true;
+    ASSERT_OK(dbfull()->Put(writeOpt, handles_[1], "bar", "v3"));
+    writeOpt.disableWAL = false;
+    ASSERT_OK(dbfull()->Put(writeOpt, handles_[1], "foo", "v3"));
+    ReopenWithColumnFamilies({"default", "pikachu"});
+    ASSERT_EQ("v3", Get(1, "foo"));
+    ASSERT_EQ("v3", Get(1, "bar"));
+  } while (ChangeCompactOptions());
+}
+TEST(DBTest, CheckLock) {
+  do {
+    DB* localdb;
@@ -1150,17 +1729,3 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor.reset(NewFixedPrefixTransform(2));
-  options.memtable_factory.reset(NewHashSkipListRepFactory());
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+    ASSERT_OK(TryReopen(&options));
+    ASSERT_TRUE(!(DB::Open(options, dbname_, &localdb)).ok());
+  } while (ChangeCompactOptions());
@@ -1168,4 +1733,2 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
+TEST(DBTest, FlushMultipleMemtable) {
+  do {
@@ -1173,17 +1736,12 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor.reset(NewFixedPrefixTransform(2));
-  options.memtable_factory.reset(NewHashSkipListRepFactory());
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+    WriteOptions writeOpt = WriteOptions();
+    writeOpt.disableWAL = true;
+    options.max_write_buffer_number = 4;
+    options.min_write_buffer_number_to_merge = 3;
+    CreateAndReopenWithCF({"pikachu"}, &options);
+    ASSERT_OK(dbfull()->Put(writeOpt, handles_[1], "foo", "v1"));
+    ASSERT_OK(Flush(1));
+    ASSERT_OK(dbfull()->Put(writeOpt, handles_[1], "bar", "v1"));
+    ASSERT_EQ("v1", Get(1, "foo"));
+    ASSERT_EQ("v1", Get(1, "bar"));
+    ASSERT_OK(Flush(1));
+  } while (ChangeCompactOptions());
@@ -1191,4 +1749,2 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
+TEST(DBTest, NumImmutableMemTable) {
+  do {
@@ -1196,17 +1752,50 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor.reset(NewFixedPrefixTransform(2));
-  options.memtable_factory.reset(NewHashSkipListRepFactory());
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+    WriteOptions writeOpt = WriteOptions();
+    writeOpt.disableWAL = true;
+    options.max_write_buffer_number = 4;
+    options.min_write_buffer_number_to_merge = 3;
+    options.write_buffer_size = 1000000;
+    CreateAndReopenWithCF({"pikachu"}, &options);
+    std::string big_value(1000000 * 2, 'x');
+    std::string num;
+    SetPerfLevel(kEnableTime);;
+    ASSERT_OK(dbfull()->Put(writeOpt, handles_[1], "k1", big_value));
+    ASSERT_TRUE(dbfull()->GetProperty(handles_[1],
+                                      "rocksdb.num-immutable-mem-table", &num));
+    ASSERT_EQ(num, "0");
+    perf_context.Reset();
+    Get(1, "k1");
+    ASSERT_EQ(1, (int) perf_context.get_from_memtable_count);
+    ASSERT_OK(dbfull()->Put(writeOpt, handles_[1], "k2", big_value));
+    ASSERT_TRUE(dbfull()->GetProperty(handles_[1],
+                                      "rocksdb.num-immutable-mem-table", &num));
+    ASSERT_EQ(num, "1");
+    perf_context.Reset();
+    Get(1, "k1");
+    ASSERT_EQ(2, (int) perf_context.get_from_memtable_count);
+    perf_context.Reset();
+    Get(1, "k2");
+    ASSERT_EQ(1, (int) perf_context.get_from_memtable_count);
+    ASSERT_OK(dbfull()->Put(writeOpt, handles_[1], "k3", big_value));
+    ASSERT_TRUE(dbfull()->GetProperty(
+        handles_[1], "rocksdb.cur-size-active-mem-table", &num));
+    ASSERT_TRUE(dbfull()->GetProperty(handles_[1],
+                                      "rocksdb.num-immutable-mem-table", &num));
+    ASSERT_EQ(num, "2");
+    perf_context.Reset();
+    Get(1, "k2");
+    ASSERT_EQ(2, (int) perf_context.get_from_memtable_count);
+    perf_context.Reset();
+    Get(1, "k3");
+    ASSERT_EQ(1, (int) perf_context.get_from_memtable_count);
+    perf_context.Reset();
+    Get(1, "k1");
+    ASSERT_EQ(3, (int) perf_context.get_from_memtable_count);
+    ASSERT_OK(Flush(1));
+    ASSERT_TRUE(dbfull()->GetProperty(handles_[1],
+                                      "rocksdb.num-immutable-mem-table", &num));
+    ASSERT_EQ(num, "0");
+    ASSERT_TRUE(dbfull()->GetProperty(
+        handles_[1], "rocksdb.cur-size-active-mem-table", &num));
+    ASSERT_EQ(num, "208");
+    SetPerfLevel(kDisable);
+  } while (ChangeCompactOptions());
@@ -1214,4 +1803,31 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
+class SleepingBackgroundTask {
+ public:
+  SleepingBackgroundTask() : bg_cv_(&mutex_), should_sleep_(true) {}
+  void DoSleep() {
+    MutexLock l(&mutex_);
+    while (should_sleep_) {
+      bg_cv_.Wait();
+    }
+  }
+  void WakeUp() {
+    MutexLock l(&mutex_);
+    should_sleep_ = false;
+    bg_cv_.SignalAll();
+  }
+  static void DoSleepTask(void* arg) {
+    reinterpret_cast<SleepingBackgroundTask*>(arg)->DoSleep();
+  }
+ private:
+  port::Mutex mutex_;
+  port::CondVar bg_cv_;
+  bool should_sleep_;
+};
+TEST(DBTest, GetProperty) {
+  env_->SetBackgroundThreads(1, Env::HIGH);
+  env_->SetBackgroundThreads(1, Env::LOW);
+  SleepingBackgroundTask sleeping_task_low;
+  env_->Schedule(&SleepingBackgroundTask::DoSleepTask, &sleeping_task_low,
+                 Env::Priority::LOW);
+  SleepingBackgroundTask sleeping_task_high;
+  env_->Schedule(&SleepingBackgroundTask::DoSleepTask, &sleeping_task_high,
+                 Env::Priority::HIGH);
@@ -1219,17 +1835,76 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor.reset(NewFixedPrefixTransform(2));
-  options.memtable_factory.reset(NewHashSkipListRepFactory());
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+  WriteOptions writeOpt = WriteOptions();
+  writeOpt.disableWAL = true;
+  options.compaction_style = kCompactionStyleUniversal;
+  options.level0_file_num_compaction_trigger = 1;
+  options.compaction_options_universal.size_ratio = 50;
+  options.max_background_compactions = 1;
+  options.max_background_flushes = 1;
+  options.max_write_buffer_number = 10;
+  options.min_write_buffer_number_to_merge = 1;
+  options.write_buffer_size = 1000000;
+  Reopen(&options);
+  std::string big_value(1000000 * 2, 'x');
+  std::string num;
+  SetPerfLevel(kEnableTime);
+  ASSERT_OK(dbfull()->Put(writeOpt, "k1", big_value));
+  ASSERT_TRUE(dbfull()->GetProperty("rocksdb.num-immutable-mem-table", &num));
+  ASSERT_EQ(num, "0");
+  ASSERT_TRUE(dbfull()->GetProperty("rocksdb.mem-table-flush-pending", &num));
+  ASSERT_EQ(num, "0");
+  ASSERT_TRUE(dbfull()->GetProperty("rocksdb.compaction-pending", &num));
+  ASSERT_EQ(num, "0");
+  perf_context.Reset();
+  ASSERT_OK(dbfull()->Put(writeOpt, "k2", big_value));
+  ASSERT_TRUE(dbfull()->GetProperty("rocksdb.num-immutable-mem-table", &num));
+  ASSERT_EQ(num, "1");
+  ASSERT_OK(dbfull()->Put(writeOpt, "k3", big_value));
+  ASSERT_TRUE(dbfull()->GetProperty("rocksdb.num-immutable-mem-table", &num));
+  ASSERT_EQ(num, "2");
+  ASSERT_TRUE(dbfull()->GetProperty("rocksdb.mem-table-flush-pending", &num));
+  ASSERT_EQ(num, "1");
+  ASSERT_TRUE(dbfull()->GetProperty("rocksdb.compaction-pending", &num));
+  ASSERT_EQ(num, "0");
+  sleeping_task_high.WakeUp();
+  dbfull()->TEST_WaitForFlushMemTable();
+  ASSERT_OK(dbfull()->Put(writeOpt, "k4", big_value));
+  ASSERT_OK(dbfull()->Put(writeOpt, "k5", big_value));
+  dbfull()->TEST_WaitForFlushMemTable();
+  ASSERT_TRUE(dbfull()->GetProperty("rocksdb.mem-table-flush-pending", &num));
+  ASSERT_EQ(num, "0");
+  ASSERT_TRUE(dbfull()->GetProperty("rocksdb.compaction-pending", &num));
+  ASSERT_EQ(num, "1");
+  sleeping_task_low.WakeUp();
+}
+TEST(DBTest, FLUSH) {
+  do {
+    CreateAndReopenWithCF({"pikachu"});
+    WriteOptions writeOpt = WriteOptions();
+    writeOpt.disableWAL = true;
+    SetPerfLevel(kEnableTime);;
+    ASSERT_OK(dbfull()->Put(writeOpt, handles_[1], "foo", "v1"));
+    ASSERT_OK(Flush(1));
+    ASSERT_OK(dbfull()->Put(writeOpt, handles_[1], "bar", "v1"));
+    perf_context.Reset();
+    Get(1, "foo");
+    ASSERT_TRUE((int) perf_context.get_from_output_files_time > 0);
+    ReopenWithColumnFamilies({"default", "pikachu"});
+    ASSERT_EQ("v1", Get(1, "foo"));
+    ASSERT_EQ("v1", Get(1, "bar"));
+    writeOpt.disableWAL = true;
+    ASSERT_OK(dbfull()->Put(writeOpt, handles_[1], "bar", "v2"));
+    ASSERT_OK(dbfull()->Put(writeOpt, handles_[1], "foo", "v2"));
+    ASSERT_OK(Flush(1));
+    ReopenWithColumnFamilies({"default", "pikachu"});
+    ASSERT_EQ("v2", Get(1, "bar"));
+    perf_context.Reset();
+    ASSERT_EQ("v2", Get(1, "foo"));
+    ASSERT_TRUE((int) perf_context.get_from_output_files_time > 0);
+    writeOpt.disableWAL = false;
+    ASSERT_OK(dbfull()->Put(writeOpt, handles_[1], "bar", "v3"));
+    ASSERT_OK(dbfull()->Put(writeOpt, handles_[1], "foo", "v3"));
+    ASSERT_OK(Flush(1));
+    ReopenWithColumnFamilies({"default", "pikachu"});
+    ASSERT_EQ("v3", Get(1, "foo"));
+    ASSERT_EQ("v3", Get(1, "bar"));
+    SetPerfLevel(kDisable);
+  } while (ChangeCompactOptions());
@@ -1237,4 +1912,14 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
+TEST(DBTest, RecoveryWithEmptyLog) {
+  do {
+    CreateAndReopenWithCF({"pikachu"});
+    ASSERT_OK(Put(1, "foo", "v1"));
+    ASSERT_OK(Put(1, "foo", "v2"));
+    ReopenWithColumnFamilies({"default", "pikachu"});
+    ReopenWithColumnFamilies({"default", "pikachu"});
+    ASSERT_OK(Put(1, "foo", "v3"));
+    ReopenWithColumnFamilies({"default", "pikachu"});
+    ASSERT_EQ("v3", Get(1, "foo"));
+  } while (ChangeOptions());
+}
+TEST(DBTest, RecoverDuringMemtableCompaction) {
+  do {
@@ -1243,16 +1928,31 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor.reset(NewFixedPrefixTransform(2));
-  options.memtable_factory.reset(NewHashSkipListRepFactory());
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+    options.write_buffer_size = 1000000;
+    CreateAndReopenWithCF({"pikachu"}, &options);
+    ASSERT_OK(Put(1, "foo", "v1"));
+    ASSERT_OK(Put(1, "big1", std::string(10000000, 'x')));
+    ASSERT_OK(Put(1, "big2", std::string(1000, 'y')));
+    ASSERT_OK(Put(1, "bar", "v2"));
+    ReopenWithColumnFamilies({"default", "pikachu"}, &options);
+    ASSERT_EQ("v1", Get(1, "foo"));
+    ASSERT_EQ("v2", Get(1, "bar"));
+    ASSERT_EQ(std::string(10000000, 'x'), Get(1, "big1"));
+    ASSERT_EQ(std::string(1000, 'y'), Get(1, "big2"));
+  } while (ChangeOptions());
+}
+TEST(DBTest, MinorCompactionsHappen) {
+  do {
+    Options options = CurrentOptions();
+    options.write_buffer_size = 10000;
+    CreateAndReopenWithCF({"pikachu"}, &options);
+    const int N = 500;
+    int starting_num_tables = TotalTableFiles(1);
+    for (int i = 0; i < N; i++) {
+      ASSERT_OK(Put(1, Key(i), Key(i) + std::string(1000, 'v')));
+    }
+    int ending_num_tables = TotalTableFiles(1);
+    ASSERT_GT(ending_num_tables, starting_num_tables);
+    for (int i = 0; i < N; i++) {
+      ASSERT_EQ(Key(i) + std::string(1000, 'v'), Get(1, Key(i)));
+    }
+    ReopenWithColumnFamilies({"default", "pikachu"}, &options);
+    for (int i = 0; i < N; i++) {
+      ASSERT_EQ(Key(i) + std::string(1000, 'v'), Get(1, Key(i)));
@@ -1260,4 +1960,4 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
+  } while (ChangeCompactOptions());
+}
+TEST(DBTest, ManifestRollOver) {
+  do {
@@ -1265,17 +1965,15 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor.reset(NewFixedPrefixTransform(2));
-  options.memtable_factory.reset(NewHashSkipListRepFactory());
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+    options.max_manifest_file_size = 10 ;
+    CreateAndReopenWithCF({"pikachu"}, &options);
+    {
+      ASSERT_OK(Put(1, "manifest_key1", std::string(1000, '1')));
+      ASSERT_OK(Put(1, "manifest_key2", std::string(1000, '2')));
+      ASSERT_OK(Put(1, "manifest_key3", std::string(1000, '3')));
+      uint64_t manifest_before_flush = dbfull()->TEST_Current_Manifest_FileNo();
+      ASSERT_OK(Flush(1));
+      uint64_t manifest_after_flush = dbfull()->TEST_Current_Manifest_FileNo();
+      ASSERT_GT(manifest_after_flush, manifest_before_flush);
+      ReopenWithColumnFamilies({"default", "pikachu"}, &options);
+      ASSERT_GT(dbfull()->TEST_Current_Manifest_FileNo(), manifest_after_flush);
+      ASSERT_EQ(std::string(1000, '1'), Get(1, "manifest_key1"));
+      ASSERT_EQ(std::string(1000, '2'), Get(1, "manifest_key2"));
+      ASSERT_EQ(std::string(1000, '3'), Get(1, "manifest_key3"));
@@ -1283,4 +1981,6 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
+  } while (ChangeCompactOptions());
+}
+TEST(DBTest, IdentityAcrossRestarts) {
+  do {
+    std::string id1;
+    ASSERT_OK(db_->GetDbIdentity(id1));
@@ -1288,17 +1988,11 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor.reset(NewFixedPrefixTransform(2));
-  options.memtable_factory.reset(NewHashSkipListRepFactory());
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+    Reopen(&options);
+    std::string id2;
+    ASSERT_OK(db_->GetDbIdentity(id2));
+    ASSERT_EQ(id1.compare(id2), 0);
+    std::string idfilename = IdentityFileName(dbname_);
+    ASSERT_OK(env_->DeleteFile(idfilename));
+    Reopen(&options);
+    std::string id3;
+    ASSERT_OK(db_->GetDbIdentity(id3));
+    ASSERT_NE(id1.compare(id3), 0);
+  } while (ChangeCompactOptions());
@@ -1306,4 +2000,3 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
+TEST(DBTest, RecoverWithLargeLog) {
+  do {
+    {
@@ -1311,17 +2004,6 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor.reset(NewFixedPrefixTransform(2));
-  options.memtable_factory.reset(NewHashSkipListRepFactory());
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+      CreateAndReopenWithCF({"pikachu"}, &options);
+      ASSERT_OK(Put(1, "big1", std::string(200000, '1')));
+      ASSERT_OK(Put(1, "big2", std::string(200000, '2')));
+      ASSERT_OK(Put(1, "small3", std::string(10, '3')));
+      ASSERT_OK(Put(1, "small4", std::string(10, '4')));
+      ASSERT_EQ(NumTableFilesAtLevel(0, 1), 0);
@@ -1329,4 +2010,0 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
@@ -1334,17 +2012,9 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor.reset(NewFixedPrefixTransform(2));
-  options.memtable_factory.reset(NewHashSkipListRepFactory());
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+    options.write_buffer_size = 100000;
+    ReopenWithColumnFamilies({"default", "pikachu"}, &options);
+    ASSERT_EQ(NumTableFilesAtLevel(0, 1), 3);
+    ASSERT_EQ(std::string(200000, '1'), Get(1, "big1"));
+    ASSERT_EQ(std::string(200000, '2'), Get(1, "big2"));
+    ASSERT_EQ(std::string(10, '3'), Get(1, "small3"));
+    ASSERT_EQ(std::string(10, '4'), Get(1, "small4"));
+    ASSERT_GT(NumTableFilesAtLevel(0, 1), 1);
+  } while (ChangeCompactOptions());
@@ -1352,4 +2022 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
+TEST(DBTest, CompactionsGenerateMultipleFiles) {
@@ -1357,779 +2024,8 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor.reset(NewFixedPrefixTransform(2));
-  options.memtable_factory.reset(NewHashSkipListRepFactory());
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
-}
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  Options options = CurrentOptions();
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor.reset(NewFixedPrefixTransform(2));
-  options.memtable_factory.reset(NewHashSkipListRepFactory());
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
-}
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  Options options = CurrentOptions();
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor.reset(NewFixedPrefixTransform(2));
-  options.memtable_factory.reset(NewHashSkipListRepFactory());
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
-}
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  Options options = CurrentOptions();
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor.reset(NewFixedPrefixTransform(2));
-  options.memtable_factory.reset(NewHashSkipListRepFactory());
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
-}
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  Options options = CurrentOptions();
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor.reset(NewFixedPrefixTransform(2));
-  options.memtable_factory.reset(NewHashSkipListRepFactory());
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
-}
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  Options options = CurrentOptions();
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor.reset(NewFixedPrefixTransform(2));
-  options.memtable_factory.reset(NewHashSkipListRepFactory());
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
-}
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  Options options = CurrentOptions();
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor.reset(NewFixedPrefixTransform(2));
-  options.memtable_factory.reset(NewHashSkipListRepFactory());
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
-}
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  Options options = CurrentOptions();
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor.reset(NewFixedPrefixTransform(2));
-  options.memtable_factory.reset(NewHashSkipListRepFactory());
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
-}
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  Options options = CurrentOptions();
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor.reset(NewFixedPrefixTransform(2));
-  options.memtable_factory.reset(NewHashSkipListRepFactory());
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
-}
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  Options options = CurrentOptions();
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor.reset(NewFixedPrefixTransform(2));
-  options.memtable_factory.reset(NewHashSkipListRepFactory());
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
-}
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  Options options = CurrentOptions();
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor.reset(NewFixedPrefixTransform(2));
-  options.memtable_factory.reset(NewHashSkipListRepFactory());
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
-}
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  Options options = CurrentOptions();
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor.reset(NewFixedPrefixTransform(2));
-  options.memtable_factory.reset(NewHashSkipListRepFactory());
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
-}
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  Options options = CurrentOptions();
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor.reset(NewFixedPrefixTransform(2));
-  options.memtable_factory.reset(NewHashSkipListRepFactory());
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
-}
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  Options options = CurrentOptions();
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor.reset(NewFixedPrefixTransform(2));
-  options.memtable_factory.reset(NewHashSkipListRepFactory());
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
-}
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  Options options = CurrentOptions();
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor.reset(NewFixedPrefixTransform(2));
-  options.memtable_factory.reset(NewHashSkipListRepFactory());
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
-}
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  Options options = CurrentOptions();
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor.reset(NewFixedPrefixTransform(2));
-  options.memtable_factory.reset(NewHashSkipListRepFactory());
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
-}
-class SleepingBackgroundTask {
-public:
-  SleepingBackgroundTask() : bg_cv_(&mutex_), should_sleep_(true) {}
-  void DoSleep() {
-    MutexLock l(&mutex_);
-    while (should_sleep_) {
-      bg_cv_.Wait();
-    }
-  }
-  void WakeUp() {
-    MutexLock l(&mutex_);
-    should_sleep_ = false;
-    bg_cv_.SignalAll();
-  }
-  static void DoSleepTask(void* arg) {
-    reinterpret_cast<SleepingBackgroundTask*>(arg)->DoSleep();
-  }
-private:
-  port::Mutex mutex_;
-port::CondVar bg_cv_;
-  bool should_sleep_;
-};
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  Options options = CurrentOptions();
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor.reset(NewFixedPrefixTransform(2));
-  options.memtable_factory.reset(NewHashSkipListRepFactory());
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
-}
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  Options options = CurrentOptions();
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor.reset(NewFixedPrefixTransform(2));
-  options.memtable_factory.reset(NewHashSkipListRepFactory());
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
-}
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  Options options = CurrentOptions();
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor.reset(NewFixedPrefixTransform(2));
-  options.memtable_factory.reset(NewHashSkipListRepFactory());
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
-}
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  Options options = CurrentOptions();
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor.reset(NewFixedPrefixTransform(2));
-  options.memtable_factory.reset(NewHashSkipListRepFactory());
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
-}
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  Options options = CurrentOptions();
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor.reset(NewFixedPrefixTransform(2));
-  options.memtable_factory.reset(NewHashSkipListRepFactory());
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
-}
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  Options options = CurrentOptions();
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor.reset(NewFixedPrefixTransform(2));
-  options.memtable_factory.reset(NewHashSkipListRepFactory());
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
-}
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  Options options = CurrentOptions();
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor.reset(NewFixedPrefixTransform(2));
-  options.memtable_factory.reset(NewHashSkipListRepFactory());
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
-}
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  Options options = CurrentOptions();
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor.reset(NewFixedPrefixTransform(2));
-  options.memtable_factory.reset(NewHashSkipListRepFactory());
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
-}
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  Options options = CurrentOptions();
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor.reset(NewFixedPrefixTransform(2));
-  options.memtable_factory.reset(NewHashSkipListRepFactory());
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
-}
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  Options options = CurrentOptions();
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor.reset(NewFixedPrefixTransform(2));
-  options.memtable_factory.reset(NewHashSkipListRepFactory());
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
-}
-static int cfilter_count;
-static std::string NEW_VALUE = "NewValue";
-class KeepFilter : public CompactionFilter {
-public:
-  virtual bool Filter(int level, const Slice& key, const Slice& value,
-                      std::string* new_value, bool* value_changed) const
-      override {
-    cfilter_count++;
-    return false;
-  }
-  virtual const char* Name() const override { return "KeepFilter"; }
-};
-class DeleteFilter : public CompactionFilter {
-public:
-  virtual bool Filter(int level, const Slice& key, const Slice& value,
-                      std::string* new_value, bool* value_changed) const
-      override {
-    cfilter_count++;
-    return true;
-  }
-  virtual const char* Name() const override { return "DeleteFilter"; }
-};
-class ChangeFilter : public CompactionFilter {
-public:
-  explicit ChangeFilter() {}
-  virtual bool Filter(int level, const Slice& key, const Slice& value,
-                      std::string* new_value, bool* value_changed) const
-      override {
-    assert(new_value != nullptr);
-    *new_value = NEW_VALUE;
-    *value_changed = true;
-    return false;
-  }
-  virtual const char* Name() const override { return "ChangeFilter"; }
-};
-class KeepFilterFactory : public CompactionFilterFactory {
-public:
-  explicit KeepFilterFactory(bool check_context = false)
-      : check_context_(check_context) {}
-  virtual std::unique_ptr<CompactionFilter> CreateCompactionFilter(
-      const CompactionFilterContext& context) override {
-    if (check_context_) {
-      ASSERT_EQ(expect_full_compaction_.load(), context.is_full_compaction);
-      ASSERT_EQ(expect_manual_compaction_.load(), context.is_manual_compaction);
-    }
-    return std::unique_ptr<CompactionFilter>(new KeepFilter());
-  }
-  virtual const char* Name() const override { return "KeepFilterFactory"; }
-  bool check_context_;
-  std::atomic_bool expect_full_compaction_;
-  std::atomic_bool expect_manual_compaction_;
-};
-class DeleteFilterFactory : public CompactionFilterFactory {
-public:
-  virtual std::unique_ptr<CompactionFilter> CreateCompactionFilter(
-      const CompactionFilterContext& context) override {
-    if (context.is_manual_compaction) {
-      return std::unique_ptr<CompactionFilter>(new DeleteFilter());
-    } else {
-      return std::unique_ptr<CompactionFilter>(nullptr);
-    }
-  }
-  virtual const char* Name() const override { return "DeleteFilterFactory"; }
-};
-class ChangeFilterFactory : public CompactionFilterFactory {
-public:
-  explicit ChangeFilterFactory() {}
-  virtual std::unique_ptr<CompactionFilter> CreateCompactionFilter(
-      const CompactionFilterContext& context) override {
-    return std::unique_ptr<CompactionFilter>(new ChangeFilter());
-  }
-  virtual const char* Name() const override { return "ChangeFilterFactory"; }
-};
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  Options options = CurrentOptions();
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor.reset(NewFixedPrefixTransform(2));
-  options.memtable_factory.reset(NewHashSkipListRepFactory());
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
-}
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  Options options = CurrentOptions();
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor.reset(NewFixedPrefixTransform(2));
-  options.memtable_factory.reset(NewHashSkipListRepFactory());
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
-}
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  Options options = CurrentOptions();
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor.reset(NewFixedPrefixTransform(2));
-  options.memtable_factory.reset(NewHashSkipListRepFactory());
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
-}
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  Options options = CurrentOptions();
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor.reset(NewFixedPrefixTransform(2));
-  options.memtable_factory.reset(NewHashSkipListRepFactory());
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+  options.write_buffer_size = 100000000;
+  CreateAndReopenWithCF({"pikachu"}, &options);
+  Random rnd(301);
+  ASSERT_EQ(NumTableFilesAtLevel(0, 1), 0);
+  std::vector<std::string> values;
+  for (int i = 0; i < 80; i++) {
+    values.push_back(RandomString(&rnd, 100000));
+    ASSERT_OK(Put(1, Key(i), values[i]));
@@ -2137,22 +2033,6 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  Options options = CurrentOptions();
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor.reset(NewFixedPrefixTransform(2));
-  options.memtable_factory.reset(NewHashSkipListRepFactory());
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+  ReopenWithColumnFamilies({"default", "pikachu"}, &options);
+  dbfull()->TEST_CompactRange(0, nullptr, nullptr, handles_[1]);
+  ASSERT_EQ(NumTableFilesAtLevel(0, 1), 0);
+  ASSERT_GT(NumTableFilesAtLevel(1, 1), 1);
+  for (int i = 0; i < 80; i++) {
+    ASSERT_EQ(Get(1, Key(i)), values[i]);
@@ -2160 +2040,8 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-void MinLevelHelper(DBTest* self, Options& options) {
+}
+TEST(DBTest, CompactionTrigger) {
+  Options options = CurrentOptions();
+  options.write_buffer_size = 100<<10;
+  options.num_levels = 3;
+  options.max_mem_compaction_level = 0;
+  options.level0_file_num_compaction_trigger = 3;
+  CreateAndReopenWithCF({"pikachu"}, &options);
@@ -2169 +2054 @@ void MinLevelHelper(DBTest* self, Options& options) {
-      ASSERT_OK(self->Put(Key(i), values[i]));
+      ASSERT_OK(Put(1, Key(i), values[i]));
@@ -2171,2 +2056,2 @@ void MinLevelHelper(DBTest* self, Options& options) {
-    self->dbfull()->TEST_WaitForFlushMemTable();
-    ASSERT_EQ(self->NumTableFilesAtLevel(0), num + 1);
+    dbfull()->TEST_WaitForFlushMemTable(handles_[1]);
+    ASSERT_EQ(NumTableFilesAtLevel(0, 1), num + 1);
@@ -2177 +2062 @@ void MinLevelHelper(DBTest* self, Options& options) {
-    ASSERT_OK(self->Put(Key(i), values[i]));
+    ASSERT_OK(Put(1, Key(i), values[i]));
@@ -2179,3 +2064,3 @@ void MinLevelHelper(DBTest* self, Options& options) {
-  self->dbfull()->TEST_WaitForCompact();
-  ASSERT_EQ(self->NumTableFilesAtLevel(0), 0);
-  ASSERT_EQ(self->NumTableFilesAtLevel(1), 1);
+  dbfull()->TEST_WaitForCompact();
+  ASSERT_EQ(NumTableFilesAtLevel(0, 1), 0);
+  ASSERT_EQ(NumTableFilesAtLevel(1, 1), 1);
@@ -2183,29 +2068,8 @@ void MinLevelHelper(DBTest* self, Options& options) {
-bool MinLevelToCompress(CompressionType& type, Options& options, int wbits,
-                        int lev, int strategy) {
-  fprintf(stderr, "Test with compression options : window_bits = %d, level =  %d, strategy = %d}\n", wbits, lev, strategy);
-  options.write_buffer_size = 100<<10;
-  options.num_levels = 3;
-  options.max_mem_compaction_level = 0;
-  options.level0_file_num_compaction_trigger = 3;
-  options.create_if_missing = true;
-  if (SnappyCompressionSupported(CompressionOptions(wbits, lev, strategy))) {
-    type = kSnappyCompression;
-    fprintf(stderr, "using snappy\n");
-  } else if (ZlibCompressionSupported(
-               CompressionOptions(wbits, lev, strategy))) {
-    type = kZlibCompression;
-    fprintf(stderr, "using zlib\n");
-  } else if (BZip2CompressionSupported(
-               CompressionOptions(wbits, lev, strategy))) {
-    type = kBZip2Compression;
-    fprintf(stderr, "using bzip2\n");
-  } else if (LZ4CompressionSupported(
-                 CompressionOptions(wbits, lev, strategy))) {
-    type = kLZ4Compression;
-    fprintf(stderr, "using lz4\n");
-  } else if (LZ4HCCompressionSupported(
-                 CompressionOptions(wbits, lev, strategy))) {
-    type = kLZ4HCCompression;
-    fprintf(stderr, "using lz4hc\n");
-  } else {
-    fprintf(stderr, "skipping test, compression disabled\n");
+static int cfilter_count;
+static std::string NEW_VALUE = "NewValue";
+class KeepFilter : public CompactionFilter {
+ public:
+  virtual bool Filter(int level, const Slice& key, const Slice& value,
+                      std::string* new_value, bool* value_changed) const
+      override {
+    cfilter_count++;
@@ -2214,7 +2078,8 @@ bool MinLevelToCompress(CompressionType& type, Options& options, int wbits,
-  options.compression_per_level.resize(options.num_levels);
-  for (int i = 0; i < 1; i++) {
-    options.compression_per_level[i] = kNoCompression;
-  }
-  for (int i = 1; i < options.num_levels; i++) {
-    options.compression_per_level[i] = type;
-  }
+  virtual const char* Name() const override { return "KeepFilter"; }
+};
+class DeleteFilter : public CompactionFilter {
+ public:
+  virtual bool Filter(int level, const Slice& key, const Slice& value,
+                      std::string* new_value, bool* value_changed) const
+      override {
+    cfilter_count++;
@@ -2223,45 +2088,12 @@ bool MinLevelToCompress(CompressionType& type, Options& options, int wbits,
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  Options options = CurrentOptions();
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor.reset(NewFixedPrefixTransform(2));
-  options.memtable_factory.reset(NewHashSkipListRepFactory());
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
-}
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  Options options = CurrentOptions();
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor.reset(NewFixedPrefixTransform(2));
-  options.memtable_factory.reset(NewHashSkipListRepFactory());
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+  virtual const char* Name() const override { return "DeleteFilter"; }
+};
+class ChangeFilter : public CompactionFilter {
+ public:
+  explicit ChangeFilter() {}
+  virtual bool Filter(int level, const Slice& key, const Slice& value,
+                      std::string* new_value, bool* value_changed) const
+      override {
+    assert(new_value != nullptr);
+    *new_value = NEW_VALUE;
+    *value_changed = true;
+    return false;
@@ -2269,22 +2101,11 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  Options options = CurrentOptions();
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor.reset(NewFixedPrefixTransform(2));
-  options.memtable_factory.reset(NewHashSkipListRepFactory());
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+  virtual const char* Name() const override { return "ChangeFilter"; }
+};
+class KeepFilterFactory : public CompactionFilterFactory {
+ public:
+  explicit KeepFilterFactory(bool check_context = false)
+      : check_context_(check_context) {}
+  virtual std::unique_ptr<CompactionFilter> CreateCompactionFilter(
+      const CompactionFilterContext& context) override {
+    if (check_context_) {
+      ASSERT_EQ(expect_full_compaction_.load(), context.is_full_compaction);
+      ASSERT_EQ(expect_manual_compaction_.load(), context.is_manual_compaction);
@@ -2292,22 +2113 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  Options options = CurrentOptions();
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor.reset(NewFixedPrefixTransform(2));
-  options.memtable_factory.reset(NewHashSkipListRepFactory());
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+    return std::unique_ptr<CompactionFilter>(new KeepFilter());
@@ -2315,22 +2115,13 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  Options options = CurrentOptions();
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor.reset(NewFixedPrefixTransform(2));
-  options.memtable_factory.reset(NewHashSkipListRepFactory());
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+  virtual const char* Name() const override { return "KeepFilterFactory"; }
+  bool check_context_;
+  std::atomic_bool expect_full_compaction_;
+  std::atomic_bool expect_manual_compaction_;
+};
+class DeleteFilterFactory : public CompactionFilterFactory {
+ public:
+  virtual std::unique_ptr<CompactionFilter> CreateCompactionFilter(
+      const CompactionFilterContext& context) override {
+    if (context.is_manual_compaction) {
+      return std::unique_ptr<CompactionFilter>(new DeleteFilter());
+    } else {
+      return std::unique_ptr<CompactionFilter>(nullptr);
@@ -2338,22 +2128,0 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  Options options = CurrentOptions();
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor.reset(NewFixedPrefixTransform(2));
-  options.memtable_factory.reset(NewHashSkipListRepFactory());
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
@@ -2361,22 +2130,8 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  Options options = CurrentOptions();
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor.reset(NewFixedPrefixTransform(2));
-  options.memtable_factory.reset(NewHashSkipListRepFactory());
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+  virtual const char* Name() const override { return "DeleteFilterFactory"; }
+};
+class ChangeFilterFactory : public CompactionFilterFactory {
+ public:
+  explicit ChangeFilterFactory() {}
+  virtual std::unique_ptr<CompactionFilter> CreateCompactionFilter(
+      const CompactionFilterContext& context) override {
+    return std::unique_ptr<CompactionFilter>(new ChangeFilter());
@@ -2384,4 +2139,3 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
+  virtual const char* Name() const override { return "ChangeFilterFactory"; }
+};
+TEST(DBTest, UniversalCompactionTrigger) {
@@ -2389,17 +2143,15 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor.reset(NewFixedPrefixTransform(2));
-  options.memtable_factory.reset(NewHashSkipListRepFactory());
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+  options.compaction_style = kCompactionStyleUniversal;
+  options.write_buffer_size = 100<<10;
+  options.level0_file_num_compaction_trigger = 4;
+  KeepFilterFactory* filter = new KeepFilterFactory(true);
+  filter->expect_manual_compaction_.store(false);
+  options.compaction_filter_factory.reset(filter);
+  CreateAndReopenWithCF({"pikachu"}, &options);
+  Random rnd(301);
+  int key_idx = 0;
+  filter->expect_full_compaction_.store(true);
+  for (int num = 0; num < options.level0_file_num_compaction_trigger - 1;
+       num++) {
+    for (int i = 0; i < 12; i++) {
+      ASSERT_OK(Put(1, Key(key_idx), RandomString(&rnd, 10000)));
+      key_idx++;
@@ -2407,22 +2159,2 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  Options options = CurrentOptions();
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor.reset(NewFixedPrefixTransform(2));
-  options.memtable_factory.reset(NewHashSkipListRepFactory());
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+    dbfull()->TEST_WaitForFlushMemTable(handles_[1]);
+    ASSERT_EQ(NumTableFilesAtLevel(0, 1), num + 1);
@@ -2430,4 +2162,68 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
+  for (int i = 0; i < 11; i++) {
+    ASSERT_OK(Put(1, Key(key_idx), RandomString(&rnd, 10000)));
+    key_idx++;
+  }
+  dbfull()->TEST_WaitForCompact();
+  ASSERT_EQ(NumTableFilesAtLevel(0, 1), 1);
+  for (int i = 1; i < options.num_levels ; i++) {
+    ASSERT_EQ(NumTableFilesAtLevel(i, 1), 0);
+  }
+  filter->expect_full_compaction_.store(false);
+  ASSERT_OK(Flush(1));
+  for (int num = 0; num < options.level0_file_num_compaction_trigger - 3;
+       num++) {
+    for (int i = 0; i < 11; i++) {
+      ASSERT_OK(Put(1, Key(key_idx), RandomString(&rnd, 10000)));
+      key_idx++;
+    }
+    dbfull()->TEST_WaitForFlushMemTable(handles_[1]);
+    ASSERT_EQ(NumTableFilesAtLevel(0, 1), num + 3);
+  }
+  for (int i = 0; i < 11; i++) {
+    ASSERT_OK(Put(1, Key(key_idx), RandomString(&rnd, 10000)));
+    key_idx++;
+  }
+  dbfull()->TEST_WaitForCompact();
+  ASSERT_EQ(NumTableFilesAtLevel(0, 1), 2);
+  for (int i = 1; i < options.num_levels ; i++) {
+    ASSERT_EQ(NumTableFilesAtLevel(i, 1), 0);
+  }
+  for (int num = 0; num < options.level0_file_num_compaction_trigger - 3;
+       num++) {
+    for (int i = 0; i < 11; i++) {
+      ASSERT_OK(Put(1, Key(key_idx), RandomString(&rnd, 10000)));
+      key_idx++;
+    }
+    dbfull()->TEST_WaitForFlushMemTable(handles_[1]);
+    ASSERT_EQ(NumTableFilesAtLevel(0, 1), num + 3);
+  }
+  for (int i = 0; i < 12; i++) {
+    ASSERT_OK(Put(1, Key(key_idx), RandomString(&rnd, 10000)));
+    key_idx++;
+  }
+  dbfull()->TEST_WaitForCompact();
+  ASSERT_EQ(NumTableFilesAtLevel(0, 1), 3);
+  for (int i = 1; i < options.num_levels ; i++) {
+    ASSERT_EQ(NumTableFilesAtLevel(i, 1), 0);
+  }
+  for (int i = 0; i < 11; i++) {
+    ASSERT_OK(Put(1, Key(key_idx), RandomString(&rnd, 10000)));
+    key_idx++;
+  }
+  dbfull()->TEST_WaitForCompact();
+  ASSERT_EQ(NumTableFilesAtLevel(0, 1), 4);
+  for (int i = 1; i < options.num_levels ; i++) {
+    ASSERT_EQ(NumTableFilesAtLevel(i, 1), 0);
+  }
+  filter->expect_full_compaction_.store(true);
+  for (int i = 0; i < 11; i++) {
+    ASSERT_OK(Put(1, Key(key_idx), RandomString(&rnd, 10000)));
+    key_idx++;
+  }
+  dbfull()->TEST_WaitForCompact();
+  ASSERT_EQ(NumTableFilesAtLevel(0, 1), 1);
+  for (int i = 1; i < options.num_levels ; i++) {
+    ASSERT_EQ(NumTableFilesAtLevel(i, 1), 0);
+  }
+}
+TEST(DBTest, UniversalCompactionSizeAmplification) {
@@ -2435,17 +2231,36 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor.reset(NewFixedPrefixTransform(2));
-  options.memtable_factory.reset(NewHashSkipListRepFactory());
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+  options.compaction_style = kCompactionStyleUniversal;
+  options.write_buffer_size = 100<<10;
+  options.level0_file_num_compaction_trigger = 3;
+  CreateAndReopenWithCF({"pikachu"}, &options);
+  options.compaction_options_universal.max_size_amplification_percent = 110;
+  ReopenWithColumnFamilies({"default", "pikachu"}, &options);
+  Random rnd(301);
+  int key_idx = 0;
+  for (int num = 0; num < options.level0_file_num_compaction_trigger - 1;
+       num++) {
+    for (int i = 0; i < 11; i++) {
+      ASSERT_OK(Put(1, Key(key_idx), RandomString(&rnd, 10000)));
+      key_idx++;
+    }
+    dbfull()->TEST_WaitForFlushMemTable(handles_[1]);
+    ASSERT_EQ(NumTableFilesAtLevel(0, 1), num + 1);
+  }
+  ASSERT_EQ(NumTableFilesAtLevel(0, 1), 2);
+  ASSERT_OK(Flush(1));
+  dbfull()->TEST_WaitForCompact();
+  ASSERT_EQ(NumTableFilesAtLevel(0, 1), 1);
+}
+TEST(DBTest, UniversalCompactionOptions) {
+  Options options = CurrentOptions();
+  options.compaction_style = kCompactionStyleUniversal;
+  options.write_buffer_size = 100<<10;
+  options.level0_file_num_compaction_trigger = 4;
+  options.num_levels = 1;
+  options.compaction_options_universal.compression_size_percent = -1;
+  CreateAndReopenWithCF({"pikachu"}, &options);
+  Random rnd(301);
+  int key_idx = 0;
+  for (int num = 0; num < options.level0_file_num_compaction_trigger; num++) {
+    for (int i = 0; i < 11; i++) {
+      ASSERT_OK(Put(1, Key(key_idx), RandomString(&rnd, 10000)));
+      key_idx++;
@@ -2453,4 +2268,12 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
+    dbfull()->TEST_WaitForFlushMemTable(handles_[1]);
+    if (num < options.level0_file_num_compaction_trigger - 1) {
+      ASSERT_EQ(NumTableFilesAtLevel(0, 1), num + 1);
+    }
+  }
+  dbfull()->TEST_WaitForCompact();
+  ASSERT_EQ(NumTableFilesAtLevel(0, 1), 1);
+  for (int i = 1; i < options.num_levels ; i++) {
+    ASSERT_EQ(NumTableFilesAtLevel(i, 1), 0);
+  }
+}
+TEST(DBTest, UniversalCompactionStopStyleSimilarSize) {
@@ -2458,17 +2281,15 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor.reset(NewFixedPrefixTransform(2));
-  options.memtable_factory.reset(NewHashSkipListRepFactory());
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+  options.compaction_style = kCompactionStyleUniversal;
+  options.write_buffer_size = 100<<10;
+  options.level0_file_num_compaction_trigger = 4;
+  options.compaction_options_universal.size_ratio = 10;
+  options.compaction_options_universal.stop_style = kCompactionStopStyleSimilarSize;
+  options.num_levels=1;
+  Reopen(&options);
+  Random rnd(301);
+  int key_idx = 0;
+  for (int num = 0;
+       num < options.level0_file_num_compaction_trigger-1;
+       num++) {
+    for (int i = 0; i < 11; i++) {
+      ASSERT_OK(Put(Key(key_idx), RandomString(&rnd, 10000)));
+      key_idx++;
@@ -2476,4 +2297,37 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
+    dbfull()->TEST_WaitForFlushMemTable();
+    ASSERT_EQ(NumTableFilesAtLevel(0), num + 1);
+  }
+  for (int i = 0; i < 11; i++) {
+    ASSERT_OK(Put(Key(key_idx), RandomString(&rnd, 10000)));
+    key_idx++;
+  }
+  dbfull()->TEST_WaitForCompact();
+  ASSERT_EQ(NumTableFilesAtLevel(0), 1);
+  dbfull()->Flush(FlushOptions());
+  for (int num = 0;
+       num < options.level0_file_num_compaction_trigger-3;
+       num++) {
+    for (int i = 0; i < 11; i++) {
+      ASSERT_OK(Put(Key(key_idx), RandomString(&rnd, 10000)));
+      key_idx++;
+    }
+    dbfull()->TEST_WaitForFlushMemTable();
+    ASSERT_EQ(NumTableFilesAtLevel(0), num + 3);
+  }
+  for (int i = 0; i < 11; i++) {
+    ASSERT_OK(Put(Key(key_idx), RandomString(&rnd, 10000)));
+    key_idx++;
+  }
+  dbfull()->TEST_WaitForCompact();
+  ASSERT_EQ(NumTableFilesAtLevel(0), 3);
+  for (int i = 0; i < 11; i++) {
+    ASSERT_OK(Put(Key(key_idx), RandomString(&rnd, 10000)));
+    key_idx++;
+  }
+  dbfull()->TEST_WaitForCompact();
+  ASSERT_EQ(NumTableFilesAtLevel(0), 4);
+}
+#if defined(SNAPPY) && defined(ZLIB) && defined(BZIP2)
+TEST(DBTest, CompressedCache) {
+  int num_iter = 80;
+  for (int iter = 0; iter < 3; iter++) {
@@ -2481 +2335,56 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.env = env_;
+    options.write_buffer_size = 64*1024;
+    options.statistics = rocksdb::CreateDBStatistics();
+    switch (iter) {
+      case 0:
+        options.block_cache = NewLRUCache(8*1024);
+        options.block_cache_compressed = nullptr;
+        break;
+      case 1:
+        options.no_block_cache = true;
+        options.block_cache = nullptr;
+        options.block_cache_compressed = NewLRUCache(8*1024);
+        break;
+      case 2:
+        options.block_cache = NewLRUCache(1024);
+        options.block_cache_compressed = NewLRUCache(8*1024);
+        break;
+      default:
+        ASSERT_TRUE(false);
+    }
+    CreateAndReopenWithCF({"pikachu"}, &options);
+    Options no_block_cache_opts;
+    no_block_cache_opts.no_block_cache = true;
+    no_block_cache_opts.statistics = options.statistics;
+    ReopenWithColumnFamilies({"default", "pikachu"},
+                             {&no_block_cache_opts, &options});
+    Random rnd(301);
+    ASSERT_EQ(NumTableFilesAtLevel(0, 1), 0);
+    std::vector<std::string> values;
+    std::string str;
+    for (int i = 0; i < num_iter; i++) {
+      if (i % 4 == 0) {
+        str = RandomString(&rnd, 1000);
+      }
+      values.push_back(str);
+      ASSERT_OK(Put(1, Key(i), values[i]));
+    }
+    ASSERT_OK(Flush(1));
+    for (int i = 0; i < num_iter; i++) {
+      ASSERT_EQ(Get(1, Key(i)), values[i]);
+    }
+    switch (iter) {
+      case 0:
+        ASSERT_GT(TestGetTickerCount(options, BLOCK_CACHE_MISS), 0);
+        ASSERT_EQ(TestGetTickerCount(options, BLOCK_CACHE_COMPRESSED_MISS), 0);
+        break;
+      case 1:
+        ASSERT_EQ(TestGetTickerCount(options, BLOCK_CACHE_MISS), 0);
+        ASSERT_GT(TestGetTickerCount(options, BLOCK_CACHE_COMPRESSED_MISS), 0);
+        break;
+      case 2:
+        ASSERT_GT(TestGetTickerCount(options, BLOCK_CACHE_MISS), 0);
+        ASSERT_GT(TestGetTickerCount(options, BLOCK_CACHE_COMPRESSED_MISS), 0);
+        break;
+      default:
+        ASSERT_TRUE(false);
+    }
@@ -2483,3 +2391,0 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.disable_auto_compactions = true;
-  options.prefix_extractor.reset(NewFixedPrefixTransform(2));
-  options.memtable_factory.reset(NewHashSkipListRepFactory());
@@ -2487,11 +2392,0 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
@@ -2499,15 +2393,0 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-class KeepFilterV2 : public CompactionFilterV2 {
-public:
-  virtual std::vector<bool> Filter(int level,
-                                   const SliceVector& keys,
-                                   const SliceVector& existing_values,
-                                   std::vector<std::string>* new_values,
-                                   std::vector<bool>* values_changed)
-    const override {
-    cfilter_count++;
-    std::vector<bool> ret;
-    new_values->clear();
-    values_changed->clear();
-    for (unsigned int i = 0; i < keys.size(); ++i) {
-      values_changed->push_back(false);
-      ret.push_back(false);
@@ -2515 +2395,4 @@ public:
-    return ret;
+static std::string CompressibleString(Random* rnd, int len) {
+  std::string r;
+  test::CompressibleString(rnd, 0.8, len, &r);
+  return r;
@@ -2517,2 +2400,62 @@ public:
-  virtual const char* Name() const override {
-    return "KeepFilterV2";
+TEST(DBTest, UniversalCompactionCompressRatio1) {
+  Options options = CurrentOptions();
+  options.compaction_style = kCompactionStyleUniversal;
+  options.write_buffer_size = 100<<10;
+  options.level0_file_num_compaction_trigger = 2;
+  options.num_levels = 1;
+  options.compaction_options_universal.compression_size_percent = 70;
+  Reopen(&options);
+  Random rnd(301);
+  int key_idx = 0;
+  for (int num = 0; num < 2; num++) {
+    for (int i = 0; i < 11; i++) {
+      ASSERT_OK(Put(Key(key_idx), CompressibleString(&rnd, 10000)));
+      key_idx++;
+    }
+    dbfull()->TEST_WaitForFlushMemTable();
+    dbfull()->TEST_WaitForCompact();
+  }
+  ASSERT_LT((int)dbfull()->TEST_GetLevel0TotalSize(), 110000 * 2 * 0.9);
+  for (int num = 0; num < 2; num++) {
+    for (int i = 0; i < 11; i++) {
+      ASSERT_OK(Put(Key(key_idx), CompressibleString(&rnd, 10000)));
+      key_idx++;
+    }
+    dbfull()->TEST_WaitForFlushMemTable();
+    dbfull()->TEST_WaitForCompact();
+  }
+  ASSERT_LT((int)dbfull()->TEST_GetLevel0TotalSize(), 110000 * 4 * 0.9);
+  for (int num = 0; num < 2; num++) {
+    for (int i = 0; i < 11; i++) {
+      ASSERT_OK(Put(Key(key_idx), CompressibleString(&rnd, 10000)));
+      key_idx++;
+    }
+    dbfull()->TEST_WaitForFlushMemTable();
+    dbfull()->TEST_WaitForCompact();
+  }
+  ASSERT_LT((int)dbfull()->TEST_GetLevel0TotalSize(), 110000 * 6 * 0.9);
+  for (int num = 0; num < 8; num++) {
+    for (int i = 0; i < 11; i++) {
+      ASSERT_OK(Put(Key(key_idx), CompressibleString(&rnd, 10000)));
+      key_idx++;
+    }
+    dbfull()->TEST_WaitForFlushMemTable();
+    dbfull()->TEST_WaitForCompact();
+  }
+  ASSERT_GT((int)dbfull()->TEST_GetLevel0TotalSize(),
+            110000 * 11 * 0.8 + 110000 * 2);
+}
+TEST(DBTest, UniversalCompactionCompressRatio2) {
+  Options options = CurrentOptions();
+  options.compaction_style = kCompactionStyleUniversal;
+  options.write_buffer_size = 100<<10;
+  options.level0_file_num_compaction_trigger = 2;
+  options.num_levels = 1;
+  options.compaction_options_universal.compression_size_percent = 95;
+  Reopen(&options);
+  Random rnd(301);
+  int key_idx = 0;
+  for (int num = 0; num < 14; num++) {
+    for (int i = 0; i < 12; i++) {
+      ASSERT_OK(Put(Key(key_idx), CompressibleString(&rnd, 10000)));
+      key_idx++;
@@ -2520,16 +2463,2 @@ public:
-};
-class DeleteFilterV2 : public CompactionFilterV2 {
-public:
-  virtual std::vector<bool> Filter(int level,
-                                   const SliceVector& keys,
-                                   const SliceVector& existing_values,
-                                   std::vector<std::string>* new_values,
-                                   std::vector<bool>* values_changed)
-    const override {
-    cfilter_count++;
-    new_values->clear();
-    values_changed->clear();
-    std::vector<bool> ret;
-    for (unsigned int i = 0; i < keys.size(); ++i) {
-      values_changed->push_back(false);
-      ret.push_back(true);
+    dbfull()->TEST_WaitForFlushMemTable();
+    dbfull()->TEST_WaitForCompact();
@@ -2537 +2466,2 @@ public:
-    return ret;
+  ASSERT_LT((int)dbfull()->TEST_GetLevel0TotalSize(),
+            120000 * 12 * 0.8 + 120000 * 2);
@@ -2539,2 +2469,44 @@ public:
-  virtual const char* Name() const override {
-    return "DeleteFilterV2";
+#endif
+TEST(DBTest, ConvertCompactionStyle) {
+  Random rnd(301);
+  int max_key_level_insert = 200;
+  int max_key_universal_insert = 600;
+  Options options = CurrentOptions();
+  options.write_buffer_size = 100<<10;
+  options.num_levels = 4;
+  options.level0_file_num_compaction_trigger = 3;
+  options.max_bytes_for_level_base = 500<<10;
+  options.max_bytes_for_level_multiplier = 1;
+  options.target_file_size_base = 200<<10;
+  options.target_file_size_multiplier = 1;
+  CreateAndReopenWithCF({"pikachu"}, &options);
+  for (int i = 0; i <= max_key_level_insert; i++) {
+    ASSERT_OK(Put(1, Key(i), RandomString(&rnd, 10000)));
+  }
+  ASSERT_OK(Flush(1));
+  dbfull()->TEST_WaitForCompact();
+  ASSERT_GT(TotalTableFiles(1, 4), 1);
+  int non_level0_num_files = 0;
+  for (int i = 1; i < options.num_levels; i++) {
+    non_level0_num_files += NumTableFilesAtLevel(i, 1);
+  }
+  ASSERT_GT(non_level0_num_files, 0);
+  options = CurrentOptions();
+  options.compaction_style = kCompactionStyleUniversal;
+  Status s = TryReopenWithColumnFamilies({"default", "pikachu"}, &options);
+  ASSERT_TRUE(s.IsInvalidArgument());
+  options = CurrentOptions();
+  options.disable_auto_compactions = true;
+  options.target_file_size_base = INT_MAX;
+  options.target_file_size_multiplier = 1;
+  options.max_bytes_for_level_base = INT_MAX;
+  options.max_bytes_for_level_multiplier = 1;
+  ReopenWithColumnFamilies({"default", "pikachu"}, &options);
+  dbfull()->CompactRange(handles_[1], nullptr, nullptr, true ,
+                         0 );
+  for (int i = 0; i < options.num_levels; i++) {
+    int num = NumTableFilesAtLevel(i, 1);
+    if (i == 0) {
+      ASSERT_EQ(num, 1);
+    } else {
+      ASSERT_EQ(num, 0);
@@ -2542,16 +2513,0 @@ public:
-};
-class ChangeFilterV2 : public CompactionFilterV2 {
-public:
-  virtual std::vector<bool> Filter(int level,
-                                   const SliceVector& keys,
-                                   const SliceVector& existing_values,
-                                   std::vector<std::string>* new_values,
-                                   std::vector<bool>* values_changed)
-    const override {
-    std::vector<bool> ret;
-    new_values->clear();
-    values_changed->clear();
-    for (unsigned int i = 0; i < keys.size(); ++i) {
-      values_changed->push_back(true);
-      new_values->push_back(NEW_VALUE);
-      ret.push_back(false);
@@ -2559 +2515,7 @@ public:
-    return ret;
+  options = CurrentOptions();
+  options.compaction_style = kCompactionStyleUniversal;
+  options.write_buffer_size = 100<<10;
+  options.level0_file_num_compaction_trigger = 3;
+  ReopenWithColumnFamilies({"default", "pikachu"}, &options);
+  for (int i = max_key_level_insert / 2; i <= max_key_universal_insert; i++) {
+    ASSERT_OK(Put(1, Key(i), RandomString(&rnd, 10000)));
@@ -2561,2 +2523,5 @@ public:
-  virtual const char* Name() const override {
-    return "ChangeFilterV2";
+  dbfull()->Flush(FlushOptions());
+  ASSERT_OK(Flush(1));
+  dbfull()->TEST_WaitForCompact();
+  for (int i = 1; i < options.num_levels; i++) {
+    ASSERT_EQ(NumTableFilesAtLevel(i, 1), 0);
@@ -2564,9 +2529,5 @@ public:
-};
-class KeepFilterFactoryV2 : public CompactionFilterFactoryV2 {
-public:
-  explicit KeepFilterFactoryV2(const SliceTransform* prefix_extractor)
-    : CompactionFilterFactoryV2(prefix_extractor) { }
-  virtual std::unique_ptr<CompactionFilterV2>
-  CreateCompactionFilterV2(
-      const CompactionFilterContext& context) override {
-    return std::unique_ptr<CompactionFilterV2>(new KeepFilterV2());
+  std::string keys_in_db;
+  Iterator* iter = dbfull()->NewIterator(ReadOptions(), handles_[1]);
+  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
+    keys_in_db.append(iter->key().ToString());
+    keys_in_db.push_back(',');
@@ -2574,2 +2535,5 @@ public:
-  virtual const char* Name() const override {
-    return "KeepFilterFactoryV2";
+  delete iter;
+  std::string expected_keys;
+  for (int i = 0; i <= max_key_universal_insert; i++) {
+    expected_keys.append(Key(i));
+    expected_keys.push_back(',');
@@ -2577,9 +2541 @@ public:
-};
-class DeleteFilterFactoryV2 : public CompactionFilterFactoryV2 {
-public:
-  explicit DeleteFilterFactoryV2(const SliceTransform* prefix_extractor)
-    : CompactionFilterFactoryV2(prefix_extractor) { }
-  virtual std::unique_ptr<CompactionFilterV2>
-  CreateCompactionFilterV2(
-      const CompactionFilterContext& context) override {
-    return std::unique_ptr<CompactionFilterV2>(new DeleteFilterV2());
+  ASSERT_EQ(keys_in_db, expected_keys);
@@ -2587,2 +2543,10 @@ public:
-  virtual const char* Name() const override {
-    return "DeleteFilterFactoryV2";
+void MinLevelHelper(DBTest* self, Options& options) {
+  Random rnd(301);
+  for (int num = 0;
+    num < options.level0_file_num_compaction_trigger - 1;
+    num++)
+  {
+    std::vector<std::string> values;
+    for (int i = 0; i < 12; i++) {
+      values.push_back(RandomString(&rnd, 10000));
+      ASSERT_OK(self->Put(Key(i), values[i]));
@@ -2590,9 +2554,2 @@ public:
-};
-class ChangeFilterFactoryV2 : public CompactionFilterFactoryV2 {
-public:
-  explicit ChangeFilterFactoryV2(const SliceTransform* prefix_extractor)
-    : CompactionFilterFactoryV2(prefix_extractor) { }
-  virtual std::unique_ptr<CompactionFilterV2>
-  CreateCompactionFilterV2(
-      const CompactionFilterContext& context) override {
-    return std::unique_ptr<CompactionFilterV2>(new ChangeFilterV2());
+    self->dbfull()->TEST_WaitForFlushMemTable();
+    ASSERT_EQ(self->NumTableFilesAtLevel(0), num + 1);
@@ -2600,2 +2557,4 @@ public:
-  virtual const char* Name() const override {
-    return "ChangeFilterFactoryV2";
+  std::vector<std::string> values;
+  for (int i = 0; i < 12; i++) {
+    values.push_back(RandomString(&rnd, 10000));
+    ASSERT_OK(self->Put(Key(i), values[i]));
@@ -2603,23 +2562,3 @@ public:
-};
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  Options options = CurrentOptions();
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor.reset(NewFixedPrefixTransform(2));
-  options.memtable_factory.reset(NewHashSkipListRepFactory());
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+  self->dbfull()->TEST_WaitForCompact();
+  ASSERT_EQ(self->NumTableFilesAtLevel(0), 0);
+  ASSERT_EQ(self->NumTableFilesAtLevel(1), 1);
@@ -2627,6 +2566,7 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  Options options = CurrentOptions();
-  options.env = env_;
+bool MinLevelToCompress(CompressionType& type, Options& options, int wbits,
+                        int lev, int strategy) {
+  fprintf(stderr, "Test with compression options : window_bits = %d, level =  %d, strategy = %d}\n", wbits, lev, strategy);
+  options.write_buffer_size = 100<<10;
+  options.num_levels = 3;
+  options.max_mem_compaction_level = 0;
+  options.level0_file_num_compaction_trigger = 3;
@@ -2634,15 +2574,22 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.disable_auto_compactions = true;
-  options.prefix_extractor.reset(NewFixedPrefixTransform(2));
-  options.memtable_factory.reset(NewHashSkipListRepFactory());
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+  if (SnappyCompressionSupported(CompressionOptions(wbits, lev, strategy))) {
+    type = kSnappyCompression;
+    fprintf(stderr, "using snappy\n");
+  } else if (ZlibCompressionSupported(
+               CompressionOptions(wbits, lev, strategy))) {
+    type = kZlibCompression;
+    fprintf(stderr, "using zlib\n");
+  } else if (BZip2CompressionSupported(
+               CompressionOptions(wbits, lev, strategy))) {
+    type = kBZip2Compression;
+    fprintf(stderr, "using bzip2\n");
+  } else if (LZ4CompressionSupported(
+                 CompressionOptions(wbits, lev, strategy))) {
+    type = kLZ4Compression;
+    fprintf(stderr, "using lz4\n");
+  } else if (LZ4HCCompressionSupported(
+                 CompressionOptions(wbits, lev, strategy))) {
+    type = kLZ4HCCompression;
+    fprintf(stderr, "using lz4hc\n");
+  } else {
+    fprintf(stderr, "skipping test, compression disabled\n");
+    return false;
@@ -2650,22 +2597,3 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  Options options = CurrentOptions();
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor.reset(NewFixedPrefixTransform(2));
-  options.memtable_factory.reset(NewHashSkipListRepFactory());
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+  options.compression_per_level.resize(options.num_levels);
+  for (int i = 0; i < 1; i++) {
+    options.compression_per_level[i] = kNoCompression;
@@ -2673,4 +2601,6 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
+  for (int i = 1; i < options.num_levels; i++) {
+    options.compression_per_level[i] = type;
+  }
+  return true;
+}
+TEST(DBTest, MinLevelToCompress1) {
@@ -2678,17 +2608,3 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor.reset(NewFixedPrefixTransform(2));
-  options.memtable_factory.reset(NewHashSkipListRepFactory());
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+  CompressionType type;
+  if (!MinLevelToCompress(type, options, -14, -1, 0)) {
+    return;
@@ -2696,7 +2612,4 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-static bool Between(uint64_t val, uint64_t low, uint64_t high) {
-  bool result = (val >= low) && (val <= high);
-  if (!result) {
-    fprintf(stderr, "Value %llu is not in range [%llu, %llu]\n",
-            (unsigned long long)(val),
-            (unsigned long long)(low),
-            (unsigned long long)(high));
+  Reopen(&options);
+  MinLevelHelper(this, options);
+  for (int i = 0; i < 2; i++) {
+    options.compression_per_level[i] = kNoCompression;
@@ -2704 +2617,2 @@ static bool Between(uint64_t val, uint64_t low, uint64_t high) {
-  return result;
+  for (int i = 2; i < options.num_levels; i++) {
+    options.compression_per_level[i] = type;
@@ -2706,10 +2619,0 @@ static bool Between(uint64_t val, uint64_t low, uint64_t high) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  Options options = CurrentOptions();
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor.reset(NewFixedPrefixTransform(2));
-  options.memtable_factory.reset(NewHashSkipListRepFactory());
@@ -2717,11 +2621 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+  MinLevelHelper(this, options);
@@ -2729,4 +2623 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
+TEST(DBTest, MinLevelToCompress2) {
@@ -2734,5 +2625,12 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor.reset(NewFixedPrefixTransform(2));
-  options.memtable_factory.reset(NewHashSkipListRepFactory());
+  CompressionType type;
+  if (!MinLevelToCompress(type, options, 15, -1, 0)) {
+    return;
+  }
+  Reopen(&options);
+  MinLevelHelper(this, options);
+  for (int i = 0; i < 2; i++) {
+    options.compression_per_level[i] = kNoCompression;
+  }
+  for (int i = 2; i < options.num_levels; i++) {
+    options.compression_per_level[i] = type;
+  }
@@ -2740,11 +2638 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+  MinLevelHelper(this, options);
@@ -2752,4 +2640,2 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
+TEST(DBTest, RepeatedWritesToSameKey) {
+  do {
@@ -2758,16 +2644,9 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor.reset(NewFixedPrefixTransform(2));
-  options.memtable_factory.reset(NewHashSkipListRepFactory());
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+    options.write_buffer_size = 100000;
+    CreateAndReopenWithCF({"pikachu"}, &options);
+    const int kMaxFiles =
+        options.num_levels + options.level0_stop_writes_trigger;
+    Random rnd(301);
+    std::string value = RandomString(&rnd, 2 * options.write_buffer_size);
+    for (int i = 0; i < 5 * kMaxFiles; i++) {
+      ASSERT_OK(Put(1, "key", value));
+      ASSERT_LE(TotalTableFiles(1), kMaxFiles);
@@ -2775,4 +2654,4 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
+  } while (ChangeCompactOptions());
+}
+TEST(DBTest, InPlaceUpdate) {
+  do {
@@ -2780 +2658,0 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.env = env_;
@@ -2782,15 +2660,12 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.disable_auto_compactions = true;
-  options.prefix_extractor.reset(NewFixedPrefixTransform(2));
-  options.memtable_factory.reset(NewHashSkipListRepFactory());
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+    options.inplace_update_support = true;
+    options.env = env_;
+    options.write_buffer_size = 100000;
+    CreateAndReopenWithCF({"pikachu"}, &options);
+    int numValues = 10;
+    for (int i = numValues; i > 0; i--) {
+      std::string value = DummyString(i, 'a');
+      ASSERT_OK(Put(1, "key", value));
+      ASSERT_EQ(value, Get(1, "key"));
+    }
+    validateNumberOfEntries(1, 1);
+  } while (ChangeCompactOptions());
@@ -2798,4 +2673,2 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
+TEST(DBTest, InPlaceUpdateLargeNewValue) {
+  do {
@@ -2802,0 +2676,2 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
+    options.create_if_missing = true;
+    options.inplace_update_support = true;
@@ -2803,0 +2679,14 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
+    options.write_buffer_size = 100000;
+    CreateAndReopenWithCF({"pikachu"}, &options);
+    int numValues = 10;
+    for (int i = 0; i < numValues; i++) {
+      std::string value = DummyString(i, 'a');
+      ASSERT_OK(Put(1, "key", value));
+      ASSERT_EQ(value, Get(1, "key"));
+    }
+    validateNumberOfEntries(numValues, 1);
+  } while (ChangeCompactOptions());
+}
+TEST(DBTest, InPlaceUpdateCallbackSmallerSize) {
+  do {
+    Options options = CurrentOptions();
@@ -2805,15 +2694,15 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.disable_auto_compactions = true;
-  options.prefix_extractor.reset(NewFixedPrefixTransform(2));
-  options.memtable_factory.reset(NewHashSkipListRepFactory());
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+    options.inplace_update_support = true;
+    options.env = env_;
+    options.write_buffer_size = 100000;
+    options.inplace_callback =
+      rocksdb::DBTest::updateInPlaceSmallerSize;
+    CreateAndReopenWithCF({"pikachu"}, &options);
+    int numValues = 10;
+    ASSERT_OK(Put(1, "key", DummyString(numValues, 'a')));
+    ASSERT_EQ(DummyString(numValues, 'c'), Get(1, "key"));
+    for (int i = numValues; i > 0; i--) {
+      ASSERT_OK(Put(1, "key", DummyString(i, 'a')));
+      ASSERT_EQ(DummyString(i - 1, 'b'), Get(1, "key"));
+    }
+    validateNumberOfEntries(1, 1);
+  } while (ChangeCompactOptions());
@@ -2821,4 +2710,2 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
+TEST(DBTest, InPlaceUpdateCallbackSmallerVarintSize) {
+  do {
@@ -2825,0 +2713,2 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
+    options.create_if_missing = true;
+    options.inplace_update_support = true;
@@ -2826,0 +2716,17 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
+    options.write_buffer_size = 100000;
+    options.inplace_callback =
+      rocksdb::DBTest::updateInPlaceSmallerVarintSize;
+    CreateAndReopenWithCF({"pikachu"}, &options);
+    int numValues = 265;
+    ASSERT_OK(Put(1, "key", DummyString(numValues, 'a')));
+    ASSERT_EQ(DummyString(numValues, 'c'), Get(1, "key"));
+    for (int i = numValues; i > 0; i--) {
+      ASSERT_OK(Put(1, "key", DummyString(i, 'a')));
+      ASSERT_EQ(DummyString(1, 'b'), Get(1, "key"));
+    }
+    validateNumberOfEntries(1, 1);
+  } while (ChangeCompactOptions());
+}
+TEST(DBTest, InPlaceUpdateCallbackLargeNewValue) {
+  do {
+    Options options = CurrentOptions();
@@ -2828,15 +2734,13 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.disable_auto_compactions = true;
-  options.prefix_extractor.reset(NewFixedPrefixTransform(2));
-  options.memtable_factory.reset(NewHashSkipListRepFactory());
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+    options.inplace_update_support = true;
+    options.env = env_;
+    options.write_buffer_size = 100000;
+    options.inplace_callback =
+      rocksdb::DBTest::updateInPlaceLargerSize;
+    CreateAndReopenWithCF({"pikachu"}, &options);
+    int numValues = 10;
+    for (int i = 0; i < numValues; i++) {
+      ASSERT_OK(Put(1, "key", DummyString(i, 'a')));
+      ASSERT_EQ(DummyString(i, 'c'), Get(1, "key"));
+    }
+    validateNumberOfEntries(numValues, 1);
+  } while (ChangeCompactOptions());
@@ -2844,4 +2748,2 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
+TEST(DBTest, InPlaceUpdateCallbackNoAction) {
+  do {
@@ -2848,0 +2751,2 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
+    options.create_if_missing = true;
+    options.inplace_update_support = true;
@@ -2849,0 +2754,66 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
+    options.write_buffer_size = 100000;
+    options.inplace_callback =
+      rocksdb::DBTest::updateInPlaceNoAction;
+    CreateAndReopenWithCF({"pikachu"}, &options);
+    ASSERT_OK(Put(1, "key", DummyString(1, 'a')));
+    ASSERT_EQ(Get(1, "key"), "NOT_FOUND");
+  } while (ChangeCompactOptions());
+}
+TEST(DBTest, CompactionFilter) {
+  Options options = CurrentOptions();
+  options.max_open_files = -1;
+  options.num_levels = 3;
+  options.max_mem_compaction_level = 0;
+  options.compaction_filter_factory = std::make_shared<KeepFilterFactory>();
+  CreateAndReopenWithCF({"pikachu"}, &options);
+  const std::string value(10, 'x');
+  for (int i = 0; i < 100000; i++) {
+    char key[100];
+    snprintf(key, sizeof(key), "B%010d", i);
+    Put(1, key, value);
+  }
+  ASSERT_OK(Flush(1));
+  cfilter_count = 0;
+  dbfull()->TEST_CompactRange(0, nullptr, nullptr, handles_[1]);
+  ASSERT_EQ(cfilter_count, 100000);
+  cfilter_count = 0;
+  dbfull()->TEST_CompactRange(1, nullptr, nullptr, handles_[1]);
+  ASSERT_EQ(cfilter_count, 100000);
+  ASSERT_EQ(NumTableFilesAtLevel(0, 1), 0);
+  ASSERT_EQ(NumTableFilesAtLevel(1, 1), 0);
+  ASSERT_NE(NumTableFilesAtLevel(2, 1), 0);
+  cfilter_count = 0;
+  int count = 0;
+  int total = 0;
+  Iterator* iter = dbfull()->TEST_NewInternalIterator(handles_[1]);
+  iter->SeekToFirst();
+  ASSERT_OK(iter->status());
+  while (iter->Valid()) {
+    ParsedInternalKey ikey(Slice(), 0, kTypeValue);
+    ikey.sequence = -1;
+    ASSERT_EQ(ParseInternalKey(iter->key(), &ikey), true);
+    total++;
+    if (ikey.sequence != 0) {
+      count++;
+    }
+    iter->Next();
+  }
+  ASSERT_EQ(total, 100000);
+  ASSERT_EQ(count, 1);
+  delete iter;
+  for (int i = 0; i < 100000; i++) {
+    char key[100];
+    snprintf(key, sizeof(key), "B%010d", i);
+    ASSERT_OK(Put(1, key, value));
+  }
+  ASSERT_OK(Flush(1));
+  cfilter_count = 0;
+  dbfull()->TEST_CompactRange(0, nullptr, nullptr, handles_[1]);
+  ASSERT_EQ(cfilter_count, 100000);
+  cfilter_count = 0;
+  dbfull()->TEST_CompactRange(1, nullptr, nullptr, handles_[1]);
+  ASSERT_EQ(cfilter_count, 100000);
+  ASSERT_EQ(NumTableFilesAtLevel(0, 1), 0);
+  ASSERT_EQ(NumTableFilesAtLevel(1, 1), 0);
+  ASSERT_NE(NumTableFilesAtLevel(2, 1), 0);
+  options.compaction_filter_factory = std::make_shared<DeleteFilterFactory>();
@@ -2851,3 +2820,0 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.disable_auto_compactions = true;
-  options.prefix_extractor.reset(NewFixedPrefixTransform(2));
-  options.memtable_factory.reset(NewHashSkipListRepFactory());
@@ -2855,9 +2822,23 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
+  CreateAndReopenWithCF({"pikachu"}, &options);
+  for (int i = 0; i < 100000; i++) {
+    char key[100];
+    snprintf(key, sizeof(key), "B%010d", i);
+    ASSERT_OK(Put(1, key, value));
+  }
+  ASSERT_OK(Flush(1));
+  ASSERT_NE(NumTableFilesAtLevel(0, 1), 0);
+  ASSERT_EQ(NumTableFilesAtLevel(1, 1), 0);
+  ASSERT_EQ(NumTableFilesAtLevel(2, 1), 0);
+  cfilter_count = 0;
+  dbfull()->TEST_CompactRange(0, nullptr, nullptr, handles_[1]);
+  ASSERT_EQ(cfilter_count, 100000);
+  cfilter_count = 0;
+  dbfull()->TEST_CompactRange(1, nullptr, nullptr, handles_[1]);
+  ASSERT_EQ(cfilter_count, 0);
+  ASSERT_EQ(NumTableFilesAtLevel(0, 1), 0);
+  ASSERT_EQ(NumTableFilesAtLevel(1, 1), 0);
+  iter = db_->NewIterator(ReadOptions(), handles_[1]);
+  iter->SeekToFirst();
+  count = 0;
+  while (iter->Valid()) {
+    count++;
@@ -2865 +2845,0 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  ASSERT_TRUE(!iter->Valid());
@@ -2867,4 +2847,18 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
+  ASSERT_EQ(count, 0);
+  delete iter;
+  count = 0;
+  iter = dbfull()->TEST_NewInternalIterator(handles_[1]);
+  iter->SeekToFirst();
+  ASSERT_OK(iter->status());
+  while (iter->Valid()) {
+    ParsedInternalKey ikey(Slice(), 0, kTypeValue);
+    ASSERT_EQ(ParseInternalKey(iter->key(), &ikey), true);
+    ASSERT_NE(ikey.sequence, (unsigned)0);
+    count++;
+    iter->Next();
+  }
+  ASSERT_EQ(count, 0);
+  delete iter;
+}
+TEST(DBTest, CompactionFilterWithValueChange) {
+  do {
@@ -2872,8 +2866,47 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor.reset(NewFixedPrefixTransform(2));
-  options.memtable_factory.reset(NewHashSkipListRepFactory());
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
+    options.num_levels = 3;
+    options.max_mem_compaction_level = 0;
+    options.compaction_filter_factory =
+      std::make_shared<ChangeFilterFactory>();
+    Reopen(&options);
+    CreateAndReopenWithCF({"pikachu"}, &options);
+    const std::string value(10, 'x');
+    for (int i = 0; i < 100001; i++) {
+      char key[100];
+      snprintf(key, sizeof(key), "B%010d", i);
+      Put(1, key, value);
+    }
+    ASSERT_OK(Flush(1));
+    dbfull()->TEST_CompactRange(0, nullptr, nullptr, handles_[1]);
+    dbfull()->TEST_CompactRange(1, nullptr, nullptr, handles_[1]);
+    for (int i = 0; i < 100001; i++) {
+      char key[100];
+      snprintf(key, sizeof(key), "B%010d", i);
+      Put(1, key, value);
+    }
+    ASSERT_OK(Flush(1));
+    dbfull()->TEST_CompactRange(0, nullptr, nullptr, handles_[1]);
+    dbfull()->TEST_CompactRange(1, nullptr, nullptr, handles_[1]);
+    for (int i = 0; i < 100001; i++) {
+      char key[100];
+      snprintf(key, sizeof(key), "B%010d", i);
+      std::string newvalue = Get(1, key);
+      ASSERT_EQ(newvalue.compare(NEW_VALUE), 0);
+    }
+  } while (ChangeCompactOptions());
+}
+TEST(DBTest, CompactionFilterContextManual) {
+  KeepFilterFactory* filter = new KeepFilterFactory();
+  Options options = CurrentOptions();
+  options.compaction_style = kCompactionStyleUniversal;
+  options.compaction_filter_factory.reset(filter);
+  options.compression = kNoCompression;
+  options.level0_file_num_compaction_trigger = 8;
+  Reopen(&options);
+  int num_keys_per_file = 400;
+  for (int j = 0; j < 3; j++) {
+    const std::string value(10, 'x');
+    for (int i = 0; i < num_keys_per_file; i++) {
+      char key[100];
+      snprintf(key, sizeof(key), "B%08d%02d", i, j);
+      Put(key, value);
+    }
@@ -2881,6 +2914,21 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
+    num_keys_per_file /= 2;
+  }
+  cfilter_count = 0;
+  filter->expect_manual_compaction_.store(true);
+  filter->expect_full_compaction_.store(false);
+  dbfull()->CompactRange(nullptr, nullptr);
+  ASSERT_EQ(cfilter_count, 700);
+  ASSERT_EQ(NumTableFilesAtLevel(0), 1);
+  int count = 0;
+  int total = 0;
+  Iterator* iter = dbfull()->TEST_NewInternalIterator();
+  iter->SeekToFirst();
+  ASSERT_OK(iter->status());
+  while (iter->Valid()) {
+    ParsedInternalKey ikey(Slice(), 0, kTypeValue);
+    ikey.sequence = -1;
+    ASSERT_EQ(ParseInternalKey(iter->key(), &ikey), true);
+    total++;
+    if (ikey.sequence != 0) {
+      count++;
+    }
@@ -2888 +2935,0 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  ASSERT_TRUE(!iter->Valid());
@@ -2890,22 +2937,107 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  Options options = CurrentOptions();
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor.reset(NewFixedPrefixTransform(2));
-  options.memtable_factory.reset(NewHashSkipListRepFactory());
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+  ASSERT_EQ(total, 700);
+  ASSERT_EQ(count, 1);
+  delete iter;
+}
+class KeepFilterV2 : public CompactionFilterV2 {
+ public:
+  virtual std::vector<bool> Filter(int level,
+                                   const SliceVector& keys,
+                                   const SliceVector& existing_values,
+                                   std::vector<std::string>* new_values,
+                                   std::vector<bool>* values_changed)
+    const override {
+    cfilter_count++;
+    std::vector<bool> ret;
+    new_values->clear();
+    values_changed->clear();
+    for (unsigned int i = 0; i < keys.size(); ++i) {
+      values_changed->push_back(false);
+      ret.push_back(false);
+    }
+    return ret;
+  }
+  virtual const char* Name() const override {
+    return "KeepFilterV2";
+  }
+};
+class DeleteFilterV2 : public CompactionFilterV2 {
+ public:
+  virtual std::vector<bool> Filter(int level,
+                                   const SliceVector& keys,
+                                   const SliceVector& existing_values,
+                                   std::vector<std::string>* new_values,
+                                   std::vector<bool>* values_changed)
+    const override {
+    cfilter_count++;
+    new_values->clear();
+    values_changed->clear();
+    std::vector<bool> ret;
+    for (unsigned int i = 0; i < keys.size(); ++i) {
+      values_changed->push_back(false);
+      ret.push_back(true);
+    }
+    return ret;
+  }
+  virtual const char* Name() const override {
+    return "DeleteFilterV2";
+  }
+};
+class ChangeFilterV2 : public CompactionFilterV2 {
+ public:
+  virtual std::vector<bool> Filter(int level,
+                                   const SliceVector& keys,
+                                   const SliceVector& existing_values,
+                                   std::vector<std::string>* new_values,
+                                   std::vector<bool>* values_changed)
+    const override {
+    std::vector<bool> ret;
+    new_values->clear();
+    values_changed->clear();
+    for (unsigned int i = 0; i < keys.size(); ++i) {
+      values_changed->push_back(true);
+      new_values->push_back(NEW_VALUE);
+      ret.push_back(false);
+    }
+    return ret;
+  }
+  virtual const char* Name() const override {
+    return "ChangeFilterV2";
+  }
+};
+class KeepFilterFactoryV2 : public CompactionFilterFactoryV2 {
+ public:
+  explicit KeepFilterFactoryV2(const SliceTransform* prefix_extractor)
+    : CompactionFilterFactoryV2(prefix_extractor) { }
+  virtual std::unique_ptr<CompactionFilterV2>
+  CreateCompactionFilterV2(
+      const CompactionFilterContext& context) override {
+    return std::unique_ptr<CompactionFilterV2>(new KeepFilterV2());
+  }
+  virtual const char* Name() const override {
+    return "KeepFilterFactoryV2";
+  }
+};
+class DeleteFilterFactoryV2 : public CompactionFilterFactoryV2 {
+ public:
+  explicit DeleteFilterFactoryV2(const SliceTransform* prefix_extractor)
+    : CompactionFilterFactoryV2(prefix_extractor) { }
+  virtual std::unique_ptr<CompactionFilterV2>
+  CreateCompactionFilterV2(
+      const CompactionFilterContext& context) override {
+    return std::unique_ptr<CompactionFilterV2>(new DeleteFilterV2());
+  }
+  virtual const char* Name() const override {
+    return "DeleteFilterFactoryV2";
+  }
+};
+class ChangeFilterFactoryV2 : public CompactionFilterFactoryV2 {
+ public:
+  explicit ChangeFilterFactoryV2(const SliceTransform* prefix_extractor)
+    : CompactionFilterFactoryV2(prefix_extractor) { }
+  virtual std::unique_ptr<CompactionFilterV2>
+  CreateCompactionFilterV2(
+      const CompactionFilterContext& context) override {
+    return std::unique_ptr<CompactionFilterV2>(new ChangeFilterV2());
+  }
+  virtual const char* Name() const override {
+    return "ChangeFilterFactoryV2";
@@ -2913,4 +3045,2 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
+};
+TEST(DBTest, CompactionFilterV2) {
@@ -2918,17 +3048,14 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor.reset(NewFixedPrefixTransform(2));
-  options.memtable_factory.reset(NewHashSkipListRepFactory());
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+  options.num_levels = 3;
+  options.max_mem_compaction_level = 0;
+  std::unique_ptr<const SliceTransform> prefix_extractor;
+  prefix_extractor.reset(NewFixedPrefixTransform(8));
+  options.compaction_filter_factory_v2
+    = std::make_shared<KeepFilterFactoryV2>(prefix_extractor.get());
+  option_config_ = kUniversalCompaction;
+  options.compaction_style = (rocksdb::CompactionStyle)1;
+  Reopen(&options);
+  const std::string value(10, 'x');
+  for (int i = 0; i < 100000; i++) {
+    char key[100];
+    snprintf(key, sizeof(key), "B%08d%010d", i , i);
+    Put(key, value);
@@ -2936,13 +3062,0 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  Options options = CurrentOptions();
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor.reset(NewFixedPrefixTransform(2));
-  options.memtable_factory.reset(NewHashSkipListRepFactory());
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
@@ -2950,8 +3064,15 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+  dbfull()->TEST_CompactRange(0, nullptr, nullptr);
+  dbfull()->TEST_CompactRange(1, nullptr, nullptr);
+  ASSERT_EQ(NumTableFilesAtLevel(0), 1);
+  int count = 0;
+  int total = 0;
+  Iterator* iter = dbfull()->TEST_NewInternalIterator();
+  iter->SeekToFirst();
+  ASSERT_OK(iter->status());
+  while (iter->Valid()) {
+    ParsedInternalKey ikey(Slice(), 0, kTypeValue);
+    ikey.sequence = -1;
+    ASSERT_EQ(ParseInternalKey(iter->key(), &ikey), true);
+    total++;
+    if (ikey.sequence != 0) {
+      count++;
@@ -2959,20 +3079,0 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  Options options = CurrentOptions();
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor.reset(NewFixedPrefixTransform(2));
-  options.memtable_factory.reset(NewHashSkipListRepFactory());
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
@@ -2980 +3080,0 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  ASSERT_TRUE(!iter->Valid());
@@ -2982,6 +3082,5 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  Options options = CurrentOptions();
-  options.env = env_;
+  ASSERT_EQ(total, 100000);
+  ASSERT_EQ(count, 1);
+  delete iter;
+  options.compaction_filter_factory_v2 =
+    std::make_shared<DeleteFilterFactoryV2>(prefix_extractor.get());
@@ -2989,3 +3087,0 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.disable_auto_compactions = true;
-  options.prefix_extractor.reset(NewFixedPrefixTransform(2));
-  options.memtable_factory.reset(NewHashSkipListRepFactory());
@@ -2993,11 +3089,4 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+  for (int i = 0; i < 100000; i++) {
+    char key[100];
+    snprintf(key, sizeof(key), "B%08d%010d", i, i);
+    Put(key, value);
@@ -3005,13 +3093,0 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  Options options = CurrentOptions();
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor.reset(NewFixedPrefixTransform(2));
-  options.memtable_factory.reset(NewHashSkipListRepFactory());
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
@@ -3019,6 +3095,9 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
+  ASSERT_NE(NumTableFilesAtLevel(0), 0);
+  dbfull()->TEST_CompactRange(0, nullptr, nullptr);
+  dbfull()->TEST_CompactRange(1, nullptr, nullptr);
+  ASSERT_EQ(NumTableFilesAtLevel(1), 0);
+  iter = db_->NewIterator(ReadOptions());
+  iter->SeekToFirst();
+  count = 0;
+  while (iter->Valid()) {
+    count++;
@@ -3026 +3104,0 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  ASSERT_TRUE(!iter->Valid());
@@ -3028,22 +3106,2 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  Options options = CurrentOptions();
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor.reset(NewFixedPrefixTransform(2));
-  options.memtable_factory.reset(NewHashSkipListRepFactory());
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+  ASSERT_EQ(count, 0);
+  delete iter;
@@ -3051,4 +3109 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
+TEST(DBTest, CompactionFilterV2WithValueChange) {
@@ -3056,17 +3111,14 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor.reset(NewFixedPrefixTransform(2));
-  options.memtable_factory.reset(NewHashSkipListRepFactory());
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+  options.num_levels = 3;
+  options.max_mem_compaction_level = 0;
+  std::unique_ptr<const SliceTransform> prefix_extractor;
+  prefix_extractor.reset(NewFixedPrefixTransform(8));
+  options.compaction_filter_factory_v2 =
+    std::make_shared<ChangeFilterFactoryV2>(prefix_extractor.get());
+  option_config_ = kUniversalCompaction;
+  options.compaction_style = (rocksdb::CompactionStyle)1;
+  Reopen(&options);
+  const std::string value(10, 'x');
+  for (int i = 0; i < 100001; i++) {
+    char key[100];
+    snprintf(key, sizeof(key), "B%08d%010d", i, i);
+    Put(key, value);
@@ -3074,13 +3125,0 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  Options options = CurrentOptions();
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor.reset(NewFixedPrefixTransform(2));
-  options.memtable_factory.reset(NewHashSkipListRepFactory());
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
@@ -3088,8 +3127,7 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+  dbfull()->TEST_CompactRange(0, nullptr, nullptr);
+  dbfull()->TEST_CompactRange(1, nullptr, nullptr);
+  for (int i = 0; i < 100001; i++) {
+    char key[100];
+    snprintf(key, sizeof(key), "B%08d%010d", i, i);
+    std::string newvalue = Get(key);
+    ASSERT_EQ(newvalue.compare(NEW_VALUE), 0);
@@ -3097,4 +3135,2 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
+}
+TEST(DBTest, CompactionFilterV2NULLPrefix) {
@@ -3102,8 +3138,21 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor.reset(NewFixedPrefixTransform(2));
-  options.memtable_factory.reset(NewHashSkipListRepFactory());
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
+  options.num_levels = 3;
+  options.max_mem_compaction_level = 0;
+  std::unique_ptr<const SliceTransform> prefix_extractor;
+  prefix_extractor.reset(NewFixedPrefixTransform(8));
+  options.compaction_filter_factory_v2 =
+    std::make_shared<ChangeFilterFactoryV2>(prefix_extractor.get());
+  option_config_ = kUniversalCompaction;
+  options.compaction_style = (rocksdb::CompactionStyle)1;
+  Reopen(&options);
+  const std::string value(10, 'x');
+  char first_key[100];
+  snprintf(first_key, sizeof(first_key), "%s0000%010d", "NULL", 1);
+  Put(first_key, value);
+  for (int i = 1; i < 100000; i++) {
+    char key[100];
+    snprintf(key, sizeof(key), "%08d%010d", i, i);
+    Put(key, value);
+  }
+  char last_key[100];
+  snprintf(last_key, sizeof(last_key), "%s0000%010d", "NULL", 2);
+  Put(last_key, value);
@@ -3111,8 +3160,41 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+  dbfull()->TEST_CompactRange(0, nullptr, nullptr);
+  std::string newvalue = Get(first_key);
+  ASSERT_EQ(newvalue.compare(NEW_VALUE), 0);
+  newvalue = Get(last_key);
+  ASSERT_EQ(newvalue.compare(NEW_VALUE), 0);
+  for (int i = 1; i < 100000; i++) {
+    char key[100];
+    snprintf(key, sizeof(key), "%08d%010d", i, i);
+    std::string newvalue = Get(key);
+    ASSERT_EQ(newvalue.compare(NEW_VALUE), 0);
+  }
+}
+TEST(DBTest, SparseMerge) {
+  do {
+    Options options = CurrentOptions();
+    options.compression = kNoCompression;
+    CreateAndReopenWithCF({"pikachu"}, &options);
+    FillLevels("A", "Z", 1);
+    const std::string value(1000, 'x');
+    Put(1, "A", "va");
+    for (int i = 0; i < 100000; i++) {
+      char key[100];
+      snprintf(key, sizeof(key), "B%010d", i);
+      Put(1, key, value);
+    }
+    Put(1, "C", "vc");
+    ASSERT_OK(Flush(1));
+    dbfull()->TEST_CompactRange(0, nullptr, nullptr, handles_[1]);
+    Put(1, "A", "va2");
+    Put(1, "B100", "bvalue2");
+    Put(1, "C", "vc2");
+    ASSERT_OK(Flush(1));
+    ASSERT_LE(dbfull()->TEST_MaxNextLevelOverlappingBytes(handles_[1]),
+              20 * 1048576);
+    dbfull()->TEST_CompactRange(0, nullptr, nullptr);
+    ASSERT_LE(dbfull()->TEST_MaxNextLevelOverlappingBytes(handles_[1]),
+              20 * 1048576);
+    dbfull()->TEST_CompactRange(1, nullptr, nullptr);
+    ASSERT_LE(dbfull()->TEST_MaxNextLevelOverlappingBytes(handles_[1]),
+              20 * 1048576);
+  } while (ChangeCompactOptions());
@@ -3120,4 +3202,12 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
+static bool Between(uint64_t val, uint64_t low, uint64_t high) {
+  bool result = (val >= low) && (val <= high);
+  if (!result) {
+    fprintf(stderr, "Value %llu is not in range [%llu, %llu]\n",
+            (unsigned long long)(val),
+            (unsigned long long)(low),
+            (unsigned long long)(high));
+  }
+  return result;
+}
+TEST(DBTest, ApproximateSizes) {
+  do {
@@ -3125,13 +3215,81 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor.reset(NewFixedPrefixTransform(2));
-  options.memtable_factory.reset(NewHashSkipListRepFactory());
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
+    options.write_buffer_size = 100000000;
+    options.compression = kNoCompression;
+    DestroyAndReopen();
+    CreateAndReopenWithCF({"pikachu"}, &options);
+    ASSERT_TRUE(Between(Size("", "xyz", 1), 0, 0));
+    ReopenWithColumnFamilies({"default", "pikachu"}, &options);
+    ASSERT_TRUE(Between(Size("", "xyz", 1), 0, 0));
+    ASSERT_EQ(NumTableFilesAtLevel(0, 1), 0);
+    const int N = 80;
+    static const int S1 = 100000;
+    static const int S2 = 105000;
+    Random rnd(301);
+    for (int i = 0; i < N; i++) {
+      ASSERT_OK(Put(1, Key(i), RandomString(&rnd, S1)));
+    }
+    ASSERT_TRUE(Between(Size("", Key(50), 1), 0, 0));
+    for (int run = 0; run < 3; run++) {
+      ReopenWithColumnFamilies({"default", "pikachu"}, &options);
+      for (int compact_start = 0; compact_start < N; compact_start += 10) {
+        for (int i = 0; i < N; i += 10) {
+          ASSERT_TRUE(Between(Size("", Key(i), 1), S1 * i, S2 * i));
+          ASSERT_TRUE(Between(Size("", Key(i) + ".suffix", 1), S1 * (i + 1),
+                              S2 * (i + 1)));
+          ASSERT_TRUE(Between(Size(Key(i), Key(i + 10), 1), S1 * 10, S2 * 10));
+        }
+        ASSERT_TRUE(Between(Size("", Key(50), 1), S1 * 50, S2 * 50));
+        ASSERT_TRUE(
+            Between(Size("", Key(50) + ".suffix", 1), S1 * 50, S2 * 50));
+        std::string cstart_str = Key(compact_start);
+        std::string cend_str = Key(compact_start + 9);
+        Slice cstart = cstart_str;
+        Slice cend = cend_str;
+        dbfull()->TEST_CompactRange(0, &cstart, &cend, handles_[1]);
+      }
+      ASSERT_EQ(NumTableFilesAtLevel(0, 1), 0);
+      ASSERT_GT(NumTableFilesAtLevel(1, 1), 0);
+    }
+  } while (ChangeOptions(kSkipUniversalCompaction | kSkipPlainTable));
+}
+TEST(DBTest, ApproximateSizes_MixOfSmallAndLarge) {
+  do {
+    Options options = CurrentOptions();
+    options.compression = kNoCompression;
+    CreateAndReopenWithCF({"pikachu"}, &options);
+    Random rnd(301);
+    std::string big1 = RandomString(&rnd, 100000);
+    ASSERT_OK(Put(1, Key(0), RandomString(&rnd, 10000)));
+    ASSERT_OK(Put(1, Key(1), RandomString(&rnd, 10000)));
+    ASSERT_OK(Put(1, Key(2), big1));
+    ASSERT_OK(Put(1, Key(3), RandomString(&rnd, 10000)));
+    ASSERT_OK(Put(1, Key(4), big1));
+    ASSERT_OK(Put(1, Key(5), RandomString(&rnd, 10000)));
+    ASSERT_OK(Put(1, Key(6), RandomString(&rnd, 300000)));
+    ASSERT_OK(Put(1, Key(7), RandomString(&rnd, 10000)));
+    for (int run = 0; run < 3; run++) {
+      ReopenWithColumnFamilies({"default", "pikachu"}, &options);
+      ASSERT_TRUE(Between(Size("", Key(0), 1), 0, 0));
+      ASSERT_TRUE(Between(Size("", Key(1), 1), 10000, 11000));
+      ASSERT_TRUE(Between(Size("", Key(2), 1), 20000, 21000));
+      ASSERT_TRUE(Between(Size("", Key(3), 1), 120000, 121000));
+      ASSERT_TRUE(Between(Size("", Key(4), 1), 130000, 131000));
+      ASSERT_TRUE(Between(Size("", Key(5), 1), 230000, 231000));
+      ASSERT_TRUE(Between(Size("", Key(6), 1), 240000, 241000));
+      ASSERT_TRUE(Between(Size("", Key(7), 1), 540000, 541000));
+      ASSERT_TRUE(Between(Size("", Key(8), 1), 550000, 560000));
+      ASSERT_TRUE(Between(Size(Key(3), Key(5), 1), 110000, 111000));
+      dbfull()->TEST_CompactRange(0, nullptr, nullptr, handles_[1]);
+    }
+  } while (ChangeOptions(kSkipPlainTable));
+}
+TEST(DBTest, IteratorPinsRef) {
+  do {
+    CreateAndReopenWithCF({"pikachu"});
+    Put(1, "foo", "hello");
+    Iterator* iter = db_->NewIterator(ReadOptions(), handles_[1]);
+    Put(1, "foo", "newvalue1");
+    for (int i = 0; i < 100; i++) {
+      ASSERT_OK(Put(1, Key(i), Key(i) + std::string(100000, 'v')));
+    }
+    Put(1, "foo", "newvalue2");
+    iter->SeekToFirst();
@@ -3139 +3297,2 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  ASSERT_EQ(iter->key().ToString(), "0202");
+    ASSERT_EQ("foo", iter->key().ToString());
+    ASSERT_EQ("hello", iter->value().ToString());
@@ -3141,0 +3301,2 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
+    delete iter;
+  } while (ChangeCompactOptions());
@@ -3143,4 +3304,330 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
+TEST(DBTest, Snapshot) {
+  do {
+    CreateAndReopenWithCF({"pikachu"});
+    Put(0, "foo", "0v1");
+    Put(1, "foo", "1v1");
+    const Snapshot* s1 = db_->GetSnapshot();
+    Put(0, "foo", "0v2");
+    Put(1, "foo", "1v2");
+    const Snapshot* s2 = db_->GetSnapshot();
+    Put(0, "foo", "0v3");
+    Put(1, "foo", "1v3");
+    const Snapshot* s3 = db_->GetSnapshot();
+    Put(0, "foo", "0v4");
+    Put(1, "foo", "1v4");
+    ASSERT_EQ("0v1", Get(0, "foo", s1));
+    ASSERT_EQ("1v1", Get(1, "foo", s1));
+    ASSERT_EQ("0v2", Get(0, "foo", s2));
+    ASSERT_EQ("1v2", Get(1, "foo", s2));
+    ASSERT_EQ("0v3", Get(0, "foo", s3));
+    ASSERT_EQ("1v3", Get(1, "foo", s3));
+    ASSERT_EQ("0v4", Get(0, "foo"));
+    ASSERT_EQ("1v4", Get(1, "foo"));
+    db_->ReleaseSnapshot(s3);
+    ASSERT_EQ("0v1", Get(0, "foo", s1));
+    ASSERT_EQ("1v1", Get(1, "foo", s1));
+    ASSERT_EQ("0v2", Get(0, "foo", s2));
+    ASSERT_EQ("1v2", Get(1, "foo", s2));
+    ASSERT_EQ("0v4", Get(0, "foo"));
+    ASSERT_EQ("1v4", Get(1, "foo"));
+    db_->ReleaseSnapshot(s1);
+    ASSERT_EQ("0v2", Get(0, "foo", s2));
+    ASSERT_EQ("1v2", Get(1, "foo", s2));
+    ASSERT_EQ("0v4", Get(0, "foo"));
+    ASSERT_EQ("1v4", Get(1, "foo"));
+    db_->ReleaseSnapshot(s2);
+    ASSERT_EQ("0v4", Get(0, "foo"));
+    ASSERT_EQ("1v4", Get(1, "foo"));
+  } while (ChangeOptions());
+}
+TEST(DBTest, HiddenValuesAreRemoved) {
+  do {
+    CreateAndReopenWithCF({"pikachu"});
+    Random rnd(301);
+    FillLevels("a", "z", 1);
+    std::string big = RandomString(&rnd, 50000);
+    Put(1, "foo", big);
+    Put(1, "pastfoo", "v");
+    const Snapshot* snapshot = db_->GetSnapshot();
+    Put(1, "foo", "tiny");
+    Put(1, "pastfoo2", "v2");
+    ASSERT_OK(Flush(1));
+    ASSERT_GT(NumTableFilesAtLevel(0, 1), 0);
+    ASSERT_EQ(big, Get(1, "foo", snapshot));
+    ASSERT_TRUE(Between(Size("", "pastfoo", 1), 50000, 60000));
+    db_->ReleaseSnapshot(snapshot);
+    ASSERT_EQ(AllEntriesFor("foo", 1), "[ tiny, " + big + " ]");
+    Slice x("x");
+    dbfull()->TEST_CompactRange(0, nullptr, &x, handles_[1]);
+    ASSERT_EQ(AllEntriesFor("foo", 1), "[ tiny ]");
+    ASSERT_EQ(NumTableFilesAtLevel(0, 1), 0);
+    ASSERT_GE(NumTableFilesAtLevel(1, 1), 1);
+    dbfull()->TEST_CompactRange(1, nullptr, &x, handles_[1]);
+    ASSERT_EQ(AllEntriesFor("foo", 1), "[ tiny ]");
+    ASSERT_TRUE(Between(Size("", "pastfoo", 1), 0, 1000));
+  } while (ChangeOptions(kSkipUniversalCompaction | kSkipPlainTable));
+}
+TEST(DBTest, CompactBetweenSnapshots) {
+  do {
+    CreateAndReopenWithCF({"pikachu"});
+    Random rnd(301);
+    FillLevels("a", "z", 1);
+    Put(1, "foo", "first");
+    const Snapshot* snapshot1 = db_->GetSnapshot();
+    Put(1, "foo", "second");
+    Put(1, "foo", "third");
+    Put(1, "foo", "fourth");
+    const Snapshot* snapshot2 = db_->GetSnapshot();
+    Put(1, "foo", "fifth");
+    Put(1, "foo", "sixth");
+    ASSERT_OK(Flush(1));
+    ASSERT_EQ("sixth", Get(1, "foo"));
+    ASSERT_EQ("fourth", Get(1, "foo", snapshot2));
+    ASSERT_EQ("first", Get(1, "foo", snapshot1));
+    ASSERT_EQ(AllEntriesFor("foo", 1),
+              "[ sixth, fifth, fourth, third, second, first ]");
+    FillLevels("a", "z", 1);
+    dbfull()->CompactRange(handles_[1], nullptr, nullptr);
+    ASSERT_EQ("sixth", Get(1, "foo"));
+    ASSERT_EQ("fourth", Get(1, "foo", snapshot2));
+    ASSERT_EQ("first", Get(1, "foo", snapshot1));
+    ASSERT_EQ(AllEntriesFor("foo", 1), "[ sixth, fourth, first ]");
+    db_->ReleaseSnapshot(snapshot1);
+    FillLevels("a", "z", 1);
+    dbfull()->CompactRange(handles_[1], nullptr, nullptr);
+    ASSERT_EQ("sixth", Get(1, "foo"));
+    ASSERT_EQ("fourth", Get(1, "foo", snapshot2));
+    ASSERT_EQ(AllEntriesFor("foo", 1), "[ sixth, fourth ]");
+    db_->ReleaseSnapshot(snapshot2);
+    FillLevels("a", "z", 1);
+    dbfull()->CompactRange(handles_[1], nullptr, nullptr);
+    ASSERT_EQ("sixth", Get(1, "foo"));
+    ASSERT_EQ(AllEntriesFor("foo", 1), "[ sixth ]");
+  } while (ChangeOptions());
+}
+TEST(DBTest, DeletionMarkers1) {
+  CreateAndReopenWithCF({"pikachu"});
+  Put(1, "foo", "v1");
+  ASSERT_OK(Flush(1));
+  const int last = CurrentOptions().max_mem_compaction_level;
+  ASSERT_EQ(NumTableFilesAtLevel(last, 1), 1);
+  Put(1, "a", "begin");
+  Put(1, "z", "end");
+  Flush(1);
+  ASSERT_EQ(NumTableFilesAtLevel(last, 1), 1);
+  ASSERT_EQ(NumTableFilesAtLevel(last - 1, 1), 1);
+  Delete(1, "foo");
+  Put(1, "foo", "v2");
+  ASSERT_EQ(AllEntriesFor("foo", 1), "[ v2, DEL, v1 ]");
+  ASSERT_OK(Flush(1));
+  if (CurrentOptions().purge_redundant_kvs_while_flush) {
+    ASSERT_EQ(AllEntriesFor("foo", 1), "[ v2, v1 ]");
+  } else {
+    ASSERT_EQ(AllEntriesFor("foo", 1), "[ v2, DEL, v1 ]");
+  }
+  Slice z("z");
+  dbfull()->TEST_CompactRange(last - 2, nullptr, &z, handles_[1]);
+  ASSERT_EQ(AllEntriesFor("foo", 1), "[ v2, v1 ]");
+  dbfull()->TEST_CompactRange(last - 1, nullptr, nullptr, handles_[1]);
+  ASSERT_EQ(AllEntriesFor("foo", 1), "[ v2 ]");
+}
+TEST(DBTest, DeletionMarkers2) {
+  CreateAndReopenWithCF({"pikachu"});
+  Put(1, "foo", "v1");
+  ASSERT_OK(Flush(1));
+  const int last = CurrentOptions().max_mem_compaction_level;
+  ASSERT_EQ(NumTableFilesAtLevel(last, 1), 1);
+  Put(1, "a", "begin");
+  Put(1, "z", "end");
+  Flush(1);
+  ASSERT_EQ(NumTableFilesAtLevel(last, 1), 1);
+  ASSERT_EQ(NumTableFilesAtLevel(last - 1, 1), 1);
+  Delete(1, "foo");
+  ASSERT_EQ(AllEntriesFor("foo", 1), "[ DEL, v1 ]");
+  ASSERT_OK(Flush(1));
+  ASSERT_EQ(AllEntriesFor("foo", 1), "[ DEL, v1 ]");
+  dbfull()->TEST_CompactRange(last - 2, nullptr, nullptr, handles_[1]);
+  ASSERT_EQ(AllEntriesFor("foo", 1), "[ DEL, v1 ]");
+  dbfull()->TEST_CompactRange(last - 1, nullptr, nullptr, handles_[1]);
+  ASSERT_EQ(AllEntriesFor("foo", 1), "[ ]");
+}
+TEST(DBTest, OverlapInLevel0) {
+  do {
+    CreateAndReopenWithCF({"pikachu"});
+    int tmp = CurrentOptions().max_mem_compaction_level;
+    ASSERT_EQ(tmp, 2) << "Fix test to match config";
+    ASSERT_OK(Put(1, "100", "v100"));
+    ASSERT_OK(Put(1, "999", "v999"));
+    Flush(1);
+    ASSERT_OK(Delete(1, "100"));
+    ASSERT_OK(Delete(1, "999"));
+    Flush(1);
+    ASSERT_EQ("0,1,1", FilesPerLevel(1));
+    ASSERT_OK(Put(1, "300", "v300"));
+    ASSERT_OK(Put(1, "500", "v500"));
+    Flush(1);
+    ASSERT_OK(Put(1, "200", "v200"));
+    ASSERT_OK(Put(1, "600", "v600"));
+    ASSERT_OK(Put(1, "900", "v900"));
+    Flush(1);
+    ASSERT_EQ("2,1,1", FilesPerLevel(1));
+    dbfull()->TEST_CompactRange(1, nullptr, nullptr, handles_[1]);
+    dbfull()->TEST_CompactRange(2, nullptr, nullptr, handles_[1]);
+    ASSERT_EQ("2", FilesPerLevel(1));
+    ASSERT_OK(Delete(1, "600"));
+    Flush(1);
+    ASSERT_EQ("3", FilesPerLevel(1));
+    ASSERT_EQ("NOT_FOUND", Get(1, "600"));
+  } while (ChangeOptions(kSkipUniversalCompaction));
+}
+TEST(DBTest, L0_CompactionBug_Issue44_a) {
+  do {
+    CreateAndReopenWithCF({"pikachu"});
+    ASSERT_OK(Put(1, "b", "v"));
+    ReopenWithColumnFamilies({"default", "pikachu"});
+    ASSERT_OK(Delete(1, "b"));
+    ASSERT_OK(Delete(1, "a"));
+    ReopenWithColumnFamilies({"default", "pikachu"});
+    ASSERT_OK(Delete(1, "a"));
+    ReopenWithColumnFamilies({"default", "pikachu"});
+    ASSERT_OK(Put(1, "a", "v"));
+    ReopenWithColumnFamilies({"default", "pikachu"});
+    ReopenWithColumnFamilies({"default", "pikachu"});
+    ASSERT_EQ("(a->v)", Contents(1));
+    env_->SleepForMicroseconds(1000000);
+    ASSERT_EQ("(a->v)", Contents(1));
+  } while (ChangeCompactOptions());
+}
+TEST(DBTest, L0_CompactionBug_Issue44_b) {
+  do {
+    CreateAndReopenWithCF({"pikachu"});
+    Put(1, "", "");
+    ReopenWithColumnFamilies({"default", "pikachu"});
+    Delete(1, "e");
+    Put(1, "", "");
+    ReopenWithColumnFamilies({"default", "pikachu"});
+    Put(1, "c", "cv");
+    ReopenWithColumnFamilies({"default", "pikachu"});
+    Put(1, "", "");
+    ReopenWithColumnFamilies({"default", "pikachu"});
+    Put(1, "", "");
+    env_->SleepForMicroseconds(1000000);
+    ReopenWithColumnFamilies({"default", "pikachu"});
+    Put(1, "d", "dv");
+    ReopenWithColumnFamilies({"default", "pikachu"});
+    Put(1, "", "");
+    ReopenWithColumnFamilies({"default", "pikachu"});
+    Delete(1, "d");
+    Delete(1, "b");
+    ReopenWithColumnFamilies({"default", "pikachu"});
+    ASSERT_EQ("(->)(c->cv)", Contents(1));
+    env_->SleepForMicroseconds(1000000);
+    ASSERT_EQ("(->)(c->cv)", Contents(1));
+  } while (ChangeCompactOptions());
+}
+TEST(DBTest, ComparatorCheck) {
+  class NewComparator : public Comparator {
+   public:
+    virtual const char* Name() const { return "rocksdb.NewComparator"; }
+    virtual int Compare(const Slice& a, const Slice& b) const {
+      return BytewiseComparator()->Compare(a, b);
+    }
+    virtual void FindShortestSeparator(std::string* s, const Slice& l) const {
+      BytewiseComparator()->FindShortestSeparator(s, l);
+    }
+    virtual void FindShortSuccessor(std::string* key) const {
+      BytewiseComparator()->FindShortSuccessor(key);
+    }
+  };
+  Options new_options, options;
+  NewComparator cmp;
+  do {
+    CreateAndReopenWithCF({"pikachu"});
+    options = CurrentOptions();
+    new_options = CurrentOptions();
+    new_options.comparator = &cmp;
+    Status s = TryReopenWithColumnFamilies({"default", "pikachu"},
+                                           {&options, &new_options});
+    ASSERT_TRUE(!s.ok());
+    ASSERT_TRUE(s.ToString().find("comparator") != std::string::npos)
+        << s.ToString();
+  } while (ChangeCompactOptions(&new_options));
+}
+TEST(DBTest, CustomComparator) {
+  class NumberComparator : public Comparator {
+   public:
+    virtual const char* Name() const { return "test.NumberComparator"; }
+    virtual int Compare(const Slice& a, const Slice& b) const {
+      return ToNumber(a) - ToNumber(b);
+    }
+    virtual void FindShortestSeparator(std::string* s, const Slice& l) const {
+      ToNumber(*s);
+      ToNumber(l);
+    }
+    virtual void FindShortSuccessor(std::string* key) const {
+      ToNumber(*key);
+    }
+   private:
+    static int ToNumber(const Slice& x) {
+      ASSERT_TRUE(x.size() >= 2 && x[0] == '[' && x[x.size()-1] == ']')
+          << EscapeString(x);
+      int val;
+      char ignored;
+      ASSERT_TRUE(sscanf(x.ToString().c_str(), "[%i]%c", &val, &ignored) == 1)
+          << EscapeString(x);
+      return val;
+    }
+  };
+  Options new_options;
+  NumberComparator cmp;
+  do {
+    new_options = CurrentOptions();
+    new_options.create_if_missing = true;
+    new_options.comparator = &cmp;
+    new_options.filter_policy = nullptr;
+    new_options.write_buffer_size = 1000;
+    DestroyAndReopen(&new_options);
+    CreateAndReopenWithCF({"pikachu"}, &new_options);
+    ASSERT_OK(Put(1, "[10]", "ten"));
+    ASSERT_OK(Put(1, "[0x14]", "twenty"));
+    for (int i = 0; i < 2; i++) {
+      ASSERT_EQ("ten", Get(1, "[10]"));
+      ASSERT_EQ("ten", Get(1, "[0xa]"));
+      ASSERT_EQ("twenty", Get(1, "[20]"));
+      ASSERT_EQ("twenty", Get(1, "[0x14]"));
+      ASSERT_EQ("NOT_FOUND", Get(1, "[15]"));
+      ASSERT_EQ("NOT_FOUND", Get(1, "[0xf]"));
+      Compact(1, "[0]", "[9999]");
+    }
+    for (int run = 0; run < 2; run++) {
+      for (int i = 0; i < 1000; i++) {
+        char buf[100];
+        snprintf(buf, sizeof(buf), "[%d]", i*10);
+        ASSERT_OK(Put(1, buf, buf));
+      }
+      Compact(1, "[0]", "[1000000]");
+    }
+  } while (ChangeCompactOptions(&new_options));
+}
+TEST(DBTest, ManualCompaction) {
+  CreateAndReopenWithCF({"pikachu"});
+  ASSERT_EQ(dbfull()->MaxMemCompactionLevel(), 2)
+      << "Need to update this test to match kMaxMemCompactLevel";
+  for (int iter = 0; iter < 2; ++iter) {
+    MakeTables(3, "p", "q", 1);
+    ASSERT_EQ("1,1,1", FilesPerLevel(1));
+    Compact(1, "", "c");
+    ASSERT_EQ("1,1,1", FilesPerLevel(1));
+    Compact(1, "r", "z");
+    ASSERT_EQ("1,1,1", FilesPerLevel(1));
+    Compact(1, "p1", "p9");
+    ASSERT_EQ("0,0,1", FilesPerLevel(1));
+    MakeTables(3, "c", "e", 1);
+    ASSERT_EQ("1,1,2", FilesPerLevel(1));
+    Compact(1, "b", "f");
+    ASSERT_EQ("0,0,2", FilesPerLevel(1));
+    MakeTables(1, "a", "z", 1);
+    ASSERT_EQ("0,1,2", FilesPerLevel(1));
+    db_->CompactRange(handles_[1], nullptr, nullptr);
+    ASSERT_EQ("0,0,1", FilesPerLevel(1));
+    if (iter == 0) {
@@ -3148 +3635 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.env = env_;
+      options.num_levels = 3;
@@ -3150,3 +3636,0 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.disable_auto_compactions = true;
-  options.prefix_extractor.reset(NewFixedPrefixTransform(2));
-  options.memtable_factory.reset(NewHashSkipListRepFactory());
@@ -3154,11 +3638 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+      CreateAndReopenWithCF({"pikachu"}, &options);
@@ -3166,4 +3640,73 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
+  }
+}
+TEST(DBTest, DBOpen_Options) {
+  std::string dbname = test::TmpDir() + "/db_options_test";
+  ASSERT_OK(DestroyDB(dbname, Options()));
+  DB* db = nullptr;
+  Options opts;
+  opts.create_if_missing = false;
+  Status s = DB::Open(opts, dbname, &db);
+  ASSERT_TRUE(strstr(s.ToString().c_str(), "does not exist") != nullptr);
+  ASSERT_TRUE(db == nullptr);
+  opts.create_if_missing = true;
+  s = DB::Open(opts, dbname, &db);
+  ASSERT_OK(s);
+  ASSERT_TRUE(db != nullptr);
+  delete db;
+  db = nullptr;
+  opts.create_if_missing = false;
+  opts.error_if_exists = true;
+  s = DB::Open(opts, dbname, &db);
+  ASSERT_TRUE(strstr(s.ToString().c_str(), "exists") != nullptr);
+  ASSERT_TRUE(db == nullptr);
+  opts.create_if_missing = true;
+  opts.error_if_exists = false;
+  s = DB::Open(opts, dbname, &db);
+  ASSERT_OK(s);
+  ASSERT_TRUE(db != nullptr);
+  delete db;
+  db = nullptr;
+}
+TEST(DBTest, DBOpen_Change_NumLevels) {
+  Options opts;
+  opts.create_if_missing = true;
+  DestroyAndReopen(&opts);
+  ASSERT_TRUE(db_ != nullptr);
+  CreateAndReopenWithCF({"pikachu"}, &opts);
+  ASSERT_OK(Put(1, "a", "123"));
+  ASSERT_OK(Put(1, "b", "234"));
+  db_->CompactRange(handles_[1], nullptr, nullptr);
+  Close();
+  opts.create_if_missing = false;
+  opts.num_levels = 2;
+  Status s = TryReopenWithColumnFamilies({"default", "pikachu"}, &opts);
+  ASSERT_TRUE(strstr(s.ToString().c_str(), "Invalid argument") != nullptr);
+  ASSERT_TRUE(db_ == nullptr);
+}
+TEST(DBTest, DestroyDBMetaDatabase) {
+  std::string dbname = test::TmpDir() + "/db_meta";
+  std::string metadbname = MetaDatabaseName(dbname, 0);
+  std::string metametadbname = MetaDatabaseName(metadbname, 0);
+  ASSERT_OK(DestroyDB(metametadbname, Options()));
+  ASSERT_OK(DestroyDB(metadbname, Options()));
+  ASSERT_OK(DestroyDB(dbname, Options()));
+  Options opts;
+  opts.create_if_missing = true;
+  DB* db = nullptr;
+  ASSERT_OK(DB::Open(opts, dbname, &db));
+  delete db;
+  db = nullptr;
+  ASSERT_OK(DB::Open(opts, metadbname, &db));
+  delete db;
+  db = nullptr;
+  ASSERT_OK(DB::Open(opts, metametadbname, &db));
+  delete db;
+  db = nullptr;
+  ASSERT_OK(DestroyDB(dbname, Options()));
+  opts.create_if_missing = false;
+  ASSERT_TRUE(!(DB::Open(opts, dbname, &db)).ok());
+  ASSERT_TRUE(!(DB::Open(opts, metadbname, &db)).ok());
+  ASSERT_TRUE(!(DB::Open(opts, metametadbname, &db)).ok());
+}
+TEST(DBTest, NoSpace) {
+  do {
@@ -3172,16 +3715,20 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor.reset(NewFixedPrefixTransform(2));
-  options.memtable_factory.reset(NewHashSkipListRepFactory());
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+    options.paranoid_checks = false;
+    Reopen(&options);
+    ASSERT_OK(Put("foo", "v1"));
+    ASSERT_EQ("v1", Get("foo"));
+    Compact("a", "z");
+    const int num_files = CountFiles();
+    env_->no_space_.Release_Store(env_);
+    env_->sleep_counter_.Reset();
+    for (int i = 0; i < 5; i++) {
+      for (int level = 0; level < dbfull()->NumberLevels()-1; level++) {
+        dbfull()->TEST_CompactRange(level, nullptr, nullptr);
+      }
+    }
+    std::string property_value;
+    ASSERT_TRUE(db_->GetProperty("rocksdb.background-errors", &property_value));
+    ASSERT_EQ("5", property_value);
+    env_->no_space_.Release_Store(nullptr);
+    ASSERT_LT(CountFiles(), num_files + 3);
+    ASSERT_GE(env_->sleep_counter_.Read(), 5);
+  } while (ChangeCompactOptions());
@@ -3189,4 +3736,2 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
+TEST(DBTest, NoSpaceFlush) {
+  do {
@@ -3195,16 +3740,17 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor.reset(NewFixedPrefixTransform(2));
-  options.memtable_factory.reset(NewHashSkipListRepFactory());
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+    options.max_background_flushes = 1;
+    Reopen(&options);
+    ASSERT_OK(Put("foo", "v1"));
+    env_->no_space_.Release_Store(env_);
+    std::string property_value;
+    ASSERT_TRUE(db_->GetProperty("rocksdb.background-errors", &property_value));
+    ASSERT_EQ("0", property_value);
+    dbfull()->TEST_FlushMemTable(false);
+    int time_to_sleep_limit = 300000;
+    while (time_to_sleep_limit > 0) {
+      int to_sleep = (time_to_sleep_limit > 1000) ? 1000 : time_to_sleep_limit;
+      time_to_sleep_limit -= to_sleep;
+      env_->SleepForMicroseconds(to_sleep);
+      ASSERT_TRUE(
+          db_->GetProperty("rocksdb.background-errors", &property_value));
+      if (property_value == "1") {
+        break;
@@ -3212,4 +3758,7 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
+    }
+    ASSERT_EQ("1", property_value);
+    env_->no_space_.Release_Store(nullptr);
+  } while (ChangeCompactOptions());
+}
+TEST(DBTest, NonWritableFileSystem) {
+  do {
@@ -3216,0 +3766 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
+    options.write_buffer_size = 1000;
@@ -3218,16 +3768,9 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor.reset(NewFixedPrefixTransform(2));
-  options.memtable_factory.reset(NewHashSkipListRepFactory());
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+    Reopen(&options);
+    ASSERT_OK(Put("foo", "v1"));
+    env_->non_writable_.Release_Store(env_);
+    std::string big(100000, 'x');
+    int errors = 0;
+    for (int i = 0; i < 20; i++) {
+      if (!Put("foo", big).ok()) {
+        errors++;
+        env_->SleepForMicroseconds(100000);
@@ -3235,4 +3778,10 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
+    }
+    ASSERT_GT(errors, 0);
+    env_->non_writable_.Release_Store(nullptr);
+  } while (ChangeCompactOptions());
+}
+TEST(DBTest, ManifestWriteError) {
+  for (int iter = 0; iter < 2; iter++) {
+    port::AtomicPointer* error_type = (iter == 0)
+        ? &env_->manifest_sync_error_
+        : &env_->manifest_write_error_;
@@ -3242,3 +3791 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.disable_auto_compactions = true;
-  options.prefix_extractor.reset(NewFixedPrefixTransform(2));
-  options.memtable_factory.reset(NewHashSkipListRepFactory());
+    options.error_if_exists = false;
@@ -3246,16 +3793,15 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
-}
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
+    ASSERT_OK(Put("foo", "bar"));
+    ASSERT_EQ("bar", Get("foo"));
+    Flush();
+    ASSERT_EQ("bar", Get("foo"));
+    const int last = dbfull()->MaxMemCompactionLevel();
+    ASSERT_EQ(NumTableFilesAtLevel(last), 1);
+    error_type->Release_Store(env_);
+    dbfull()->TEST_CompactRange(last, nullptr, nullptr);
+    ASSERT_EQ("bar", Get("foo"));
+    error_type->Release_Store(nullptr);
+    Reopen(&options);
+    ASSERT_EQ("bar", Get("foo"));
+  }
+}
+TEST(DBTest, PutFailsParanoid) {
@@ -3265,3 +3811,2 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.disable_auto_compactions = true;
-  options.prefix_extractor.reset(NewFixedPrefixTransform(2));
-  options.memtable_factory.reset(NewHashSkipListRepFactory());
+  options.error_if_exists = false;
+  options.paranoid_checks = true;
@@ -3269,11 +3814,35 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+  CreateAndReopenWithCF({"pikachu"}, &options);
+  Status s;
+  ASSERT_OK(Put(1, "foo", "bar"));
+  ASSERT_OK(Put(1, "foo1", "bar1"));
+  env_->log_write_error_.Release_Store(env_);
+  s = Put(1, "foo2", "bar2");
+  ASSERT_TRUE(!s.ok());
+  env_->log_write_error_.Release_Store(nullptr);
+  s = Put(1, "foo3", "bar3");
+  ASSERT_TRUE(!s.ok());
+  ASSERT_EQ("bar", Get(1, "foo"));
+  options.paranoid_checks = false;
+  DestroyAndReopen(&options);
+  CreateAndReopenWithCF({"pikachu"}, &options);
+  ASSERT_OK(Put(1, "foo", "bar"));
+  ASSERT_OK(Put(1, "foo1", "bar1"));
+  env_->log_write_error_.Release_Store(env_);
+  s = Put(1, "foo2", "bar2");
+  ASSERT_TRUE(!s.ok());
+  env_->log_write_error_.Release_Store(nullptr);
+  s = Put(1, "foo3", "bar3");
+  ASSERT_TRUE(s.ok());
+}
+TEST(DBTest, FilesDeletedAfterCompaction) {
+  do {
+    CreateAndReopenWithCF({"pikachu"});
+    ASSERT_OK(Put(1, "foo", "v2"));
+    Compact(1, "a", "z");
+    const int num_files = CountLiveFiles();
+    for (int i = 0; i < 10; i++) {
+      ASSERT_OK(Put(1, "foo", "v2"));
+      Compact(1, "a", "z");
+    }
+    ASSERT_EQ(CountLiveFiles(), num_files);
+  } while (ChangeCompactOptions());
@@ -3281,4 +3850,3 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
+TEST(DBTest, BloomFilter) {
+  do {
+    env_->count_random_reads_ = true;
@@ -3287 +3855,127 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.create_if_missing = true;
+    options.no_block_cache = true;
+    options.filter_policy = NewBloomFilterPolicy(10);
+    CreateAndReopenWithCF({"pikachu"}, &options);
+    const int N = 10000;
+    for (int i = 0; i < N; i++) {
+      ASSERT_OK(Put(1, Key(i), Key(i)));
+    }
+    Compact(1, "a", "z");
+    for (int i = 0; i < N; i += 100) {
+      ASSERT_OK(Put(1, Key(i), Key(i)));
+    }
+    Flush(1);
+    env_->delay_sstable_sync_.Release_Store(env_);
+    env_->random_read_counter_.Reset();
+    for (int i = 0; i < N; i++) {
+      ASSERT_EQ(Key(i), Get(1, Key(i)));
+    }
+    int reads = env_->random_read_counter_.Read();
+    fprintf(stderr, "%d present => %d reads\n", N, reads);
+    ASSERT_GE(reads, N);
+    ASSERT_LE(reads, N + 2*N/100);
+    env_->random_read_counter_.Reset();
+    for (int i = 0; i < N; i++) {
+      ASSERT_EQ("NOT_FOUND", Get(1, Key(i) + ".missing"));
+    }
+    reads = env_->random_read_counter_.Read();
+    fprintf(stderr, "%d missing => %d reads\n", N, reads);
+    ASSERT_LE(reads, 3*N/100);
+    env_->delay_sstable_sync_.Release_Store(nullptr);
+    Close();
+    delete options.filter_policy;
+  } while (ChangeCompactOptions());
+}
+TEST(DBTest, SnapshotFiles) {
+  do {
+    Options options = CurrentOptions();
+    options.write_buffer_size = 100000000;
+    CreateAndReopenWithCF({"pikachu"}, &options);
+    Random rnd(301);
+    ASSERT_EQ(NumTableFilesAtLevel(0, 1), 0);
+    std::vector<std::string> values;
+    for (int i = 0; i < 80; i++) {
+      values.push_back(RandomString(&rnd, 100000));
+      ASSERT_OK(Put((i < 40), Key(i), values[i]));
+    }
+    ASSERT_EQ(NumTableFilesAtLevel(0, 1), 0);
+    uint64_t manifest_number = 0;
+    uint64_t manifest_size = 0;
+    std::vector<std::string> files;
+    dbfull()->DisableFileDeletions();
+    dbfull()->GetLiveFiles(files, &manifest_size);
+    ASSERT_EQ(files.size(), 4U);
+    uint64_t number = 0;
+    FileType type;
+    std::string snapdir = dbname_ + ".snapdir/";
+    std::string mkdir = "mkdir -p " + snapdir;
+    ASSERT_EQ(system(mkdir.c_str()), 0);
+    for (unsigned int i = 0; i < files.size(); i++) {
+      ASSERT_EQ(files[i][0], '/');
+      std::string src = dbname_ + files[i];
+      std::string dest = snapdir + files[i];
+      uint64_t size;
+      ASSERT_OK(env_->GetFileSize(src, &size));
+      if (ParseFileName(files[i].substr(1), &number, &type)) {
+        if (type == kDescriptorFile) {
+          if (number > manifest_number) {
+            manifest_number = number;
+            ASSERT_GE(size, manifest_size);
+            size = manifest_size;
+          }
+        }
+      }
+      CopyFile(src, dest, size);
+    }
+    dbfull()->DisableFileDeletions();
+    std::vector<std::string> extras;
+    for (unsigned int i = 0; i < 1; i++) {
+      extras.push_back(RandomString(&rnd, 100000));
+      ASSERT_OK(Put(0, Key(i), extras[i]));
+    }
+    std::vector<ColumnFamilyDescriptor> column_families;
+    column_families.emplace_back("default", ColumnFamilyOptions());
+    column_families.emplace_back("pikachu", ColumnFamilyOptions());
+    std::vector<ColumnFamilyHandle*> cf_handles;
+    DB* snapdb;
+    DBOptions opts;
+    opts.create_if_missing = false;
+    Status stat =
+        DB::Open(opts, snapdir, column_families, &cf_handles, &snapdb);
+    ASSERT_OK(stat);
+    ReadOptions roptions;
+    std::string val;
+    for (unsigned int i = 0; i < 80; i++) {
+      stat = snapdb->Get(roptions, cf_handles[i < 40], Key(i), &val);
+      ASSERT_EQ(values[i].compare(val), 0);
+    }
+    for (auto cfh : cf_handles) {
+      delete cfh;
+    }
+    delete snapdb;
+    uint64_t new_manifest_number = 0;
+    uint64_t new_manifest_size = 0;
+    std::vector<std::string> newfiles;
+    dbfull()->DisableFileDeletions();
+    dbfull()->GetLiveFiles(newfiles, &new_manifest_size);
+    for (unsigned int i = 0; i < newfiles.size(); i++) {
+      std::string src = dbname_ + "/" + newfiles[i];
+      if (ParseFileName(newfiles[i].substr(1), &number, &type)) {
+        if (type == kDescriptorFile) {
+          if (number > new_manifest_number) {
+            uint64_t size;
+            new_manifest_number = number;
+            ASSERT_OK(env_->GetFileSize(src, &size));
+            ASSERT_GE(size, new_manifest_size);
+          }
+        }
+      }
+    }
+    ASSERT_EQ(manifest_number, new_manifest_number);
+    ASSERT_GT(new_manifest_size, manifest_size);
+    dbfull()->DisableFileDeletions();
+  } while (ChangeCompactOptions());
+}
+TEST(DBTest, CompactOnFlush) {
+  do {
+    Options options = CurrentOptions();
+    options.purge_redundant_kvs_while_flush = true;
@@ -3289,14 +3983,54 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.prefix_extractor.reset(NewFixedPrefixTransform(2));
-  options.memtable_factory.reset(NewHashSkipListRepFactory());
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+    CreateAndReopenWithCF({"pikachu"}, &options);
+    Put(1, "foo", "v1");
+    ASSERT_OK(Flush(1));
+    ASSERT_EQ(AllEntriesFor("foo", 1), "[ v1 ]");
+    Put(1, "a", "begin");
+    Put(1, "z", "end");
+    Flush(1);
+    Delete(1, "foo");
+    Put(1, "foo", "v2");
+    ASSERT_EQ(AllEntriesFor("foo", 1), "[ v2, DEL, v1 ]");
+    ASSERT_OK(Flush(1));
+    ASSERT_EQ(AllEntriesFor("foo", 1), "[ v2, v1 ]");
+    dbfull()->CompactRange(handles_[1], nullptr, nullptr);
+    ASSERT_EQ(AllEntriesFor("foo", 1), "[ v2 ]");
+    Delete(1, "foo");
+    Delete(1, "foo");
+    ASSERT_EQ(AllEntriesFor("foo", 1), "[ DEL, DEL, v2 ]");
+    ASSERT_OK(Flush(1));
+    ASSERT_EQ(AllEntriesFor("foo", 1), "[ DEL, v2 ]");
+    dbfull()->CompactRange(handles_[1], nullptr, nullptr);
+    ASSERT_EQ(AllEntriesFor("foo", 1), "[ ]");
+    Put(1, "foo", "v3");
+    Delete(1, "foo");
+    ASSERT_EQ(AllEntriesFor("foo", 1), "[ DEL, v3 ]");
+    ASSERT_OK(Flush(1));
+    ASSERT_EQ(AllEntriesFor("foo", 1), "[ DEL ]");
+    dbfull()->CompactRange(handles_[1], nullptr, nullptr);
+    ASSERT_EQ(AllEntriesFor("foo", 1), "[ ]");
+    Put(1, "foo", "v4");
+    Put(1, "foo", "v5");
+    ASSERT_EQ(AllEntriesFor("foo", 1), "[ v5, v4 ]");
+    ASSERT_OK(Flush(1));
+    ASSERT_EQ(AllEntriesFor("foo", 1), "[ v5 ]");
+    dbfull()->CompactRange(handles_[1], nullptr, nullptr);
+    ASSERT_EQ(AllEntriesFor("foo", 1), "[ v5 ]");
+    Delete(1, "foo");
+    dbfull()->CompactRange(handles_[1], nullptr, nullptr);
+    ASSERT_EQ(AllEntriesFor("foo", 1), "[ ]");
+    Put(1, "foo", "v6");
+    const Snapshot* snapshot = db_->GetSnapshot();
+    Put(1, "foo", "v7");
+    ASSERT_OK(Flush(1));
+    ASSERT_EQ(AllEntriesFor("foo", 1), "[ v7, v6 ]");
+    db_->ReleaseSnapshot(snapshot);
+    Delete(1, "foo");
+    dbfull()->CompactRange(handles_[1], nullptr, nullptr);
+    ASSERT_EQ(AllEntriesFor("foo", 1), "[ ]");
+    const Snapshot* snapshot1 = db_->GetSnapshot();
+    Put(1, "foo", "v8");
+    Put(1, "foo", "v9");
+    ASSERT_OK(Flush(1));
+    ASSERT_EQ(AllEntriesFor("foo", 1), "[ v9 ]");
+    db_->ReleaseSnapshot(snapshot1);
+  } while (ChangeCompactOptions());
@@ -3319,4 +4053,2 @@ std::vector<std::uint64_t> ListLogFiles(Env* env, const std::string& path) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
+TEST(DBTest, WALArchivalTtl) {
+  do {
@@ -3324 +4055,0 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.env = env_;
@@ -3326,3 +4057 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.disable_auto_compactions = true;
-  options.prefix_extractor.reset(NewFixedPrefixTransform(2));
-  options.memtable_factory.reset(NewHashSkipListRepFactory());
+    options.WAL_ttl_seconds = 1000;
@@ -3330,11 +4059,22 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+    std::string archiveDir = ArchivalDirectory(dbname_);
+    for (int i = 0; i < 10; ++i) {
+      for (int j = 0; j < 10; ++j) {
+        ASSERT_OK(Put(Key(10 * i + j), DummyString(1024)));
+      }
+      std::vector<uint64_t> log_files = ListLogFiles(env_, dbname_);
+      options.create_if_missing = false;
+      Reopen(&options);
+      std::vector<uint64_t> logs = ListLogFiles(env_, archiveDir);
+      std::set<uint64_t> archivedFiles(logs.begin(), logs.end());
+      for (auto& log : log_files) {
+        ASSERT_TRUE(archivedFiles.find(log) != archivedFiles.end());
+      }
+    }
+    std::vector<uint64_t> log_files = ListLogFiles(env_, archiveDir);
+    ASSERT_TRUE(log_files.size() > 0);
+    options.WAL_ttl_seconds = 1;
+    env_->SleepForMicroseconds(2 * 1000 * 1000);
+    Reopen(&options);
+    log_files = ListLogFiles(env_, archiveDir);
+    ASSERT_TRUE(log_files.empty());
+  } while (ChangeCompactOptions());
@@ -3358,4 +4098,2 @@ uint64_t GetLogDirSize(std::string dir_path, SpecialEnv* env) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
+TEST(DBTest, WALArchivalSizeLimit) {
+  do {
@@ -3363 +4100,0 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.env = env_;
@@ -3365,3 +4102,2 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.disable_auto_compactions = true;
-  options.prefix_extractor.reset(NewFixedPrefixTransform(2));
-  options.memtable_factory.reset(NewHashSkipListRepFactory());
+    options.WAL_ttl_seconds = 0;
+    options.WAL_size_limit_MB = 1000;
@@ -3369,11 +4105,20 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+    for (int i = 0; i < 128 * 128; ++i) {
+      ASSERT_OK(Put(Key(i), DummyString(1024)));
+    }
+    Reopen(&options);
+    std::string archive_dir = ArchivalDirectory(dbname_);
+    std::vector<std::uint64_t> log_files = ListLogFiles(env_, archive_dir);
+    ASSERT_TRUE(log_files.size() > 2);
+    options.WAL_size_limit_MB = 8;
+    Reopen(&options);
+    dbfull()->TEST_PurgeObsoleteteWAL();
+    uint64_t archive_size = GetLogDirSize(archive_dir, env_);
+    ASSERT_TRUE(archive_size <= options.WAL_size_limit_MB * 1024 * 1024);
+    options.WAL_ttl_seconds = 1;
+    dbfull()->TEST_SetDefaultTimeToCheck(1);
+    env_->SleepForMicroseconds(2 * 1000 * 1000);
+    Reopen(&options);
+    dbfull()->TEST_PurgeObsoleteteWAL();
+    log_files = ListLogFiles(env_, archive_dir);
+    ASSERT_TRUE(log_files.empty());
+  } while (ChangeCompactOptions());
@@ -3404,10 +4149,3 @@ void ExpectRecords(
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  Options options = CurrentOptions();
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor.reset(NewFixedPrefixTransform(2));
-  options.memtable_factory.reset(NewHashSkipListRepFactory());
+TEST(DBTest, TransactionLogIterator) {
+  do {
+    Options options = OptionsForLogIterTest();
@@ -3415,11 +4153,8 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+    CreateAndReopenWithCF({"pikachu"}, &options);
+    Put(0, "key1", DummyString(1024));
+    Put(1, "key2", DummyString(1024));
+    Put(1, "key2", DummyString(1024));
+    ASSERT_EQ(dbfull()->GetLatestSequenceNumber(), 3U);
+    {
+      auto iter = OpenTransactionLogIter(0);
+      ExpectRecords(3, iter);
@@ -3427,10 +4162,16 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  Options options = CurrentOptions();
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor.reset(NewFixedPrefixTransform(2));
-  options.memtable_factory.reset(NewHashSkipListRepFactory());
+    ReopenWithColumnFamilies({"default", "pikachu"}, &options);
+    env_->SleepForMicroseconds(2 * 1000 * 1000);
+    {
+      Put(0, "key4", DummyString(1024));
+      Put(1, "key5", DummyString(1024));
+      Put(0, "key6", DummyString(1024));
+    }
+    {
+      auto iter = OpenTransactionLogIter(0);
+      ExpectRecords(6, iter);
+    }
+  } while (ChangeCompactOptions());
+}
+TEST(DBTest, TransactionLogIteratorMoveOverZeroFiles) {
+  do {
+    Options options = OptionsForLogIterTest();
@@ -3438,11 +4179,8 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+    CreateAndReopenWithCF({"pikachu"}, &options);
+    Put(1, "key1", DummyString(1024));
+    ReopenWithColumnFamilies({"default", "pikachu"}, &options);
+    ReopenWithColumnFamilies({"default", "pikachu"}, &options);
+    Put(1, "key2", DummyString(1024));
+    auto iter = OpenTransactionLogIter(0);
+    ExpectRecords(2, iter);
+  } while (ChangeCompactOptions());
@@ -3469,10 +4207,3 @@ TEST(DBTest, TransactionLogIteratorStallAtLastRecord) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  Options options = CurrentOptions();
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor.reset(NewFixedPrefixTransform(2));
-  options.memtable_factory.reset(NewHashSkipListRepFactory());
+TEST(DBTest, TransactionLogIteratorJustEmptyFile) {
+  do {
+    Options options = OptionsForLogIterTest();
@@ -3480,10 +4211,2 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
+    unique_ptr<TransactionLogIterator> iter;
+    Status status = dbfull()->GetUpdatesSince(0, &iter);
@@ -3490,0 +4214 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
+  } while (ChangeCompactOptions());
@@ -3492,10 +4216,3 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  Options options = CurrentOptions();
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor.reset(NewFixedPrefixTransform(2));
-  options.memtable_factory.reset(NewHashSkipListRepFactory());
+TEST(DBTest, TransactionLogIteratorCheckAfterRestart) {
+  do {
+    Options options = OptionsForLogIterTest();
@@ -3503,11 +4220,7 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+    Put("key1", DummyString(1024));
+    Put("key2", DummyString(1023));
+    dbfull()->Flush(FlushOptions());
+    Reopen(&options);
+    auto iter = OpenTransactionLogIter(0);
+    ExpectRecords(2, iter);
+  } while (ChangeCompactOptions());
@@ -3515,10 +4228,3 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  Options options = CurrentOptions();
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor.reset(NewFixedPrefixTransform(2));
-  options.memtable_factory.reset(NewHashSkipListRepFactory());
+TEST(DBTest, TransactionLogIteratorCorruptedLog) {
+  do {
+    Options options = OptionsForLogIterTest();
@@ -3526,11 +4232,18 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+    for (int i = 0; i < 1024; i++) {
+      Put("key"+std::to_string(i), DummyString(10));
+    }
+    dbfull()->Flush(FlushOptions());
+    rocksdb::VectorLogPtr wal_files;
+    ASSERT_OK(dbfull()->GetSortedWalFiles(wal_files));
+    const auto logfilePath = dbname_ + "/" + wal_files.front()->PathName();
+    ASSERT_EQ(
+      0,
+      truncate(logfilePath.c_str(), wal_files.front()->SizeFileBytes() / 2));
+    Put("key1025", DummyString(10));
+    auto iter = OpenTransactionLogIter(0);
+    int count;
+    int last_sequence_read = ReadRecords(iter, count);
+    ASSERT_LT(last_sequence_read, 1025);
+    auto iter2 = OpenTransactionLogIter(last_sequence_read + 1);
+    ExpectRecords(1, iter2);
+  } while (ChangeCompactOptions());
@@ -3538,10 +4251,3 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  Options options = CurrentOptions();
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor.reset(NewFixedPrefixTransform(2));
-  options.memtable_factory.reset(NewHashSkipListRepFactory());
+TEST(DBTest, TransactionLogIteratorBatchOperations) {
+  do {
+    Options options = OptionsForLogIterTest();
@@ -3549,11 +4255,14 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+    CreateAndReopenWithCF({"pikachu"}, &options);
+    WriteBatch batch;
+    batch.Put(handles_[1], "key1", DummyString(1024));
+    batch.Put(handles_[0], "key2", DummyString(1024));
+    batch.Put(handles_[1], "key3", DummyString(1024));
+    batch.Delete(handles_[0], "key2");
+    dbfull()->Write(WriteOptions(), &batch);
+    Flush(1);
+    Flush(0);
+    ReopenWithColumnFamilies({"default", "pikachu"}, &options);
+    Put(1, "key4", DummyString(1024));
+    auto iter = OpenTransactionLogIter(3);
+    ExpectRecords(2, iter);
+  } while (ChangeCompactOptions());
@@ -3561,10 +4270,2 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  Options options = CurrentOptions();
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor.reset(NewFixedPrefixTransform(2));
-  options.memtable_factory.reset(NewHashSkipListRepFactory());
+TEST(DBTest, TransactionLogIteratorBlobs) {
+  Options options = OptionsForLogIterTest();
@@ -3572,11 +4273,19 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+  CreateAndReopenWithCF({"pikachu"}, &options);
+  {
+    WriteBatch batch;
+    batch.Put(handles_[1], "key1", DummyString(1024));
+    batch.Put(handles_[0], "key2", DummyString(1024));
+    batch.PutLogData(Slice("blob1"));
+    batch.Put(handles_[1], "key3", DummyString(1024));
+    batch.PutLogData(Slice("blob2"));
+    batch.Delete(handles_[0], "key2");
+    dbfull()->Write(WriteOptions(), &batch);
+    ReopenWithColumnFamilies({"default", "pikachu"}, &options);
+  }
+  auto res = OpenTransactionLogIter(0)->GetBatch();
+  struct Handler : public WriteBatch::Handler {
+    std::string seen;
+    virtual Status PutCF(uint32_t cf, const Slice& key, const Slice& value) {
+      seen += "Put(" + std::to_string(cf) + ", " + key.ToString() + ", " +
+              std::to_string(value.size()) + ")";
+      return Status::OK();
@@ -3584,4 +4293,26 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
+    virtual Status MergeCF(uint32_t cf, const Slice& key, const Slice& value) {
+      seen += "Merge(" + std::to_string(cf) + ", " + key.ToString() + ", " +
+              std::to_string(value.size()) + ")";
+      return Status::OK();
+    }
+    virtual void LogData(const Slice& blob) {
+      seen += "LogData(" + blob.ToString() + ")";
+    }
+    virtual Status DeleteCF(uint32_t cf, const Slice& key) {
+      seen += "Delete(" + std::to_string(cf) + ", " + key.ToString() + ")";
+      return Status::OK();
+    }
+  } handler;
+  res.writeBatchPtr->Iterate(&handler);
+  ASSERT_EQ(
+      "Put(1, key1, 1024)"
+      "Put(0, key2, 1024)"
+      "LogData(blob1)"
+      "Put(1, key3, 1024)"
+      "LogData(blob2)"
+      "Delete(0, key2)",
+      handler.seen);
+}
+TEST(DBTest, ReadCompaction) {
+  std::string value(4096, '4');
+  {
@@ -3589 +4319,0 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.env = env_;
@@ -3591,15 +4321,39 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.disable_auto_compactions = true;
-  options.prefix_extractor.reset(NewFixedPrefixTransform(2));
-  options.memtable_factory.reset(NewHashSkipListRepFactory());
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+    options.max_open_files = 20;
+    options.target_file_size_base = 512;
+    options.write_buffer_size = 64 * 1024;
+    options.filter_policy = nullptr;
+    options.block_size = 4096;
+    options.no_block_cache = true;
+    options.disable_seek_compaction = false;
+    CreateAndReopenWithCF({"pikachu"}, &options);
+    ASSERT_EQ(NumTableFilesAtLevel(0, 1), 0);
+    std::vector<std::string> values;
+    for (int i = 0; i < 2000; i++) {
+      ASSERT_OK(Put(1, Key(i), value));
+    }
+    Flush(1);
+    dbfull()->TEST_CompactRange(0, nullptr, nullptr, handles_[1]);
+    dbfull()->TEST_CompactRange(1, nullptr, nullptr, handles_[1]);
+    ASSERT_EQ(NumTableFilesAtLevel(0, 1), 0);
+    ASSERT_EQ(NumTableFilesAtLevel(1, 1), 0);
+    for (int i = 0; i < 2000; i = i + 16) {
+      ASSERT_OK(Put(1, Key(i), value));
+    }
+    Flush(1);
+    dbfull()->TEST_WaitForCompact();
+    int l1 = NumTableFilesAtLevel(0, 1);
+    int l2 = NumTableFilesAtLevel(1, 1);
+    int l3 = NumTableFilesAtLevel(2, 1);
+    ASSERT_NE(NumTableFilesAtLevel(0, 1), 0);
+    ASSERT_NE(NumTableFilesAtLevel(1, 1), 0);
+    ASSERT_NE(NumTableFilesAtLevel(2, 1), 0);
+    for (int j = 0; j < 100; j++) {
+      for (int i = 0; i < 2000; i++) {
+        Get(1, Key(i));
+      }
+    }
+    env_->SleepForMicroseconds(1000000);
+    ASSERT_TRUE(NumTableFilesAtLevel(0, 1) < l1 ||
+                NumTableFilesAtLevel(1, 1) < l2 ||
+                NumTableFilesAtLevel(2, 1) < l3);
+  }
@@ -3683,22 +4437,25 @@ static void MTThreadBody(void* arg) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  Options options = CurrentOptions();
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor.reset(NewFixedPrefixTransform(2));
-  options.memtable_factory.reset(NewHashSkipListRepFactory());
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+TEST(DBTest, MultiThreaded) {
+  do {
+    std::vector<std::string> cfs;
+    for (int i = 1; i < kColumnFamilies; ++i) {
+      cfs.push_back(std::to_string(i));
+    }
+    CreateAndReopenWithCF(cfs);
+    MTState mt;
+    mt.test = this;
+    mt.stop.Release_Store(0);
+    for (int id = 0; id < kNumThreads; id++) {
+      mt.counter[id].Release_Store(0);
+      mt.thread_done[id].Release_Store(0);
+    }
+    MTThread thread[kNumThreads];
+    for (int id = 0; id < kNumThreads; id++) {
+      thread[id].state = &mt;
+      thread[id].id = id;
+      env_->StartThread(MTThreadBody, &thread[id]);
+    }
+    env_->SleepForMicroseconds(kTestSeconds * 1000000);
+    mt.stop.Release_Store(&mt);
+    for (int id = 0; id < kNumThreads; id++) {
+      while (mt.thread_done[id].Acquire_Load() == nullptr) {
+        env_->SleepForMicroseconds(100000);
@@ -3706,4 +4463,25 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
+    }
+  } while (ChangeOptions());
+}
+namespace {
+static const int kGCNumThreads = 4;
+static const int kGCNumKeys = 1000;
+struct GCThread {
+  DB* db;
+  int id;
+  std::atomic<bool> done;
+};
+static void GCThreadBody(void* arg) {
+  GCThread* t = reinterpret_cast<GCThread*>(arg);
+  int id = t->id;
+  DB* db = t->db;
+  WriteOptions wo;
+  for (int i = 0; i < kGCNumKeys; ++i) {
+    std::string kv(std::to_string(i + id * kGCNumKeys));
+    ASSERT_OK(db->Put(wo, kv, kv));
+  }
+  t->done = true;
+}
+}
+TEST(DBTest, GroupCommitTest) {
+  do {
@@ -3711,17 +4489,31 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor.reset(NewFixedPrefixTransform(2));
-  options.memtable_factory.reset(NewHashSkipListRepFactory());
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+    options.statistics = rocksdb::CreateDBStatistics();
+    Reopen(&options);
+    GCThread thread[kGCNumThreads];
+    for (int id = 0; id < kGCNumThreads; id++) {
+      thread[id].id = id;
+      thread[id].db = db_;
+      thread[id].done = false;
+      env_->StartThread(GCThreadBody, &thread[id]);
+    }
+    for (int id = 0; id < kGCNumThreads; id++) {
+      while (thread[id].done == false) {
+        env_->SleepForMicroseconds(100000);
+      }
+    }
+    ASSERT_GT(TestGetTickerCount(options, WRITE_DONE_BY_OTHER), 0);
+    std::vector<std::string> expected_db;
+    for (int i = 0; i < kGCNumThreads * kGCNumKeys; ++i) {
+      expected_db.push_back(std::to_string(i));
+    }
+    sort(expected_db.begin(), expected_db.end());
+    Iterator* itr = db_->NewIterator(ReadOptions());
+    itr->SeekToFirst();
+    for (auto x : expected_db) {
+      ASSERT_TRUE(itr->Valid());
+      ASSERT_EQ(itr->key().ToString(), x);
+      ASSERT_EQ(itr->value().ToString(), x);
+      itr->Next();
+    }
+    ASSERT_TRUE(!itr->Valid());
+    delete itr;
+  } while (ChangeOptions());
@@ -3761,0 +4557,15 @@ public:
+  using DB::MultiGet;
+  virtual std::vector<Status> MultiGet(
+      const ReadOptions& options,
+      const std::vector<ColumnFamilyHandle*>& column_family,
+      const std::vector<Slice>& keys, std::vector<std::string>* values) {
+    std::vector<Status> s(keys.size(),
+                          Status::NotSupported("Not implemented."));
+    return s;
+  }
+  using DB::GetPropertiesOfAllTables;
+  virtual Status GetPropertiesOfAllTables(ColumnFamilyHandle* column_family,
+                                          TablePropertiesCollection* props) {
+    return Status();
+  }
+  using DB::KeyMayExist;
@@ -3769,0 +4580,19 @@ public:
+  using DB::NewIterator;
+  virtual Iterator* NewIterator(const ReadOptions& options,
+                                ColumnFamilyHandle* column_family) {
+    if (options.snapshot == nullptr) {
+      KVMap* saved = new KVMap;
+      *saved = map_;
+      return new ModelIter(saved, true);
+    } else {
+      const KVMap* snapshot_state =
+          &(reinterpret_cast<const ModelSnapshot*>(options.snapshot)->map_);
+      return new ModelIter(snapshot_state, false);
+    }
+  }
+  virtual Status NewIterators(
+      const ReadOptions& options,
+      const std::vector<ColumnFamilyHandle*>& column_family,
+      std::vector<Iterator*>* iterators) {
+    return Status::NotSupported("Not supported yet");
+  }
@@ -3810,0 +4642,10 @@ public:
+  using DB::NumberLevels;
+  virtual int NumberLevels(ColumnFamilyHandle* column_family) { return 1; }
+  using DB::MaxMemCompactionLevel;
+  virtual int MaxMemCompactionLevel(ColumnFamilyHandle* column_family) {
+    return 1;
+  }
+  using DB::Level0StopWriteTrigger;
+  virtual int Level0StopWriteTrigger(ColumnFamilyHandle* column_family) {
+    return -1;
+  }
@@ -3889,37 +4730,0 @@ private:
-public:
-  using DB::MultiGet;
-  virtual std::vector<Status> MultiGet(const ReadOptions& options, const std::vector<ColumnFamilyHandle*>& column_family, const std::vector<Slice>& keys, std::vector<std::string>* values) {
-    std::vector<Status> s(keys.size(),
-                          Status::NotSupported("Not implemented."));
-    return s;
-  }
-  using DB::GetPropertiesOfAllTables;
-  virtual Status GetPropertiesOfAllTables(ColumnFamilyHandle* column_family, TablePropertiesCollection* props) {
-    return Status();
-  }
-  using DB::KeyMayExist;
-  using DB::NewIterator;
-  virtual Iterator* NewIterator(const ReadOptions& options, ColumnFamilyHandle* column_family) {
-    if (options.snapshot == nullptr) {
-      KVMap* saved = new KVMap;
-      *saved = map_;
-      return new ModelIter(saved, true);
-    } else {
-      const KVMap* snapshot_state =
-          &(reinterpret_cast<const ModelSnapshot*>(options.snapshot)->map_);
-      return new ModelIter(snapshot_state, false);
-    }
-  }
-  virtual Status NewIterators(const ReadOptions& options, const std::vector<ColumnFamilyHandle*>& column_family, std::vector<Iterator*>* iterators) {
-    return Status::NotSupported("Not supported yet");
-  }
-  using DB::NumberLevels;
-  virtual int NumberLevels(ColumnFamilyHandle* column_family) { return 1; }
-  using DB::MaxMemCompactionLevel;
-  virtual int MaxMemCompactionLevel(ColumnFamilyHandle* column_family) {
-    return 1;
-  }
-  using DB::Level0StopWriteTrigger;
-  virtual int Level0StopWriteTrigger(ColumnFamilyHandle* column_family) {
-    return -1;
-  }
@@ -3980,22 +4785,35 @@ static bool CompareIterators(int step,
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  Options options = CurrentOptions();
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor.reset(NewFixedPrefixTransform(2));
-  options.memtable_factory.reset(NewHashSkipListRepFactory());
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+TEST(DBTest, Randomized) {
+  Random rnd(test::RandomSeed());
+  do {
+    ModelDB model(CurrentOptions());
+    const int N = 10000;
+    const Snapshot* model_snap = nullptr;
+    const Snapshot* db_snap = nullptr;
+    std::string k, v;
+    for (int step = 0; step < N; step++) {
+      int p = rnd.Uniform(100);
+      int minimum = 0;
+      if (option_config_ == kHashSkipList ||
+          option_config_ == kHashLinkList ||
+          option_config_ == kPlainTableFirstBytePrefix) {
+        minimum = 1;
+      }
+      if (p < 45) {
+        k = RandomKey(&rnd, minimum);
+        v = RandomString(&rnd,
+                         rnd.OneIn(20)
+                         ? 100 + rnd.Uniform(100)
+                         : rnd.Uniform(8));
+        ASSERT_OK(model.Put(WriteOptions(), k, v));
+        ASSERT_OK(db_->Put(WriteOptions(), k, v));
+      } else if (p < 90) {
+        k = RandomKey(&rnd, minimum);
+        ASSERT_OK(model.Delete(WriteOptions(), k));
+        ASSERT_OK(db_->Delete(WriteOptions(), k));
+      } else {
+        WriteBatch b;
+        const int num = rnd.Uniform(8);
+        for (int i = 0; i < num; i++) {
+          if (i == 0 || !rnd.OneIn(10)) {
+            k = RandomKey(&rnd, minimum);
+          } else {
@@ -4003,22 +4821,5 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  Options options = CurrentOptions();
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor.reset(NewFixedPrefixTransform(2));
-  options.memtable_factory.reset(NewHashSkipListRepFactory());
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+          if (rnd.OneIn(2)) {
+            v = RandomString(&rnd, rnd.Uniform(10));
+            b.Put(k, v);
+          } else {
+            b.Delete(k);
@@ -4026,22 +4827,67 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  Options options = CurrentOptions();
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor.reset(NewFixedPrefixTransform(2));
-  options.memtable_factory.reset(NewHashSkipListRepFactory());
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+        }
+        ASSERT_OK(model.Write(WriteOptions(), &b));
+        ASSERT_OK(db_->Write(WriteOptions(), &b));
+      }
+      if ((step % 100) == 0) {
+        ASSERT_TRUE(CompareIterators(step, &model, db_, nullptr, nullptr));
+        ASSERT_TRUE(CompareIterators(step, &model, db_, model_snap, db_snap));
+        if (model_snap != nullptr) model.ReleaseSnapshot(model_snap);
+        if (db_snap != nullptr) db_->ReleaseSnapshot(db_snap);
+        Reopen();
+        ASSERT_TRUE(CompareIterators(step, &model, db_, nullptr, nullptr));
+        model_snap = model.GetSnapshot();
+        db_snap = db_->GetSnapshot();
+      }
+    }
+    if (model_snap != nullptr) model.ReleaseSnapshot(model_snap);
+    if (db_snap != nullptr) db_->ReleaseSnapshot(db_snap);
+  } while (ChangeOptions(kSkipDeletesFilterFirst));
+}
+TEST(DBTest, MultiGetSimple) {
+  do {
+    CreateAndReopenWithCF({"pikachu"});
+    ASSERT_OK(Put(1, "k1", "v1"));
+    ASSERT_OK(Put(1, "k2", "v2"));
+    ASSERT_OK(Put(1, "k3", "v3"));
+    ASSERT_OK(Put(1, "k4", "v4"));
+    ASSERT_OK(Delete(1, "k4"));
+    ASSERT_OK(Put(1, "k5", "v5"));
+    ASSERT_OK(Delete(1, "no_key"));
+    std::vector<Slice> keys({"k1", "k2", "k3", "k4", "k5", "no_key"});
+    std::vector<std::string> values(20, "Temporary data to be overwritten");
+    std::vector<ColumnFamilyHandle*> cfs(keys.size(), handles_[1]);
+    std::vector<Status> s = db_->MultiGet(ReadOptions(), cfs, keys, &values);
+    ASSERT_EQ(values.size(), keys.size());
+    ASSERT_EQ(values[0], "v1");
+    ASSERT_EQ(values[1], "v2");
+    ASSERT_EQ(values[2], "v3");
+    ASSERT_EQ(values[4], "v5");
+    ASSERT_OK(s[0]);
+    ASSERT_OK(s[1]);
+    ASSERT_OK(s[2]);
+    ASSERT_TRUE(s[3].IsNotFound());
+    ASSERT_OK(s[4]);
+    ASSERT_TRUE(s[5].IsNotFound());
+  } while (ChangeCompactOptions());
+}
+TEST(DBTest, MultiGetEmpty) {
+  do {
+    CreateAndReopenWithCF({"pikachu"});
+    std::vector<Slice> keys;
+    std::vector<std::string> values;
+    std::vector<ColumnFamilyHandle*> cfs;
+    std::vector<Status> s = db_->MultiGet(ReadOptions(), cfs, keys, &values);
+    ASSERT_EQ(s.size(), 0U);
+    DestroyAndReopen();
+    CreateAndReopenWithCF({"pikachu"});
+    s = db_->MultiGet(ReadOptions(), cfs, keys, &values);
+    ASSERT_EQ(s.size(), 0U);
+    keys.resize(2);
+    keys[0] = "a";
+    keys[1] = "b";
+    cfs.push_back(handles_[0]);
+    cfs.push_back(handles_[1]);
+    s = db_->MultiGet(ReadOptions(), cfs, keys, &values);
+    ASSERT_EQ((int)s.size(), 2);
+    ASSERT_TRUE(s[0].IsNotFound() && s[1].IsNotFound());
+  } while (ChangeCompactOptions());
@@ -4083,4 +4929,11 @@ void PrefixScanInit(DBTest *dbtest) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
+TEST(DBTest, PrefixScan) {
+  ReadOptions ro = ReadOptions();
+  int count;
+  Slice prefix;
+  Slice key;
+  char buf[100];
+  Iterator* iter;
+  snprintf(buf, sizeof(buf), "03______:");
+  prefix = Slice(buf, 8);
+  key = Slice(buf, 9);
+  env_->count_random_reads_ = true;
@@ -4089 +4942,4 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.create_if_missing = true;
+  options.no_block_cache = true;
+  options.filter_policy = NewBloomFilterPolicy(10);
+  options.prefix_extractor.reset(NewFixedPrefixTransform(8));
+  options.whole_key_filtering = false;
@@ -4091 +4947,3 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.prefix_extractor.reset(NewFixedPrefixTransform(2));
+  options.max_background_compactions = 2;
+  options.create_if_missing = true;
+  options.disable_seek_compaction = true;
@@ -4094,11 +4952,44 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+  PrefixScanInit(this);
+  count = 0;
+  env_->random_read_counter_.Reset();
+  ro.prefix = &prefix;
+  iter = db_->NewIterator(ro);
+  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
+    assert(iter->key().starts_with(prefix));
+    count++;
+  }
+  ASSERT_OK(iter->status());
+  delete iter;
+  ASSERT_EQ(count, 2);
+  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
+  DestroyAndReopen(&options);
+  PrefixScanInit(this);
+  count = 0;
+  env_->random_read_counter_.Reset();
+  ro.prefix = &prefix;
+  iter = db_->NewIterator(ro);
+  for (iter->Seek(key); iter->Valid(); iter->Next()) {
+    assert(iter->key().starts_with(prefix));
+    count++;
+  }
+  ASSERT_OK(iter->status());
+  delete iter;
+  ASSERT_EQ(count, 2);
+  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
+  DestroyAndReopen(&options);
+  PrefixScanInit(this);
+  count = 0;
+  env_->random_read_counter_.Reset();
+  iter = db_->NewIterator(ReadOptions());
+  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
+    if (! iter->key().starts_with(prefix)) {
+      break;
+    }
+    count++;
+  }
+  ASSERT_OK(iter->status());
+  delete iter;
+  ASSERT_EQ(count, 2);
+  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
+  Close();
+  delete options.filter_policy;
@@ -4157 +5048 @@ void BM_LogAndApply(int iters, int num_base_files) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
+TEST(DBTest, TailingIteratorSingle) {
@@ -4160,8 +5050,0 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  read_options.prefix_seek = true;
-  Options options = CurrentOptions();
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor.reset(NewFixedPrefixTransform(2));
-  options.memtable_factory.reset(NewHashSkipListRepFactory());
-  DestroyAndReopen(&options);
@@ -4169,4 +5052 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
+  iter->SeekToFirst();
@@ -4174 +5054,2 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  iter->Seek("0202");
+  ASSERT_OK(db_->Put(WriteOptions(), "mirko", "fodor"));
+  iter->SeekToFirst();
@@ -4176 +5057 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  ASSERT_EQ(iter->key().ToString(), "0202");
+  ASSERT_EQ(iter->key().ToString(), "mirko");
@@ -4180 +5061,2 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
+TEST(DBTest, TailingIteratorKeepAdding) {
+  CreateAndReopenWithCF({"pikachu"});
@@ -4183,15 +5065,9 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  read_options.prefix_seek = true;
-  Options options = CurrentOptions();
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor.reset(NewFixedPrefixTransform(2));
-  options.memtable_factory.reset(NewHashSkipListRepFactory());
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
+  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options, handles_[1]));
+  std::string value(1024, 'a');
+  const int num_records = 10000;
+  for (int i = 0; i < num_records; ++i) {
+    char buf[32];
+    snprintf(buf, sizeof(buf), "%016d", i);
+    Slice key(buf, 16);
+    ASSERT_OK(Put(1, key, value));
+    iter->Seek(key);
@@ -4199,3 +5075 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+    ASSERT_EQ(iter->key().compare(key), 0);
@@ -4203 +5077,3 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
+}
+TEST(DBTest, TailingIteratorDeletes) {
+  CreateAndReopenWithCF({"pikachu"});
@@ -4206,15 +5082,3 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  read_options.prefix_seek = true;
-  Options options = CurrentOptions();
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor.reset(NewFixedPrefixTransform(2));
-  options.memtable_factory.reset(NewHashSkipListRepFactory());
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
+  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options, handles_[1]));
+  ASSERT_OK(Put(1, "0test", "test"));
+  iter->SeekToFirst();
@@ -4222 +5086,11 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  ASSERT_EQ(iter->key().ToString(), "0202");
+  ASSERT_EQ(iter->key().ToString(), "0test");
+  ASSERT_OK(Delete(1, "0test"));
+  const int num_records = 10000;
+  std::string value(1024, 'A');
+  for (int i = 0; i < num_records; ++i) {
+    char buf[32];
+    snprintf(buf, sizeof(buf), "1%015d", i);
+    Slice key(buf, 16);
+    ASSERT_OK(Put(1, key, value));
+  }
+  ASSERT_OK(Flush(1));
@@ -4224 +5098,3 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  ASSERT_TRUE(!iter->Valid());
+  int count = 0;
+  for (; iter->Valid(); iter->Next(), ++count) ;
+  ASSERT_EQ(count, num_records);
@@ -4237,4 +5113,5 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
+  CreateAndReopenWithCF({"pikachu"}, &options);
+  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options, handles_[1]));
+  ASSERT_OK(Put(1, "0101", "test"));
+  ASSERT_OK(Flush(1));
+  ASSERT_OK(Put(1, "0202", "test"));
