[
  {
    "desc": "Single side deletion.",
    "confidence": 0.7,
    "index": 0,
    "label": "",
    "code": []
  },
  {
    "code": [
      "std::string UidEntry::format(const LogStatistics &stat, log_id_t id) const {",
      "    uid_t uid = getKey();",
      "    std::string name = android::base::StringPrintf(\"%u\", uid);",
      "    const char *nameTmp = stat.uidToName(uid);",
      "    if (nameTmp) {",
      "        name += android::base::StringPrintf(",
      "            \"%*s%s\", (int)std::max(6 - name.length(), (size_t)1),",
      "            \"\", nameTmp);",
      "        free(const_cast<char *>(nameTmp));",
      "    }",
      "",
      "    std::string size = android::base::StringPrintf(\"%zu\", getSizes());",
      "",
      "    std::string pruned = \"\";",
      "    if (worstUidEnabledForLogid(id)) {",
      "        size_t totalDropped = 0;",
      "        for (LogStatistics::uidTable_t::const_iterator it = stat.uidTable[id].begin();",
      "                it != stat.uidTable[id].end(); ++it) {",
      "            totalDropped += it->second.getDropped();",
      "        }",
      "        size_t sizes = stat.sizes(id);",
      "        size_t totalSize = stat.sizesTotal(id);",
      "        size_t totalElements = stat.elementsTotal(id);",
      "        float totalVirtualSize = (float)sizes + (float)totalDropped * totalSize",
      "                                / totalElements;",
      "        size_t entrySize = getSizes();",
      "        float virtualEntrySize = entrySize;",
      "        int realPermille = virtualEntrySize * 1000.0 / sizes;",
      "        size_t dropped = getDropped();",
      "        if (dropped) {",
      "            pruned = android::base::StringPrintf(\"%zu\", dropped);",
      "            virtualEntrySize += (float)dropped * totalSize / totalElements;",
      "        }",
      "        int virtualPermille = virtualEntrySize * 1000.0 / totalVirtualSize;",
      "        int permille = (realPermille - virtualPermille) * 1000L",
      "                     / (virtualPermille ?: 1);",
      "        if ((permille < -1) || (1 < permille)) {",
      "            std::string change;",
      "            const char *units = \"%\";",
      "            const char *prefix = (permille > 0) ? \"+\" : \"\";",
      "",
      "            if (permille > 999) {",
      "                permille = (permille + 1000) / 100; // Now tenths fold",
      "                units = \"X\";",
      "                prefix = \"\";",
      "            }",
      "            if ((-99 < permille) && (permille < 99)) {",
      "                change = android::base::StringPrintf(\"%s%d.%u%s\",",
      "                    prefix,",
      "                    permille / 10,",
      "                    ((permille < 0) ? (-permille % 10) : (permille % 10)),",
      "                    units);",
      "            } else {",
      "                change = android::base::StringPrintf(\"%s%d%s\",",
      "                    prefix,",
      "                    (permille + 5) / 10, units);",
      "            }",
      "            ssize_t spaces = EntryBaseConstants::pruned_len",
      "                           - 2 - pruned.length() - change.length();",
      "            if ((spaces <= 0) && pruned.length()) {",
      "                spaces = 1;",
      "            }",
      "            if (spaces > 0) {",
      "                change += android::base::StringPrintf(\"%*s\", (int)spaces, \"\");",
      "            }",
      "            pruned = change + pruned;",
      "        }",
      "    }",
      "",
      "    return formatLine(name, size, pruned);",
      "}",
      "std::string PidEntry::formatHeader(const std::string &name, log_id_t /* id */) const {",
      "    return formatLine(name,",
      "                      std::string(\"Size\"),",
      "                      std::string(\"Pruned\"))",
      "         + formatLine(std::string(\"  PID/UID   COMMAND LINE\"),",
      "                      std::string(\"BYTES\"),",
      "                      std::string(\"NUM\"));",
      "}",
      "std::string PidEntry::format(const LogStatistics &stat, log_id_t /* id */) const {",
      "    uid_t uid = getUid();",
      "    std::string name = android::base::StringPrintf(\"%5u/%u\",",
      "                                                   getKey(), uid);",
      "    const char *nameTmp = getName();",
      "    if (nameTmp) {",
      "        name += android::base::StringPrintf(",
      "            \"%*s%s\", (int)std::max(12 - name.length(), (size_t)1),",
      "            \"\", nameTmp);",
      "    } else if ((nameTmp = stat.uidToName(uid))) {",
      "        name += android::base::StringPrintf(",
      "            \"%*s%s\", (int)std::max(12 - name.length(), (size_t)1),",
      "            \"\", nameTmp);",
      "        free(const_cast<char *>(nameTmp));",
      "    }",
      "",
      "    std::string size = android::base::StringPrintf(\"%zu\",",
      "                                                   getSizes());",
      "",
      "    std::string pruned = \"\";",
      "    size_t dropped = getDropped();",
      "    if (dropped) {",
      "        pruned = android::base::StringPrintf(\"%zu\", dropped);",
      "    }",
      "",
      "    return formatLine(name, size, pruned);",
      "}",
      "std::string TidEntry::formatHeader(const std::string &name, log_id_t /* id */) const {",
      "    return formatLine(name,",
      "                      std::string(\"Size\"),",
      "                      std::string(\"Pruned\"))",
      "         + formatLine(std::string(\"  TID/UID   COMM\"),",
      "                      std::string(\"BYTES\"),",
      "                      std::string(\"NUM\"));",
      "}",
      "std::string TidEntry::format(const LogStatistics &stat, log_id_t /* id */) const {",
      "    uid_t uid = getUid();",
      "    std::string name = android::base::StringPrintf(\"%5u/%u\",",
      "                                                   getKey(), uid);",
      "    const char *nameTmp = getName();",
      "    if (nameTmp) {",
      "        name += android::base::StringPrintf(",
      "            \"%*s%s\", (int)std::max(12 - name.length(), (size_t)1),",
      "            \"\", nameTmp);",
      "    } else if ((nameTmp = stat.uidToName(uid))) {",
      "        // if we do not have a PID name, lets punt to try UID name?",
      "        name += android::base::StringPrintf(",
      "            \"%*s%s\", (int)std::max(12 - name.length(), (size_t)1),",
      "            \"\", nameTmp);",
      "        free(const_cast<char *>(nameTmp));",
      "        // We tried, better to not have a name at all, we still",
      "        // have TID/UID by number to report in any case.",
      "    }",
      "",
      "    std::string size = android::base::StringPrintf(\"%zu\",",
      "                                                   getSizes());",
      "",
      "    std::string pruned = \"\";",
      "    size_t dropped = getDropped();",
      "    if (dropped) {",
      "        pruned = android::base::StringPrintf(\"%zu\", dropped);",
      "    }",
      "",
      "    return formatLine(name, size, pruned);",
      "}",
      "std::string TagEntry::formatHeader(const std::string &name, log_id_t id) const {",
      "    bool isprune = worstUidEnabledForLogid(id);",
      "    return formatLine(name,",
      "                      std::string(\"Size\"),",
      "                      std::string(isprune ? \"Prune\" : \"\"))",
      "         + formatLine(std::string(\"    TAG/UID   TAGNAME\"),",
      "                      std::string(\"BYTES\"),",
      "                      std::string(isprune ? \"NUM\" : \"\"));",
      "}",
      "std::string TagEntry::format(const LogStatistics & /* stat */, log_id_t /* id */) const {",
      "    std::string name;",
      "    uid_t uid = getUid();",
      "    if (uid == (uid_t)-1) {",
      "        name = android::base::StringPrintf(\"%7u\",",
      "                                           getKey());",
      "    } else {",
      "        name = android::base::StringPrintf(\"%7u/%u\",",
      "                                           getKey(), uid);",
      "    }",
      "    const char *nameTmp = getName();",
      "    if (nameTmp) {",
      "        name += android::base::StringPrintf(",
      "            \"%*s%s\", (int)std::max(14 - name.length(), (size_t)1),",
      "            \"\", nameTmp);",
      "    }",
      "",
      "    std::string size = android::base::StringPrintf(\"%zu\",",
      "                                                   getSizes());",
      "",
      "    std::string pruned = \"\";",
      "",
      "    return formatLine(name, size, pruned);",
      "}",
      "std::string LogStatistics::format(uid_t uid, unsigned int logMask) {",
      "    static const unsigned short spaces_total = 19;",
      "std::string LogStatistics::format(uid_t uid, unsigned int logMask) const {",
      "    static const unsigned short spaces_total = 19;"
    ],
    "label": "",
    "index": 1,
    "confidence": 0.4,
    "desc": "List merge."
  }
]