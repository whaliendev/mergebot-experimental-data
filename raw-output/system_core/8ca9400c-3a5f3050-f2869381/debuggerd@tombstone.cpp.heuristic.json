[
  {
    "code": [
      "  struct logger_list* logger_list;"
    ],
    "label": "",
    "index": 1,
    "confidence": 0.7,
    "desc": "Merge conflict caused by formatting issues."
  },
  {
    "desc": "Merge conflict caused by formatting issues.",
    "confidence": 0.7,
    "index": 2,
    "label": "",
    "code": [
      "  logger_list = android_logger_list_open(",
      "      android_name_to_log_id(filename), O_RDONLY | O_NONBLOCK, tail, pid);"
    ]
  },
  {
    "code": [
      "        _LOG(log, 0, \"Error while reading log: %s\\n\", strerror(-actual));"
    ],
    "label": "",
    "index": 4,
    "confidence": 0.7,
    "desc": "Merge conflict caused by formatting issues."
  },
  {
    "code": [
      "      _LOG(log, 0, \"--------- %slog %s\\n\", tail ? \"tail end of \" : \"\", filename);"
    ],
    "label": "",
    "index": 6,
    "confidence": 0.7,
    "desc": "Merge conflict caused by formatting issues."
  },
  {
    "desc": "Merge conflict caused by formatting issues.",
    "confidence": 0.7,
    "index": 8,
    "label": "",
    "code": [
      "    // Look for line breaks ('\\n') and display each text line",
      "    // on a separate line, prefixed with the header, like logcat does.",
      "    do {",
      "        nl = strchr(msg, '\\n');",
      "        if (nl) {",
      "            *nl = '\\0';",
      "            ++nl;",
      "        }",
      "",
      "        _LOG(log, 0, \"%s.%03d %5d %5d %c %-8s: %s\\n\",",
      "             timeBuf, entry->nsec / 1000000, entry->pid, entry->tid,",
      "             prioChar, tag, msg);",
      "",
      "    } while ((msg = nl));"
    ]
  },
  {
    "desc": "Merge conflict caused by formatting issues.",
    "confidence": 0.7,
    "index": 10,
    "label": "",
    "code": [
      "    // Dump the last five lines of the logs for the given pid.",
      "    dump_logs(log, pid, 5);"
    ]
  },
  {
    "desc": "Merge conflict caused by formatting issues.",
    "confidence": 0.7,
    "index": 11,
    "label": "",
    "code": [
      "    // Dump the logs for the given pid.",
      "    dump_logs(log, pid, 0);"
    ]
  },
  {
    "desc": "List merge.",
    "confidence": 0.4,
    "index": 0,
    "label": "",
    "code": [
      "// If \"tail\" is set, we only print the last few lines.",
      "static void dump_log_file(log_t* log, pid_t pid, const char* filename,",
      "  unsigned int tail) {",
      "// If \"tail\" is non-zero, log the last \"tail\" number of lines.",
      "static void dump_log_file(",
      "    log_t* log, pid_t pid, const char* filename, unsigned int tail) {"
    ]
  },
  {
    "code": [
      "    ssize_t actual = android_logger_list_read(logger_list, &log_entry);",
      "    struct logger_entry* entry;",
      ""
    ],
    "label": "",
    "index": 3,
    "confidence": 0.7,
    "desc": "Added code or method extraction, accept our side."
  },
  {
    "code": [],
    "label": "",
    "index": 5,
    "confidence": 0.7,
    "desc": "Single side deletion."
  },
  {
    "code": [
      "static void dump_logs(log_t* log, pid_t pid, unsigned tail) {",
      "  dump_log_file(log, pid, \"system\", tail);",
      "  dump_log_file(log, pid, \"main\", tail);",
      "static void dump_logs(log_t* log, pid_t pid, unsigned int tail) {",
      "  dump_log_file(log, pid, \"system\", tail);",
      "  dump_log_file(log, pid, \"main\", tail);"
    ],
    "label": "",
    "index": 9,
    "confidence": 0.4,
    "desc": "List merge."
  }
]