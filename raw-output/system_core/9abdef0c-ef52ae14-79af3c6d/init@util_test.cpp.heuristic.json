[
  {
    "desc": "Added code or method extraction, accept our side.",
    "confidence": 0.7,
    "index": 0,
    "label": "",
    "code": [
      "#include <android-base/stringprintf.h>",
      "#include <android-base/test_utils.h>"
    ]
  },
  {
    "code": [
      "TEST(util, write_file_binary) {",
      "    std::string contents(\"abcd\");",
      "    contents.push_back('\\0');",
      "    contents.push_back('\\0');",
      "    contents.append(\"dcba\");",
      "    ASSERT_EQ(10u, contents.size());",
      "",
      "    TemporaryFile tf;",
      "    ASSERT_TRUE(tf.fd != -1);",
      "    EXPECT_TRUE(write_file(tf.path, contents)) << strerror(errno);",
      "",
      "    std::string read_back_contents;",
      "    EXPECT_TRUE(read_file(tf.path, &read_back_contents)) << strerror(errno);",
      "    EXPECT_EQ(contents, read_back_contents);",
      "    EXPECT_EQ(10u, read_back_contents.size());",
      "}",
      "",
      "TEST(util, write_file_not_exist) {",
      "    std::string s(\"hello\");",
      "    std::string s2(\"hello\");",
      "    TemporaryDir test_dir;",
      "    std::string path = android::base::StringPrintf(\"%s/does-not-exist\", test_dir.path);",
      "    EXPECT_TRUE(write_file(path, s));",
      "    EXPECT_TRUE(read_file(path, &s2));",
      "    EXPECT_EQ(s, s2);",
      "    struct stat sb;",
      "    int fd = open(path.c_str(), O_RDONLY | O_NOFOLLOW | O_CLOEXEC);",
      "    EXPECT_NE(-1, fd);",
      "    EXPECT_EQ(0, fstat(fd, &sb));",
      "    EXPECT_EQ((const unsigned int)(S_IRUSR | S_IWUSR), sb.st_mode & 0777);",
      "    EXPECT_EQ(0, unlink(path.c_str()));",
      "}",
      "",
      "TEST(util, write_file_exist) {",
      "    std::string s2(\"\");",
      "    TemporaryFile tf;",
      "    ASSERT_TRUE(tf.fd != -1);",
      "    EXPECT_TRUE(write_file(tf.path, \"1hello1\")) << strerror(errno);",
      "    EXPECT_TRUE(read_file(tf.path, &s2));",
      "    EXPECT_STREQ(\"1hello1\", s2.c_str());",
      "    EXPECT_TRUE(write_file(tf.path, \"2ll2\"));",
      "    EXPECT_TRUE(read_file(tf.path, &s2));",
      "    EXPECT_STREQ(\"2ll2\", s2.c_str());",
      "}",
      ""
    ],
    "label": "",
    "index": 1,
    "confidence": 0.7,
    "desc": "Added code or method extraction, accept our side."
  }
]