[
  {
    "code": [
      "void __attribute__((noreturn)) InitFatalReboot() {",
      "    auto pid = fork();",
      "",
      "    if (pid == -1) {",
      "        // Couldn't fork, don't even try to backtrace, just reboot.",
      "        RebootSystem(ANDROID_RB_RESTART2, init_fatal_reboot_target);",
      "    } else if (pid == 0) {",
      "        // Fork a child for safety, since we always want to shut down if something goes wrong, but",
      "        // its worth trying to get the backtrace, even in the signal handler, since typically it",
      "        // does work despite not being async-signal-safe.",
      "        sleep(5);",
      "        RebootSystem(ANDROID_RB_RESTART2, init_fatal_reboot_target);",
      "    }",
      "",
      "    // In the parent, let's try to get a backtrace then shutdown.",
      "    std::unique_ptr<Backtrace> backtrace(",
      "            Backtrace::Create(BACKTRACE_CURRENT_PROCESS, BACKTRACE_CURRENT_THREAD));",
      "    if (!backtrace->Unwind(0)) {",
      "        LOG(ERROR) << __FUNCTION__ << \": Failed to unwind callstack.\";",
      "    }",
      "    for (size_t i = 0; i < backtrace->NumFrames(); i++) {",
      "        LOG(ERROR) << backtrace->FormatFrameData(i);",
      "    }",
      "    RebootSystem(ANDROID_RB_RESTART2, init_fatal_reboot_target);",
      "}",
      "void __attribute__((noreturn)) InitFatalReboot() {",
      "    auto pid = fork();",
      "",
      "    if (pid == -1) {",
      "        // Couldn't fork, don't even try to backtrace, just reboot.",
      "        RebootSystem(ANDROID_RB_RESTART2, \"bootloader\");",
      "    } else if (pid == 0) {",
      "        // Fork a child for safety, since we always want to shut down if something goes wrong, but",
      "        // its worth trying to get the backtrace, even in the signal handler, since typically it",
      "        // does work despite not being async-signal-safe.",
      "        sleep(5);",
      "        RebootSystem(ANDROID_RB_RESTART2, \"bootloader\");",
      "    }",
      "",
      "    // In the parent, let's try to get a backtrace then shutdown.",
      "    std::unique_ptr<Backtrace> backtrace(",
      "            Backtrace::Create(BACKTRACE_CURRENT_PROCESS, BACKTRACE_CURRENT_THREAD));",
      "    if (!backtrace->Unwind(0)) {",
      "        LOG(ERROR) << __FUNCTION__ << \": Failed to unwind callstack.\";",
      "    }",
      "    for (size_t i = 0; i < backtrace->NumFrames(); i++) {",
      "        LOG(ERROR) << backtrace->FormatFrameData(i);",
      "    }",
      "    RebootSystem(ANDROID_RB_RESTART2, \"bootloader\");",
      "}"
    ],
    "label": "",
    "index": 0,
    "confidence": 0.4,
    "desc": "List merge."
  }
]