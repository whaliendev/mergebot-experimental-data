[
  {
    "desc": "Added code or method extraction, accept their side.",
    "confidence": 0.7,
    "index": 1,
    "label": "",
    "code": [
      "#define ZONEINFO_PATH \"/proc/zoneinfo\""
    ]
  },
  {
    "code": [
      "#ifdef LMKD_LOG_STATS",
      "    if (enable_stats_log) {",
      "        memory_stat_parse_result = memory_stat_parse(&mem_st, pid, uid);",
      "    }",
      "#endif",
      "",
      "    TRACE_KILL_START(pid);",
      "",
      "    r = kill(pid, SIGKILL);"
    ],
    "label": "",
    "index": 3,
    "confidence": 0.7,
    "desc": "Added code or method extraction, accept our side."
  },
  {
    "desc": "Added code or method extraction, accept our side.",
    "confidence": 0.7,
    "index": 4,
    "label": "",
    "code": [
      "    int killed_size;",
      "    int pages_freed = 0;",
      "    int min_score_adj = level_oomadj[level];",
      "",
      "#ifdef LMKD_LOG_STATS",
      "    if (enable_stats_log) {",
      "        stats_write_lmk_state_changed(log_ctx, LMK_STATE_CHANGED, LMK_STATE_CHANGE_START);",
      "    }",
      "#endif"
    ]
  },
  {
    "desc": "Added code or method extraction, accept our side.",
    "confidence": 0.7,
    "index": 6,
    "label": "",
    "code": [
      "#ifdef LMKD_LOG_STATS",
      "    if (enable_stats_log) {",
      "        stats_write_lmk_state_changed(log_ctx, LMK_STATE_CHANGED, LMK_STATE_CHANGE_STOP);",
      "    }",
      "#endif",
      "",
      "    return pages_freed;"
    ]
  },
  {
    "code": [
      "    enum vmpressure_level lvl;",
      "    struct mem_size free_mem;",
      "    static struct timeval last_report_tm;",
      "    static unsigned long skip_count = 0;",
      "    enum vmpressure_level level = (enum vmpressure_level)data;"
    ],
    "label": "",
    "index": 8,
    "confidence": 0.7,
    "desc": "Added code or method extraction, accept our side."
  },
  {
    "code": [
      "static void mp_event_low(uint32_t events __unused) {",
      "    mp_event_common(VMPRESS_LEVEL_LOW);",
      "}",
      "static void mp_event_medium(uint32_t events __unused) {",
      "    mp_event_common(VMPRESS_LEVEL_MEDIUM);",
      "}",
      "static void mp_event_critical(uint32_t events __unused) {",
      "    mp_event_common(VMPRESS_LEVEL_CRITICAL);",
      "}",
      "static bool init_mp_common(void *event_handler, enum vmpressure_level level) {",
      "static bool init_mp_common(enum vmpressure_level level) {"
    ],
    "label": "",
    "index": 9,
    "confidence": 0.4,
    "desc": "List merge."
  },
  {
    "code": [
      "    kill_timeout_ms =",
      "        (unsigned long)property_get_int32(\"ro.lmk.kill_timeout_ms\", 0);",
      "",
      "#ifdef LMKD_LOG_STATS",
      "    statlog_init();",
      "#endif"
    ],
    "label": "",
    "index": 12,
    "confidence": 0.7,
    "desc": "Added code or method extraction, accept our side."
  }
]