--- a/output/system_core/c282fe5c-fcf9c96f-3065de2c/libziparchive@zip_archive.no_comments_mergebot.cc
+++ b/output/system_core/c282fe5c-fcf9c96f-3065de2c/libziparchive@zip_archive.no_comments_truth.cc
@@ -6 +5,0 @@
-#include <log/log.h>
@@ -8,4 +6,0 @@
-#include <utils/Compat.h>
-#include <utils/FileMap.h>
-#include <zlib.h>
-#include <JNIHelp.h>
@@ -18,4 +12,0 @@
-#define DISALLOW_IMPLICIT_CONSTRUCTORS(TypeName) \
-    TypeName(); \
-    TypeName(const TypeName&); \
-    void operator=(const TypeName&)
@@ -32,0 +24,63 @@ using android::base::get_unaligned;
+struct EocdRecord {
+  static const uint32_t kSignature = 0x06054b50;
+  uint32_t eocd_signature;
+  uint16_t disk_num;
+  uint16_t cd_start_disk;
+  uint16_t num_records_on_disk;
+  uint16_t num_records;
+  uint32_t cd_size;
+  uint32_t cd_start_offset;
+  uint16_t comment_length;
+ private:
+  EocdRecord() = default;
+  DISALLOW_COPY_AND_ASSIGN(EocdRecord);
+} __attribute__((packed));
+struct CentralDirectoryRecord {
+  static const uint32_t kSignature = 0x02014b50;
+  uint32_t record_signature;
+  uint16_t version_made_by;
+  uint16_t version_needed;
+  uint16_t gpb_flags;
+  uint16_t compression_method;
+  uint16_t last_mod_time;
+  uint16_t last_mod_date;
+  uint32_t crc32;
+  uint32_t compressed_size;
+  uint32_t uncompressed_size;
+  uint16_t file_name_length;
+  uint16_t extra_field_length;
+  uint16_t comment_length;
+  uint16_t file_start_disk;
+  uint16_t internal_file_attributes;
+  uint32_t external_file_attributes;
+  uint32_t local_file_header_offset;
+ private:
+  CentralDirectoryRecord() = default;
+  DISALLOW_COPY_AND_ASSIGN(CentralDirectoryRecord);
+} __attribute__((packed));
+struct LocalFileHeader {
+  static const uint32_t kSignature = 0x04034b50;
+  uint32_t lfh_signature;
+  uint16_t version_needed;
+  uint16_t gpb_flags;
+  uint16_t compression_method;
+  uint16_t last_mod_time;
+  uint16_t last_mod_date;
+  uint32_t crc32;
+  uint32_t compressed_size;
+  uint32_t uncompressed_size;
+  uint16_t file_name_length;
+  uint16_t extra_field_length;
+ private:
+  LocalFileHeader() = default;
+  DISALLOW_COPY_AND_ASSIGN(LocalFileHeader);
+} __attribute__((packed));
+struct DataDescriptor {
+  static const uint32_t kOptSignature = 0x08074b50;
+  uint32_t crc32;
+  uint32_t compressed_size;
+  uint32_t uncompressed_size;
+ private:
+  DataDescriptor() = default;
+  DISALLOW_COPY_AND_ASSIGN(DataDescriptor);
+} __attribute__((packed));
@@ -272 +333,0 @@ static int32_t ParseZipArchive(ZipArchive* archive) {
-<<<<<<< HEAD
@@ -286,16 +346,0 @@ static int32_t ParseZipArchive(ZipArchive* archive) {
-||||||| 3065de2c8
-=======
-  uint32_t lfh_start_bytes;
-  if (!archive->mapped_zip.ReadAtOffset(reinterpret_cast<uint8_t*>(&lfh_start_bytes),
-                                        sizeof(uint32_t), 0)) {
-    ALOGW("Zip: Unable to read header for entry at offset == 0.");
-    return -1;
-  }
-  if (lfh_start_bytes != LocalFileHeader::kSignature) {
-    ALOGW("Zip: Entry at offset zero has invalid LFH signature %" PRIx32, lfh_start_bytes);
-#if defined(__ANDROID__)
-    android_errorWriteLog(0x534e4554, "64211847");
-#endif
-    return -1;
-  }
->>>>>>> fcf9c96f
@@ -479 +529 @@ struct IterationHandle {
-  ~IterationHandle() = delete;{
+  ~IterationHandle() {
@@ -552 +604 @@ public:
-  ~Writer(){}
+  virtual ~Writer() {}
@@ -625,0 +683,2 @@ private:
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wold-style-cast"
@@ -629 +688,3 @@ static inline int zlib_inflateInit2(z_stream* stream, int window_bits) {
-static int32_t InflateEntryToWriter(int fd, const ZipEntry* entry, Writer* writer, uint64_t* crc_out) {
+#pragma GCC diagnostic pop
+static int32_t InflateEntryToWriter(int fd, const ZipEntry* entry,
+                                    Writer* writer, uint64_t* crc_out) {
@@ -770,63 +832,0 @@ int GetFileDescriptor(const ZipArchiveHandle handle) {
-struct EocdRecord {
-  static const uint32_t kSignature = 0x06054b50;
-  uint32_t eocd_signature;
-  uint16_t disk_num;
-  uint16_t cd_start_disk;
-  uint16_t num_records_on_disk;
-  uint16_t num_records;
-  uint32_t cd_size;
-  uint32_t cd_start_offset;
-  uint16_t comment_length;
- private:
-  EocdRecord() = default;
-  DISALLOW_COPY_AND_ASSIGN(EocdRecord);
-} __attribute__((packed));
-struct CentralDirectoryRecord {
-  static const uint32_t kSignature = 0x02014b50;
-  uint32_t record_signature;
-  uint16_t version_made_by;
-  uint16_t version_needed;
-  uint16_t gpb_flags;
-  uint16_t compression_method;
-  uint16_t last_mod_time;
-  uint16_t last_mod_date;
-  uint32_t crc32;
-  uint32_t compressed_size;
-  uint32_t uncompressed_size;
-  uint16_t file_name_length;
-  uint16_t extra_field_length;
-  uint16_t comment_length;
-  uint16_t file_start_disk;
-  uint16_t internal_file_attributes;
-  uint32_t external_file_attributes;
-  uint32_t local_file_header_offset;
- private:
-  CentralDirectoryRecord() = default;
-  DISALLOW_COPY_AND_ASSIGN(CentralDirectoryRecord);
-} __attribute__((packed));
-struct LocalFileHeader {
-  static const uint32_t kSignature = 0x04034b50;
-  uint32_t lfh_signature;
-  uint16_t version_needed;
-  uint16_t gpb_flags;
-  uint16_t compression_method;
-  uint16_t last_mod_time;
-  uint16_t last_mod_date;
-  uint32_t crc32;
-  uint32_t compressed_size;
-  uint32_t uncompressed_size;
-  uint16_t file_name_length;
-  uint16_t extra_field_length;
- private:
-  LocalFileHeader() = default;
-  DISALLOW_COPY_AND_ASSIGN(LocalFileHeader);
-} __attribute__((packed));
-struct DataDescriptor {
-  static const uint32_t kOptSignature = 0x08074b50;
-  uint32_t crc32;
-  uint32_t compressed_size;
-  uint32_t uncompressed_size;
- private:
-  DataDescriptor() = default;
-  DISALLOW_COPY_AND_ASSIGN(DataDescriptor);
-} __attribute__((packed));
