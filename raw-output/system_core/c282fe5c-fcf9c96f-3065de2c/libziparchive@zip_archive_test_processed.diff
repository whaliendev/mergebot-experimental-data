--- a/output/system_core/c282fe5c-fcf9c96f-3065de2c/libziparchive@zip_archive_test.no_comments_mergebot.cc
+++ b/output/system_core/c282fe5c-fcf9c96f-3065de2c/libziparchive@zip_archive_test.no_comments_truth.cc
@@ -48,105 +48 @@ static void AssertNameEquals(const std::string& name_str,
-TEST(ziparchive, BrokenLfhSignature) {
-<<<<<<< HEAD
-  char kTempFilePattern[] = "zip_archive_input_XXXXXX";
-  int fd = make_temporary_file(kTempFilePattern);
-  ASSERT_NE(-1, fd);
-  ASSERT_EQ(static_cast<int32_t>(sizeof(kZipFileWithBrokenLfhSignature)),
-      TEMP_FAILURE_RETRY(write(fd, kZipFileWithBrokenLfhSignature,
-                               sizeof(kZipFileWithBrokenLfhSignature))));
-||||||| 3065de2c8
-<<<<<<< HEAD
-  char kTempFilePattern[] = "zip_archive_input_XXXXXX";
-  int fd = make_temporary_file(kTempFilePattern);
-  ASSERT_NE(-1, fd);
-  ASSERT_EQ(static_cast<int32_t>(sizeof(kZipFileWithBrokenLfhSignature)),
-      TEMP_FAILURE_RETRY(write(fd, kZipFileWithBrokenLfhSignature,
-                               sizeof(kZipFileWithBrokenLfhSignature))));
-||||||| 3065de2c8
-<<<<<<< HEAD
-  char kTempFilePattern[] = "zip_archive_input_XXXXXX";
-  int fd = make_temporary_file(kTempFilePattern);
-  ASSERT_NE(-1, fd);
-  ASSERT_EQ(static_cast<int32_t>(sizeof(kZipFileWithBrokenLfhSignature)),
-      TEMP_FAILURE_RETRY(write(fd, kZipFileWithBrokenLfhSignature,
-                               sizeof(kZipFileWithBrokenLfhSignature))));
-||||||| 3065de2c8
-<<<<<<< HEAD
-  char kTempFilePattern[] = "zip_archive_input_XXXXXX";
-  int fd = make_temporary_file(kTempFilePattern);
-  ASSERT_NE(-1, fd);
-  ASSERT_EQ(static_cast<int32_t>(sizeof(kZipFileWithBrokenLfhSignature)),
-      TEMP_FAILURE_RETRY(write(fd, kZipFileWithBrokenLfhSignature,
-                               sizeof(kZipFileWithBrokenLfhSignature))));
-||||||| 3065de2c8
-<<<<<<< HEAD
-  char kTempFilePattern[] = "zip_archive_input_XXXXXX";
-  int fd = make_temporary_file(kTempFilePattern);
-  ASSERT_NE(-1, fd);
-  ASSERT_EQ(static_cast<int32_t>(sizeof(kZipFileWithBrokenLfhSignature)),
-      TEMP_FAILURE_RETRY(write(fd, kZipFileWithBrokenLfhSignature,
-                               sizeof(kZipFileWithBrokenLfhSignature))));
-||||||| 3065de2c8
-<<<<<<< HEAD
-  char kTempFilePattern[] = "zip_archive_input_XXXXXX";
-  int fd = make_temporary_file(kTempFilePattern);
-  ASSERT_NE(-1, fd);
-  ASSERT_EQ(static_cast<int32_t>(sizeof(kZipFileWithBrokenLfhSignature)),
-      TEMP_FAILURE_RETRY(write(fd, kZipFileWithBrokenLfhSignature,
-                               sizeof(kZipFileWithBrokenLfhSignature))));
-||||||| 3065de2c8
-<<<<<<< HEAD
-  char kTempFilePattern[] = "zip_archive_input_XXXXXX";
-  int fd = make_temporary_file(kTempFilePattern);
-  ASSERT_NE(-1, fd);
-  ASSERT_EQ(static_cast<int32_t>(sizeof(kZipFileWithBrokenLfhSignature)),
-      TEMP_FAILURE_RETRY(write(fd, kZipFileWithBrokenLfhSignature,
-                               sizeof(kZipFileWithBrokenLfhSignature))));
-||||||| 3065de2c8
-  char kTempFilePattern[] = "zip_archive_input_XXXXXX";
-  int fd = make_temporary_file(kTempFilePattern);
-  ASSERT_NE(-1, fd);
-  const uint8_t data[8] = { '1', '2', '3', '4', '5', '6', '7', '8' };
-  const ssize_t data_size = sizeof(data);
-  ASSERT_EQ(data_size, TEMP_FAILURE_RETRY(write(fd, data, data_size)));
-=======
-  TemporaryFile tmp_file;
-  ASSERT_NE(-1, tmp_file.fd);
-  ASSERT_TRUE(android::base::WriteFully(tmp_file.fd, &kZipFileWithBrokenLfhSignature[0],
-                                        kZipFileWithBrokenLfhSignature.size()));
->>>>>>> fcf9c96f
-=======
-  TemporaryFile tmp_file;
-  ASSERT_NE(-1, tmp_file.fd);
-  ASSERT_TRUE(android::base::WriteFully(tmp_file.fd, &kZipFileWithBrokenLfhSignature[0],
-                                        kZipFileWithBrokenLfhSignature.size()));
->>>>>>> fcf9c96f
-=======
-  TemporaryFile tmp_file;
-  ASSERT_NE(-1, tmp_file.fd);
-  ASSERT_TRUE(android::base::WriteFully(tmp_file.fd, &kZipFileWithBrokenLfhSignature[0],
-                                        kZipFileWithBrokenLfhSignature.size()));
->>>>>>> fcf9c96f
-=======
-  TemporaryFile tmp_file;
-  ASSERT_NE(-1, tmp_file.fd);
-  ASSERT_TRUE(android::base::WriteFully(tmp_file.fd, &kZipFileWithBrokenLfhSignature[0],
-                                        kZipFileWithBrokenLfhSignature.size()));
->>>>>>> fcf9c96f
-=======
-  TemporaryFile tmp_file;
-  ASSERT_NE(-1, tmp_file.fd);
-  ASSERT_TRUE(android::base::WriteFully(tmp_file.fd, &kZipFileWithBrokenLfhSignature[0],
-                                        kZipFileWithBrokenLfhSignature.size()));
->>>>>>> fcf9c96f
-=======
-  TemporaryFile tmp_file;
-  ASSERT_NE(-1, tmp_file.fd);
-  ASSERT_TRUE(android::base::WriteFully(tmp_file.fd, &kZipFileWithBrokenLfhSignature[0],
-                                        kZipFileWithBrokenLfhSignature.size()));
->>>>>>> fcf9c96f
-=======
-  TemporaryFile tmp_file;
-  ASSERT_NE(-1, tmp_file.fd);
-  ASSERT_TRUE(android::base::WriteFully(tmp_file.fd, &kZipFileWithBrokenLfhSignature[0],
-                                        kZipFileWithBrokenLfhSignature.size()));
->>>>>>> fcf9c96f
+TEST(ziparchive, Open) {
@@ -154,28 +49,0 @@ TEST(ziparchive, BrokenLfhSignature) {
-<<<<<<< HEAD
-  ASSERT_EQ(-1, OpenArchiveFd(fd, "LeadingNonZipBytes", &handle));
-  close(fd);
-||||||| 3065de2c8
-<<<<<<< HEAD
-  ASSERT_EQ(-1, OpenArchiveFd(fd, "LeadingNonZipBytes", &handle));
-  close(fd);
-||||||| 3065de2c8
-<<<<<<< HEAD
-  ASSERT_EQ(-1, OpenArchiveFd(fd, "LeadingNonZipBytes", &handle));
-  close(fd);
-||||||| 3065de2c8
-<<<<<<< HEAD
-  ASSERT_EQ(-1, OpenArchiveFd(fd, "LeadingNonZipBytes", &handle));
-  close(fd);
-||||||| 3065de2c8
-<<<<<<< HEAD
-  ASSERT_EQ(-1, OpenArchiveFd(fd, "LeadingNonZipBytes", &handle));
-  close(fd);
-||||||| 3065de2c8
-<<<<<<< HEAD
-  ASSERT_EQ(-1, OpenArchiveFd(fd, "LeadingNonZipBytes", &handle));
-  close(fd);
-||||||| 3065de2c8
-<<<<<<< HEAD
-  ASSERT_EQ(-1, OpenArchiveFd(fd, "LeadingNonZipBytes", &handle));
-  close(fd);
-||||||| 3065de2c8
@@ -183,37 +51 @@ TEST(ziparchive, BrokenLfhSignature) {
-  ZipEntry entry;
-  ASSERT_EQ(0, FindEntry(handle, "a.txt", &entry));
-  ASSERT_EQ(0, ExtractEntryToFile(handle, &entry, fd));
-  uint8_t read_buffer[data_size];
-  ASSERT_EQ(0, lseek64(fd, 0, SEEK_SET));
-  ASSERT_EQ(data_size, TEMP_FAILURE_RETRY(read(fd, read_buffer, data_size)));
-  ASSERT_EQ(0, memcmp(read_buffer, data, data_size));
-  std::vector<uint8_t> uncompressed_data(entry.uncompressed_length);
-  ASSERT_EQ(static_cast<ssize_t>(entry.uncompressed_length),
-            TEMP_FAILURE_RETRY(
-                read(fd, &uncompressed_data[0], entry.uncompressed_length)));
-  ASSERT_EQ(0, memcmp(&uncompressed_data[0], kATxtContents,
-                      sizeof(kATxtContents)));
-  ASSERT_EQ(data_size + static_cast<ssize_t>(sizeof(kATxtContents)),
-            lseek64(fd, 0, SEEK_END));
-  close(fd);
-=======
-  ASSERT_EQ(-1, OpenArchiveFd(tmp_file.fd, "LeadingNonZipBytes", &handle));
->>>>>>> fcf9c96f
-=======
-  ASSERT_EQ(-1, OpenArchiveFd(tmp_file.fd, "LeadingNonZipBytes", &handle));
->>>>>>> fcf9c96f
-=======
-  ASSERT_EQ(-1, OpenArchiveFd(tmp_file.fd, "LeadingNonZipBytes", &handle));
->>>>>>> fcf9c96f
-=======
-  ASSERT_EQ(-1, OpenArchiveFd(tmp_file.fd, "LeadingNonZipBytes", &handle));
->>>>>>> fcf9c96f
-=======
-  ASSERT_EQ(-1, OpenArchiveFd(tmp_file.fd, "LeadingNonZipBytes", &handle));
->>>>>>> fcf9c96f
-=======
-  ASSERT_EQ(-1, OpenArchiveFd(tmp_file.fd, "LeadingNonZipBytes", &handle));
->>>>>>> fcf9c96f
-=======
-  ASSERT_EQ(-1, OpenArchiveFd(tmp_file.fd, "LeadingNonZipBytes", &handle));
->>>>>>> fcf9c96f
+  CloseArchive(handle);
@@ -221,52 +53,7 @@ TEST(ziparchive, BrokenLfhSignature) {
-TEST(ziparchive, BrokenLfhSignature) {
-<<<<<<< HEAD
-  char kTempFilePattern[] = "zip_archive_input_XXXXXX";
-  int fd = make_temporary_file(kTempFilePattern);
-  ASSERT_NE(-1, fd);
-  ASSERT_EQ(static_cast<int32_t>(sizeof(kZipFileWithBrokenLfhSignature)),
-      TEMP_FAILURE_RETRY(write(fd, kZipFileWithBrokenLfhSignature,
-                               sizeof(kZipFileWithBrokenLfhSignature))));
-||||||| 3065de2c8
-<<<<<<< HEAD
-  char kTempFilePattern[] = "zip_archive_input_XXXXXX";
-  int fd = make_temporary_file(kTempFilePattern);
-  ASSERT_NE(-1, fd);
-  ASSERT_EQ(static_cast<int32_t>(sizeof(kZipFileWithBrokenLfhSignature)),
-      TEMP_FAILURE_RETRY(write(fd, kZipFileWithBrokenLfhSignature,
-                               sizeof(kZipFileWithBrokenLfhSignature))));
-||||||| 3065de2c8
-<<<<<<< HEAD
-  char kTempFilePattern[] = "zip_archive_input_XXXXXX";
-  int fd = make_temporary_file(kTempFilePattern);
-  ASSERT_NE(-1, fd);
-  ASSERT_EQ(static_cast<int32_t>(sizeof(kZipFileWithBrokenLfhSignature)),
-      TEMP_FAILURE_RETRY(write(fd, kZipFileWithBrokenLfhSignature,
-                               sizeof(kZipFileWithBrokenLfhSignature))));
-||||||| 3065de2c8
-<<<<<<< HEAD
-  char kTempFilePattern[] = "zip_archive_input_XXXXXX";
-  int fd = make_temporary_file(kTempFilePattern);
-  ASSERT_NE(-1, fd);
-  ASSERT_EQ(static_cast<int32_t>(sizeof(kZipFileWithBrokenLfhSignature)),
-      TEMP_FAILURE_RETRY(write(fd, kZipFileWithBrokenLfhSignature,
-                               sizeof(kZipFileWithBrokenLfhSignature))));
-||||||| 3065de2c8
-<<<<<<< HEAD
-  char kTempFilePattern[] = "zip_archive_input_XXXXXX";
-  int fd = make_temporary_file(kTempFilePattern);
-  ASSERT_NE(-1, fd);
-  ASSERT_EQ(static_cast<int32_t>(sizeof(kZipFileWithBrokenLfhSignature)),
-      TEMP_FAILURE_RETRY(write(fd, kZipFileWithBrokenLfhSignature,
-                               sizeof(kZipFileWithBrokenLfhSignature))));
-||||||| 3065de2c8
-<<<<<<< HEAD
-  char kTempFilePattern[] = "zip_archive_input_XXXXXX";
-  int fd = make_temporary_file(kTempFilePattern);
-  ASSERT_NE(-1, fd);
-  ASSERT_EQ(static_cast<int32_t>(sizeof(kZipFileWithBrokenLfhSignature)),
-      TEMP_FAILURE_RETRY(write(fd, kZipFileWithBrokenLfhSignature,
-                               sizeof(kZipFileWithBrokenLfhSignature))));
-||||||| 3065de2c8
-<<<<<<< HEAD
-  char kTempFilePattern[] = "zip_archive_input_XXXXXX";
-  int fd = make_temporary_file(kTempFilePattern);
+TEST(ziparchive, OpenMissing) {
+  ZipArchiveHandle handle;
+  ASSERT_NE(0, OpenArchiveWrapper(kMissingZip, &handle));
+  ASSERT_EQ(-1, GetFileDescriptor(handle));
+}
+TEST(ziparchive, OpenAssumeFdOwnership) {
+  int fd = open((test_data_dir + "/" + kValidZip).c_str(), O_RDONLY);
@@ -274,6 +61,8 @@ TEST(ziparchive, BrokenLfhSignature) {
-  ASSERT_EQ(static_cast<int32_t>(sizeof(kZipFileWithBrokenLfhSignature)),
-      TEMP_FAILURE_RETRY(write(fd, kZipFileWithBrokenLfhSignature,
-                               sizeof(kZipFileWithBrokenLfhSignature))));
-||||||| 3065de2c8
-  char kTempFilePattern[] = "zip_archive_input_XXXXXX";
-  int fd = make_temporary_file(kTempFilePattern);
+  ZipArchiveHandle handle;
+  ASSERT_EQ(0, OpenArchiveFd(fd, "OpenWithAssumeFdOwnership", &handle));
+  CloseArchive(handle);
+  ASSERT_EQ(-1, lseek(fd, 0, SEEK_SET));
+  ASSERT_EQ(EBADF, errno);
+}
+TEST(ziparchive, OpenDoNotAssumeFdOwnership) {
+  int fd = open((test_data_dir + "/" + kValidZip).c_str(), O_RDONLY);
@@ -281,45 +69,0 @@ TEST(ziparchive, BrokenLfhSignature) {
-  const uint8_t data[8] = { '1', '2', '3', '4', '5', '6', '7', '8' };
-  const ssize_t data_size = sizeof(data);
-  ASSERT_EQ(data_size, TEMP_FAILURE_RETRY(write(fd, data, data_size)));
-=======
-  TemporaryFile tmp_file;
-  ASSERT_NE(-1, tmp_file.fd);
-  ASSERT_TRUE(android::base::WriteFully(tmp_file.fd, &kZipFileWithBrokenLfhSignature[0],
-                                        kZipFileWithBrokenLfhSignature.size()));
->>>>>>> fcf9c96f
-=======
-  TemporaryFile tmp_file;
-  ASSERT_NE(-1, tmp_file.fd);
-  ASSERT_TRUE(android::base::WriteFully(tmp_file.fd, &kZipFileWithBrokenLfhSignature[0],
-                                        kZipFileWithBrokenLfhSignature.size()));
->>>>>>> fcf9c96f
-=======
-  TemporaryFile tmp_file;
-  ASSERT_NE(-1, tmp_file.fd);
-  ASSERT_TRUE(android::base::WriteFully(tmp_file.fd, &kZipFileWithBrokenLfhSignature[0],
-                                        kZipFileWithBrokenLfhSignature.size()));
->>>>>>> fcf9c96f
-=======
-  TemporaryFile tmp_file;
-  ASSERT_NE(-1, tmp_file.fd);
-  ASSERT_TRUE(android::base::WriteFully(tmp_file.fd, &kZipFileWithBrokenLfhSignature[0],
-                                        kZipFileWithBrokenLfhSignature.size()));
->>>>>>> fcf9c96f
-=======
-  TemporaryFile tmp_file;
-  ASSERT_NE(-1, tmp_file.fd);
-  ASSERT_TRUE(android::base::WriteFully(tmp_file.fd, &kZipFileWithBrokenLfhSignature[0],
-                                        kZipFileWithBrokenLfhSignature.size()));
->>>>>>> fcf9c96f
-=======
-  TemporaryFile tmp_file;
-  ASSERT_NE(-1, tmp_file.fd);
-  ASSERT_TRUE(android::base::WriteFully(tmp_file.fd, &kZipFileWithBrokenLfhSignature[0],
-                                        kZipFileWithBrokenLfhSignature.size()));
->>>>>>> fcf9c96f
-=======
-  TemporaryFile tmp_file;
-  ASSERT_NE(-1, tmp_file.fd);
-  ASSERT_TRUE(android::base::WriteFully(tmp_file.fd, &kZipFileWithBrokenLfhSignature[0],
-                                        kZipFileWithBrokenLfhSignature.size()));
->>>>>>> fcf9c96f
@@ -327,26 +71,3 @@ TEST(ziparchive, BrokenLfhSignature) {
-<<<<<<< HEAD
-  ASSERT_EQ(-1, OpenArchiveFd(fd, "LeadingNonZipBytes", &handle));
-  close(fd);
-||||||| 3065de2c8
-<<<<<<< HEAD
-  ASSERT_EQ(-1, OpenArchiveFd(fd, "LeadingNonZipBytes", &handle));
-  close(fd);
-||||||| 3065de2c8
-<<<<<<< HEAD
-  ASSERT_EQ(-1, OpenArchiveFd(fd, "LeadingNonZipBytes", &handle));
-  close(fd);
-||||||| 3065de2c8
-<<<<<<< HEAD
-  ASSERT_EQ(-1, OpenArchiveFd(fd, "LeadingNonZipBytes", &handle));
-  close(fd);
-||||||| 3065de2c8
-<<<<<<< HEAD
-  ASSERT_EQ(-1, OpenArchiveFd(fd, "LeadingNonZipBytes", &handle));
-  close(fd);
-||||||| 3065de2c8
-<<<<<<< HEAD
-  ASSERT_EQ(-1, OpenArchiveFd(fd, "LeadingNonZipBytes", &handle));
-  close(fd);
-||||||| 3065de2c8
-<<<<<<< HEAD
-  ASSERT_EQ(-1, OpenArchiveFd(fd, "LeadingNonZipBytes", &handle));
+  ASSERT_EQ(0, OpenArchiveFd(fd, "OpenWithAssumeFdOwnership", &handle, false));
+  CloseArchive(handle);
+  ASSERT_EQ(0, lseek(fd, 0, SEEK_SET));
@@ -354 +75,3 @@ TEST(ziparchive, BrokenLfhSignature) {
-||||||| 3065de2c8
+}
+TEST(ziparchive, Iteration) {
+  ZipArchiveHandle handle;
@@ -356,37 +79,16 @@ TEST(ziparchive, BrokenLfhSignature) {
-  ZipEntry entry;
-  ASSERT_EQ(0, FindEntry(handle, "a.txt", &entry));
-  ASSERT_EQ(0, ExtractEntryToFile(handle, &entry, fd));
-  uint8_t read_buffer[data_size];
-  ASSERT_EQ(0, lseek64(fd, 0, SEEK_SET));
-  ASSERT_EQ(data_size, TEMP_FAILURE_RETRY(read(fd, read_buffer, data_size)));
-  ASSERT_EQ(0, memcmp(read_buffer, data, data_size));
-  std::vector<uint8_t> uncompressed_data(entry.uncompressed_length);
-  ASSERT_EQ(static_cast<ssize_t>(entry.uncompressed_length),
-            TEMP_FAILURE_RETRY(
-                read(fd, &uncompressed_data[0], entry.uncompressed_length)));
-  ASSERT_EQ(0, memcmp(&uncompressed_data[0], kATxtContents,
-                      sizeof(kATxtContents)));
-  ASSERT_EQ(data_size + static_cast<ssize_t>(sizeof(kATxtContents)),
-            lseek64(fd, 0, SEEK_END));
-  close(fd);
-=======
-  ASSERT_EQ(-1, OpenArchiveFd(tmp_file.fd, "LeadingNonZipBytes", &handle));
->>>>>>> fcf9c96f
-=======
-  ASSERT_EQ(-1, OpenArchiveFd(tmp_file.fd, "LeadingNonZipBytes", &handle));
->>>>>>> fcf9c96f
-=======
-  ASSERT_EQ(-1, OpenArchiveFd(tmp_file.fd, "LeadingNonZipBytes", &handle));
->>>>>>> fcf9c96f
-=======
-  ASSERT_EQ(-1, OpenArchiveFd(tmp_file.fd, "LeadingNonZipBytes", &handle));
->>>>>>> fcf9c96f
-=======
-  ASSERT_EQ(-1, OpenArchiveFd(tmp_file.fd, "LeadingNonZipBytes", &handle));
->>>>>>> fcf9c96f
-=======
-  ASSERT_EQ(-1, OpenArchiveFd(tmp_file.fd, "LeadingNonZipBytes", &handle));
->>>>>>> fcf9c96f
-=======
-  ASSERT_EQ(-1, OpenArchiveFd(tmp_file.fd, "LeadingNonZipBytes", &handle));
->>>>>>> fcf9c96f
+  void* iteration_cookie;
+  ASSERT_EQ(0, StartIteration(handle, &iteration_cookie, NULL, NULL));
+  ZipEntry data;
+  ZipEntryName name;
+  ASSERT_EQ(0, Next(iteration_cookie, &data, &name));
+  AssertNameEquals("b/c.txt", name);
+  ASSERT_EQ(0, Next(iteration_cookie, &data, &name));
+  AssertNameEquals("b/d.txt", name);
+  ASSERT_EQ(0, Next(iteration_cookie, &data, &name));
+  AssertNameEquals("a.txt", name);
+  ASSERT_EQ(0, Next(iteration_cookie, &data, &name));
+  AssertNameEquals("b.txt", name);
+  ASSERT_EQ(0, Next(iteration_cookie, &data, &name));
+  AssertNameEquals("b/", name);
+  ASSERT_EQ(-1, Next(iteration_cookie, &data, &name));
+  CloseArchive(handle);
@@ -394,105 +96 @@ TEST(ziparchive, BrokenLfhSignature) {
-TEST(ziparchive, BrokenLfhSignature) {
-<<<<<<< HEAD
-  char kTempFilePattern[] = "zip_archive_input_XXXXXX";
-  int fd = make_temporary_file(kTempFilePattern);
-  ASSERT_NE(-1, fd);
-  ASSERT_EQ(static_cast<int32_t>(sizeof(kZipFileWithBrokenLfhSignature)),
-      TEMP_FAILURE_RETRY(write(fd, kZipFileWithBrokenLfhSignature,
-                               sizeof(kZipFileWithBrokenLfhSignature))));
-||||||| 3065de2c8
-<<<<<<< HEAD
-  char kTempFilePattern[] = "zip_archive_input_XXXXXX";
-  int fd = make_temporary_file(kTempFilePattern);
-  ASSERT_NE(-1, fd);
-  ASSERT_EQ(static_cast<int32_t>(sizeof(kZipFileWithBrokenLfhSignature)),
-      TEMP_FAILURE_RETRY(write(fd, kZipFileWithBrokenLfhSignature,
-                               sizeof(kZipFileWithBrokenLfhSignature))));
-||||||| 3065de2c8
-<<<<<<< HEAD
-  char kTempFilePattern[] = "zip_archive_input_XXXXXX";
-  int fd = make_temporary_file(kTempFilePattern);
-  ASSERT_NE(-1, fd);
-  ASSERT_EQ(static_cast<int32_t>(sizeof(kZipFileWithBrokenLfhSignature)),
-      TEMP_FAILURE_RETRY(write(fd, kZipFileWithBrokenLfhSignature,
-                               sizeof(kZipFileWithBrokenLfhSignature))));
-||||||| 3065de2c8
-<<<<<<< HEAD
-  char kTempFilePattern[] = "zip_archive_input_XXXXXX";
-  int fd = make_temporary_file(kTempFilePattern);
-  ASSERT_NE(-1, fd);
-  ASSERT_EQ(static_cast<int32_t>(sizeof(kZipFileWithBrokenLfhSignature)),
-      TEMP_FAILURE_RETRY(write(fd, kZipFileWithBrokenLfhSignature,
-                               sizeof(kZipFileWithBrokenLfhSignature))));
-||||||| 3065de2c8
-<<<<<<< HEAD
-  char kTempFilePattern[] = "zip_archive_input_XXXXXX";
-  int fd = make_temporary_file(kTempFilePattern);
-  ASSERT_NE(-1, fd);
-  ASSERT_EQ(static_cast<int32_t>(sizeof(kZipFileWithBrokenLfhSignature)),
-      TEMP_FAILURE_RETRY(write(fd, kZipFileWithBrokenLfhSignature,
-                               sizeof(kZipFileWithBrokenLfhSignature))));
-||||||| 3065de2c8
-<<<<<<< HEAD
-  char kTempFilePattern[] = "zip_archive_input_XXXXXX";
-  int fd = make_temporary_file(kTempFilePattern);
-  ASSERT_NE(-1, fd);
-  ASSERT_EQ(static_cast<int32_t>(sizeof(kZipFileWithBrokenLfhSignature)),
-      TEMP_FAILURE_RETRY(write(fd, kZipFileWithBrokenLfhSignature,
-                               sizeof(kZipFileWithBrokenLfhSignature))));
-||||||| 3065de2c8
-<<<<<<< HEAD
-  char kTempFilePattern[] = "zip_archive_input_XXXXXX";
-  int fd = make_temporary_file(kTempFilePattern);
-  ASSERT_NE(-1, fd);
-  ASSERT_EQ(static_cast<int32_t>(sizeof(kZipFileWithBrokenLfhSignature)),
-      TEMP_FAILURE_RETRY(write(fd, kZipFileWithBrokenLfhSignature,
-                               sizeof(kZipFileWithBrokenLfhSignature))));
-||||||| 3065de2c8
-  char kTempFilePattern[] = "zip_archive_input_XXXXXX";
-  int fd = make_temporary_file(kTempFilePattern);
-  ASSERT_NE(-1, fd);
-  const uint8_t data[8] = { '1', '2', '3', '4', '5', '6', '7', '8' };
-  const ssize_t data_size = sizeof(data);
-  ASSERT_EQ(data_size, TEMP_FAILURE_RETRY(write(fd, data, data_size)));
-=======
-  TemporaryFile tmp_file;
-  ASSERT_NE(-1, tmp_file.fd);
-  ASSERT_TRUE(android::base::WriteFully(tmp_file.fd, &kZipFileWithBrokenLfhSignature[0],
-                                        kZipFileWithBrokenLfhSignature.size()));
->>>>>>> fcf9c96f
-=======
-  TemporaryFile tmp_file;
-  ASSERT_NE(-1, tmp_file.fd);
-  ASSERT_TRUE(android::base::WriteFully(tmp_file.fd, &kZipFileWithBrokenLfhSignature[0],
-                                        kZipFileWithBrokenLfhSignature.size()));
->>>>>>> fcf9c96f
-=======
-  TemporaryFile tmp_file;
-  ASSERT_NE(-1, tmp_file.fd);
-  ASSERT_TRUE(android::base::WriteFully(tmp_file.fd, &kZipFileWithBrokenLfhSignature[0],
-                                        kZipFileWithBrokenLfhSignature.size()));
->>>>>>> fcf9c96f
-=======
-  TemporaryFile tmp_file;
-  ASSERT_NE(-1, tmp_file.fd);
-  ASSERT_TRUE(android::base::WriteFully(tmp_file.fd, &kZipFileWithBrokenLfhSignature[0],
-                                        kZipFileWithBrokenLfhSignature.size()));
->>>>>>> fcf9c96f
-=======
-  TemporaryFile tmp_file;
-  ASSERT_NE(-1, tmp_file.fd);
-  ASSERT_TRUE(android::base::WriteFully(tmp_file.fd, &kZipFileWithBrokenLfhSignature[0],
-                                        kZipFileWithBrokenLfhSignature.size()));
->>>>>>> fcf9c96f
-=======
-  TemporaryFile tmp_file;
-  ASSERT_NE(-1, tmp_file.fd);
-  ASSERT_TRUE(android::base::WriteFully(tmp_file.fd, &kZipFileWithBrokenLfhSignature[0],
-                                        kZipFileWithBrokenLfhSignature.size()));
->>>>>>> fcf9c96f
-=======
-  TemporaryFile tmp_file;
-  ASSERT_NE(-1, tmp_file.fd);
-  ASSERT_TRUE(android::base::WriteFully(tmp_file.fd, &kZipFileWithBrokenLfhSignature[0],
-                                        kZipFileWithBrokenLfhSignature.size()));
->>>>>>> fcf9c96f
+TEST(ziparchive, IterationWithPrefix) {
@@ -500,28 +97,0 @@ TEST(ziparchive, BrokenLfhSignature) {
-<<<<<<< HEAD
-  ASSERT_EQ(-1, OpenArchiveFd(fd, "LeadingNonZipBytes", &handle));
-  close(fd);
-||||||| 3065de2c8
-<<<<<<< HEAD
-  ASSERT_EQ(-1, OpenArchiveFd(fd, "LeadingNonZipBytes", &handle));
-  close(fd);
-||||||| 3065de2c8
-<<<<<<< HEAD
-  ASSERT_EQ(-1, OpenArchiveFd(fd, "LeadingNonZipBytes", &handle));
-  close(fd);
-||||||| 3065de2c8
-<<<<<<< HEAD
-  ASSERT_EQ(-1, OpenArchiveFd(fd, "LeadingNonZipBytes", &handle));
-  close(fd);
-||||||| 3065de2c8
-<<<<<<< HEAD
-  ASSERT_EQ(-1, OpenArchiveFd(fd, "LeadingNonZipBytes", &handle));
-  close(fd);
-||||||| 3065de2c8
-<<<<<<< HEAD
-  ASSERT_EQ(-1, OpenArchiveFd(fd, "LeadingNonZipBytes", &handle));
-  close(fd);
-||||||| 3065de2c8
-<<<<<<< HEAD
-  ASSERT_EQ(-1, OpenArchiveFd(fd, "LeadingNonZipBytes", &handle));
-  close(fd);
-||||||| 3065de2c8
@@ -529,37 +99,62 @@ TEST(ziparchive, BrokenLfhSignature) {
-  ZipEntry entry;
-  ASSERT_EQ(0, FindEntry(handle, "a.txt", &entry));
-  ASSERT_EQ(0, ExtractEntryToFile(handle, &entry, fd));
-  uint8_t read_buffer[data_size];
-  ASSERT_EQ(0, lseek64(fd, 0, SEEK_SET));
-  ASSERT_EQ(data_size, TEMP_FAILURE_RETRY(read(fd, read_buffer, data_size)));
-  ASSERT_EQ(0, memcmp(read_buffer, data, data_size));
-  std::vector<uint8_t> uncompressed_data(entry.uncompressed_length);
-  ASSERT_EQ(static_cast<ssize_t>(entry.uncompressed_length),
-            TEMP_FAILURE_RETRY(
-                read(fd, &uncompressed_data[0], entry.uncompressed_length)));
-  ASSERT_EQ(0, memcmp(&uncompressed_data[0], kATxtContents,
-                      sizeof(kATxtContents)));
-  ASSERT_EQ(data_size + static_cast<ssize_t>(sizeof(kATxtContents)),
-            lseek64(fd, 0, SEEK_END));
-  close(fd);
-=======
-  ASSERT_EQ(-1, OpenArchiveFd(tmp_file.fd, "LeadingNonZipBytes", &handle));
->>>>>>> fcf9c96f
-=======
-  ASSERT_EQ(-1, OpenArchiveFd(tmp_file.fd, "LeadingNonZipBytes", &handle));
->>>>>>> fcf9c96f
-=======
-  ASSERT_EQ(-1, OpenArchiveFd(tmp_file.fd, "LeadingNonZipBytes", &handle));
->>>>>>> fcf9c96f
-=======
-  ASSERT_EQ(-1, OpenArchiveFd(tmp_file.fd, "LeadingNonZipBytes", &handle));
->>>>>>> fcf9c96f
-=======
-  ASSERT_EQ(-1, OpenArchiveFd(tmp_file.fd, "LeadingNonZipBytes", &handle));
->>>>>>> fcf9c96f
-=======
-  ASSERT_EQ(-1, OpenArchiveFd(tmp_file.fd, "LeadingNonZipBytes", &handle));
->>>>>>> fcf9c96f
-=======
-  ASSERT_EQ(-1, OpenArchiveFd(tmp_file.fd, "LeadingNonZipBytes", &handle));
->>>>>>> fcf9c96f
+  void* iteration_cookie;
+  ZipEntryName prefix("b/");
+  ASSERT_EQ(0, StartIteration(handle, &iteration_cookie, &prefix, NULL));
+  ZipEntry data;
+  ZipEntryName name;
+  ASSERT_EQ(0, Next(iteration_cookie, &data, &name));
+  AssertNameEquals("b/c.txt", name);
+  ASSERT_EQ(0, Next(iteration_cookie, &data, &name));
+  AssertNameEquals("b/d.txt", name);
+  ASSERT_EQ(0, Next(iteration_cookie, &data, &name));
+  AssertNameEquals("b/", name);
+  ASSERT_EQ(-1, Next(iteration_cookie, &data, &name));
+  CloseArchive(handle);
+}
+TEST(ziparchive, IterationWithSuffix) {
+  ZipArchiveHandle handle;
+  ASSERT_EQ(0, OpenArchiveWrapper(kValidZip, &handle));
+  void* iteration_cookie;
+  ZipEntryName suffix(".txt");
+  ASSERT_EQ(0, StartIteration(handle, &iteration_cookie, NULL, &suffix));
+  ZipEntry data;
+  ZipEntryName name;
+  ASSERT_EQ(0, Next(iteration_cookie, &data, &name));
+  AssertNameEquals("b/c.txt", name);
+  ASSERT_EQ(0, Next(iteration_cookie, &data, &name));
+  AssertNameEquals("b/d.txt", name);
+  ASSERT_EQ(0, Next(iteration_cookie, &data, &name));
+  AssertNameEquals("a.txt", name);
+  ASSERT_EQ(0, Next(iteration_cookie, &data, &name));
+  AssertNameEquals("b.txt", name);
+  ASSERT_EQ(-1, Next(iteration_cookie, &data, &name));
+  CloseArchive(handle);
+}
+TEST(ziparchive, IterationWithPrefixAndSuffix) {
+  ZipArchiveHandle handle;
+  ASSERT_EQ(0, OpenArchiveWrapper(kValidZip, &handle));
+  void* iteration_cookie;
+  ZipEntryName prefix("b");
+  ZipEntryName suffix(".txt");
+  ASSERT_EQ(0, StartIteration(handle, &iteration_cookie, &prefix, &suffix));
+  ZipEntry data;
+  ZipEntryName name;
+  ASSERT_EQ(0, Next(iteration_cookie, &data, &name));
+  AssertNameEquals("b/c.txt", name);
+  ASSERT_EQ(0, Next(iteration_cookie, &data, &name));
+  AssertNameEquals("b/d.txt", name);
+  ASSERT_EQ(0, Next(iteration_cookie, &data, &name));
+  AssertNameEquals("b.txt", name);
+  ASSERT_EQ(-1, Next(iteration_cookie, &data, &name));
+  CloseArchive(handle);
+}
+TEST(ziparchive, IterationWithBadPrefixAndSuffix) {
+  ZipArchiveHandle handle;
+  ASSERT_EQ(0, OpenArchiveWrapper(kValidZip, &handle));
+  void* iteration_cookie;
+  ZipEntryName prefix("x");
+  ZipEntryName suffix("y");
+  ASSERT_EQ(0, StartIteration(handle, &iteration_cookie, &prefix, &suffix));
+  ZipEntry data;
+  ZipEntryName name;
+  ASSERT_EQ(-1, Next(iteration_cookie, &data, &name));
+  CloseArchive(handle);
@@ -598,5 +192,0 @@ TEST(ziparchive, ExtractToMemory) {
-  ZipArchiveHandle handle;
-  ASSERT_EQ(0, OpenArchiveWrapper(kValidZip, &handle));
-  ZipEntry data;
-  ZipEntryName a_name;
-  a_name.name {
@@ -664,74 +254,18 @@ static const uint16_t kAbZip[] = {
-  0x0100, 0x4c00, 0x0000, 0x5b00, 0x0001, 0x0000, 0x0000
-};
-static const uint8_t kAbTxtName[] = { 'a', 'b', '.', 't', 'x', 't' };
-static const uint16_t kAbTxtNameLength = sizeof(kAbTxtName);
-static const size_t kAbUncompressedSize = 270216;
-static int make_temporary_file(const char* file_name_pattern) {
-  char full_path[1024];
-  snprintf(full_path, sizeof(full_path), "/data/local/tmp/%s", file_name_pattern);
-  int fd = mkstemp(full_path);
-  if (fd == -1) {
-    snprintf(full_path, sizeof(full_path), "/tmp/%s", file_name_pattern);
-    fd = mkstemp(full_path);
-  }
-  return fd;
-}
-TEST(ziparchive, BrokenLfhSignature) {
-<<<<<<< HEAD
-  char kTempFilePattern[] = "zip_archive_input_XXXXXX";
-  int fd = make_temporary_file(kTempFilePattern);
-  ASSERT_NE(-1, fd);
-  ASSERT_EQ(static_cast<int32_t>(sizeof(kZipFileWithBrokenLfhSignature)),
-      TEMP_FAILURE_RETRY(write(fd, kZipFileWithBrokenLfhSignature,
-                               sizeof(kZipFileWithBrokenLfhSignature))));
-||||||| 3065de2c8
-<<<<<<< HEAD
-  char kTempFilePattern[] = "zip_archive_input_XXXXXX";
-  int fd = make_temporary_file(kTempFilePattern);
-  ASSERT_NE(-1, fd);
-  ASSERT_EQ(static_cast<int32_t>(sizeof(kZipFileWithBrokenLfhSignature)),
-      TEMP_FAILURE_RETRY(write(fd, kZipFileWithBrokenLfhSignature,
-                               sizeof(kZipFileWithBrokenLfhSignature))));
-||||||| 3065de2c8
-<<<<<<< HEAD
-  char kTempFilePattern[] = "zip_archive_input_XXXXXX";
-  int fd = make_temporary_file(kTempFilePattern);
-  ASSERT_NE(-1, fd);
-  ASSERT_EQ(static_cast<int32_t>(sizeof(kZipFileWithBrokenLfhSignature)),
-      TEMP_FAILURE_RETRY(write(fd, kZipFileWithBrokenLfhSignature,
-                               sizeof(kZipFileWithBrokenLfhSignature))));
-||||||| 3065de2c8
-<<<<<<< HEAD
-  char kTempFilePattern[] = "zip_archive_input_XXXXXX";
-  int fd = make_temporary_file(kTempFilePattern);
-  ASSERT_NE(-1, fd);
-  ASSERT_EQ(static_cast<int32_t>(sizeof(kZipFileWithBrokenLfhSignature)),
-      TEMP_FAILURE_RETRY(write(fd, kZipFileWithBrokenLfhSignature,
-                               sizeof(kZipFileWithBrokenLfhSignature))));
-||||||| 3065de2c8
-<<<<<<< HEAD
-  char kTempFilePattern[] = "zip_archive_input_XXXXXX";
-  int fd = make_temporary_file(kTempFilePattern);
-  ASSERT_NE(-1, fd);
-  ASSERT_EQ(static_cast<int32_t>(sizeof(kZipFileWithBrokenLfhSignature)),
-      TEMP_FAILURE_RETRY(write(fd, kZipFileWithBrokenLfhSignature,
-                               sizeof(kZipFileWithBrokenLfhSignature))));
-||||||| 3065de2c8
-<<<<<<< HEAD
-  char kTempFilePattern[] = "zip_archive_input_XXXXXX";
-  int fd = make_temporary_file(kTempFilePattern);
-  ASSERT_NE(-1, fd);
-  ASSERT_EQ(static_cast<int32_t>(sizeof(kZipFileWithBrokenLfhSignature)),
-      TEMP_FAILURE_RETRY(write(fd, kZipFileWithBrokenLfhSignature,
-                               sizeof(kZipFileWithBrokenLfhSignature))));
-||||||| 3065de2c8
-<<<<<<< HEAD
-  char kTempFilePattern[] = "zip_archive_input_XXXXXX";
-  int fd = make_temporary_file(kTempFilePattern);
-  ASSERT_NE(-1, fd);
-  ASSERT_EQ(static_cast<int32_t>(sizeof(kZipFileWithBrokenLfhSignature)),
-      TEMP_FAILURE_RETRY(write(fd, kZipFileWithBrokenLfhSignature,
-                               sizeof(kZipFileWithBrokenLfhSignature))));
-||||||| 3065de2c8
-  char kTempFilePattern[] = "zip_archive_input_XXXXXX";
-  int fd = make_temporary_file(kTempFilePattern);
+  0x0100, 0x4c00, 0x0000, 0x5b00, 0x0001, 0x0000, 0x0000
+};
+static const uint8_t kAbTxtName[] = { 'a', 'b', '.', 't', 'x', 't' };
+static const uint16_t kAbTxtNameLength = sizeof(kAbTxtName);
+static const size_t kAbUncompressedSize = 270216;
+static int make_temporary_file(const char* file_name_pattern) {
+  char full_path[1024];
+  snprintf(full_path, sizeof(full_path), "/data/local/tmp/%s", file_name_pattern);
+  int fd = mkstemp(full_path);
+  if (fd == -1) {
+    snprintf(full_path, sizeof(full_path), "/tmp/%s", file_name_pattern);
+    fd = mkstemp(full_path);
+  }
+  return fd;
+}
+TEST(ziparchive, EmptyEntries) {
+  char temp_file_pattern[] = "empty_entries_test_XXXXXX";
+  int fd = make_temporary_file(temp_file_pattern);
@@ -739,45 +273,2 @@ TEST(ziparchive, BrokenLfhSignature) {
-  const uint8_t data[8] = { '1', '2', '3', '4', '5', '6', '7', '8' };
-  const ssize_t data_size = sizeof(data);
-  ASSERT_EQ(data_size, TEMP_FAILURE_RETRY(write(fd, data, data_size)));
-=======
-  TemporaryFile tmp_file;
-  ASSERT_NE(-1, tmp_file.fd);
-  ASSERT_TRUE(android::base::WriteFully(tmp_file.fd, &kZipFileWithBrokenLfhSignature[0],
-                                        kZipFileWithBrokenLfhSignature.size()));
->>>>>>> fcf9c96f
-=======
-  TemporaryFile tmp_file;
-  ASSERT_NE(-1, tmp_file.fd);
-  ASSERT_TRUE(android::base::WriteFully(tmp_file.fd, &kZipFileWithBrokenLfhSignature[0],
-                                        kZipFileWithBrokenLfhSignature.size()));
->>>>>>> fcf9c96f
-=======
-  TemporaryFile tmp_file;
-  ASSERT_NE(-1, tmp_file.fd);
-  ASSERT_TRUE(android::base::WriteFully(tmp_file.fd, &kZipFileWithBrokenLfhSignature[0],
-                                        kZipFileWithBrokenLfhSignature.size()));
->>>>>>> fcf9c96f
-=======
-  TemporaryFile tmp_file;
-  ASSERT_NE(-1, tmp_file.fd);
-  ASSERT_TRUE(android::base::WriteFully(tmp_file.fd, &kZipFileWithBrokenLfhSignature[0],
-                                        kZipFileWithBrokenLfhSignature.size()));
->>>>>>> fcf9c96f
-=======
-  TemporaryFile tmp_file;
-  ASSERT_NE(-1, tmp_file.fd);
-  ASSERT_TRUE(android::base::WriteFully(tmp_file.fd, &kZipFileWithBrokenLfhSignature[0],
-                                        kZipFileWithBrokenLfhSignature.size()));
->>>>>>> fcf9c96f
-=======
-  TemporaryFile tmp_file;
-  ASSERT_NE(-1, tmp_file.fd);
-  ASSERT_TRUE(android::base::WriteFully(tmp_file.fd, &kZipFileWithBrokenLfhSignature[0],
-                                        kZipFileWithBrokenLfhSignature.size()));
->>>>>>> fcf9c96f
-=======
-  TemporaryFile tmp_file;
-  ASSERT_NE(-1, tmp_file.fd);
-  ASSERT_TRUE(android::base::WriteFully(tmp_file.fd, &kZipFileWithBrokenLfhSignature[0],
-                                        kZipFileWithBrokenLfhSignature.size()));
->>>>>>> fcf9c96f
+  const ssize_t file_size = sizeof(kEmptyEntriesZip);
+  ASSERT_EQ(file_size, TEMP_FAILURE_RETRY(write(fd, kEmptyEntriesZip, file_size)));
@@ -785,29 +276 @@ TEST(ziparchive, BrokenLfhSignature) {
-<<<<<<< HEAD
-  ASSERT_EQ(-1, OpenArchiveFd(fd, "LeadingNonZipBytes", &handle));
-  close(fd);
-||||||| 3065de2c8
-<<<<<<< HEAD
-  ASSERT_EQ(-1, OpenArchiveFd(fd, "LeadingNonZipBytes", &handle));
-  close(fd);
-||||||| 3065de2c8
-<<<<<<< HEAD
-  ASSERT_EQ(-1, OpenArchiveFd(fd, "LeadingNonZipBytes", &handle));
-  close(fd);
-||||||| 3065de2c8
-<<<<<<< HEAD
-  ASSERT_EQ(-1, OpenArchiveFd(fd, "LeadingNonZipBytes", &handle));
-  close(fd);
-||||||| 3065de2c8
-<<<<<<< HEAD
-  ASSERT_EQ(-1, OpenArchiveFd(fd, "LeadingNonZipBytes", &handle));
-  close(fd);
-||||||| 3065de2c8
-<<<<<<< HEAD
-  ASSERT_EQ(-1, OpenArchiveFd(fd, "LeadingNonZipBytes", &handle));
-  close(fd);
-||||||| 3065de2c8
-<<<<<<< HEAD
-  ASSERT_EQ(-1, OpenArchiveFd(fd, "LeadingNonZipBytes", &handle));
-  close(fd);
-||||||| 3065de2c8
-  ASSERT_EQ(0, OpenArchiveWrapper(kValidZip, &handle));
+  ASSERT_EQ(0, OpenArchiveFd(fd, "EmptyEntriesTest", &handle));
@@ -815,36 +278,16 @@ TEST(ziparchive, BrokenLfhSignature) {
-  ASSERT_EQ(0, FindEntry(handle, "a.txt", &entry));
-  ASSERT_EQ(0, ExtractEntryToFile(handle, &entry, fd));
-  uint8_t read_buffer[data_size];
-  ASSERT_EQ(0, lseek64(fd, 0, SEEK_SET));
-  ASSERT_EQ(data_size, TEMP_FAILURE_RETRY(read(fd, read_buffer, data_size)));
-  ASSERT_EQ(0, memcmp(read_buffer, data, data_size));
-  std::vector<uint8_t> uncompressed_data(entry.uncompressed_length);
-  ASSERT_EQ(static_cast<ssize_t>(entry.uncompressed_length),
-            TEMP_FAILURE_RETRY(
-                read(fd, &uncompressed_data[0], entry.uncompressed_length)));
-  ASSERT_EQ(0, memcmp(&uncompressed_data[0], kATxtContents,
-                      sizeof(kATxtContents)));
-  ASSERT_EQ(data_size + static_cast<ssize_t>(sizeof(kATxtContents)),
-            lseek64(fd, 0, SEEK_END));
-  close(fd);
-=======
-  ASSERT_EQ(-1, OpenArchiveFd(tmp_file.fd, "LeadingNonZipBytes", &handle));
->>>>>>> fcf9c96f
-=======
-  ASSERT_EQ(-1, OpenArchiveFd(tmp_file.fd, "LeadingNonZipBytes", &handle));
->>>>>>> fcf9c96f
-=======
-  ASSERT_EQ(-1, OpenArchiveFd(tmp_file.fd, "LeadingNonZipBytes", &handle));
->>>>>>> fcf9c96f
-=======
-  ASSERT_EQ(-1, OpenArchiveFd(tmp_file.fd, "LeadingNonZipBytes", &handle));
->>>>>>> fcf9c96f
-=======
-  ASSERT_EQ(-1, OpenArchiveFd(tmp_file.fd, "LeadingNonZipBytes", &handle));
->>>>>>> fcf9c96f
-=======
-  ASSERT_EQ(-1, OpenArchiveFd(tmp_file.fd, "LeadingNonZipBytes", &handle));
->>>>>>> fcf9c96f
-=======
-  ASSERT_EQ(-1, OpenArchiveFd(tmp_file.fd, "LeadingNonZipBytes", &handle));
->>>>>>> fcf9c96f
+  ZipEntryName empty_name;
+  empty_name.name = kEmptyTxtName;
+  empty_name.name_length = kEmptyTxtNameLength;
+  ASSERT_EQ(0, FindEntry(handle, empty_name, &entry));
+  ASSERT_EQ(static_cast<uint32_t>(0), entry.uncompressed_length);
+  uint8_t buffer[1];
+  ASSERT_EQ(0, ExtractToMemory(handle, &entry, buffer, 1));
+  char output_file_pattern[] = "empty_entries_output_XXXXXX";
+  int output_fd = make_temporary_file(output_file_pattern);
+  ASSERT_NE(-1, output_fd);
+  ASSERT_EQ(0, ExtractEntryToFile(handle, &entry, output_fd));
+  struct stat stat_buf;
+  ASSERT_EQ(0, fstat(output_fd, &stat_buf));
+  ASSERT_EQ(0, stat_buf.st_size);
+  close(fd);
+  close(output_fd);
@@ -852,44 +295,3 @@ TEST(ziparchive, BrokenLfhSignature) {
-TEST(ziparchive, BrokenLfhSignature) {
-<<<<<<< HEAD
-  char kTempFilePattern[] = "zip_archive_input_XXXXXX";
-  int fd = make_temporary_file(kTempFilePattern);
-  ASSERT_NE(-1, fd);
-  ASSERT_EQ(static_cast<int32_t>(sizeof(kZipFileWithBrokenLfhSignature)),
-      TEMP_FAILURE_RETRY(write(fd, kZipFileWithBrokenLfhSignature,
-                               sizeof(kZipFileWithBrokenLfhSignature))));
-||||||| 3065de2c8
-<<<<<<< HEAD
-  char kTempFilePattern[] = "zip_archive_input_XXXXXX";
-  int fd = make_temporary_file(kTempFilePattern);
-  ASSERT_NE(-1, fd);
-  ASSERT_EQ(static_cast<int32_t>(sizeof(kZipFileWithBrokenLfhSignature)),
-      TEMP_FAILURE_RETRY(write(fd, kZipFileWithBrokenLfhSignature,
-                               sizeof(kZipFileWithBrokenLfhSignature))));
-||||||| 3065de2c8
-<<<<<<< HEAD
-  char kTempFilePattern[] = "zip_archive_input_XXXXXX";
-  int fd = make_temporary_file(kTempFilePattern);
-  ASSERT_NE(-1, fd);
-  ASSERT_EQ(static_cast<int32_t>(sizeof(kZipFileWithBrokenLfhSignature)),
-      TEMP_FAILURE_RETRY(write(fd, kZipFileWithBrokenLfhSignature,
-                               sizeof(kZipFileWithBrokenLfhSignature))));
-||||||| 3065de2c8
-<<<<<<< HEAD
-  char kTempFilePattern[] = "zip_archive_input_XXXXXX";
-  int fd = make_temporary_file(kTempFilePattern);
-  ASSERT_NE(-1, fd);
-  ASSERT_EQ(static_cast<int32_t>(sizeof(kZipFileWithBrokenLfhSignature)),
-      TEMP_FAILURE_RETRY(write(fd, kZipFileWithBrokenLfhSignature,
-                               sizeof(kZipFileWithBrokenLfhSignature))));
-||||||| 3065de2c8
-<<<<<<< HEAD
-  char kTempFilePattern[] = "zip_archive_input_XXXXXX";
-  int fd = make_temporary_file(kTempFilePattern);
-  ASSERT_NE(-1, fd);
-  ASSERT_EQ(static_cast<int32_t>(sizeof(kZipFileWithBrokenLfhSignature)),
-      TEMP_FAILURE_RETRY(write(fd, kZipFileWithBrokenLfhSignature,
-                               sizeof(kZipFileWithBrokenLfhSignature))));
-||||||| 3065de2c8
-<<<<<<< HEAD
-  char kTempFilePattern[] = "zip_archive_input_XXXXXX";
-  int fd = make_temporary_file(kTempFilePattern);
+TEST(ziparchive, EntryLargerThan32K) {
+  char temp_file_pattern[] = "entry_larger_than_32k_test_XXXXXX";
+  int fd = make_temporary_file(temp_file_pattern);
@@ -897,60 +299,2 @@ TEST(ziparchive, BrokenLfhSignature) {
-  ASSERT_EQ(static_cast<int32_t>(sizeof(kZipFileWithBrokenLfhSignature)),
-      TEMP_FAILURE_RETRY(write(fd, kZipFileWithBrokenLfhSignature,
-                               sizeof(kZipFileWithBrokenLfhSignature))));
-||||||| 3065de2c8
-<<<<<<< HEAD
-  char kTempFilePattern[] = "zip_archive_input_XXXXXX";
-  int fd = make_temporary_file(kTempFilePattern);
-  ASSERT_NE(-1, fd);
-  ASSERT_EQ(static_cast<int32_t>(sizeof(kZipFileWithBrokenLfhSignature)),
-      TEMP_FAILURE_RETRY(write(fd, kZipFileWithBrokenLfhSignature,
-                               sizeof(kZipFileWithBrokenLfhSignature))));
-||||||| 3065de2c8
-  char kTempFilePattern[] = "zip_archive_input_XXXXXX";
-  int fd = make_temporary_file(kTempFilePattern);
-  ASSERT_NE(-1, fd);
-  const uint8_t data[8] = { '1', '2', '3', '4', '5', '6', '7', '8' };
-  const ssize_t data_size = sizeof(data);
-  ASSERT_EQ(data_size, TEMP_FAILURE_RETRY(write(fd, data, data_size)));
-=======
-  TemporaryFile tmp_file;
-  ASSERT_NE(-1, tmp_file.fd);
-  ASSERT_TRUE(android::base::WriteFully(tmp_file.fd, &kZipFileWithBrokenLfhSignature[0],
-                                        kZipFileWithBrokenLfhSignature.size()));
->>>>>>> fcf9c96f
-=======
-  TemporaryFile tmp_file;
-  ASSERT_NE(-1, tmp_file.fd);
-  ASSERT_TRUE(android::base::WriteFully(tmp_file.fd, &kZipFileWithBrokenLfhSignature[0],
-                                        kZipFileWithBrokenLfhSignature.size()));
->>>>>>> fcf9c96f
-=======
-  TemporaryFile tmp_file;
-  ASSERT_NE(-1, tmp_file.fd);
-  ASSERT_TRUE(android::base::WriteFully(tmp_file.fd, &kZipFileWithBrokenLfhSignature[0],
-                                        kZipFileWithBrokenLfhSignature.size()));
->>>>>>> fcf9c96f
-=======
-  TemporaryFile tmp_file;
-  ASSERT_NE(-1, tmp_file.fd);
-  ASSERT_TRUE(android::base::WriteFully(tmp_file.fd, &kZipFileWithBrokenLfhSignature[0],
-                                        kZipFileWithBrokenLfhSignature.size()));
->>>>>>> fcf9c96f
-=======
-  TemporaryFile tmp_file;
-  ASSERT_NE(-1, tmp_file.fd);
-  ASSERT_TRUE(android::base::WriteFully(tmp_file.fd, &kZipFileWithBrokenLfhSignature[0],
-                                        kZipFileWithBrokenLfhSignature.size()));
->>>>>>> fcf9c96f
-=======
-  TemporaryFile tmp_file;
-  ASSERT_NE(-1, tmp_file.fd);
-  ASSERT_TRUE(android::base::WriteFully(tmp_file.fd, &kZipFileWithBrokenLfhSignature[0],
-                                        kZipFileWithBrokenLfhSignature.size()));
->>>>>>> fcf9c96f
-=======
-  TemporaryFile tmp_file;
-  ASSERT_NE(-1, tmp_file.fd);
-  ASSERT_TRUE(android::base::WriteFully(tmp_file.fd, &kZipFileWithBrokenLfhSignature[0],
-                                        kZipFileWithBrokenLfhSignature.size()));
->>>>>>> fcf9c96f
+  ASSERT_TRUE(android::base::WriteFully(fd, reinterpret_cast<const uint8_t*>(kAbZip),
+                         sizeof(kAbZip) - 1));
@@ -958,29 +302 @@ TEST(ziparchive, BrokenLfhSignature) {
-<<<<<<< HEAD
-  ASSERT_EQ(-1, OpenArchiveFd(fd, "LeadingNonZipBytes", &handle));
-  close(fd);
-||||||| 3065de2c8
-<<<<<<< HEAD
-  ASSERT_EQ(-1, OpenArchiveFd(fd, "LeadingNonZipBytes", &handle));
-  close(fd);
-||||||| 3065de2c8
-<<<<<<< HEAD
-  ASSERT_EQ(-1, OpenArchiveFd(fd, "LeadingNonZipBytes", &handle));
-  close(fd);
-||||||| 3065de2c8
-<<<<<<< HEAD
-  ASSERT_EQ(-1, OpenArchiveFd(fd, "LeadingNonZipBytes", &handle));
-  close(fd);
-||||||| 3065de2c8
-<<<<<<< HEAD
-  ASSERT_EQ(-1, OpenArchiveFd(fd, "LeadingNonZipBytes", &handle));
-  close(fd);
-||||||| 3065de2c8
-<<<<<<< HEAD
-  ASSERT_EQ(-1, OpenArchiveFd(fd, "LeadingNonZipBytes", &handle));
-  close(fd);
-||||||| 3065de2c8
-<<<<<<< HEAD
-  ASSERT_EQ(-1, OpenArchiveFd(fd, "LeadingNonZipBytes", &handle));
-  close(fd);
-||||||| 3065de2c8
-  ASSERT_EQ(0, OpenArchiveWrapper(kValidZip, &handle));
+  ASSERT_EQ(0, OpenArchiveFd(fd, "EntryLargerThan32KTest", &handle));
@@ -988,14 +304,24 @@ TEST(ziparchive, BrokenLfhSignature) {
-  ASSERT_EQ(0, FindEntry(handle, "a.txt", &entry));
-  ASSERT_EQ(0, ExtractEntryToFile(handle, &entry, fd));
-  uint8_t read_buffer[data_size];
-  ASSERT_EQ(0, lseek64(fd, 0, SEEK_SET));
-  ASSERT_EQ(data_size, TEMP_FAILURE_RETRY(read(fd, read_buffer, data_size)));
-  ASSERT_EQ(0, memcmp(read_buffer, data, data_size));
-  std::vector<uint8_t> uncompressed_data(entry.uncompressed_length);
-  ASSERT_EQ(static_cast<ssize_t>(entry.uncompressed_length),
-            TEMP_FAILURE_RETRY(
-                read(fd, &uncompressed_data[0], entry.uncompressed_length)));
-  ASSERT_EQ(0, memcmp(&uncompressed_data[0], kATxtContents,
-                      sizeof(kATxtContents)));
-  ASSERT_EQ(data_size + static_cast<ssize_t>(sizeof(kATxtContents)),
-            lseek64(fd, 0, SEEK_END));
+  ZipEntryName ab_name;
+  ab_name.name = kAbTxtName;
+  ab_name.name_length = kAbTxtNameLength;
+  ASSERT_EQ(0, FindEntry(handle, ab_name, &entry));
+  ASSERT_EQ(kAbUncompressedSize, entry.uncompressed_length);
+  std::vector<uint8_t> buffer(kAbUncompressedSize);
+  ASSERT_EQ(0, ExtractToMemory(handle, &entry, &buffer[0], buffer.size()));
+  char output_file_pattern[] = "entry_larger_than_32k_test_output_XXXXXX";
+  int output_fd = make_temporary_file(output_file_pattern);
+  ASSERT_NE(-1, output_fd);
+  ASSERT_EQ(0, ExtractEntryToFile(handle, &entry, output_fd));
+  struct stat stat_buf;
+  ASSERT_EQ(0, fstat(output_fd, &stat_buf));
+  ASSERT_EQ(kAbUncompressedSize, static_cast<size_t>(stat_buf.st_size));
+  std::vector<uint8_t> file_contents(kAbUncompressedSize);
+  ASSERT_EQ(0, lseek64(output_fd, 0, SEEK_SET));
+  ASSERT_TRUE(android::base::ReadFully(output_fd, &file_contents[0], file_contents.size()));
+  ASSERT_EQ(file_contents, buffer);
+  for (int i = 0; i < 90072; ++i) {
+    const uint8_t* line = &file_contents[0] + (3 * i);
+    ASSERT_EQ('a', line[0]);
+    ASSERT_EQ('b', line[1]);
+    ASSERT_EQ('\n', line[2]);
+  }
@@ -1003,21 +329 @@ TEST(ziparchive, BrokenLfhSignature) {
-=======
-  ASSERT_EQ(-1, OpenArchiveFd(tmp_file.fd, "LeadingNonZipBytes", &handle));
->>>>>>> fcf9c96f
-=======
-  ASSERT_EQ(-1, OpenArchiveFd(tmp_file.fd, "LeadingNonZipBytes", &handle));
->>>>>>> fcf9c96f
-=======
-  ASSERT_EQ(-1, OpenArchiveFd(tmp_file.fd, "LeadingNonZipBytes", &handle));
->>>>>>> fcf9c96f
-=======
-  ASSERT_EQ(-1, OpenArchiveFd(tmp_file.fd, "LeadingNonZipBytes", &handle));
->>>>>>> fcf9c96f
-=======
-  ASSERT_EQ(-1, OpenArchiveFd(tmp_file.fd, "LeadingNonZipBytes", &handle));
->>>>>>> fcf9c96f
-=======
-  ASSERT_EQ(-1, OpenArchiveFd(tmp_file.fd, "LeadingNonZipBytes", &handle));
->>>>>>> fcf9c96f
-=======
-  ASSERT_EQ(-1, OpenArchiveFd(tmp_file.fd, "LeadingNonZipBytes", &handle));
->>>>>>> fcf9c96f
+  close(output_fd);
@@ -1025,57 +331,13 @@ TEST(ziparchive, BrokenLfhSignature) {
-TEST(ziparchive, BrokenLfhSignature) {
-<<<<<<< HEAD
-  char kTempFilePattern[] = "zip_archive_input_XXXXXX";
-  int fd = make_temporary_file(kTempFilePattern);
-  ASSERT_NE(-1, fd);
-  ASSERT_EQ(static_cast<int32_t>(sizeof(kZipFileWithBrokenLfhSignature)),
-      TEMP_FAILURE_RETRY(write(fd, kZipFileWithBrokenLfhSignature,
-                               sizeof(kZipFileWithBrokenLfhSignature))));
-||||||| 3065de2c8
-<<<<<<< HEAD
-  char kTempFilePattern[] = "zip_archive_input_XXXXXX";
-  int fd = make_temporary_file(kTempFilePattern);
-  ASSERT_NE(-1, fd);
-  ASSERT_EQ(static_cast<int32_t>(sizeof(kZipFileWithBrokenLfhSignature)),
-      TEMP_FAILURE_RETRY(write(fd, kZipFileWithBrokenLfhSignature,
-                               sizeof(kZipFileWithBrokenLfhSignature))));
-||||||| 3065de2c8
-<<<<<<< HEAD
-  char kTempFilePattern[] = "zip_archive_input_XXXXXX";
-  int fd = make_temporary_file(kTempFilePattern);
-  ASSERT_NE(-1, fd);
-  ASSERT_EQ(static_cast<int32_t>(sizeof(kZipFileWithBrokenLfhSignature)),
-      TEMP_FAILURE_RETRY(write(fd, kZipFileWithBrokenLfhSignature,
-                               sizeof(kZipFileWithBrokenLfhSignature))));
-||||||| 3065de2c8
-<<<<<<< HEAD
-  char kTempFilePattern[] = "zip_archive_input_XXXXXX";
-  int fd = make_temporary_file(kTempFilePattern);
-  ASSERT_NE(-1, fd);
-  ASSERT_EQ(static_cast<int32_t>(sizeof(kZipFileWithBrokenLfhSignature)),
-      TEMP_FAILURE_RETRY(write(fd, kZipFileWithBrokenLfhSignature,
-                               sizeof(kZipFileWithBrokenLfhSignature))));
-||||||| 3065de2c8
-<<<<<<< HEAD
-  char kTempFilePattern[] = "zip_archive_input_XXXXXX";
-  int fd = make_temporary_file(kTempFilePattern);
-  ASSERT_NE(-1, fd);
-  ASSERT_EQ(static_cast<int32_t>(sizeof(kZipFileWithBrokenLfhSignature)),
-      TEMP_FAILURE_RETRY(write(fd, kZipFileWithBrokenLfhSignature,
-                               sizeof(kZipFileWithBrokenLfhSignature))));
-||||||| 3065de2c8
-<<<<<<< HEAD
-  char kTempFilePattern[] = "zip_archive_input_XXXXXX";
-  int fd = make_temporary_file(kTempFilePattern);
-  ASSERT_NE(-1, fd);
-  ASSERT_EQ(static_cast<int32_t>(sizeof(kZipFileWithBrokenLfhSignature)),
-      TEMP_FAILURE_RETRY(write(fd, kZipFileWithBrokenLfhSignature,
-                               sizeof(kZipFileWithBrokenLfhSignature))));
-||||||| 3065de2c8
-<<<<<<< HEAD
-  char kTempFilePattern[] = "zip_archive_input_XXXXXX";
-  int fd = make_temporary_file(kTempFilePattern);
-  ASSERT_NE(-1, fd);
-  ASSERT_EQ(static_cast<int32_t>(sizeof(kZipFileWithBrokenLfhSignature)),
-      TEMP_FAILURE_RETRY(write(fd, kZipFileWithBrokenLfhSignature,
-                               sizeof(kZipFileWithBrokenLfhSignature))));
-||||||| 3065de2c8
+TEST(ziparchive, TrailerAfterEOCD) {
+  char temp_file_pattern[] = "trailer_after_eocd_test_XXXXXX";
+  int fd = make_temporary_file(temp_file_pattern);
+  ASSERT_NE(-1, fd);
+  static const uint8_t trailer[] = { 'A' ,'n', 'd', 'r', 'o', 'i', 'd', 'z' };
+  const ssize_t file_size = sizeof(kEmptyEntriesZip);
+  const ssize_t trailer_size = sizeof(trailer);
+  ASSERT_EQ(file_size, TEMP_FAILURE_RETRY(write(fd, kEmptyEntriesZip, file_size)));
+  ASSERT_EQ(trailer_size, TEMP_FAILURE_RETRY(write(fd, trailer, trailer_size)));
+  ZipArchiveHandle handle;
+  ASSERT_GT(0, OpenArchiveFd(fd, "EmptyEntriesTest", &handle));
+}
+TEST(ziparchive, ExtractToFile) {
@@ -1088,42 +349,0 @@ TEST(ziparchive, BrokenLfhSignature) {
-=======
-  TemporaryFile tmp_file;
-  ASSERT_NE(-1, tmp_file.fd);
-  ASSERT_TRUE(android::base::WriteFully(tmp_file.fd, &kZipFileWithBrokenLfhSignature[0],
-                                        kZipFileWithBrokenLfhSignature.size()));
->>>>>>> fcf9c96f
-=======
-  TemporaryFile tmp_file;
-  ASSERT_NE(-1, tmp_file.fd);
-  ASSERT_TRUE(android::base::WriteFully(tmp_file.fd, &kZipFileWithBrokenLfhSignature[0],
-                                        kZipFileWithBrokenLfhSignature.size()));
->>>>>>> fcf9c96f
-=======
-  TemporaryFile tmp_file;
-  ASSERT_NE(-1, tmp_file.fd);
-  ASSERT_TRUE(android::base::WriteFully(tmp_file.fd, &kZipFileWithBrokenLfhSignature[0],
-                                        kZipFileWithBrokenLfhSignature.size()));
->>>>>>> fcf9c96f
-=======
-  TemporaryFile tmp_file;
-  ASSERT_NE(-1, tmp_file.fd);
-  ASSERT_TRUE(android::base::WriteFully(tmp_file.fd, &kZipFileWithBrokenLfhSignature[0],
-                                        kZipFileWithBrokenLfhSignature.size()));
->>>>>>> fcf9c96f
-=======
-  TemporaryFile tmp_file;
-  ASSERT_NE(-1, tmp_file.fd);
-  ASSERT_TRUE(android::base::WriteFully(tmp_file.fd, &kZipFileWithBrokenLfhSignature[0],
-                                        kZipFileWithBrokenLfhSignature.size()));
->>>>>>> fcf9c96f
-=======
-  TemporaryFile tmp_file;
-  ASSERT_NE(-1, tmp_file.fd);
-  ASSERT_TRUE(android::base::WriteFully(tmp_file.fd, &kZipFileWithBrokenLfhSignature[0],
-                                        kZipFileWithBrokenLfhSignature.size()));
->>>>>>> fcf9c96f
-=======
-  TemporaryFile tmp_file;
-  ASSERT_NE(-1, tmp_file.fd);
-  ASSERT_TRUE(android::base::WriteFully(tmp_file.fd, &kZipFileWithBrokenLfhSignature[0],
-                                        kZipFileWithBrokenLfhSignature.size()));
->>>>>>> fcf9c96f
@@ -1131,28 +350,0 @@ TEST(ziparchive, BrokenLfhSignature) {
-<<<<<<< HEAD
-  ASSERT_EQ(-1, OpenArchiveFd(fd, "LeadingNonZipBytes", &handle));
-  close(fd);
-||||||| 3065de2c8
-<<<<<<< HEAD
-  ASSERT_EQ(-1, OpenArchiveFd(fd, "LeadingNonZipBytes", &handle));
-  close(fd);
-||||||| 3065de2c8
-<<<<<<< HEAD
-  ASSERT_EQ(-1, OpenArchiveFd(fd, "LeadingNonZipBytes", &handle));
-  close(fd);
-||||||| 3065de2c8
-<<<<<<< HEAD
-  ASSERT_EQ(-1, OpenArchiveFd(fd, "LeadingNonZipBytes", &handle));
-  close(fd);
-||||||| 3065de2c8
-<<<<<<< HEAD
-  ASSERT_EQ(-1, OpenArchiveFd(fd, "LeadingNonZipBytes", &handle));
-  close(fd);
-||||||| 3065de2c8
-<<<<<<< HEAD
-  ASSERT_EQ(-1, OpenArchiveFd(fd, "LeadingNonZipBytes", &handle));
-  close(fd);
-||||||| 3065de2c8
-<<<<<<< HEAD
-  ASSERT_EQ(-1, OpenArchiveFd(fd, "LeadingNonZipBytes", &handle));
-  close(fd);
-||||||| 3065de2c8
@@ -1161 +353,4 @@ TEST(ziparchive, BrokenLfhSignature) {
-  ASSERT_EQ(0, FindEntry(handle, "a.txt", &entry));
+  ZipEntryName name;
+  name.name = kATxtName;
+  name.name_length = kATxtNameLength;
+  ASSERT_EQ(0, FindEntry(handle, name, &entry));
@@ -1176,21 +370,0 @@ TEST(ziparchive, BrokenLfhSignature) {
-=======
-  ASSERT_EQ(-1, OpenArchiveFd(tmp_file.fd, "LeadingNonZipBytes", &handle));
->>>>>>> fcf9c96f
-=======
-  ASSERT_EQ(-1, OpenArchiveFd(tmp_file.fd, "LeadingNonZipBytes", &handle));
->>>>>>> fcf9c96f
-=======
-  ASSERT_EQ(-1, OpenArchiveFd(tmp_file.fd, "LeadingNonZipBytes", &handle));
->>>>>>> fcf9c96f
-=======
-  ASSERT_EQ(-1, OpenArchiveFd(tmp_file.fd, "LeadingNonZipBytes", &handle));
->>>>>>> fcf9c96f
-=======
-  ASSERT_EQ(-1, OpenArchiveFd(tmp_file.fd, "LeadingNonZipBytes", &handle));
->>>>>>> fcf9c96f
-=======
-  ASSERT_EQ(-1, OpenArchiveFd(tmp_file.fd, "LeadingNonZipBytes", &handle));
->>>>>>> fcf9c96f
-=======
-  ASSERT_EQ(-1, OpenArchiveFd(tmp_file.fd, "LeadingNonZipBytes", &handle));
->>>>>>> fcf9c96f
@@ -1198 +372 @@ TEST(ziparchive, BrokenLfhSignature) {
-static const std::vector<uint8_t> kZipFileWithBrokenLfhSignature{
+static const uint8_t kZipFileWithBrokenLfhSignature[] = {
@@ -1214,9 +387,0 @@ TEST(ziparchive, BrokenLfhSignature) {
-<<<<<<< HEAD
-  char kTempFilePattern[] = "zip_archive_input_XXXXXX";
-  int fd = make_temporary_file(kTempFilePattern);
-  ASSERT_NE(-1, fd);
-  ASSERT_EQ(static_cast<int32_t>(sizeof(kZipFileWithBrokenLfhSignature)),
-      TEMP_FAILURE_RETRY(write(fd, kZipFileWithBrokenLfhSignature,
-                               sizeof(kZipFileWithBrokenLfhSignature))));
-||||||| 3065de2c8
-<<<<<<< HEAD
@@ -1229,89 +393,0 @@ TEST(ziparchive, BrokenLfhSignature) {
-||||||| 3065de2c8
-<<<<<<< HEAD
-  char kTempFilePattern[] = "zip_archive_input_XXXXXX";
-  int fd = make_temporary_file(kTempFilePattern);
-  ASSERT_NE(-1, fd);
-  ASSERT_EQ(static_cast<int32_t>(sizeof(kZipFileWithBrokenLfhSignature)),
-      TEMP_FAILURE_RETRY(write(fd, kZipFileWithBrokenLfhSignature,
-                               sizeof(kZipFileWithBrokenLfhSignature))));
-||||||| 3065de2c8
-<<<<<<< HEAD
-  char kTempFilePattern[] = "zip_archive_input_XXXXXX";
-  int fd = make_temporary_file(kTempFilePattern);
-  ASSERT_NE(-1, fd);
-  ASSERT_EQ(static_cast<int32_t>(sizeof(kZipFileWithBrokenLfhSignature)),
-      TEMP_FAILURE_RETRY(write(fd, kZipFileWithBrokenLfhSignature,
-                               sizeof(kZipFileWithBrokenLfhSignature))));
-||||||| 3065de2c8
-<<<<<<< HEAD
-  char kTempFilePattern[] = "zip_archive_input_XXXXXX";
-  int fd = make_temporary_file(kTempFilePattern);
-  ASSERT_NE(-1, fd);
-  ASSERT_EQ(static_cast<int32_t>(sizeof(kZipFileWithBrokenLfhSignature)),
-      TEMP_FAILURE_RETRY(write(fd, kZipFileWithBrokenLfhSignature,
-                               sizeof(kZipFileWithBrokenLfhSignature))));
-||||||| 3065de2c8
-<<<<<<< HEAD
-  char kTempFilePattern[] = "zip_archive_input_XXXXXX";
-  int fd = make_temporary_file(kTempFilePattern);
-  ASSERT_NE(-1, fd);
-  ASSERT_EQ(static_cast<int32_t>(sizeof(kZipFileWithBrokenLfhSignature)),
-      TEMP_FAILURE_RETRY(write(fd, kZipFileWithBrokenLfhSignature,
-                               sizeof(kZipFileWithBrokenLfhSignature))));
-||||||| 3065de2c8
-<<<<<<< HEAD
-  char kTempFilePattern[] = "zip_archive_input_XXXXXX";
-  int fd = make_temporary_file(kTempFilePattern);
-  ASSERT_NE(-1, fd);
-  ASSERT_EQ(static_cast<int32_t>(sizeof(kZipFileWithBrokenLfhSignature)),
-      TEMP_FAILURE_RETRY(write(fd, kZipFileWithBrokenLfhSignature,
-                               sizeof(kZipFileWithBrokenLfhSignature))));
-||||||| 3065de2c8
-  char kTempFilePattern[] = "zip_archive_input_XXXXXX";
-  int fd = make_temporary_file(kTempFilePattern);
-  ASSERT_NE(-1, fd);
-  const uint8_t data[8] = { '1', '2', '3', '4', '5', '6', '7', '8' };
-  const ssize_t data_size = sizeof(data);
-  ASSERT_EQ(data_size, TEMP_FAILURE_RETRY(write(fd, data, data_size)));
-=======
-  TemporaryFile tmp_file;
-  ASSERT_NE(-1, tmp_file.fd);
-  ASSERT_TRUE(android::base::WriteFully(tmp_file.fd, &kZipFileWithBrokenLfhSignature[0],
-                                        kZipFileWithBrokenLfhSignature.size()));
->>>>>>> fcf9c96f
-=======
-  TemporaryFile tmp_file;
-  ASSERT_NE(-1, tmp_file.fd);
-  ASSERT_TRUE(android::base::WriteFully(tmp_file.fd, &kZipFileWithBrokenLfhSignature[0],
-                                        kZipFileWithBrokenLfhSignature.size()));
->>>>>>> fcf9c96f
-=======
-  TemporaryFile tmp_file;
-  ASSERT_NE(-1, tmp_file.fd);
-  ASSERT_TRUE(android::base::WriteFully(tmp_file.fd, &kZipFileWithBrokenLfhSignature[0],
-                                        kZipFileWithBrokenLfhSignature.size()));
->>>>>>> fcf9c96f
-=======
-  TemporaryFile tmp_file;
-  ASSERT_NE(-1, tmp_file.fd);
-  ASSERT_TRUE(android::base::WriteFully(tmp_file.fd, &kZipFileWithBrokenLfhSignature[0],
-                                        kZipFileWithBrokenLfhSignature.size()));
->>>>>>> fcf9c96f
-=======
-  TemporaryFile tmp_file;
-  ASSERT_NE(-1, tmp_file.fd);
-  ASSERT_TRUE(android::base::WriteFully(tmp_file.fd, &kZipFileWithBrokenLfhSignature[0],
-                                        kZipFileWithBrokenLfhSignature.size()));
->>>>>>> fcf9c96f
-=======
-  TemporaryFile tmp_file;
-  ASSERT_NE(-1, tmp_file.fd);
-  ASSERT_TRUE(android::base::WriteFully(tmp_file.fd, &kZipFileWithBrokenLfhSignature[0],
-                                        kZipFileWithBrokenLfhSignature.size()));
->>>>>>> fcf9c96f
-=======
-  TemporaryFile tmp_file;
-  ASSERT_NE(-1, tmp_file.fd);
-  ASSERT_TRUE(android::base::WriteFully(tmp_file.fd, &kZipFileWithBrokenLfhSignature[0],
-                                        kZipFileWithBrokenLfhSignature.size()));
->>>>>>> fcf9c96f
@@ -1319,25 +394,0 @@ TEST(ziparchive, BrokenLfhSignature) {
-<<<<<<< HEAD
-  ASSERT_EQ(-1, OpenArchiveFd(fd, "LeadingNonZipBytes", &handle));
-  close(fd);
-||||||| 3065de2c8
-<<<<<<< HEAD
-  ASSERT_EQ(-1, OpenArchiveFd(fd, "LeadingNonZipBytes", &handle));
-  close(fd);
-||||||| 3065de2c8
-<<<<<<< HEAD
-  ASSERT_EQ(-1, OpenArchiveFd(fd, "LeadingNonZipBytes", &handle));
-  close(fd);
-||||||| 3065de2c8
-<<<<<<< HEAD
-  ASSERT_EQ(-1, OpenArchiveFd(fd, "LeadingNonZipBytes", &handle));
-  close(fd);
-||||||| 3065de2c8
-<<<<<<< HEAD
-  ASSERT_EQ(-1, OpenArchiveFd(fd, "LeadingNonZipBytes", &handle));
-  close(fd);
-||||||| 3065de2c8
-<<<<<<< HEAD
-  ASSERT_EQ(-1, OpenArchiveFd(fd, "LeadingNonZipBytes", &handle));
-  close(fd);
-||||||| 3065de2c8
-<<<<<<< HEAD
@@ -1346,39 +396,0 @@ TEST(ziparchive, BrokenLfhSignature) {
-||||||| 3065de2c8
-  ASSERT_EQ(0, OpenArchiveWrapper(kValidZip, &handle));
-  ZipEntry entry;
-  ASSERT_EQ(0, FindEntry(handle, "a.txt", &entry));
-  ASSERT_EQ(0, ExtractEntryToFile(handle, &entry, fd));
-  uint8_t read_buffer[data_size];
-  ASSERT_EQ(0, lseek64(fd, 0, SEEK_SET));
-  ASSERT_EQ(data_size, TEMP_FAILURE_RETRY(read(fd, read_buffer, data_size)));
-  ASSERT_EQ(0, memcmp(read_buffer, data, data_size));
-  std::vector<uint8_t> uncompressed_data(entry.uncompressed_length);
-  ASSERT_EQ(static_cast<ssize_t>(entry.uncompressed_length),
-            TEMP_FAILURE_RETRY(
-                read(fd, &uncompressed_data[0], entry.uncompressed_length)));
-  ASSERT_EQ(0, memcmp(&uncompressed_data[0], kATxtContents,
-                      sizeof(kATxtContents)));
-  ASSERT_EQ(data_size + static_cast<ssize_t>(sizeof(kATxtContents)),
-            lseek64(fd, 0, SEEK_END));
-  close(fd);
-=======
-  ASSERT_EQ(-1, OpenArchiveFd(tmp_file.fd, "LeadingNonZipBytes", &handle));
->>>>>>> fcf9c96f
-=======
-  ASSERT_EQ(-1, OpenArchiveFd(tmp_file.fd, "LeadingNonZipBytes", &handle));
->>>>>>> fcf9c96f
-=======
-  ASSERT_EQ(-1, OpenArchiveFd(tmp_file.fd, "LeadingNonZipBytes", &handle));
->>>>>>> fcf9c96f
-=======
-  ASSERT_EQ(-1, OpenArchiveFd(tmp_file.fd, "LeadingNonZipBytes", &handle));
->>>>>>> fcf9c96f
-=======
-  ASSERT_EQ(-1, OpenArchiveFd(tmp_file.fd, "LeadingNonZipBytes", &handle));
->>>>>>> fcf9c96f
-=======
-  ASSERT_EQ(-1, OpenArchiveFd(tmp_file.fd, "LeadingNonZipBytes", &handle));
->>>>>>> fcf9c96f
-=======
-  ASSERT_EQ(-1, OpenArchiveFd(tmp_file.fd, "LeadingNonZipBytes", &handle));
->>>>>>> fcf9c96f
