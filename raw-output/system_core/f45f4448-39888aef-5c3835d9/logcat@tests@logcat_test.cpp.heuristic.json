[
  {
    "code": [
      "TEST(logcat, year) {",
      "    FILE *fp;",
      "",
      "    char needle[32];",
      "    time_t now;",
      "    time(&now);",
      "    struct tm *ptm;",
      "#if !defined(_WIN32)",
      "    struct tm tmBuf;",
      "    ptm = localtime_r(&now, &tmBuf);",
      "#else",
      "    ptm = localtime(&&now);",
      "#endif",
      "    strftime(needle, sizeof(needle), \"[ %Y-\", ptm);",
      "",
      "    ASSERT_TRUE(NULL != (fp = popen(",
      "      \"logcat -v long -v year -b all -t 3 2>/dev/null\",",
      "      \"r\")));",
      "",
      "    char buffer[5120];",
      "",
      "    int count = 0;",
      "",
      "    while (fgets(buffer, sizeof(buffer), fp)) {",
      "        if (!strncmp(buffer, needle, strlen(needle))) {",
      "            ++count;",
      "        }",
      "    }",
      "",
      "    pclose(fp);",
      "",
      "    ASSERT_EQ(3, count);",
      "}",
      "TEST(logcat, year) {",
      "",
      "    if (android_log_timestamp() == 'm') {",
      "        fprintf(stderr, \"Skipping test, logd is monotonic time\\n\");",
      "        return;",
      "    }",
      "",
      "    FILE *fp;",
      "",
      "    char needle[32];",
      "    time_t now;",
      "    time(&now);",
      "    struct tm *ptm;",
      "#if !defined(_WIN32)",
      "    struct tm tmBuf;",
      "    ptm = localtime_r(&now, &tmBuf);",
      "#else",
      "    ptm = localtime(&&now);",
      "#endif",
      "    strftime(needle, sizeof(needle), \"[ %Y-\", ptm);",
      "",
      "    ASSERT_TRUE(NULL != (fp = popen(",
      "      \"logcat -v long -v year -b all -t 3 2>/dev/null\",",
      "      \"r\")));",
      "",
      "    char buffer[5120];",
      "",
      "    int count = 0;",
      "",
      "    while (fgets(buffer, sizeof(buffer), fp)) {",
      "        if (!strncmp(buffer, needle, strlen(needle))) {",
      "            ++count;",
      "        }",
      "    }",
      "",
      "    pclose(fp);",
      "",
      "    ASSERT_EQ(3, count);",
      "}",
      "TEST(logcat, tz) {",
      "    FILE *fp;",
      "",
      "    ASSERT_TRUE(NULL != (fp = popen(",
      "      \"logcat -v long -v America/Los_Angeles -b all -t 3 2>/dev/null\",",
      "      \"r\")));",
      "",
      "    char buffer[5120];",
      "",
      "    int count = 0;",
      "",
      "    while (fgets(buffer, sizeof(buffer), fp)) {",
      "        if ((buffer[0] == '[') && (buffer[1] == ' ')",
      "         && isdigit(buffer[2]) && isdigit(buffer[3])",
      "         && (buffer[4] == '-')",
      "         && (strstr(buffer, \" -0700 \") || strstr(buffer, \" -0800 \"))) {",
      "            ++count;",
      "        }",
      "    }",
      "",
      "    pclose(fp);",
      "",
      "    ASSERT_EQ(3, count);",
      "}",
      "TEST(logcat, ntz) {",
      "    FILE *fp;",
      "",
      "    ASSERT_TRUE(NULL != (fp = popen(",
      "      \"logcat -v long -v America/Los_Angeles -v zone -b all -t 3 2>/dev/null\",",
      "      \"r\")));",
      "",
      "    char buffer[5120];",
      "",
      "    int count = 0;",
      "",
      "    while (fgets(buffer, sizeof(buffer), fp)) {",
      "        if ((buffer[0] == '[') && (buffer[1] == ' ')",
      "         && isdigit(buffer[2]) && isdigit(buffer[3])",
      "         && (buffer[4] == '-')",
      "         && (strstr(buffer, \" -0700 \") || strstr(buffer, \" -0800 \"))) {",
      "            ++count;",
      "        }",
      "    }",
      "",
      "    pclose(fp);",
      "",
      "    ASSERT_EQ(0, count);",
      "}",
      "// Return a pointer to each null terminated -v long time field.",
      "char *fgetLongTime(char *buffer, size_t buflen, FILE *fp) {",
      "    while (fgets(buffer, buflen, fp)) {",
      "        char *cp = buffer;",
      "        if (*cp != '[') {",
      "            continue;",
      "        }",
      "        while (*++cp == ' ') {",
      "            ;",
      "        }",
      "        char *ep = cp;",
      "        while (isdigit(*ep)) {",
      "            ++ep;",
      "        }",
      "        if ((*ep != '-') && (*ep != '.')) {",
      "           continue;",
      "        }",
      "        // Find PID field",
      "        while (((ep = strchr(ep, ':'))) && (*++ep != ' ')) {",
      "            ;",
      "        }",
      "        if (!ep) {",
      "            continue;",
      "        }",
      "        ep -= 7;",
      "        *ep = '\\0';",
      "        return cp;",
      "    }",
      "    return NULL;",
      "}",
      "TEST(logcat, tz) {",
      "",
      "    if (android_log_timestamp() == 'm') {",
      "        fprintf(stderr, \"Skipping test, logd is monotonic time\\n\");",
      "        return;",
      "    }",
      "",
      "    FILE *fp;",
      "",
      "    ASSERT_TRUE(NULL != (fp = popen(",
      "      \"logcat -v long -v America/Los_Angeles -b all -t 3 2>/dev/null\",",
      "      \"r\")));",
      "",
      "    char buffer[5120];",
      "",
      "    int count = 0;",
      "",
      "    while (fgetLongTime(buffer, sizeof(buffer), fp)) {",
      "        if (strstr(buffer, \" -0700\") || strstr(buffer, \" -0800\")) {",
      "            ++count;",
      "        }",
      "    }",
      "",
      "    pclose(fp);",
      "",
      "    ASSERT_EQ(3, count);",
      "}",
      "TEST(logcat, ntz) {",
      "    FILE *fp;",
      "",
      "    ASSERT_TRUE(NULL != (fp = popen(",
      "      \"logcat -v long -v America/Los_Angeles -v zone -b all -t 3 2>/dev/null\",",
      "      \"r\")));",
      "",
      "    char buffer[5120];",
      "",
      "    int count = 0;",
      "",
      "    while (fgetLongTime(buffer, sizeof(buffer), fp)) {",
      "        if (strstr(buffer, \" -0700\") || strstr(buffer, \" -0800\")) {",
      "            ++count;",
      "        }",
      "    }",
      "",
      "    pclose(fp);",
      "",
      "    ASSERT_EQ(0, count);",
      "}"
    ],
    "label": "",
    "index": 0,
    "confidence": 0.4,
    "desc": "List merge."
  }
]