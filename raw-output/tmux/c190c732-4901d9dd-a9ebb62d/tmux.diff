diff --git a/output/tmux/c190c732-4901d9dd-a9ebb62d/tmux.no_comments_mergebot.h b/output/tmux/c190c732-4901d9dd-a9ebb62d/tmux.no_comments_truth.h
index 590051f..1013e9a 100644
--- a/output/tmux/c190c732-4901d9dd-a9ebb62d/tmux.no_comments_mergebot.h
+++ b/output/tmux/c190c732-4901d9dd-a9ebb62d/tmux.no_comments_truth.h
@@ -3 +3 @@
-#define PROTOCOL_VERSION 7
+#define PROTOCOL_VERSION 8
@@ -6,6 +5,0 @@
-#include <sys/queue.h>
-#include <bitstring.h>
-#include <getopt.h>
-#include <imsg.h>
-#include <sys/tree.h>
-#include <stdint.h>
@@ -14 +7,0 @@
-#define PROTOCOL_VERSION 8
@@ -27,0 +21,2 @@ extern char **environ;
+#define fatal(msg) log_fatal("%s: %s", __func__, msg);
+#define fatalx(msg) log_fatalx("%s: %s", __func__, msg);
@@ -102,3 +97,50 @@ KEYC_BSPACE,
-KEYC_F1,KEYC_F2,KEYC_F3,KEYC_F4,KEYC_F5,KEYC_F6,KEYC_F7,KEYC_F8,KEYC_F9,KEYC_F10,KEYC_F11,KEYC_F12,KEYC_F13,KEYC_F14,KEYC_F15,KEYC_F16,KEYC_F17,KEYC_F18,KEYC_F19,KEYC_F20,KEYC_IC,KEYC_DC,KEYC_HOME,KEYC_END,KEYC_NPAGE,KEYC_PPAGE,KEYC_BTAB,
-KEYC_UP,KEYC_DOWN,KEYC_LEFT,KEYC_RIGHT,
-KEYC_KP_SLASH,KEYC_KP_STAR,KEYC_KP_MINUS,KEYC_KP_SEVEN,KEYC_KP_EIGHT,KEYC_KP_NINE,KEYC_KP_PLUS,KEYC_KP_FOUR,KEYC_KP_FIVE,KEYC_KP_SIX,KEYC_KP_ONE,KEYC_KP_TWO,KEYC_KP_THREE,KEYC_KP_ENTER,KEYC_KP_ZERO,KEYC_KP_PERIOD,KEYC_FOCUS_IN,KEYC_FOCUS_OUT,};
+ KEYC_F1,
+ KEYC_F2,
+ KEYC_F3,
+ KEYC_F4,
+ KEYC_F5,
+ KEYC_F6,
+ KEYC_F7,
+ KEYC_F8,
+ KEYC_F9,
+ KEYC_F10,
+ KEYC_F11,
+ KEYC_F12,
+ KEYC_F13,
+ KEYC_F14,
+ KEYC_F15,
+ KEYC_F16,
+ KEYC_F17,
+ KEYC_F18,
+ KEYC_F19,
+ KEYC_F20,
+ KEYC_IC,
+ KEYC_DC,
+ KEYC_HOME,
+ KEYC_END,
+ KEYC_NPAGE,
+ KEYC_PPAGE,
+ KEYC_BTAB,
+ KEYC_UP,
+ KEYC_DOWN,
+ KEYC_LEFT,
+ KEYC_RIGHT,
+ KEYC_KP_SLASH,
+ KEYC_KP_STAR,
+ KEYC_KP_MINUS,
+ KEYC_KP_SEVEN,
+ KEYC_KP_EIGHT,
+ KEYC_KP_NINE,
+ KEYC_KP_PLUS,
+ KEYC_KP_FOUR,
+ KEYC_KP_FIVE,
+ KEYC_KP_SIX,
+ KEYC_KP_ONE,
+ KEYC_KP_TWO,
+ KEYC_KP_THREE,
+ KEYC_KP_ENTER,
+ KEYC_KP_ZERO,
+ KEYC_KP_PERIOD,
+ KEYC_FOCUS_IN,
+ KEYC_FOCUS_OUT,
+};
@@ -106 +148,2 @@ enum tty_code_code {
-TTYC_AX = 0,TTYC_ACSC,
+ TTYC_AX = 0,
+ TTYC_ACSC,
@@ -131 +174,2 @@ TTYC_DL1,
-TTYC_E3,TTYC_ECH,
+ TTYC_E3,
+ TTYC_ECH,
@@ -151,3 +195,21 @@ TTYC_KCUU1,
-TTYC_KDC2,TTYC_KDC3,TTYC_KDC4,TTYC_KDC5,TTYC_KDC6,TTYC_KDC7,TTYC_KDCH1,
-TTYC_KDN2,TTYC_KDN3,TTYC_KDN4,TTYC_KDN5,TTYC_KDN6,TTYC_KDN7,TTYC_KEND,
-TTYC_KEND2,TTYC_KEND3,TTYC_KEND4,TTYC_KEND5,TTYC_KEND6,TTYC_KEND7,TTYC_KF1,
+ TTYC_KDC2,
+ TTYC_KDC3,
+ TTYC_KDC4,
+ TTYC_KDC5,
+ TTYC_KDC6,
+ TTYC_KDC7,
+ TTYC_KDCH1,
+ TTYC_KDN2,
+ TTYC_KDN3,
+ TTYC_KDN4,
+ TTYC_KDN5,
+ TTYC_KDN6,
+ TTYC_KDN7,
+ TTYC_KEND,
+ TTYC_KEND2,
+ TTYC_KEND3,
+ TTYC_KEND4,
+ TTYC_KEND5,
+ TTYC_KEND6,
+ TTYC_KEND7,
+ TTYC_KF1,
@@ -173,3 +235,21 @@ TTYC_KF9,
-TTYC_KHOM2,TTYC_KHOM3,TTYC_KHOM4,TTYC_KHOM5,TTYC_KHOM6,TTYC_KHOM7,TTYC_KHOME,
-TTYC_KIC2,TTYC_KIC3,TTYC_KIC4,TTYC_KIC5,TTYC_KIC6,TTYC_KIC7,TTYC_KICH1,
-TTYC_KLFT2,TTYC_KLFT3,TTYC_KLFT4,TTYC_KLFT5,TTYC_KLFT6,TTYC_KLFT7,TTYC_KMOUS,
+ TTYC_KHOM2,
+ TTYC_KHOM3,
+ TTYC_KHOM4,
+ TTYC_KHOM5,
+ TTYC_KHOM6,
+ TTYC_KHOM7,
+ TTYC_KHOME,
+ TTYC_KIC2,
+ TTYC_KIC3,
+ TTYC_KIC4,
+ TTYC_KIC5,
+ TTYC_KIC6,
+ TTYC_KIC7,
+ TTYC_KICH1,
+ TTYC_KLFT2,
+ TTYC_KLFT3,
+ TTYC_KLFT4,
+ TTYC_KLFT5,
+ TTYC_KLFT6,
+ TTYC_KLFT7,
+ TTYC_KMOUS,
@@ -177,2 +257,26 @@ TTYC_KNP,
-TTYC_KNXT2,TTYC_KNXT3,TTYC_KNXT4,TTYC_KNXT5,TTYC_KNXT6,TTYC_KNXT7,TTYC_KPP,
-TTYC_KPRV2,TTYC_KPRV3,TTYC_KPRV4,TTYC_KPRV5,TTYC_KPRV6,TTYC_KPRV7,TTYC_KRIT2,TTYC_KRIT3,TTYC_KRIT4,TTYC_KRIT5,TTYC_KRIT6,TTYC_KRIT7,TTYC_KUP2,TTYC_KUP3,TTYC_KUP4,TTYC_KUP5,TTYC_KUP6,TTYC_KUP7,TTYC_MS,
+ TTYC_KNXT2,
+ TTYC_KNXT3,
+ TTYC_KNXT4,
+ TTYC_KNXT5,
+ TTYC_KNXT6,
+ TTYC_KNXT7,
+ TTYC_KPP,
+ TTYC_KPRV2,
+ TTYC_KPRV3,
+ TTYC_KPRV4,
+ TTYC_KPRV5,
+ TTYC_KPRV6,
+ TTYC_KPRV7,
+ TTYC_KRIT2,
+ TTYC_KRIT3,
+ TTYC_KRIT4,
+ TTYC_KRIT5,
+ TTYC_KRIT6,
+ TTYC_KRIT7,
+ TTYC_KUP2,
+ TTYC_KUP3,
+ TTYC_KUP4,
+ TTYC_KUP5,
+ TTYC_KUP6,
+ TTYC_KUP7,
+ TTYC_MS,
@@ -203 +307,5 @@ enum tty_code_type {
-TTYCODE_NONE = 0,TTYCODE_STRING,TTYCODE_NUMBER,TTYCODE_FLAG,};
+ TTYCODE_NONE = 0,
+ TTYCODE_STRING,
+ TTYCODE_NUMBER,
+ TTYCODE_FLAG,
+};
@@ -216,0 +325 @@ struct tty_term_code_entry {
+ARRAY_DECL(causelist, char *);
@@ -218 +327,26 @@ enum msgtype {
-MSG_VERSION = 12,MSG_IDENTIFY_FLAGS = 100,MSG_IDENTIFY_TERM,MSG_IDENTIFY_TTYNAME,MSG_IDENTIFY_CWD,MSG_IDENTIFY_STDIN,MSG_IDENTIFY_ENVIRON,MSG_IDENTIFY_DONE,MSG_COMMAND = 200,MSG_DETACH,MSG_DETACHKILL,MSG_EXIT,MSG_EXITED,MSG_EXITING,MSG_LOCK,MSG_READY,MSG_RESIZE,MSG_SHELL,MSG_SHUTDOWN,MSG_STDERR,MSG_STDIN,MSG_STDOUT,MSG_SUSPEND,MSG_UNLOCK,MSG_WAKEUP,};
+ MSG_VERSION = 12,
+ MSG_IDENTIFY_FLAGS = 100,
+ MSG_IDENTIFY_TERM,
+ MSG_IDENTIFY_TTYNAME,
+ MSG_IDENTIFY_CWD,
+ MSG_IDENTIFY_STDIN,
+ MSG_IDENTIFY_ENVIRON,
+ MSG_IDENTIFY_DONE,
+ MSG_COMMAND = 200,
+ MSG_DETACH,
+ MSG_DETACHKILL,
+ MSG_EXIT,
+ MSG_EXITED,
+ MSG_EXITING,
+ MSG_LOCK,
+ MSG_READY,
+ MSG_RESIZE,
+ MSG_SHELL,
+ MSG_SHUTDOWN,
+ MSG_STDERR,
+ MSG_STDIN,
+ MSG_STDOUT,
+ MSG_SUSPEND,
+ MSG_UNLOCK,
+ MSG_WAKEUP,
+};
@@ -235,4 +369,92 @@ enum mode_key_cmd {
-MODEKEY_NONE,MODEKEY_OTHER,
-MODEKEYEDIT_BACKSPACE,MODEKEYEDIT_CANCEL,MODEKEYEDIT_COMPLETE,MODEKEYEDIT_CURSORLEFT,MODEKEYEDIT_CURSORRIGHT,MODEKEYEDIT_DELETE,MODEKEYEDIT_DELETELINE,MODEKEYEDIT_DELETETOENDOFLINE,MODEKEYEDIT_DELETEWORD,MODEKEYEDIT_ENDOFLINE,MODEKEYEDIT_ENTER,MODEKEYEDIT_HISTORYDOWN,MODEKEYEDIT_HISTORYUP,MODEKEYEDIT_NEXTSPACE,MODEKEYEDIT_NEXTSPACEEND,MODEKEYEDIT_NEXTWORD,MODEKEYEDIT_NEXTWORDEND,MODEKEYEDIT_PASTE,MODEKEYEDIT_PREVIOUSSPACE,MODEKEYEDIT_PREVIOUSWORD,MODEKEYEDIT_STARTOFLINE,MODEKEYEDIT_SWITCHMODE,MODEKEYEDIT_SWITCHMODEAPPEND,MODEKEYEDIT_SWITCHMODEAPPENDLINE,MODEKEYEDIT_SWITCHMODEBEGINLINE,MODEKEYEDIT_SWITCHMODECHANGELINE,MODEKEYEDIT_SWITCHMODESUBSTITUTE,MODEKEYEDIT_SWITCHMODESUBSTITUTELINE,MODEKEYEDIT_TRANSPOSECHARS,
-MODEKEYCHOICE_BACKSPACE,MODEKEYCHOICE_CANCEL,MODEKEYCHOICE_CHOOSE,MODEKEYCHOICE_DOWN,MODEKEYCHOICE_PAGEDOWN,MODEKEYCHOICE_PAGEUP,MODEKEYCHOICE_SCROLLDOWN,MODEKEYCHOICE_SCROLLUP,MODEKEYCHOICE_STARTNUMBERPREFIX,MODEKEYCHOICE_TREE_COLLAPSE,MODEKEYCHOICE_TREE_COLLAPSE_ALL,MODEKEYCHOICE_TREE_EXPAND,MODEKEYCHOICE_TREE_EXPAND_ALL,MODEKEYCHOICE_TREE_TOGGLE,MODEKEYCHOICE_UP,
-MODEKEYCOPY_BACKTOINDENTATION,MODEKEYCOPY_BOTTOMLINE,MODEKEYCOPY_CANCEL,MODEKEYCOPY_CLEARSELECTION,MODEKEYCOPY_COPYPIPE,MODEKEYCOPY_COPYLINE,MODEKEYCOPY_COPYENDOFLINE,MODEKEYCOPY_COPYSELECTION,MODEKEYCOPY_DOWN,MODEKEYCOPY_ENDOFLINE,MODEKEYCOPY_GOTOLINE,MODEKEYCOPY_HALFPAGEDOWN,MODEKEYCOPY_HALFPAGEUP,MODEKEYCOPY_HISTORYBOTTOM,MODEKEYCOPY_HISTORYTOP,MODEKEYCOPY_JUMP,MODEKEYCOPY_JUMPAGAIN,MODEKEYCOPY_JUMPREVERSE,MODEKEYCOPY_JUMPBACK,MODEKEYCOPY_JUMPTO,MODEKEYCOPY_JUMPTOBACK,MODEKEYCOPY_LEFT,MODEKEYCOPY_MIDDLELINE,MODEKEYCOPY_NEXTPAGE,MODEKEYCOPY_NEXTSPACE,MODEKEYCOPY_NEXTSPACEEND,MODEKEYCOPY_NEXTWORD,MODEKEYCOPY_NEXTWORDEND,MODEKEYCOPY_PREVIOUSPAGE,MODEKEYCOPY_PREVIOUSSPACE,MODEKEYCOPY_PREVIOUSWORD,MODEKEYCOPY_RECTANGLETOGGLE,MODEKEYCOPY_RIGHT,MODEKEYCOPY_SCROLLDOWN,MODEKEYCOPY_SCROLLUP,MODEKEYCOPY_SEARCHAGAIN,MODEKEYCOPY_SEARCHDOWN,MODEKEYCOPY_SEARCHREVERSE,MODEKEYCOPY_SEARCHUP,MODEKEYCOPY_SELECTLINE,MODEKEYCOPY_STARTNUMBERPREFIX,MODEKEYCOPY_STARTOFLINE,MODEKEYCOPY_STARTSELECTION,MODEKEYCOPY_TOPLINE,MODEKEYCOPY_UP,};
+ MODEKEY_NONE,
+ MODEKEY_OTHER,
+ MODEKEYEDIT_BACKSPACE,
+ MODEKEYEDIT_CANCEL,
+ MODEKEYEDIT_COMPLETE,
+ MODEKEYEDIT_CURSORLEFT,
+ MODEKEYEDIT_CURSORRIGHT,
+ MODEKEYEDIT_DELETE,
+ MODEKEYEDIT_DELETELINE,
+ MODEKEYEDIT_DELETETOENDOFLINE,
+ MODEKEYEDIT_DELETEWORD,
+ MODEKEYEDIT_ENDOFLINE,
+ MODEKEYEDIT_ENTER,
+ MODEKEYEDIT_HISTORYDOWN,
+ MODEKEYEDIT_HISTORYUP,
+ MODEKEYEDIT_NEXTSPACE,
+ MODEKEYEDIT_NEXTSPACEEND,
+ MODEKEYEDIT_NEXTWORD,
+ MODEKEYEDIT_NEXTWORDEND,
+ MODEKEYEDIT_PASTE,
+ MODEKEYEDIT_PREVIOUSSPACE,
+ MODEKEYEDIT_PREVIOUSWORD,
+ MODEKEYEDIT_STARTOFLINE,
+ MODEKEYEDIT_SWITCHMODE,
+ MODEKEYEDIT_SWITCHMODEAPPEND,
+ MODEKEYEDIT_SWITCHMODEAPPENDLINE,
+ MODEKEYEDIT_SWITCHMODEBEGINLINE,
+ MODEKEYEDIT_SWITCHMODECHANGELINE,
+ MODEKEYEDIT_SWITCHMODESUBSTITUTE,
+ MODEKEYEDIT_SWITCHMODESUBSTITUTELINE,
+ MODEKEYEDIT_TRANSPOSECHARS,
+ MODEKEYCHOICE_BACKSPACE,
+ MODEKEYCHOICE_CANCEL,
+ MODEKEYCHOICE_CHOOSE,
+ MODEKEYCHOICE_DOWN,
+ MODEKEYCHOICE_PAGEDOWN,
+ MODEKEYCHOICE_PAGEUP,
+ MODEKEYCHOICE_SCROLLDOWN,
+ MODEKEYCHOICE_SCROLLUP,
+ MODEKEYCHOICE_STARTNUMBERPREFIX,
+ MODEKEYCHOICE_TREE_COLLAPSE,
+ MODEKEYCHOICE_TREE_COLLAPSE_ALL,
+ MODEKEYCHOICE_TREE_EXPAND,
+ MODEKEYCHOICE_TREE_EXPAND_ALL,
+ MODEKEYCHOICE_TREE_TOGGLE,
+ MODEKEYCHOICE_UP,
+ MODEKEYCOPY_BACKTOINDENTATION,
+ MODEKEYCOPY_BOTTOMLINE,
+ MODEKEYCOPY_CANCEL,
+ MODEKEYCOPY_CLEARSELECTION,
+ MODEKEYCOPY_COPYPIPE,
+ MODEKEYCOPY_COPYLINE,
+ MODEKEYCOPY_COPYENDOFLINE,
+ MODEKEYCOPY_COPYSELECTION,
+ MODEKEYCOPY_DOWN,
+ MODEKEYCOPY_ENDOFLINE,
+ MODEKEYCOPY_GOTOLINE,
+ MODEKEYCOPY_HALFPAGEDOWN,
+ MODEKEYCOPY_HALFPAGEUP,
+ MODEKEYCOPY_HISTORYBOTTOM,
+ MODEKEYCOPY_HISTORYTOP,
+ MODEKEYCOPY_JUMP,
+ MODEKEYCOPY_JUMPAGAIN,
+ MODEKEYCOPY_JUMPREVERSE,
+ MODEKEYCOPY_JUMPBACK,
+ MODEKEYCOPY_JUMPTO,
+ MODEKEYCOPY_JUMPTOBACK,
+ MODEKEYCOPY_LEFT,
+ MODEKEYCOPY_MIDDLELINE,
+ MODEKEYCOPY_NEXTPAGE,
+ MODEKEYCOPY_NEXTSPACE,
+ MODEKEYCOPY_NEXTSPACEEND,
+ MODEKEYCOPY_NEXTWORD,
+ MODEKEYCOPY_NEXTWORDEND,
+ MODEKEYCOPY_PREVIOUSPAGE,
+ MODEKEYCOPY_PREVIOUSSPACE,
+ MODEKEYCOPY_PREVIOUSWORD,
+ MODEKEYCOPY_RECTANGLETOGGLE,
+ MODEKEYCOPY_RIGHT,
+ MODEKEYCOPY_SCROLLDOWN,
+ MODEKEYCOPY_SCROLLUP,
+ MODEKEYCOPY_SEARCHAGAIN,
+ MODEKEYCOPY_SEARCHDOWN,
+ MODEKEYCOPY_SEARCHREVERSE,
+ MODEKEYCOPY_SEARCHUP,
+ MODEKEYCOPY_SELECTLINE,
+ MODEKEYCOPY_STARTNUMBERPREFIX,
+ MODEKEYCOPY_STARTOFLINE,
+ MODEKEYCOPY_STARTSELECTION,
+ MODEKEYCOPY_TOPLINE,
+ MODEKEYCOPY_UP,
+};
@@ -256,0 +479 @@ struct mode_key_binding {
+RB_HEAD(mode_key_tree, mode_key_binding);
@@ -285,0 +509,8 @@ struct utf8_data {
+#if defined(DEBUG) && \
+    ((defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L) || \
+     (defined(__GNUC__) && __GNUC__ >= 3))
+#define GRID_DEBUG(gd,fmt,...) log_debug2("%s: (sx=%u, sy=%u, hsize=%u) " \
+    fmt, __func__, (gd)->sx, (gd)->sy, (gd)->hsize, ## __VA_ARGS__)
+#else
+#define GRID_DEBUG(...) 
+#endif
@@ -298,9 +529,7 @@ struct utf8_data {
-struct grid_line {
- u_int cellsize;
- struct grid_cell *celldata;
- int flags;
-} __packed;
-struct grid_line {
- u_int cellsize;
- struct grid_cell *celldata;
- int flags;
+struct grid_cell {
+ u_char attr;
+ u_char flags;
+ u_char fg;
+ u_char bg;
+ u_char xstate;
+ u_char xdata[UTF8_SIZE];
@@ -347,0 +577 @@ struct job {
+LIST_HEAD(joblist, job);
@@ -373,0 +604,4 @@ struct screen_write_ctx {
+#define screen_size_x(s) ((s)->grid->sx)
+#define screen_size_y(s) ((s)->grid->sy)
+#define screen_hsize(s) ((s)->grid->hsize)
+#define screen_hlimit(s) ((s)->grid->hlimit)
@@ -467,4 +701,2 @@ struct window_pane {
-                       RB_ENTRY(window_pane)
-                       tree_entry;
-                       RB_ENTRY(window_pane)
-                       RB_ENTRY(window_pane)
+ TAILQ_ENTRY(window_pane) entry;
+ RB_ENTRY(window_pane) tree_entry;
@@ -471,0 +704,2 @@ struct window_pane {
+TAILQ_HEAD(window_panes, window_pane);
+RB_HEAD(window_pane_tree, window_pane);
@@ -494,0 +729 @@ struct window {
+ARRAY_DECL(windows, struct window *);
@@ -510,0 +746,2 @@ struct winlink {
+RB_HEAD(winlinks, winlink);
+TAILQ_HEAD(winlink_stack, winlink);
@@ -512 +749,3 @@ enum layout_type {
-LAYOUT_LEFTRIGHT,LAYOUT_TOPBOTTOM, LAYOUT_WINDOWPANE
+ LAYOUT_LEFTRIGHT,
+ LAYOUT_TOPBOTTOM,
+ LAYOUT_WINDOWPANE
@@ -513,0 +753 @@ LAYOUT_LEFTRIGHT,LAYOUT_TOPBOTTOM, LAYOUT_WINDOWPANE
+TAILQ_HEAD(layout_cells, layout_cell);
@@ -528,0 +769 @@ struct paste_buffer {
+ARRAY_DECL(paste_stack, struct paste_buffer *);
@@ -533,0 +775 @@ struct environ_entry {
+RB_HEAD(environ, environ_entry);
@@ -537,0 +780 @@ TAILQ_ENTRY(session_group) entry;
+TAILQ_HEAD(session_groups, session_group);
@@ -556,2 +799 @@ struct session {
- RB_ENTRY(session) entry;
- RB_ENTRY(session) entry;
+ TAILQ_ENTRY(session) gentry;
@@ -559,0 +802,2 @@ struct session {
+RB_HEAD(sessions, session);
+ARRAY_DECL(sessionslist, struct session *);
@@ -570 +814 @@ struct tty_term {
- LIST_ENTRY(tty_term) entry;
+ char acs[UCHAR_MAX + 1][2];
@@ -576,0 +821 @@ struct tty_term {
+LIST_HEAD(tty_terms, tty_term);
@@ -657,0 +903 @@ struct status_out {
+RB_HEAD(status_out_tree, status_out);
@@ -721,0 +968 @@ ARRAY_DECL(, struct message_entry) message_log;
+ARRAY_DECL(clients, struct client *);
@@ -726,0 +974 @@ struct args_entry {
+RB_HEAD(args_tree, args_entry);
@@ -743,0 +992 @@ struct cmd_list {
+};
@@ -745 +994,4 @@ enum cmd_retval {
-CMD_RETURN_ERROR = -1,CMD_RETURN_NORMAL = 0,CMD_RETURN_WAIT, CMD_RETURN_STOP
+ CMD_RETURN_ERROR = -1,
+ CMD_RETURN_NORMAL = 0,
+ CMD_RETURN_WAIT,
+ CMD_RETURN_STOP
@@ -750,0 +1003 @@ struct cmd_q_item {
+TAILQ_HEAD(cmd_q_items, cmd_q_item);
@@ -783,3 +1036 @@ struct key_binding {
-                       entry;
-                       entry;
-                       entry;
+ RB_ENTRY(key_binding) entry;
@@ -786,0 +1038 @@ struct key_binding {
+RB_HEAD(key_bindings, key_binding);
@@ -788 +1040,7 @@ enum options_table_type {
-OPTIONS_TABLE_STRING,OPTIONS_TABLE_NUMBER,OPTIONS_TABLE_KEY,OPTIONS_TABLE_COLOUR,OPTIONS_TABLE_ATTRIBUTES,OPTIONS_TABLE_FLAG, OPTIONS_TABLE_CHOICE
+ OPTIONS_TABLE_STRING,
+ OPTIONS_TABLE_NUMBER,
+ OPTIONS_TABLE_KEY,
+ OPTIONS_TABLE_COLOUR,
+ OPTIONS_TABLE_ATTRIBUTES,
+ OPTIONS_TABLE_FLAG,
+ OPTIONS_TABLE_CHOICE
@@ -803,0 +1062 @@ struct format_entry {
+RB_HEAD(format_tree, format_entry);
@@ -838,0 +1098 @@ int format_cmp(struct format_entry *, struct format_entry *);
+RB_PROTOTYPE(format_tree, format_entry, entry, format_cmp);
@@ -861,0 +1122 @@ int mode_key_cmp(struct mode_key_binding *, struct mode_key_binding *);
+RB_PROTOTYPE(mode_key_tree, mode_key_binding, entry, mode_key_cmp);
@@ -881,0 +1143 @@ int options_cmp(struct options_entry *, struct options_entry *);
+RB_PROTOTYPE(options_tree, options_entry, entry, options_cmp);
@@ -907,0 +1170 @@ int environ_cmp(struct environ_entry *, struct environ_entry *);
+RB_PROTOTYPE(environ, environ_entry, entry, environ_cmp);
@@ -1000,0 +1264 @@ int args_cmp(struct args_entry *, struct args_entry *);
+RB_PROTOTYPE(args_tree, args_entry, entry, args_cmp);
@@ -1027,88 +1291 @@ char *cmd_template_replace(const char *, const char *, int);
-const struct cmd_entry *cmd_table[] = {
- &cmd_attach_session_entry,
- &cmd_bind_key_entry,
- &cmd_break_pane_entry,
- &cmd_capture_pane_entry,
- &cmd_choose_buffer_entry,
- &cmd_choose_client_entry,
- &cmd_choose_list_entry,
- &cmd_choose_session_entry,
- &cmd_choose_tree_entry,
- &cmd_choose_window_entry,
- &cmd_clear_history_entry,
- &cmd_clock_mode_entry,
- &cmd_command_prompt_entry,
- &cmd_confirm_before_entry,
- &cmd_copy_mode_entry,
- &cmd_delete_buffer_entry,
- &cmd_detach_client_entry,
- &cmd_display_message_entry,
- &cmd_display_panes_entry,
- &cmd_find_window_entry,
- &cmd_has_session_entry,
- &cmd_if_shell_entry,
- &cmd_join_pane_entry,
- &cmd_kill_pane_entry,
- &cmd_kill_server_entry,
- &cmd_kill_session_entry,
- &cmd_kill_window_entry,
- &cmd_last_pane_entry,
- &cmd_last_window_entry,
- &cmd_link_window_entry,
- &cmd_list_buffers_entry,
- &cmd_list_clients_entry,
- &cmd_list_commands_entry,
- &cmd_list_keys_entry,
- &cmd_list_panes_entry,
- &cmd_list_sessions_entry,
- &cmd_list_windows_entry,
- &cmd_load_buffer_entry,
- &cmd_lock_client_entry,
- &cmd_lock_server_entry,
- &cmd_lock_session_entry,
- &cmd_move_pane_entry,
- &cmd_move_window_entry,
- &cmd_new_session_entry,
- &cmd_new_window_entry,
- &cmd_next_layout_entry,
- &cmd_next_window_entry,
- &cmd_paste_buffer_entry,
- &cmd_pipe_pane_entry,
- &cmd_previous_layout_entry,
- &cmd_previous_window_entry,
- &cmd_refresh_client_entry,
- &cmd_rename_session_entry,
- &cmd_rename_window_entry,
- &cmd_resize_pane_entry,
- &cmd_respawn_pane_entry,
- &cmd_respawn_window_entry,
- &cmd_rotate_window_entry,
- &cmd_run_shell_entry,
- &cmd_save_buffer_entry,
- &cmd_select_layout_entry,
- &cmd_select_pane_entry,
- &cmd_select_window_entry,
- &cmd_send_keys_entry,
- &cmd_send_prefix_entry,
- &cmd_server_info_entry,
- &cmd_set_buffer_entry,
- &cmd_set_environment_entry,
- &cmd_set_option_entry,
- &cmd_set_window_option_entry,
- &cmd_show_buffer_entry,
- &cmd_show_environment_entry,
- &cmd_show_messages_entry,
- &cmd_show_options_entry,
- &cmd_show_window_options_entry,
- &cmd_source_file_entry,
- &cmd_split_window_entry,
- &cmd_start_server_entry,
- &cmd_suspend_client_entry,
- &cmd_swap_pane_entry,
- &cmd_swap_window_entry,
- &cmd_switch_client_entry,
- &cmd_unbind_key_entry,
- &cmd_unlink_window_entry,
- &cmd_wait_for_entry,
- NULL
-};
+extern const struct cmd_entry *cmd_table[];
@@ -1175,9 +1352 @@ extern const struct cmd_entry cmd_run_shell_entry;
-const struct cmd_entry cmd_save_buffer_entry = {
- "save-buffer", "saveb",
- "ab:", 1, 1,
- "[-a] " CMD_BUFFER_USAGE " path",
- 0,
- NULL,
- NULL,
- cmd_save_buffer_exec
-};
+extern const struct cmd_entry cmd_save_buffer_entry;
@@ -1194,9 +1363 @@ extern const struct cmd_entry cmd_set_window_option_entry;
-const struct cmd_entry cmd_show_buffer_entry = {
- "show-buffer", "showb",
- "b:", 0, 0,
- CMD_BUFFER_USAGE,
- 0,
- NULL,
- NULL,
- cmd_save_buffer_exec
-};
+extern const struct cmd_entry cmd_show_buffer_entry;
@@ -1208,9 +1369 @@ extern const struct cmd_entry cmd_source_file_entry;
-const struct cmd_entry cmd_split_window_entry = {
- "split-window", "splitw",
- "c:dF:l:hp:Pt:v", 0, 1,
- "[-dhvP] [-c start-directory] [-F format] [-p percentage|-l size] "
- CMD_TARGET_PANE_USAGE " [command]",
- 0,
- cmd_split_window_key_binding,
- cmd_split_window_exec
-};
+extern const struct cmd_entry cmd_split_window_entry;
@@ -1245,0 +1399 @@ int key_bindings_cmp(struct key_binding *, struct key_binding *);
+RB_PROTOTYPE(key_bindings, key_binding, entry, key_bindings_cmp);
@@ -1303,0 +1458 @@ int status_out_cmp(struct status_out *, struct status_out *);
+RB_PROTOTYPE(status_out_tree, status_out, entry, status_out_cmp);
@@ -1443,0 +1599 @@ int winlink_cmp(struct winlink *, struct winlink *);
+RB_PROTOTYPE(winlinks, winlink, entry, winlink_cmp);
@@ -1444,0 +1601 @@ int window_pane_cmp(struct window_pane *, struct window_pane *);
+RB_PROTOTYPE(window_pane_tree, window_pane, tree_entry, window_pane_cmp);
@@ -1600,0 +1758 @@ int session_cmp(struct session *, struct session *);
+RB_PROTOTYPE(sessions, session, entry, session_cmp);
@@ -1636,3 +1794 @@ u_int utf8_split2(u_int, u_char *);
-char *osdep_get_name(int, char *);
-char *osdep_get_cwd(int);
-struct event_base *osdep_event_init(void);
+char *get_proc_name(int, char *);
