[
  {
    "desc": "Single side deletion.",
    "confidence": 0.7,
    "index": 0,
    "label": "",
    "code": []
  },
  {
    "code": [
      "/* Get width of Unicode character. */",
      "static int",
      "utf8_width(wchar_t wc)",
      "{",
      "\tint\twidth;",
      "",
      "\twidth = wcwidth(wc);",
      "\tif (width < 0 || width > 0xff)",
      "\t\treturn (-1);",
      "\treturn (width);",
      "}",
      "",
      "/* Combine UTF-8 into Unicode. */",
      "enum utf8_state",
      "utf8_combine(const struct utf8_data *ud, wchar_t *wc)",
      "{",
      "\tswitch (mbtowc(wc, ud->data, ud->size)) {",
      "\tcase -1:",
      "\t\tmbtowc(NULL, NULL, MB_CUR_MAX);",
      "\t\treturn (UTF8_ERROR);",
      "\tcase 0:",
      "\t\treturn (UTF8_ERROR);",
      "\tdefault:",
      "\t\treturn (UTF8_DONE);",
      "\t}",
      "}",
      "",
      "/* Split Unicode into UTF-8. */",
      "enum utf8_state",
      "utf8_split(wchar_t wc, struct utf8_data *ud)",
      "{",
      "\tchar\ts[MB_LEN_MAX];",
      "\tint\tslen;",
      "",
      "\tslen = wctomb(s, wc);",
      "\tif (slen <= 0 || slen > (int)sizeof ud->data)",
      "\t\treturn (UTF8_ERROR);",
      "",
      "\tmemcpy(ud->data, s, slen);",
      "\tud->size = slen;",
      "",
      "\tud->width = utf8_width(wc);",
      "\treturn (UTF8_DONE);"
    ],
    "label": "",
    "index": 2,
    "confidence": 0.7,
    "desc": "Added code or method extraction, accept our side."
  }
]