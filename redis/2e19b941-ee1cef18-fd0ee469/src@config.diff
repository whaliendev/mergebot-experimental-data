diff --git a/home/whalien/codebase/cpp/mergebot/eva/output/redis/2e19b941-ee1cef18-fd0ee469/src@config.no_comments_mergebot.c b/home/whalien/codebase/cpp/mergebot/eva/output/redis/2e19b941-ee1cef18-fd0ee469/src@config.no_comments_merged.c
index 5d9528e..e73b500 100644
--- a/home/whalien/codebase/cpp/mergebot/eva/output/redis/2e19b941-ee1cef18-fd0ee469/src@config.no_comments_mergebot.c
+++ b/home/whalien/codebase/cpp/mergebot/eva/output/redis/2e19b941-ee1cef18-fd0ee469/src@config.no_comments_merged.c
@@ -18 +18,2 @@ configEnum maxmemory_policy_enum[] = {
-    {NULL, 0}};
+    {NULL, 0}
+};
@@ -20,6 +21,13 @@ configEnum syslog_facility_enum[] = {
-    {"user", LOG_USER}, {"local0", LOG_LOCAL0},
-    {"local1", LOG_LOCAL1}, {"local2", LOG_LOCAL2},
-    {"local3", LOG_LOCAL3}, {"local4", LOG_LOCAL4},
-    {"local5", LOG_LOCAL5}, {"local6", LOG_LOCAL6},
-    {"local7", LOG_LOCAL7}, {NULL, 0}};
-configEnum loglevel_enum[] = {{"debug", LL_DEBUG},
+    {"user", LOG_USER},
+    {"local0", LOG_LOCAL0},
+    {"local1", LOG_LOCAL1},
+    {"local2", LOG_LOCAL2},
+    {"local3", LOG_LOCAL3},
+    {"local4", LOG_LOCAL4},
+    {"local5", LOG_LOCAL5},
+    {"local6", LOG_LOCAL6},
+    {"local7", LOG_LOCAL7},
+    {NULL, 0}
+};
+configEnum loglevel_enum[] = {
+    {"debug", LL_DEBUG},
@@ -29,2 +37,4 @@ configEnum loglevel_enum[] = {{"debug", LL_DEBUG},
-                              {NULL, 0}};
-configEnum supervised_mode_enum[] = {{"upstart", SUPERVISED_UPSTART},
+    {NULL,0}
+};
+configEnum supervised_mode_enum[] = {
+    {"upstart", SUPERVISED_UPSTART},
@@ -34,2 +44,4 @@ configEnum supervised_mode_enum[] = {{"upstart", SUPERVISED_UPSTART},
-                                     {NULL, 0}};
-configEnum aof_fsync_enum[] = {{"everysec", AOF_FSYNC_EVERYSEC},
+    {NULL, 0}
+};
+configEnum aof_fsync_enum[] = {
+    {"everysec", AOF_FSYNC_EVERYSEC},
@@ -38 +50,2 @@ configEnum aof_fsync_enum[] = {{"everysec", AOF_FSYNC_EVERYSEC},
-                               {NULL, 0}};
+    {NULL, 0}
+};
@@ -43 +56,2 @@ configEnum repl_diskless_load_enum[] = {
-    {NULL, 0}};
+    {NULL, 0}
+};
@@ -59,12 +73,6 @@ configYesNo configs_yesno[] = {
-    {"io-threads-do-reads", NULL, &server.io_threads_do_reads, 0,
-     CONFIG_DEFAULT_IO_THREADS_DO_READS},
-    {"always-show-logo", NULL, &server.always_show_logo, 0,
-     CONFIG_DEFAULT_ALWAYS_SHOW_LOGO},
-    {"protected-mode", NULL, &server.protected_mode, 1,
-     CONFIG_DEFAULT_PROTECTED_MODE},
-    {"rdbcompression", NULL, &server.rdb_compression, 1,
-     CONFIG_DEFAULT_RDB_COMPRESSION},
-    {"activerehashing", NULL, &server.activerehashing, 1,
-     CONFIG_DEFAULT_ACTIVE_REHASHING},
-    {"stop-writes-on-bgsave-error", NULL, &server.stop_writes_on_bgsave_err, 1,
-     CONFIG_DEFAULT_STOP_WRITES_ON_BGSAVE_ERROR},
+    {"io-threads-do-reads",NULL,&server.io_threads_do_reads, 0, CONFIG_DEFAULT_IO_THREADS_DO_READS},
+    {"always-show-logo",NULL,&server.always_show_logo,0,CONFIG_DEFAULT_ALWAYS_SHOW_LOGO},
+    {"protected-mode",NULL,&server.protected_mode,1,CONFIG_DEFAULT_PROTECTED_MODE},
+    {"rdbcompression",NULL,&server.rdb_compression,1,CONFIG_DEFAULT_RDB_COMPRESSION},
+    {"activerehashing",NULL,&server.activerehashing,1,CONFIG_DEFAULT_ACTIVE_REHASHING},
+    {"stop-writes-on-bgsave-error",NULL,&server.stop_writes_on_bgsave_err,1,CONFIG_DEFAULT_STOP_WRITES_ON_BGSAVE_ERROR},
@@ -72,38 +80,20 @@ configYesNo configs_yesno[] = {
-    {"lazyfree-lazy-eviction", NULL, &server.lazyfree_lazy_eviction, 1,
-     CONFIG_DEFAULT_LAZYFREE_LAZY_EVICTION},
-    {"lazyfree-lazy-expire", NULL, &server.lazyfree_lazy_expire, 1,
-     CONFIG_DEFAULT_LAZYFREE_LAZY_EXPIRE},
-    {"lazyfree-lazy-server-del", NULL, &server.lazyfree_lazy_server_del, 1,
-     CONFIG_DEFAULT_LAZYFREE_LAZY_SERVER_DEL},
-    {"repl-disable-tcp-nodelay", NULL, &server.repl_disable_tcp_nodelay, 1,
-     CONFIG_DEFAULT_REPL_DISABLE_TCP_NODELAY},
-    {"repl-diskless-sync", NULL, &server.repl_diskless_sync, 1,
-     CONFIG_DEFAULT_REPL_DISKLESS_SYNC},
-    {"gopher-enabled", NULL, &server.gopher_enabled, 1,
-     CONFIG_DEFAULT_GOPHER_ENABLED},
-    {"aof-rewrite-incremental-fsync", NULL,
-     &server.aof_rewrite_incremental_fsync, 1,
-     CONFIG_DEFAULT_AOF_REWRITE_INCREMENTAL_FSYNC},
-    {"no-appendfsync-on-rewrite", NULL, &server.aof_no_fsync_on_rewrite, 1,
-     CONFIG_DEFAULT_AOF_NO_FSYNC_ON_REWRITE},
-    {"cluster-require-full-coverage", NULL,
-     &server.cluster_require_full_coverage,
-     CLUSTER_DEFAULT_REQUIRE_FULL_COVERAGE},
-    {"rdb-save-incremental-fsync", NULL, &server.rdb_save_incremental_fsync, 1,
-     CONFIG_DEFAULT_RDB_SAVE_INCREMENTAL_FSYNC},
-    {"aof-load-truncated", NULL, &server.aof_load_truncated, 1,
-     CONFIG_DEFAULT_AOF_LOAD_TRUNCATED},
-    {"aof-use-rdb-preamble", NULL, &server.aof_use_rdb_preamble, 1,
-     CONFIG_DEFAULT_AOF_USE_RDB_PREAMBLE},
-    {"cluster-replica-no-failover", "cluster-slave-no-failover",
-     &server.cluster_slave_no_failover, 1, CLUSTER_DEFAULT_SLAVE_NO_FAILOVER},
-    {"replica-lazy-flush", "slave-lazy-flush", &server.repl_slave_lazy_flush, 1,
-     CONFIG_DEFAULT_SLAVE_LAZY_FLUSH},
-    {"replica-serve-stale-data", "slave-serve-stale-data",
-     &server.repl_serve_stale_data, 1, CONFIG_DEFAULT_SLAVE_SERVE_STALE_DATA},
-    {"replica-read-only", "slave-read-only", &server.repl_slave_ro, 1,
-     CONFIG_DEFAULT_SLAVE_READ_ONLY},
-    {"replica-ignore-maxmemory", "slave-ignore-maxmemory",
-     &server.repl_slave_ignore_maxmemory, 1,
-     CONFIG_DEFAULT_SLAVE_IGNORE_MAXMEMORY},
-    {NULL, NULL, 0, 0}};
+    {"lazyfree-lazy-eviction",NULL,&server.lazyfree_lazy_eviction,1,CONFIG_DEFAULT_LAZYFREE_LAZY_EVICTION},
+    {"lazyfree-lazy-expire",NULL,&server.lazyfree_lazy_expire,1,CONFIG_DEFAULT_LAZYFREE_LAZY_EXPIRE},
+    {"lazyfree-lazy-server-del",NULL,&server.lazyfree_lazy_server_del,1,CONFIG_DEFAULT_LAZYFREE_LAZY_SERVER_DEL},
+    {"repl-disable-tcp-nodelay",NULL,&server.repl_disable_tcp_nodelay,1,CONFIG_DEFAULT_REPL_DISABLE_TCP_NODELAY},
+    {"repl-diskless-sync",NULL,&server.repl_diskless_sync,1,CONFIG_DEFAULT_REPL_DISKLESS_SYNC},
+    {"gopher-enabled",NULL,&server.gopher_enabled,1,CONFIG_DEFAULT_GOPHER_ENABLED},
+    {"aof-rewrite-incremental-fsync",NULL,&server.aof_rewrite_incremental_fsync,1,CONFIG_DEFAULT_AOF_REWRITE_INCREMENTAL_FSYNC},
+    {"no-appendfsync-on-rewrite",NULL,&server.aof_no_fsync_on_rewrite,1,CONFIG_DEFAULT_AOF_NO_FSYNC_ON_REWRITE},
+    {"cluster-require-full-coverage",NULL,&server.cluster_require_full_coverage,CLUSTER_DEFAULT_REQUIRE_FULL_COVERAGE},
+    {"rdb-save-incremental-fsync",NULL,&server.rdb_save_incremental_fsync,1,CONFIG_DEFAULT_RDB_SAVE_INCREMENTAL_FSYNC},
+    {"aof-load-truncated",NULL,&server.aof_load_truncated,1,CONFIG_DEFAULT_AOF_LOAD_TRUNCATED},
+    {"aof-use-rdb-preamble",NULL,&server.aof_use_rdb_preamble,1,CONFIG_DEFAULT_AOF_USE_RDB_PREAMBLE},
+    {"cluster-replica-no-failover","cluster-slave-no-failover",&server.cluster_slave_no_failover,1,CLUSTER_DEFAULT_SLAVE_NO_FAILOVER},
+    {"replica-lazy-flush","slave-lazy-flush",&server.repl_slave_lazy_flush,1,CONFIG_DEFAULT_SLAVE_LAZY_FLUSH},
+    {"replica-serve-stale-data","slave-serve-stale-data",&server.repl_serve_stale_data,1,CONFIG_DEFAULT_SLAVE_SERVE_STALE_DATA},
+    {"replica-read-only","slave-read-only",&server.repl_slave_ro,1,CONFIG_DEFAULT_SLAVE_READ_ONLY},
+    {"replica-ignore-maxmemory","slave-ignore-maxmemory",&server.repl_slave_ignore_maxmemory,1,CONFIG_DEFAULT_SLAVE_IGNORE_MAXMEMORY},
+    {"jemalloc-bg-thread",NULL,&server.jemalloc_bg_thread,1,1},
+    {NULL, NULL, 0, 0}
+};
@@ -129,2 +119 @@ const char *evictPolicyToString(void) {
-  return configEnumGetNameOrUnknown(maxmemory_policy_enum,
-                                    server.maxmemory_policy);
+    return configEnumGetNameOrUnknown(maxmemory_policy_enum,server.maxmemory_policy);
@@ -133,6 +122,3 @@ int yesnotoi(char *s) {
-  if (!strcasecmp(s, "yes"))
-    return 1;
-  else if (!strcasecmp(s, "no"))
-    return 0;
-  else
-    return -1;
+    if (!strcasecmp(s,"yes")) return 1;
+    else if (!strcasecmp(s,"no")) return 0;
+    else return -1;
@@ -141,2 +127 @@ void appendServerSaveParams(time_t seconds, int changes) {
-  server.saveparams = zrealloc(
-      server.saveparams, sizeof(struct saveparam) * (server.saveparamslen + 1));
+    server.saveparams = zrealloc(server.saveparams,sizeof(struct saveparam)*(server.saveparamslen+1));
@@ -190 +175,2 @@ void loadServerConfigFromString(char *config) {
-          (argc == 2)) {
+                (argc == 2))
+            {
@@ -192,2 +178 @@ void loadServerConfigFromString(char *config) {
-          err = "argument must be 'yes' or 'no'";
-          goto loaderr;
+                    err = "argument must be 'yes' or 'no'"; goto loaderr;
@@ -206,2 +191 @@ void loadServerConfigFromString(char *config) {
-        err = "Invalid timeout value";
-        goto loaderr;
+                err = "Invalid timeout value"; goto loaderr;
@@ -212,2 +196 @@ void loadServerConfigFromString(char *config) {
-        err = "Invalid tcp-keepalive value";
-        goto loaderr;
+                err = "Invalid tcp-keepalive value"; goto loaderr;
@@ -218,2 +201 @@ void loadServerConfigFromString(char *config) {
-        err = "Invalid port";
-        goto loaderr;
+                err = "Invalid port"; goto loaderr;
@@ -224,2 +206 @@ void loadServerConfigFromString(char *config) {
-        err = "Invalid backlog value";
-        goto loaderr;
+                err = "Invalid backlog value"; goto loaderr;
@@ -230,2 +211 @@ void loadServerConfigFromString(char *config) {
-        err = "Too many bind addresses specified";
-        goto loaderr;
+                err = "Too many bind addresses specified"; goto loaderr;
@@ -233 +213,2 @@ void loadServerConfigFromString(char *config) {
-      for (j = 0; j < addresses; j++) server.bindaddr[j] = zstrdup(argv[j + 1]);
+            for (j = 0; j < addresses; j++)
+                server.bindaddr[j] = zstrdup(argv[j+1]);
@@ -241,2 +222 @@ void loadServerConfigFromString(char *config) {
-        err = "Invalid socket file permissions";
-        goto loaderr;
+                err = "Invalid socket file permissions"; goto loaderr;
@@ -249,2 +229 @@ void loadServerConfigFromString(char *config) {
-          err = "Invalid save parameters";
-          goto loaderr;
+                    err = "Invalid save parameters"; goto loaderr;
@@ -258,2 +237,2 @@ void loadServerConfigFromString(char *config) {
-        serverLog(LL_WARNING, "Can't chdir to '%s': %s", argv[1],
-                  strerror(errno));
+                serverLog(LL_WARNING,"Can't chdir to '%s': %s",
+                    argv[1], strerror(errno));
@@ -265,2 +244 @@ void loadServerConfigFromString(char *config) {
-        err =
-            "Invalid log level. "
+                err = "Invalid log level. "
@@ -277,2 +255,2 @@ void loadServerConfigFromString(char *config) {
-          err = sdscatprintf(sdsempty(), "Can't open the log file: %s",
-                             strerror(errno));
+                    err = sdscatprintf(sdsempty(),
+                        "Can't open the log file: %s", strerror(errno));
@@ -288,2 +266 @@ void loadServerConfigFromString(char *config) {
-        err = "argument must be 'yes' or 'no'";
-        goto loaderr;
+                err = "argument must be 'yes' or 'no'"; goto loaderr;
@@ -298,3 +275 @@ void loadServerConfigFromString(char *config) {
-        err =
-            "Invalid log facility. Must be one of USER or between "
-            "LOCAL0-LOCAL7";
+                err = "Invalid log facility. Must be one of USER or between LOCAL0-LOCAL7";
@@ -306,2 +281 @@ void loadServerConfigFromString(char *config) {
-        err = "Invalid number of databases";
-        goto loaderr;
+                err = "Invalid number of databases"; goto loaderr;
@@ -312,2 +286 @@ void loadServerConfigFromString(char *config) {
-        err = "Invalid number of I/O threads";
-        goto loaderr;
+                err = "Invalid number of I/O threads"; goto loaderr;
@@ -320,2 +293 @@ void loadServerConfigFromString(char *config) {
-        err = "Invalid max clients limit";
-        goto loaderr;
+                err = "Invalid max clients limit"; goto loaderr;
@@ -340,2 +312 @@ void loadServerConfigFromString(char *config) {
-    } else if ((!strcasecmp(argv[0], "client-query-buffer-limit")) &&
-               argc == 2) {
+        } else if ((!strcasecmp(argv[0],"client-query-buffer-limit")) && argc == 2) {
@@ -356,2 +327 @@ void loadServerConfigFromString(char *config) {
-                !strcasecmp(argv[0], "replicaof")) &&
-               argc == 3) {
+                    !strcasecmp(argv[0],"replicaof")) && argc == 3) {
@@ -364 +334,2 @@ void loadServerConfigFromString(char *config) {
-               argc == 2) {
+                    argc == 2)
+        {
@@ -377,2 +348 @@ void loadServerConfigFromString(char *config) {
-      server.repl_diskless_load =
-          configEnumGetValue(repl_diskless_load_enum, argv[1]);
+            server.repl_diskless_load = configEnumGetValue(repl_diskless_load_enum,argv[1]);
@@ -380,2 +350 @@ void loadServerConfigFromString(char *config) {
-        err =
-            "argument must be 'disabled', 'on-empty-db', 'swapdb' or 'flushdb'";
+                err = "argument must be 'disabled', 'on-empty-db', 'swapdb' or 'flushdb'";
@@ -411,2 +380 @@ void loadServerConfigFromString(char *config) {
-        err = "argument must be 'yes' or 'no'";
-        goto loaderr;
+                err = "argument must be 'yes' or 'no'"; goto loaderr;
@@ -416,2 +384 @@ void loadServerConfigFromString(char *config) {
-        err = "active defrag can't be enabled without proper jemalloc support";
-        goto loaderr;
+                err = "active defrag can't be enabled without proper jemalloc support"; goto loaderr;
@@ -420,29 +386,0 @@ void loadServerConfigFromString(char *config) {
-<<<<<<< HEAD
-    } else if (!strcasecmp(argv[0], "jemalloc-bg-thread") && argc == 2) {
-      if ((server.jemalloc_bg_thread = yesnotoi(argv[1])) == -1) {
-        err = "argument must be 'yes' or 'no'";
-        goto loaderr;
-      }
-    } else if (!strcasecmp(argv[0], "daemonize") && argc == 2) {
-      if ((server.daemonize = yesnotoi(argv[1])) == -1) {
-        err = "argument must be 'yes' or 'no'";
-        goto loaderr;
-      }
-    } else if (!strcasecmp(argv[0], "dynamic-hz") && argc == 2) {
-      if ((server.dynamic_hz = yesnotoi(argv[1])) == -1) {
-        err = "argument must be 'yes' or 'no'";
-        goto loaderr;
-      }
-|||||||
-    } else if (!strcasecmp(argv[0], "daemonize") && argc == 2) {
-      if ((server.daemonize = yesnotoi(argv[1])) == -1) {
-        err = "argument must be 'yes' or 'no'";
-        goto loaderr;
-      }
-    } else if (!strcasecmp(argv[0], "dynamic-hz") && argc == 2) {
-      if ((server.dynamic_hz = yesnotoi(argv[1])) == -1) {
-        err = "argument must be 'yes' or 'no'";
-        goto loaderr;
-      }
-=======
->>>>>>> ee1cef189fff604f165b2d20a307545840de944e
@@ -455,2 +393 @@ void loadServerConfigFromString(char *config) {
-        err = "argument must be 'yes' or 'no'";
-        goto loaderr;
+                err = "argument must be 'yes' or 'no'"; goto loaderr;
@@ -473 +410,2 @@ void loadServerConfigFromString(char *config) {
-               argc == 2) {
+                   argc == 2)
+        {
@@ -479 +417,3 @@ void loadServerConfigFromString(char *config) {
-    } else if (!strcasecmp(argv[0], "auto-aof-rewrite-min-size") && argc == 2) {
+        } else if (!strcasecmp(argv[0],"auto-aof-rewrite-min-size") &&
+                   argc == 2)
+        {
@@ -506,2 +446 @@ void loadServerConfigFromString(char *config) {
-    } else if (!strcasecmp(argv[0], "active-defrag-threshold-lower") &&
-               argc == 2) {
+        } else if (!strcasecmp(argv[0],"active-defrag-threshold-lower") && argc == 2) {
@@ -514,2 +453 @@ void loadServerConfigFromString(char *config) {
-    } else if (!strcasecmp(argv[0], "active-defrag-threshold-upper") &&
-               argc == 2) {
+        } else if (!strcasecmp(argv[0],"active-defrag-threshold-upper") && argc == 2) {
@@ -522,2 +460 @@ void loadServerConfigFromString(char *config) {
-    } else if (!strcasecmp(argv[0], "active-defrag-ignore-bytes") &&
-               argc == 2) {
+        } else if (!strcasecmp(argv[0],"active-defrag-ignore-bytes") && argc == 2) {
@@ -531,2 +468 @@ void loadServerConfigFromString(char *config) {
-      if (server.active_defrag_cycle_min < 1 ||
-          server.active_defrag_cycle_min > 99) {
+            if (server.active_defrag_cycle_min < 1 || server.active_defrag_cycle_min > 99) {
@@ -538,2 +474 @@ void loadServerConfigFromString(char *config) {
-      if (server.active_defrag_cycle_max < 1 ||
-          server.active_defrag_cycle_max > 99) {
+            if (server.active_defrag_cycle_max < 1 || server.active_defrag_cycle_max > 99) {
@@ -543,2 +478 @@ void loadServerConfigFromString(char *config) {
-    } else if (!strcasecmp(argv[0], "active-defrag-max-scan-fields") &&
-               argc == 2) {
+        } else if (!strcasecmp(argv[0],"active-defrag-max-scan-fields") && argc == 2) {
@@ -586,2 +520 @@ void loadServerConfigFromString(char *config) {
-          err = "Target command name already exists";
-          goto loaderr;
+                    err = "Target command name already exists"; goto loaderr;
@@ -592,2 +525 @@ void loadServerConfigFromString(char *config) {
-        err = "argument must be 'yes' or 'no'";
-        goto loaderr;
+                err = "argument must be 'yes' or 'no'"; goto loaderr;
@@ -604,3 +536,3 @@ void loadServerConfigFromString(char *config) {
-          server.cluster_announce_port > 65535) {
-        err = "Invalid port";
-        goto loaderr;
+                server.cluster_announce_port > 65535)
+            {
+                err = "Invalid port"; goto loaderr;
@@ -608 +540,3 @@ void loadServerConfigFromString(char *config) {
-    } else if (!strcasecmp(argv[0], "cluster-announce-bus-port") && argc == 2) {
+        } else if (!strcasecmp(argv[0],"cluster-announce-bus-port") &&
+                   argc == 2)
+        {
@@ -611,3 +545,3 @@ void loadServerConfigFromString(char *config) {
-          server.cluster_announce_bus_port > 65535) {
-        err = "Invalid port";
-        goto loaderr;
+                server.cluster_announce_bus_port > 65535)
+            {
+                err = "Invalid port"; goto loaderr;
@@ -618,2 +552 @@ void loadServerConfigFromString(char *config) {
-        err = "cluster node timeout must be 1 or greater";
-        goto loaderr;
+                err = "cluster node timeout must be 1 or greater"; goto loaderr;
@@ -621 +554,3 @@ void loadServerConfigFromString(char *config) {
-    } else if (!strcasecmp(argv[0], "cluster-migration-barrier") && argc == 2) {
+        } else if (!strcasecmp(argv[0],"cluster-migration-barrier")
+                   && argc == 2)
+        {
@@ -628,2 +563,3 @@ void loadServerConfigFromString(char *config) {
-                !strcasecmp(argv[0], "cluster-replica-validity-factor")) &&
-               argc == 2) {
+                    !strcasecmp(argv[0],"cluster-replica-validity-factor"))
+                   && argc == 2)
+        {
@@ -643 +579,3 @@ void loadServerConfigFromString(char *config) {
-    } else if (!strcasecmp(argv[0], "slowlog-log-slower-than") && argc == 2) {
+        } else if (!strcasecmp(argv[0],"slowlog-log-slower-than") &&
+                   argc == 2)
+        {
@@ -645 +583,3 @@ void loadServerConfigFromString(char *config) {
-    } else if (!strcasecmp(argv[0], "latency-monitor-threshold") && argc == 2) {
+        } else if (!strcasecmp(argv[0],"latency-monitor-threshold") &&
+                   argc == 2)
+        {
@@ -653 +593,3 @@ void loadServerConfigFromString(char *config) {
-    } else if (!strcasecmp(argv[0], "tracking-table-max-fill") && argc == 2) {
+        } else if (!strcasecmp(argv[0],"tracking-table-max-fill") &&
+                   argc == 2)
+        {
@@ -656,3 +598,3 @@ void loadServerConfigFromString(char *config) {
-          server.tracking_table_max_fill < 0) {
-        err =
-            "The tracking table fill percentage must be an "
+                server.tracking_table_max_fill < 0)
+            {
+                err = "The tracking table fill percentage must be an "
@@ -663 +605,2 @@ void loadServerConfigFromString(char *config) {
-               argc == 5) {
+                   argc == 5)
+        {
@@ -668,2 +611 @@ void loadServerConfigFromString(char *config) {
-        err =
-            "Unrecognized client limit class: the user specified "
+                err = "Unrecognized client limit class: the user specified "
@@ -684,2 +626,2 @@ void loadServerConfigFromString(char *config) {
-                !strcasecmp(argv[0], "replica-priority")) &&
-               argc == 2) {
+                    !strcasecmp(argv[0],"replica-priority")) && argc == 2)
+        {
@@ -688,2 +630,2 @@ void loadServerConfigFromString(char *config) {
-                !strcasecmp(argv[0], "replica-announce-ip")) &&
-               argc == 2) {
+                    !strcasecmp(argv[0],"replica-announce-ip")) && argc == 2)
+        {
@@ -693,2 +635,2 @@ void loadServerConfigFromString(char *config) {
-                !strcasecmp(argv[0], "replica-announce-port")) &&
-               argc == 2) {
+                    !strcasecmp(argv[0],"replica-announce-port")) && argc == 2)
+        {
@@ -697,3 +639,3 @@ void loadServerConfigFromString(char *config) {
-          server.slave_announce_port > 65535) {
-        err = "Invalid port";
-        goto loaderr;
+                server.slave_announce_port > 65535)
+            {
+                err = "Invalid port"; goto loaderr;
@@ -702,2 +644,2 @@ void loadServerConfigFromString(char *config) {
-                !strcasecmp(argv[0], "min-replicas-to-write")) &&
-               argc == 2) {
+                    !strcasecmp(argv[0],"min-replicas-to-write")) && argc == 2)
+        {
@@ -706,2 +648 @@ void loadServerConfigFromString(char *config) {
-        err = "Invalid value for min-replicas-to-write.";
-        goto loaderr;
+                err = "Invalid value for min-replicas-to-write."; goto loaderr;
@@ -710,2 +651,2 @@ void loadServerConfigFromString(char *config) {
-                !strcasecmp(argv[0], "min-replicas-max-lag")) &&
-               argc == 2) {
+                    !strcasecmp(argv[0],"min-replicas-max-lag")) && argc == 2)
+        {
@@ -714,2 +655 @@ void loadServerConfigFromString(char *config) {
-        err = "Invalid value for min-replicas-max-lag.";
-        goto loaderr;
+                err = "Invalid value for min-replicas-max-lag."; goto loaderr;
@@ -728,2 +668 @@ void loadServerConfigFromString(char *config) {
-        err =
-            "Invalid option for 'supervised'. "
+                err = "Invalid option for 'supervised'. "
@@ -755,2 +694 @@ void loadServerConfigFromString(char *config) {
-      err = "Bad directive or wrong number of arguments";
-      goto loaderr;
+            err = "Bad directive or wrong number of arguments"; goto loaderr;
@@ -784,2 +722,2 @@ void loadServerConfig(char *filename, char *options) {
-        serverLog(LL_WARNING, "Fatal error, can't open config file '%s'",
-                  filename);
+                serverLog(LL_WARNING,
+                    "Fatal error, can't open config file '%s'", filename);
@@ -800,3 +738,27 @@ void loadServerConfig(char *filename, char *options) {
-#define config_set_else \
-  } \
-  else
+#define config_set_bool_field(_name,_var) \
+    } else if (!strcasecmp(c->argv[2]->ptr,_name)) { \
+        int yn = yesnotoi(o->ptr); \
+        if (yn == -1) goto badfmt; \
+        _var = yn;
+#define config_set_numerical_field(_name,_var,min,max) \
+    } else if (!strcasecmp(c->argv[2]->ptr,_name)) { \
+        if (getLongLongFromObject(o,&ll) == C_ERR) goto badfmt; \
+        if (min != LLONG_MIN && ll < min) goto badfmt; \
+        if (max != LLONG_MAX && ll > max) goto badfmt; \
+        _var = ll;
+#define config_set_memory_field(_name,_var) \
+    } else if (!strcasecmp(c->argv[2]->ptr,_name)) { \
+        ll = memtoll(o->ptr,&err); \
+        if (err || ll < 0) goto badfmt; \
+        _var = ll;
+#define config_set_enum_field(_name,_var,_enumvar) \
+    } else if (!strcasecmp(c->argv[2]->ptr,_name)) { \
+        int enumval = configEnumGetValue(_enumvar,o->ptr); \
+        if (enumval == INT_MIN) goto badfmt; \
+        _var = enumval;
+#define config_set_special_field(_name) \
+    } else if (!strcasecmp(c->argv[2]->ptr,_name)) {
+#define config_set_special_field_with_alias(_name1,_name2) \
+    } else if (!strcasecmp(c->argv[2]->ptr,_name1) || \
+               !strcasecmp(c->argv[2]->ptr,_name2)) {
+#define config_set_else } else
@@ -811,3 +773,3 @@ void configSetCommand(client *c) {
-    if (config->modifiable &&
-        (!strcasecmp(c->argv[2]->ptr, config->name) ||
-         (config->alias && !strcasecmp(c->argv[2]->ptr, config->alias)))) {
+        if(config->modifiable && (!strcasecmp(c->argv[2]->ptr,config->name) ||
+            (config->alias && !strcasecmp(c->argv[2]->ptr,config->alias))))
+        {
@@ -829,2 +791 @@ void configSetCommand(client *c) {
-    }
-    config_set_special_field("requirepass") {
+    } config_set_special_field("requirepass") {
@@ -836,2 +797 @@ void configSetCommand(client *c) {
-    }
-    config_set_special_field("masteruser") {
+    } config_set_special_field("masteruser") {
@@ -840,2 +800 @@ void configSetCommand(client *c) {
-    }
-    config_set_special_field("masterauth") {
+    } config_set_special_field("masterauth") {
@@ -844,2 +803 @@ void configSetCommand(client *c) {
-    }
-    config_set_special_field("cluster-announce-ip") {
+    } config_set_special_field("cluster-announce-ip") {
@@ -848,2 +806 @@ void configSetCommand(client *c) {
-    }
-    config_set_special_field("maxclients") {
+    } config_set_special_field("maxclients") {
@@ -856,4 +813 @@ void configSetCommand(client *c) {
-          addReplyErrorFormat(c,
-                              "The operating system is not able to handle the "
-                              "specified number of clients, try with %d",
-                              server.maxclients);
+                addReplyErrorFormat(c,"The operating system is not able to handle the specified number of clients, try with %d", server.maxclients);
@@ -864,6 +818,6 @@ void configSetCommand(client *c) {
-            server.maxclients + CONFIG_FDSET_INCR) {
-          if (aeResizeSetSize(
-                  server.el, server.maxclients + CONFIG_FDSET_INCR) == AE_ERR) {
-            addReplyError(c,
-                          "The event loop API used by Redis is not able to "
-                          "handle the specified number of clients");
+                server.maxclients + CONFIG_FDSET_INCR)
+            {
+                if (aeResizeSetSize(server.el,
+                    server.maxclients + CONFIG_FDSET_INCR) == AE_ERR)
+                {
+                    addReplyError(c,"The event loop API used by Redis is not able to handle the specified number of clients");
@@ -875,2 +829 @@ void configSetCommand(client *c) {
-    }
-    config_set_special_field("appendonly") {
+    } config_set_special_field("appendonly") {
@@ -884 +837,2 @@ void configSetCommand(client *c) {
-          addReplyError(c, "Unable to turn on AOF. Check server logs.");
+                addReplyError(c,
+                    "Unable to turn on AOF. Check server logs.");
@@ -888,2 +842 @@ void configSetCommand(client *c) {
-    }
-    config_set_special_field("save") {
+    } config_set_special_field("save") {
@@ -900 +853,2 @@ void configSetCommand(client *c) {
-        if (eptr[0] != '\0' || ((j & 1) == 0 && val < 1) ||
+            if (eptr[0] != '\0' ||
+                ((j & 1) == 0 && val < 1) ||
@@ -915,2 +869 @@ void configSetCommand(client *c) {
-    }
-    config_set_special_field("dir") {
+    } config_set_special_field("dir") {
@@ -921,2 +874 @@ void configSetCommand(client *c) {
-    }
-    config_set_special_field("client-output-buffer-limit") {
+    } config_set_special_field("client-output-buffer-limit") {
@@ -958,2 +910 @@ void configSetCommand(client *c) {
-    }
-    config_set_special_field("notify-keyspace-events") {
+    } config_set_special_field("notify-keyspace-events") {
@@ -963,3 +914,3 @@ void configSetCommand(client *c) {
-    }
-    config_set_special_field_with_alias("slave-announce-ip",
-                                        "replica-announce-ip") {
+    } config_set_special_field_with_alias("slave-announce-ip",
+                                          "replica-announce-ip")
+    {
@@ -968,2 +919,2 @@ void configSetCommand(client *c) {
-    }
-    config_set_bool_field("activedefrag", server.active_defrag_enabled) {
+    } config_set_bool_field(
+      "activedefrag",server.active_defrag_enabled) {
@@ -973,2 +924 @@ void configSetCommand(client *c) {
-        addReplyError(
-            c,
+            addReplyError(c,
@@ -982,88 +932,50 @@ void configSetCommand(client *c) {
-      <<<<<<< HEAD
-    }
-    config_set_bool_field("jemalloc-bg-thread", server.jemalloc_bg_thread) {
-      set_jemalloc_bg_thread(server.jemalloc_bg_thread);
-    }
-    config_set_bool_field("protected-mode", server.protected_mode) {}
-    config_set_bool_field("gopher-enabled", server.gopher_enabled) {}
-    config_set_bool_field("stop-writes-on-bgsave-error",
-                          server.stop_writes_on_bgsave_err) {}
-    config_set_bool_field("lazyfree-lazy-eviction",
-                          server.lazyfree_lazy_eviction) {}
-    config_set_bool_field("lazyfree-lazy-expire", server.lazyfree_lazy_expire) {
-    }
-    config_set_bool_field("lazyfree-lazy-server-del",
-                          server.lazyfree_lazy_server_del) {}
-    config_set_bool_field("slave-lazy-flush", server.repl_slave_lazy_flush) {}
-    config_set_bool_field("replica-lazy-flush", server.repl_slave_lazy_flush) {}
-    config_set_bool_field("no-appendfsync-on-rewrite",
-                          server.aof_no_fsync_on_rewrite) {}
-    config_set_bool_field("dynamic-hz", server.dynamic_hz){
-|||||||
-    } config_set_bool_field("protected-mode", server.protected_mode) {}
-    config_set_bool_field("gopher-enabled", server.gopher_enabled) {}
-    config_set_bool_field("stop-writes-on-bgsave-error",
-                          server.stop_writes_on_bgsave_err) {}
-    config_set_bool_field("lazyfree-lazy-eviction",
-                          server.lazyfree_lazy_eviction) {}
-    config_set_bool_field("lazyfree-lazy-expire", server.lazyfree_lazy_expire) {
-    }
-    config_set_bool_field("lazyfree-lazy-server-del",
-                          server.lazyfree_lazy_server_del) {}
-    config_set_bool_field("slave-lazy-flush", server.repl_slave_lazy_flush) {}
-    config_set_bool_field("replica-lazy-flush", server.repl_slave_lazy_flush) {}
-    config_set_bool_field("no-appendfsync-on-rewrite",
-                          server.aof_no_fsync_on_rewrite) {}
-    config_set_bool_field("dynamic-hz", server.dynamic_hz){
-=======
->>>>>>> ee1cef189fff604f165b2d20a307545840de944e
-    } config_set_numerical_field("tcp-keepalive", server.tcpkeepalive, 0,
-                                 INT_MAX) {}
-    config_set_numerical_field("maxmemory-samples", server.maxmemory_samples, 1,
-                               INT_MAX) {}
-    config_set_numerical_field("lfu-log-factor", server.lfu_log_factor, 0,
-                               INT_MAX) {}
-    config_set_numerical_field("lfu-decay-time", server.lfu_decay_time, 0,
-                               INT_MAX) {}
-    config_set_numerical_field("timeout", server.maxidletime, 0, INT_MAX) {}
-    config_set_numerical_field("active-defrag-threshold-lower",
-                               server.active_defrag_threshold_lower, 0, 1000) {}
-    config_set_numerical_field("active-defrag-threshold-upper",
-                               server.active_defrag_threshold_upper, 0, 1000) {}
-    config_set_memory_field("active-defrag-ignore-bytes",
-                            server.active_defrag_ignore_bytes) {}
-    config_set_numerical_field("active-defrag-cycle-min",
-                               server.active_defrag_cycle_min, 1, 99) {}
-    config_set_numerical_field("active-defrag-cycle-max",
-                               server.active_defrag_cycle_max, 1, 99) {}
-    config_set_numerical_field("active-defrag-max-scan-fields",
-                               server.active_defrag_max_scan_fields, 1,
-                               LONG_MAX) {}
-    config_set_numerical_field("auto-aof-rewrite-percentage",
-                               server.aof_rewrite_perc, 0, INT_MAX) {}
-    config_set_numerical_field("hash-max-ziplist-entries",
-                               server.hash_max_ziplist_entries, 0, LONG_MAX) {}
-    config_set_numerical_field("hash-max-ziplist-value",
-                               server.hash_max_ziplist_value, 0, LONG_MAX) {}
-    config_set_numerical_field("stream-node-max-bytes",
-                               server.stream_node_max_bytes, 0, LONG_MAX) {}
-    config_set_numerical_field("stream-node-max-entries",
-                               server.stream_node_max_entries, 0, LLONG_MAX) {}
-    config_set_numerical_field("list-max-ziplist-size",
-                               server.list_max_ziplist_size, INT_MIN, INT_MAX) {
-    }
-    config_set_numerical_field("list-compress-depth",
-                               server.list_compress_depth, 0, INT_MAX) {}
-    config_set_numerical_field("set-max-intset-entries",
-                               server.set_max_intset_entries, 0, LONG_MAX) {}
-    config_set_numerical_field("zset-max-ziplist-entries",
-                               server.zset_max_ziplist_entries, 0, LONG_MAX) {}
-    config_set_numerical_field("zset-max-ziplist-value",
-                               server.zset_max_ziplist_value, 0, LONG_MAX) {}
-    config_set_numerical_field("hll-sparse-max-bytes",
-                               server.hll_sparse_max_bytes, 0, LONG_MAX) {}
-    config_set_numerical_field("lua-time-limit", server.lua_time_limit, 0,
-                               LONG_MAX) {}
-    config_set_numerical_field("slowlog-log-slower-than",
-                               server.slowlog_log_slower_than, -1, LLONG_MAX) {}
-    config_set_numerical_field("slowlog-max-len", ll, 0, LONG_MAX) {
+    } config_set_numerical_field(
+      "tcp-keepalive",server.tcpkeepalive,0,INT_MAX) {
+    } config_set_numerical_field(
+      "maxmemory-samples",server.maxmemory_samples,1,INT_MAX) {
+    } config_set_numerical_field(
+      "lfu-log-factor",server.lfu_log_factor,0,INT_MAX) {
+    } config_set_numerical_field(
+      "lfu-decay-time",server.lfu_decay_time,0,INT_MAX) {
+    } config_set_numerical_field(
+      "timeout",server.maxidletime,0,INT_MAX) {
+    } config_set_numerical_field(
+      "active-defrag-threshold-lower",server.active_defrag_threshold_lower,0,1000) {
+    } config_set_numerical_field(
+      "active-defrag-threshold-upper",server.active_defrag_threshold_upper,0,1000) {
+    } config_set_memory_field(
+      "active-defrag-ignore-bytes",server.active_defrag_ignore_bytes) {
+    } config_set_numerical_field(
+      "active-defrag-cycle-min",server.active_defrag_cycle_min,1,99) {
+    } config_set_numerical_field(
+      "active-defrag-cycle-max",server.active_defrag_cycle_max,1,99) {
+    } config_set_numerical_field(
+      "active-defrag-max-scan-fields",server.active_defrag_max_scan_fields,1,LONG_MAX) {
+    } config_set_numerical_field(
+      "auto-aof-rewrite-percentage",server.aof_rewrite_perc,0,INT_MAX){
+    } config_set_numerical_field(
+      "hash-max-ziplist-entries",server.hash_max_ziplist_entries,0,LONG_MAX) {
+    } config_set_numerical_field(
+      "hash-max-ziplist-value",server.hash_max_ziplist_value,0,LONG_MAX) {
+    } config_set_numerical_field(
+      "stream-node-max-bytes",server.stream_node_max_bytes,0,LONG_MAX) {
+    } config_set_numerical_field(
+      "stream-node-max-entries",server.stream_node_max_entries,0,LLONG_MAX) {
+    } config_set_numerical_field(
+      "list-max-ziplist-size",server.list_max_ziplist_size,INT_MIN,INT_MAX) {
+    } config_set_numerical_field(
+      "list-compress-depth",server.list_compress_depth,0,INT_MAX) {
+    } config_set_numerical_field(
+      "set-max-intset-entries",server.set_max_intset_entries,0,LONG_MAX) {
+    } config_set_numerical_field(
+      "zset-max-ziplist-entries",server.zset_max_ziplist_entries,0,LONG_MAX) {
+    } config_set_numerical_field(
+      "zset-max-ziplist-value",server.zset_max_ziplist_value,0,LONG_MAX) {
+    } config_set_numerical_field(
+      "hll-sparse-max-bytes",server.hll_sparse_max_bytes,0,LONG_MAX) {
+    } config_set_numerical_field(
+      "lua-time-limit",server.lua_time_limit,0,LONG_MAX) {
+    } config_set_numerical_field(
+      "slowlog-log-slower-than",server.slowlog_log_slower_than,-1,LLONG_MAX) {
+    } config_set_numerical_field(
+      "slowlog-max-len",ll,0,LONG_MAX) {
@@ -1071,28 +983,26 @@ void configSetCommand(client *c) {
-    }
-    config_set_numerical_field("tracking-table-max-fill",
-                               server.tracking_table_max_fill, 0, 100) {}
-    config_set_numerical_field("latency-monitor-threshold",
-                               server.latency_monitor_threshold, 0, LLONG_MAX) {
-    }
-    config_set_numerical_field("repl-ping-slave-period",
-                               server.repl_ping_slave_period, 1, INT_MAX) {}
-    config_set_numerical_field("repl-ping-replica-period",
-                               server.repl_ping_slave_period, 1, INT_MAX) {}
-    config_set_numerical_field("repl-timeout", server.repl_timeout, 1,
-                               INT_MAX) {}
-    config_set_numerical_field("repl-backlog-ttl",
-                               server.repl_backlog_time_limit, 0, LONG_MAX) {}
-    config_set_numerical_field("repl-diskless-sync-delay",
-                               server.repl_diskless_sync_delay, 0, INT_MAX) {}
-    config_set_numerical_field("slave-priority", server.slave_priority, 0,
-                               INT_MAX) {}
-    config_set_numerical_field("replica-priority", server.slave_priority, 0,
-                               INT_MAX) {}
-    config_set_numerical_field("rdb-key-save-delay", server.rdb_key_save_delay,
-                               0, LLONG_MAX) {}
-    config_set_numerical_field("slave-announce-port",
-                               server.slave_announce_port, 0, 65535) {}
-    config_set_numerical_field("replica-announce-port",
-                               server.slave_announce_port, 0, 65535) {}
-    config_set_numerical_field("min-slaves-to-write",
-                               server.repl_min_slaves_to_write, 0, INT_MAX) {
+    } config_set_numerical_field(
+      "tracking-table-max-fill",server.tracking_table_max_fill,0,100) {
+    } config_set_numerical_field(
+      "latency-monitor-threshold",server.latency_monitor_threshold,0,LLONG_MAX){
+    } config_set_numerical_field(
+      "repl-ping-slave-period",server.repl_ping_slave_period,1,INT_MAX) {
+    } config_set_numerical_field(
+      "repl-ping-replica-period",server.repl_ping_slave_period,1,INT_MAX) {
+    } config_set_numerical_field(
+      "repl-timeout",server.repl_timeout,1,INT_MAX) {
+    } config_set_numerical_field(
+      "repl-backlog-ttl",server.repl_backlog_time_limit,0,LONG_MAX) {
+    } config_set_numerical_field(
+      "repl-diskless-sync-delay",server.repl_diskless_sync_delay,0,INT_MAX) {
+    } config_set_numerical_field(
+      "slave-priority",server.slave_priority,0,INT_MAX) {
+    } config_set_numerical_field(
+      "replica-priority",server.slave_priority,0,INT_MAX) {
+    } config_set_numerical_field(
+      "rdb-key-save-delay",server.rdb_key_save_delay,0,LLONG_MAX) {
+    } config_set_numerical_field(
+      "slave-announce-port",server.slave_announce_port,0,65535) {
+    } config_set_numerical_field(
+      "replica-announce-port",server.slave_announce_port,0,65535) {
+    } config_set_numerical_field(
+      "min-slaves-to-write",server.repl_min_slaves_to_write,0,INT_MAX) {
@@ -1100,3 +1010,2 @@ void configSetCommand(client *c) {
-    }
-    config_set_numerical_field("min-replicas-to-write",
-                               server.repl_min_slaves_to_write, 0, INT_MAX) {
+    } config_set_numerical_field(
+      "min-replicas-to-write",server.repl_min_slaves_to_write,0,INT_MAX) {
@@ -1104,3 +1013,2 @@ void configSetCommand(client *c) {
-    }
-    config_set_numerical_field("min-slaves-max-lag",
-                               server.repl_min_slaves_max_lag, 0, INT_MAX) {
+    } config_set_numerical_field(
+      "min-slaves-max-lag",server.repl_min_slaves_max_lag,0,INT_MAX) {
@@ -1108,3 +1016,2 @@ void configSetCommand(client *c) {
-    }
-    config_set_numerical_field("min-replicas-max-lag",
-                               server.repl_min_slaves_max_lag, 0, INT_MAX) {
+    } config_set_numerical_field(
+      "min-replicas-max-lag",server.repl_min_slaves_max_lag,0,INT_MAX) {
@@ -1112,16 +1019,14 @@ void configSetCommand(client *c) {
-    }
-    config_set_numerical_field("cluster-node-timeout",
-                               server.cluster_node_timeout, 0, LLONG_MAX) {}
-    config_set_numerical_field("cluster-announce-port",
-                               server.cluster_announce_port, 0, 65535) {}
-    config_set_numerical_field("cluster-announce-bus-port",
-                               server.cluster_announce_bus_port, 0, 65535) {}
-    config_set_numerical_field("cluster-migration-barrier",
-                               server.cluster_migration_barrier, 0, INT_MAX) {}
-    config_set_numerical_field("cluster-slave-validity-factor",
-                               server.cluster_slave_validity_factor, 0,
-                               INT_MAX) {}
-    config_set_numerical_field("cluster-replica-validity-factor",
-                               server.cluster_slave_validity_factor, 0,
-                               INT_MAX) {}
-    config_set_numerical_field("hz", server.config_hz, 0, INT_MAX) {
+    } config_set_numerical_field(
+      "cluster-node-timeout",server.cluster_node_timeout,0,LLONG_MAX) {
+    } config_set_numerical_field(
+      "cluster-announce-port",server.cluster_announce_port,0,65535) {
+    } config_set_numerical_field(
+      "cluster-announce-bus-port",server.cluster_announce_bus_port,0,65535) {
+    } config_set_numerical_field(
+      "cluster-migration-barrier",server.cluster_migration_barrier,0,INT_MAX){
+    } config_set_numerical_field(
+      "cluster-slave-validity-factor",server.cluster_slave_validity_factor,0,INT_MAX) {
+    } config_set_numerical_field(
+      "cluster-replica-validity-factor",server.cluster_slave_validity_factor,0,INT_MAX) {
+    } config_set_numerical_field(
+      "hz",server.config_hz,0,INT_MAX) {
@@ -1130,2 +1035,2 @@ void configSetCommand(client *c) {
-    }
-    config_set_numerical_field("watchdog-period", ll, 0, INT_MAX) {
+    } config_set_numerical_field(
+      "watchdog-period",ll,0,INT_MAX) {
@@ -1136,2 +1041 @@ void configSetCommand(client *c) {
-    }
-    config_set_memory_field("maxmemory", server.maxmemory) {
+    } config_set_memory_field("maxmemory",server.maxmemory) {
@@ -1140,5 +1044 @@ void configSetCommand(client *c) {
-          serverLog(LL_WARNING,
-                    "WARNING: the new maxmemory value set via CONFIG SET is "
-                    "smaller than the current memory usage. This will result "
-                    "in key eviction and/or the inability to accept new write "
-                    "commands depending on the maxmemory-policy.");
+                serverLog(LL_WARNING,"WARNING: the new maxmemory value set via CONFIG SET is smaller than the current memory usage. This will result in key eviction and/or the inability to accept new write commands depending on the maxmemory-policy.");
@@ -1148,5 +1048,5 @@ void configSetCommand(client *c) {
-    }
-    config_set_memory_field("proto-max-bulk-len", server.proto_max_bulk_len) {}
-    config_set_memory_field("client-query-buffer-limit",
-                            server.client_max_querybuf_len) {}
-    config_set_memory_field("repl-backlog-size", ll) {
+    } config_set_memory_field(
+      "proto-max-bulk-len",server.proto_max_bulk_len) {
+    } config_set_memory_field(
+      "client-query-buffer-limit",server.client_max_querybuf_len) {
+    } config_set_memory_field("repl-backlog-size",ll) {
@@ -1154,2 +1054 @@ void configSetCommand(client *c) {
-    }
-    config_set_memory_field("auto-aof-rewrite-min-size", ll) {
+    } config_set_memory_field("auto-aof-rewrite-min-size",ll) {
@@ -1157,9 +1056,9 @@ void configSetCommand(client *c) {
-    }
-    config_set_enum_field("loglevel", server.verbosity, loglevel_enum) {}
-    config_set_enum_field("maxmemory-policy", server.maxmemory_policy,
-                          maxmemory_policy_enum) {}
-    config_set_enum_field("appendfsync", server.aof_fsync, aof_fsync_enum) {}
-    config_set_enum_field("repl-diskless-load", server.repl_diskless_load,
-                          repl_diskless_load_enum) {
-    }
-    config_set_else {
+    } config_set_enum_field(
+      "loglevel",server.verbosity,loglevel_enum) {
+    } config_set_enum_field(
+      "maxmemory-policy",server.maxmemory_policy,maxmemory_policy_enum) {
+    } config_set_enum_field(
+      "appendfsync",server.aof_fsync,aof_fsync_enum) {
+    } config_set_enum_field(
+      "repl-diskless-load",server.repl_diskless_load,repl_diskless_load_enum) {
+    } config_set_else {
@@ -1174 +1073,2 @@ void configSetCommand(client *c) {
-                        (char *)o->ptr, (char *)c->argv[2]->ptr);
+            (char*)o->ptr,
+            (char*)c->argv[2]->ptr);
@@ -1175,0 +1076,29 @@ void configSetCommand(client *c) {
+#define config_get_string_field(_name,_var) do { \
+    if (stringmatch(pattern,_name,1)) { \
+        addReplyBulkCString(c,_name); \
+        addReplyBulkCString(c,_var ? _var : ""); \
+        matches++; \
+    } \
+} while(0);
+#define config_get_bool_field(_name,_var) do { \
+    if (stringmatch(pattern,_name,1)) { \
+        addReplyBulkCString(c,_name); \
+        addReplyBulkCString(c,_var ? "yes" : "no"); \
+        matches++; \
+    } \
+} while(0);
+#define config_get_numerical_field(_name,_var) do { \
+    if (stringmatch(pattern,_name,1)) { \
+        ll2string(buf,sizeof(buf),_var); \
+        addReplyBulkCString(c,_name); \
+        addReplyBulkCString(c,buf); \
+        matches++; \
+    } \
+} while(0);
+#define config_get_enum_field(_name,_var,_enumvar) do { \
+    if (stringmatch(pattern,_name,1)) { \
+        addReplyBulkCString(c,_name); \
+        addReplyBulkCString(c,configEnumGetNameOrUnknown(_enumvar,_var)); \
+        matches++; \
+    } \
+} while(0);
@@ -1195,2 +1124 @@ void configSetCommand(client *c) {
-    config_get_numerical_field("client-query-buffer-limit",
-                               server.client_max_querybuf_len);
+    config_get_numerical_field("client-query-buffer-limit",server.client_max_querybuf_len);
@@ -1201,12 +1129,6 @@ void configSetCommand(client *c) {
-    config_get_numerical_field("active-defrag-threshold-lower",
-                               server.active_defrag_threshold_lower);
-    config_get_numerical_field("active-defrag-threshold-upper",
-                               server.active_defrag_threshold_upper);
-    config_get_numerical_field("active-defrag-ignore-bytes",
-                               server.active_defrag_ignore_bytes);
-    config_get_numerical_field("active-defrag-cycle-min",
-                               server.active_defrag_cycle_min);
-    config_get_numerical_field("active-defrag-cycle-max",
-                               server.active_defrag_cycle_max);
-    config_get_numerical_field("active-defrag-max-scan-fields",
-                               server.active_defrag_max_scan_fields);
+    config_get_numerical_field("active-defrag-threshold-lower",server.active_defrag_threshold_lower);
+    config_get_numerical_field("active-defrag-threshold-upper",server.active_defrag_threshold_upper);
+    config_get_numerical_field("active-defrag-ignore-bytes",server.active_defrag_ignore_bytes);
+    config_get_numerical_field("active-defrag-cycle-min",server.active_defrag_cycle_min);
+    config_get_numerical_field("active-defrag-cycle-max",server.active_defrag_cycle_max);
+    config_get_numerical_field("active-defrag-max-scan-fields",server.active_defrag_max_scan_fields);
@@ -1243,2 +1165 @@ void configSetCommand(client *c) {
-    config_get_numerical_field("tracking-table-max-fill",
-                               server.tracking_table_max_fill);
+    config_get_numerical_field("tracking-table-max-fill", server.tracking_table_max_fill);
@@ -1246,4 +1167,2 @@ void configSetCommand(client *c) {
-    config_get_numerical_field("cluster-announce-port",
-                               server.cluster_announce_port);
-    config_get_numerical_field("cluster-announce-bus-port",
-                               server.cluster_announce_bus_port);
+    config_get_numerical_field("cluster-announce-port",server.cluster_announce_port);
+    config_get_numerical_field("cluster-announce-bus-port",server.cluster_announce_bus_port);
@@ -1253,4 +1172,2 @@ void configSetCommand(client *c) {
-    config_get_numerical_field("repl-ping-slave-period",
-                               server.repl_ping_slave_period);
-    config_get_numerical_field("repl-ping-replica-period",
-                               server.repl_ping_slave_period);
+    config_get_numerical_field("repl-ping-slave-period",server.repl_ping_slave_period);
+    config_get_numerical_field("repl-ping-replica-period",server.repl_ping_slave_period);
@@ -1259,2 +1176 @@ void configSetCommand(client *c) {
-    config_get_numerical_field("repl-backlog-ttl",
-                               server.repl_backlog_time_limit);
+    config_get_numerical_field("repl-backlog-ttl",server.repl_backlog_time_limit);
@@ -1265,12 +1181,6 @@ void configSetCommand(client *c) {
-    config_get_numerical_field("slave-announce-port",
-                               server.slave_announce_port);
-    config_get_numerical_field("replica-announce-port",
-                               server.slave_announce_port);
-    config_get_numerical_field("min-slaves-to-write",
-                               server.repl_min_slaves_to_write);
-    config_get_numerical_field("min-replicas-to-write",
-                               server.repl_min_slaves_to_write);
-    config_get_numerical_field("min-slaves-max-lag",
-                               server.repl_min_slaves_max_lag);
-    config_get_numerical_field("min-replicas-max-lag",
-                               server.repl_min_slaves_max_lag);
+    config_get_numerical_field("slave-announce-port",server.slave_announce_port);
+    config_get_numerical_field("replica-announce-port",server.slave_announce_port);
+    config_get_numerical_field("min-slaves-to-write",server.repl_min_slaves_to_write);
+    config_get_numerical_field("min-replicas-to-write",server.repl_min_slaves_to_write);
+    config_get_numerical_field("min-slaves-max-lag",server.repl_min_slaves_max_lag);
+    config_get_numerical_field("min-replicas-max-lag",server.repl_min_slaves_max_lag);
@@ -1278,10 +1188,5 @@ void configSetCommand(client *c) {
-    config_get_numerical_field("cluster-node-timeout",
-                               server.cluster_node_timeout);
-    config_get_numerical_field("cluster-migration-barrier",
-                               server.cluster_migration_barrier);
-    config_get_numerical_field("cluster-slave-validity-factor",
-                               server.cluster_slave_validity_factor);
-    config_get_numerical_field("cluster-replica-validity-factor",
-                               server.cluster_slave_validity_factor);
-    config_get_numerical_field("repl-diskless-sync-delay",
-                               server.repl_diskless_sync_delay);
+    config_get_numerical_field("cluster-node-timeout",server.cluster_node_timeout);
+    config_get_numerical_field("cluster-migration-barrier",server.cluster_migration_barrier);
+    config_get_numerical_field("cluster-slave-validity-factor",server.cluster_slave_validity_factor);
+    config_get_numerical_field("cluster-replica-validity-factor",server.cluster_slave_validity_factor);
+    config_get_numerical_field("repl-diskless-sync-delay",server.repl_diskless_sync_delay);
@@ -1297,55 +1202,12 @@ void configSetCommand(client *c) {
-<<<<<<< HEAD
-    config_get_bool_field("jemalloc-bg-thread", server.jemalloc_bg_thread);
-    config_get_bool_field("protected-mode", server.protected_mode);
-    config_get_bool_field("gopher-enabled", server.gopher_enabled);
-    config_get_bool_field("io-threads-do-reads", server.io_threads_do_reads);
-    config_get_bool_field("repl-disable-tcp-nodelay",
-                          server.repl_disable_tcp_nodelay);
-    config_get_bool_field("repl-diskless-sync", server.repl_diskless_sync);
-    config_get_bool_field("aof-rewrite-incremental-fsync",
-                          server.aof_rewrite_incremental_fsync);
-    config_get_bool_field("rdb-save-incremental-fsync",
-                          server.rdb_save_incremental_fsync);
-    config_get_bool_field("aof-load-truncated", server.aof_load_truncated);
-    config_get_bool_field("aof-use-rdb-preamble", server.aof_use_rdb_preamble);
-    config_get_bool_field("lazyfree-lazy-eviction",
-                          server.lazyfree_lazy_eviction);
-    config_get_bool_field("lazyfree-lazy-expire", server.lazyfree_lazy_expire);
-    config_get_bool_field("lazyfree-lazy-server-del",
-                          server.lazyfree_lazy_server_del);
-    config_get_bool_field("slave-lazy-flush", server.repl_slave_lazy_flush);
-    config_get_bool_field("replica-lazy-flush", server.repl_slave_lazy_flush);
-    config_get_bool_field("dynamic-hz", server.dynamic_hz);
-|||||||
-    config_get_bool_field("protected-mode", server.protected_mode);
-    config_get_bool_field("gopher-enabled", server.gopher_enabled);
-    config_get_bool_field("io-threads-do-reads", server.io_threads_do_reads);
-    config_get_bool_field("repl-disable-tcp-nodelay",
-                          server.repl_disable_tcp_nodelay);
-    config_get_bool_field("repl-diskless-sync", server.repl_diskless_sync);
-    config_get_bool_field("aof-rewrite-incremental-fsync",
-                          server.aof_rewrite_incremental_fsync);
-    config_get_bool_field("rdb-save-incremental-fsync",
-                          server.rdb_save_incremental_fsync);
-    config_get_bool_field("aof-load-truncated", server.aof_load_truncated);
-    config_get_bool_field("aof-use-rdb-preamble", server.aof_use_rdb_preamble);
-    config_get_bool_field("lazyfree-lazy-eviction",
-                          server.lazyfree_lazy_eviction);
-    config_get_bool_field("lazyfree-lazy-expire", server.lazyfree_lazy_expire);
-    config_get_bool_field("lazyfree-lazy-server-del",
-                          server.lazyfree_lazy_server_del);
-    config_get_bool_field("slave-lazy-flush", server.repl_slave_lazy_flush);
-    config_get_bool_field("replica-lazy-flush", server.repl_slave_lazy_flush);
-    config_get_bool_field("dynamic-hz", server.dynamic_hz);
-=======
->>>>>>> ee1cef189fff604f165b2d20a307545840de944e
-    config_get_enum_field("maxmemory-policy", server.maxmemory_policy,
-                          maxmemory_policy_enum);
-    config_get_enum_field("loglevel", server.verbosity, loglevel_enum);
-    config_get_enum_field("supervised", server.supervised_mode,
-                          supervised_mode_enum);
-    config_get_enum_field("appendfsync", server.aof_fsync, aof_fsync_enum);
-    config_get_enum_field("syslog-facility", server.syslog_facility,
-                          syslog_facility_enum);
-    config_get_enum_field("repl-diskless-load", server.repl_diskless_load,
-                          repl_diskless_load_enum);
+    config_get_enum_field("maxmemory-policy",
+            server.maxmemory_policy,maxmemory_policy_enum);
+    config_get_enum_field("loglevel",
+            server.verbosity,loglevel_enum);
+    config_get_enum_field("supervised",
+            server.supervised_mode,supervised_mode_enum);
+    config_get_enum_field("appendfsync",
+            server.aof_fsync,aof_fsync_enum);
+    config_get_enum_field("syslog-facility",
+            server.syslog_facility,syslog_facility_enum);
+    config_get_enum_field("repl-diskless-load",
+            server.repl_diskless_load,repl_diskless_load_enum);
@@ -1359 +1221,2 @@ void configSetCommand(client *c) {
-      if (getcwd(buf, sizeof(buf)) == NULL) buf[0] = '\0';
+        if (getcwd(buf,sizeof(buf)) == NULL)
+            buf[0] = '\0';
@@ -1368,2 +1231,2 @@ void configSetCommand(client *c) {
-        buf =
-            sdscatprintf(buf, "%jd %d", (intmax_t)server.saveparams[j].seconds,
+            buf = sdscatprintf(buf,"%jd %d",
+                    (intmax_t)server.saveparams[j].seconds,
@@ -1371 +1234,2 @@ void configSetCommand(client *c) {
-        if (j != server.saveparamslen - 1) buf = sdscatlen(buf, " ", 1);
+            if (j != server.saveparamslen-1)
+                buf = sdscatlen(buf," ",1);
@@ -1382,2 +1246,2 @@ void configSetCommand(client *c) {
-        buf =
-            sdscatprintf(buf, "%s %llu %llu %ld", getClientTypeName(j),
+            buf = sdscatprintf(buf,"%s %llu %llu %ld",
+                    getClientTypeName(j),
@@ -1387 +1251,2 @@ void configSetCommand(client *c) {
-        if (j != CLIENT_TYPE_OBUF_COUNT - 1) buf = sdscatlen(buf, " ", 1);
+            if (j != CLIENT_TYPE_OBUF_COUNT-1)
+                buf = sdscatlen(buf," ",1);
@@ -1402,3 +1267,4 @@ void configSetCommand(client *c) {
-        stringmatch(pattern, "replicaof", 1)) {
-      char *optname =
-          stringmatch(pattern, "slaveof", 1) ? "slaveof" : "replicaof";
+        stringmatch(pattern,"replicaof",1))
+    {
+        char *optname = stringmatch(pattern,"slaveof",1) ?
+                        "slaveof" : "replicaof";
@@ -1408,2 +1274,2 @@ void configSetCommand(client *c) {
-        snprintf(buf, sizeof(buf), "%s %d", server.masterhost,
-                 server.masterport);
+            snprintf(buf,sizeof(buf),"%s %d",
+                server.masterhost, server.masterport);
@@ -1470,2 +1336 @@ void configSetCommand(client *c) {
-    state->lines =
-        zrealloc(state->lines, sizeof(char *) * (state->numlines + 1));
+    state->lines = zrealloc(state->lines, sizeof(char*) * (state->numlines+1));
@@ -1474,2 +1339 @@ void configSetCommand(client *c) {
-  void rewriteConfigAddLineNumberToOption(struct rewriteConfigState * state,
-                                          sds option, int linenum) {
+void rewriteConfigAddLineNumberToOption(struct rewriteConfigState *state, sds option, int linenum) {
@@ -1483,2 +1347 @@ void configSetCommand(client *c) {
-  void rewriteConfigMarkAsProcessed(struct rewriteConfigState * state,
-                                    const char *option) {
+void rewriteConfigMarkAsProcessed(struct rewriteConfigState *state, const char *option) {
@@ -1524,2 +1387 @@ void configSetCommand(client *c) {
-        alt = sdscatlen(alt, argv[0], p - argv[0]);
-        ;
+            alt = sdscatlen(alt,argv[0],p-argv[0]);;
@@ -1537,2 +1399 @@ void configSetCommand(client *c) {
-  void rewriteConfigRewriteLine(struct rewriteConfigState * state,
-                                const char *option, sds line, int force) {
+void rewriteConfigRewriteLine(struct rewriteConfigState *state, const char *option, sds line, int force) {
@@ -1556 +1417,2 @@ void configSetCommand(client *c) {
-        rewriteConfigAppendLine(state, sdsnew(REDIS_CONFIG_REWRITE_SIGNATURE));
+            rewriteConfigAppendLine(state,
+                sdsnew(REDIS_CONFIG_REWRITE_SIGNATURE));
@@ -1577,2 +1439 @@ void configSetCommand(client *c) {
-  void rewriteConfigBytesOption(struct rewriteConfigState * state, char *option,
-                                long long value, long long defvalue) {
+void rewriteConfigBytesOption(struct rewriteConfigState *state, char *option, long long value, long long defvalue) {
@@ -1586,2 +1447 @@ void configSetCommand(client *c) {
-  void rewriteConfigYesNoOption(struct rewriteConfigState * state,
-                                const char *option, int value, int defvalue) {
+void rewriteConfigYesNoOption(struct rewriteConfigState *state, const char *option, int value, int defvalue) {
@@ -1589 +1449,2 @@ void configSetCommand(client *c) {
-    sds line = sdscatprintf(sdsempty(), "%s %s", option, value ? "yes" : "no");
+    sds line = sdscatprintf(sdsempty(),"%s %s",option,
+        value ? "yes" : "no");
@@ -1592,2 +1453 @@ void configSetCommand(client *c) {
-  void rewriteConfigStringOption(struct rewriteConfigState * state,
-                                 char *option, char *value, char *defvalue) {
+void rewriteConfigStringOption(struct rewriteConfigState *state, char *option, char *value, char *defvalue) {
@@ -1606,3 +1466 @@ void configSetCommand(client *c) {
-  void rewriteConfigNumericalOption(struct rewriteConfigState * state,
-                                    char *option, long long value,
-                                    long long defvalue) {
+void rewriteConfigNumericalOption(struct rewriteConfigState *state, char *option, long long value, long long defvalue) {
@@ -1613,2 +1471 @@ void configSetCommand(client *c) {
-  void rewriteConfigOctalOption(struct rewriteConfigState * state, char *option,
-                                int value, int defvalue) {
+void rewriteConfigOctalOption(struct rewriteConfigState *state, char *option, int value, int defvalue) {
@@ -1619,2 +1476 @@ void configSetCommand(client *c) {
-  void rewriteConfigEnumOption(struct rewriteConfigState * state, char *option,
-                               int value, configEnum *ce, int defval) {
+void rewriteConfigEnumOption(struct rewriteConfigState *state, char *option, int value, configEnum *ce, int defval) {
@@ -1641,2 +1497 @@ void configSetCommand(client *c) {
-                          (long)server.saveparams[j].seconds,
-                          server.saveparams[j].changes);
+            (long) server.saveparams[j].seconds, server.saveparams[j].changes);
@@ -1676,2 +1531 @@ void configSetCommand(client *c) {
-  void rewriteConfigSlaveofOption(struct rewriteConfigState * state,
-                                  char *option) {
+void rewriteConfigSlaveofOption(struct rewriteConfigState *state, char *option) {
@@ -1683,2 +1537,2 @@ void configSetCommand(client *c) {
-    line = sdscatprintf(sdsempty(), "%s %s %d", option, server.masterhost,
-                        server.masterport);
+    line = sdscatprintf(sdsempty(),"%s %s %d", option,
+        server.masterhost, server.masterport);
@@ -1687,2 +1541 @@ void configSetCommand(client *c) {
-  void rewriteConfigNotifykeyspaceeventsOption(struct rewriteConfigState *
-                                               state) {
+void rewriteConfigNotifykeyspaceeventsOption(struct rewriteConfigState *state) {
@@ -1699,2 +1552 @@ void configSetCommand(client *c) {
-  void rewriteConfigClientoutputbufferlimitOption(struct rewriteConfigState *
-                                                  state) {
+void rewriteConfigClientoutputbufferlimitOption(struct rewriteConfigState *state) {
@@ -1718,2 +1570,2 @@ void configSetCommand(client *c) {
-      line = sdscatprintf(
-          sdsempty(), "%s %s %s %s %ld", option, typename, hard, soft,
+        line = sdscatprintf(sdsempty(),"%s %s %s %s %ld",
+                option, typename, hard, soft,
@@ -1739,2 +1591 @@ void configSetCommand(client *c) {
-  void rewriteConfigRequirepassOption(struct rewriteConfigState * state,
-                                      char *option) {
+void rewriteConfigRequirepassOption(struct rewriteConfigState *state, char *option) {
@@ -1831,15 +1682,7 @@ void configSetCommand(client *c) {
-      rewriteConfigYesNoOption(state, config->name, *(config->config),
-                               config->default_value);
-    }
-    rewriteConfigStringOption(state, "pidfile", server.pidfile,
-                              CONFIG_DEFAULT_PID_FILE);
-    rewriteConfigNumericalOption(state, "port", server.port,
-                                 CONFIG_DEFAULT_SERVER_PORT);
-    rewriteConfigNumericalOption(state, "cluster-announce-port",
-                                 server.cluster_announce_port,
-                                 CONFIG_DEFAULT_CLUSTER_ANNOUNCE_PORT);
-    rewriteConfigNumericalOption(state, "cluster-announce-bus-port",
-                                 server.cluster_announce_bus_port,
-                                 CONFIG_DEFAULT_CLUSTER_ANNOUNCE_BUS_PORT);
-    rewriteConfigNumericalOption(state, "tcp-backlog", server.tcp_backlog,
-                                 CONFIG_DEFAULT_TCP_BACKLOG);
+        rewriteConfigYesNoOption(state,config->name,*(config->config),config->default_value);
+    }
+    rewriteConfigStringOption(state,"pidfile",server.pidfile,CONFIG_DEFAULT_PID_FILE);
+    rewriteConfigNumericalOption(state,"port",server.port,CONFIG_DEFAULT_SERVER_PORT);
+    rewriteConfigNumericalOption(state,"cluster-announce-port",server.cluster_announce_port,CONFIG_DEFAULT_CLUSTER_ANNOUNCE_PORT);
+    rewriteConfigNumericalOption(state,"cluster-announce-bus-port",server.cluster_announce_bus_port,CONFIG_DEFAULT_CLUSTER_ANNOUNCE_BUS_PORT);
+    rewriteConfigNumericalOption(state,"tcp-backlog",server.tcp_backlog,CONFIG_DEFAULT_TCP_BACKLOG);
@@ -1848,19 +1691,9 @@ void configSetCommand(client *c) {
-    rewriteConfigOctalOption(state, "unixsocketperm", server.unixsocketperm,
-                             CONFIG_DEFAULT_UNIX_SOCKET_PERM);
-    rewriteConfigNumericalOption(state, "timeout", server.maxidletime,
-                                 CONFIG_DEFAULT_CLIENT_TIMEOUT);
-    rewriteConfigNumericalOption(state, "tcp-keepalive", server.tcpkeepalive,
-                                 CONFIG_DEFAULT_TCP_KEEPALIVE);
-    rewriteConfigNumericalOption(state, "replica-announce-port",
-                                 server.slave_announce_port,
-                                 CONFIG_DEFAULT_SLAVE_ANNOUNCE_PORT);
-    rewriteConfigEnumOption(state, "loglevel", server.verbosity, loglevel_enum,
-                            CONFIG_DEFAULT_VERBOSITY);
-    rewriteConfigStringOption(state, "logfile", server.logfile,
-                              CONFIG_DEFAULT_LOGFILE);
-    rewriteConfigStringOption(state, "aclfile", server.acl_filename,
-                              CONFIG_DEFAULT_ACL_FILENAME);
-    rewriteConfigYesNoOption(state, "syslog-enabled", server.syslog_enabled,
-                             CONFIG_DEFAULT_SYSLOG_ENABLED);
-    rewriteConfigStringOption(state, "syslog-ident", server.syslog_ident,
-                              CONFIG_DEFAULT_SYSLOG_IDENT);
+    rewriteConfigOctalOption(state,"unixsocketperm",server.unixsocketperm,CONFIG_DEFAULT_UNIX_SOCKET_PERM);
+    rewriteConfigNumericalOption(state,"timeout",server.maxidletime,CONFIG_DEFAULT_CLIENT_TIMEOUT);
+    rewriteConfigNumericalOption(state,"tcp-keepalive",server.tcpkeepalive,CONFIG_DEFAULT_TCP_KEEPALIVE);
+    rewriteConfigNumericalOption(state,"replica-announce-port",server.slave_announce_port,CONFIG_DEFAULT_SLAVE_ANNOUNCE_PORT);
+    rewriteConfigEnumOption(state,"loglevel",server.verbosity,loglevel_enum,CONFIG_DEFAULT_VERBOSITY);
+    rewriteConfigStringOption(state,"logfile",server.logfile,CONFIG_DEFAULT_LOGFILE);
+    rewriteConfigStringOption(state,"aclfile",server.acl_filename,CONFIG_DEFAULT_ACL_FILENAME);
+    rewriteConfigYesNoOption(state,"syslog-enabled",server.syslog_enabled,CONFIG_DEFAULT_SYSLOG_ENABLED);
+    rewriteConfigStringOption(state,"syslog-ident",server.syslog_ident,CONFIG_DEFAULT_SYSLOG_IDENT);
@@ -1870,6 +1703,3 @@ void configSetCommand(client *c) {
-    rewriteConfigNumericalOption(state, "databases", server.dbnum,
-                                 CONFIG_DEFAULT_DBNUM);
-    rewriteConfigNumericalOption(state, "io-threads", server.dbnum,
-                                 CONFIG_DEFAULT_IO_THREADS_NUM);
-    rewriteConfigStringOption(state, "dbfilename", server.rdb_filename,
-                              CONFIG_DEFAULT_RDB_FILENAME);
+    rewriteConfigNumericalOption(state,"databases",server.dbnum,CONFIG_DEFAULT_DBNUM);
+    rewriteConfigNumericalOption(state,"io-threads",server.dbnum,CONFIG_DEFAULT_IO_THREADS_NUM);
+    rewriteConfigStringOption(state,"dbfilename",server.rdb_filename,CONFIG_DEFAULT_RDB_FILENAME);
@@ -1878,3 +1708 @@ void configSetCommand(client *c) {
-    rewriteConfigStringOption(state, "replica-announce-ip",
-                              server.slave_announce_ip,
-                              CONFIG_DEFAULT_SLAVE_ANNOUNCE_IP);
+    rewriteConfigStringOption(state,"replica-announce-ip",server.slave_announce_ip,CONFIG_DEFAULT_SLAVE_ANNOUNCE_IP);
@@ -1883,28 +1711,10 @@ void configSetCommand(client *c) {
-    rewriteConfigStringOption(state, "cluster-announce-ip",
-                              server.cluster_announce_ip, NULL);
-    rewriteConfigNumericalOption(state, "repl-ping-replica-period",
-                                 server.repl_ping_slave_period,
-                                 CONFIG_DEFAULT_REPL_PING_SLAVE_PERIOD);
-    rewriteConfigNumericalOption(state, "repl-timeout", server.repl_timeout,
-                                 CONFIG_DEFAULT_REPL_TIMEOUT);
-    rewriteConfigBytesOption(state, "repl-backlog-size",
-                             server.repl_backlog_size,
-                             CONFIG_DEFAULT_REPL_BACKLOG_SIZE);
-    rewriteConfigBytesOption(state, "repl-backlog-ttl",
-                             server.repl_backlog_time_limit,
-                             CONFIG_DEFAULT_REPL_BACKLOG_TIME_LIMIT);
-    rewriteConfigEnumOption(state, "repl-diskless-load",
-                            server.repl_diskless_load, repl_diskless_load_enum,
-                            CONFIG_DEFAULT_REPL_DISKLESS_LOAD);
-    rewriteConfigNumericalOption(state, "repl-diskless-sync-delay",
-                                 server.repl_diskless_sync_delay,
-                                 CONFIG_DEFAULT_REPL_DISKLESS_SYNC_DELAY);
-    rewriteConfigNumericalOption(state, "replica-priority",
-                                 server.slave_priority,
-                                 CONFIG_DEFAULT_SLAVE_PRIORITY);
-    rewriteConfigNumericalOption(state, "min-replicas-to-write",
-                                 server.repl_min_slaves_to_write,
-                                 CONFIG_DEFAULT_MIN_SLAVES_TO_WRITE);
-    rewriteConfigNumericalOption(state, "min-replicas-max-lag",
-                                 server.repl_min_slaves_max_lag,
-                                 CONFIG_DEFAULT_MIN_SLAVES_MAX_LAG);
+    rewriteConfigStringOption(state,"cluster-announce-ip",server.cluster_announce_ip,NULL);
+    rewriteConfigNumericalOption(state,"repl-ping-replica-period",server.repl_ping_slave_period,CONFIG_DEFAULT_REPL_PING_SLAVE_PERIOD);
+    rewriteConfigNumericalOption(state,"repl-timeout",server.repl_timeout,CONFIG_DEFAULT_REPL_TIMEOUT);
+    rewriteConfigBytesOption(state,"repl-backlog-size",server.repl_backlog_size,CONFIG_DEFAULT_REPL_BACKLOG_SIZE);
+    rewriteConfigBytesOption(state,"repl-backlog-ttl",server.repl_backlog_time_limit,CONFIG_DEFAULT_REPL_BACKLOG_TIME_LIMIT);
+    rewriteConfigEnumOption(state,"repl-diskless-load",server.repl_diskless_load,repl_diskless_load_enum,CONFIG_DEFAULT_REPL_DISKLESS_LOAD);
+    rewriteConfigNumericalOption(state,"repl-diskless-sync-delay",server.repl_diskless_sync_delay,CONFIG_DEFAULT_REPL_DISKLESS_SYNC_DELAY);
+    rewriteConfigNumericalOption(state,"replica-priority",server.slave_priority,CONFIG_DEFAULT_SLAVE_PRIORITY);
+    rewriteConfigNumericalOption(state,"min-replicas-to-write",server.repl_min_slaves_to_write,CONFIG_DEFAULT_MIN_SLAVES_TO_WRITE);
+    rewriteConfigNumericalOption(state,"min-replicas-max-lag",server.repl_min_slaves_max_lag,CONFIG_DEFAULT_MIN_SLAVES_MAX_LAG);
@@ -1912,38 +1722,14 @@ void configSetCommand(client *c) {
-    rewriteConfigNumericalOption(state, "maxclients", server.maxclients,
-                                 CONFIG_DEFAULT_MAX_CLIENTS);
-    rewriteConfigBytesOption(state, "maxmemory", server.maxmemory,
-                             CONFIG_DEFAULT_MAXMEMORY);
-    rewriteConfigBytesOption(state, "proto-max-bulk-len",
-                             server.proto_max_bulk_len,
-                             CONFIG_DEFAULT_PROTO_MAX_BULK_LEN);
-    rewriteConfigBytesOption(state, "client-query-buffer-limit",
-                             server.client_max_querybuf_len,
-                             PROTO_MAX_QUERYBUF_LEN);
-    rewriteConfigEnumOption(state, "maxmemory-policy", server.maxmemory_policy,
-                            maxmemory_policy_enum,
-                            CONFIG_DEFAULT_MAXMEMORY_POLICY);
-    rewriteConfigNumericalOption(state, "maxmemory-samples",
-                                 server.maxmemory_samples,
-                                 CONFIG_DEFAULT_MAXMEMORY_SAMPLES);
-    rewriteConfigNumericalOption(state, "lfu-log-factor", server.lfu_log_factor,
-                                 CONFIG_DEFAULT_LFU_LOG_FACTOR);
-    rewriteConfigNumericalOption(state, "lfu-decay-time", server.lfu_decay_time,
-                                 CONFIG_DEFAULT_LFU_DECAY_TIME);
-    rewriteConfigNumericalOption(state, "active-defrag-threshold-lower",
-                                 server.active_defrag_threshold_lower,
-                                 CONFIG_DEFAULT_DEFRAG_THRESHOLD_LOWER);
-    rewriteConfigNumericalOption(state, "active-defrag-threshold-upper",
-                                 server.active_defrag_threshold_upper,
-                                 CONFIG_DEFAULT_DEFRAG_THRESHOLD_UPPER);
-    rewriteConfigBytesOption(state, "active-defrag-ignore-bytes",
-                             server.active_defrag_ignore_bytes,
-                             CONFIG_DEFAULT_DEFRAG_IGNORE_BYTES);
-    rewriteConfigNumericalOption(state, "active-defrag-cycle-min",
-                                 server.active_defrag_cycle_min,
-                                 CONFIG_DEFAULT_DEFRAG_CYCLE_MIN);
-    rewriteConfigNumericalOption(state, "active-defrag-cycle-max",
-                                 server.active_defrag_cycle_max,
-                                 CONFIG_DEFAULT_DEFRAG_CYCLE_MAX);
-    rewriteConfigNumericalOption(state, "active-defrag-max-scan-fields",
-                                 server.active_defrag_max_scan_fields,
-                                 CONFIG_DEFAULT_DEFRAG_MAX_SCAN_FIELDS);
+    rewriteConfigNumericalOption(state,"maxclients",server.maxclients,CONFIG_DEFAULT_MAX_CLIENTS);
+    rewriteConfigBytesOption(state,"maxmemory",server.maxmemory,CONFIG_DEFAULT_MAXMEMORY);
+    rewriteConfigBytesOption(state,"proto-max-bulk-len",server.proto_max_bulk_len,CONFIG_DEFAULT_PROTO_MAX_BULK_LEN);
+    rewriteConfigBytesOption(state,"client-query-buffer-limit",server.client_max_querybuf_len,PROTO_MAX_QUERYBUF_LEN);
+    rewriteConfigEnumOption(state,"maxmemory-policy",server.maxmemory_policy,maxmemory_policy_enum,CONFIG_DEFAULT_MAXMEMORY_POLICY);
+    rewriteConfigNumericalOption(state,"maxmemory-samples",server.maxmemory_samples,CONFIG_DEFAULT_MAXMEMORY_SAMPLES);
+    rewriteConfigNumericalOption(state,"lfu-log-factor",server.lfu_log_factor,CONFIG_DEFAULT_LFU_LOG_FACTOR);
+    rewriteConfigNumericalOption(state,"lfu-decay-time",server.lfu_decay_time,CONFIG_DEFAULT_LFU_DECAY_TIME);
+    rewriteConfigNumericalOption(state,"active-defrag-threshold-lower",server.active_defrag_threshold_lower,CONFIG_DEFAULT_DEFRAG_THRESHOLD_LOWER);
+    rewriteConfigNumericalOption(state,"active-defrag-threshold-upper",server.active_defrag_threshold_upper,CONFIG_DEFAULT_DEFRAG_THRESHOLD_UPPER);
+    rewriteConfigBytesOption(state,"active-defrag-ignore-bytes",server.active_defrag_ignore_bytes,CONFIG_DEFAULT_DEFRAG_IGNORE_BYTES);
+    rewriteConfigNumericalOption(state,"active-defrag-cycle-min",server.active_defrag_cycle_min,CONFIG_DEFAULT_DEFRAG_CYCLE_MIN);
+    rewriteConfigNumericalOption(state,"active-defrag-cycle-max",server.active_defrag_cycle_max,CONFIG_DEFAULT_DEFRAG_CYCLE_MAX);
+    rewriteConfigNumericalOption(state,"active-defrag-max-scan-fields",server.active_defrag_max_scan_fields,CONFIG_DEFAULT_DEFRAG_MAX_SCAN_FIELDS);
@@ -1951,36 +1737,14 @@ void configSetCommand(client *c) {
-    rewriteConfigStringOption(state, "appendfilename", server.aof_filename,
-                              CONFIG_DEFAULT_AOF_FILENAME);
-    rewriteConfigEnumOption(state, "appendfsync", server.aof_fsync,
-                            aof_fsync_enum, CONFIG_DEFAULT_AOF_FSYNC);
-    rewriteConfigNumericalOption(state, "auto-aof-rewrite-percentage",
-                                 server.aof_rewrite_perc, AOF_REWRITE_PERC);
-    rewriteConfigBytesOption(state, "auto-aof-rewrite-min-size",
-                             server.aof_rewrite_min_size, AOF_REWRITE_MIN_SIZE);
-    rewriteConfigNumericalOption(state, "lua-time-limit", server.lua_time_limit,
-                                 LUA_SCRIPT_TIME_LIMIT);
-    rewriteConfigYesNoOption(state, "cluster-enabled", server.cluster_enabled,
-                             0);
-    rewriteConfigStringOption(state, "cluster-config-file",
-                              server.cluster_configfile,
-                              CONFIG_DEFAULT_CLUSTER_CONFIG_FILE);
-    rewriteConfigNumericalOption(state, "cluster-node-timeout",
-                                 server.cluster_node_timeout,
-                                 CLUSTER_DEFAULT_NODE_TIMEOUT);
-    rewriteConfigNumericalOption(state, "cluster-migration-barrier",
-                                 server.cluster_migration_barrier,
-                                 CLUSTER_DEFAULT_MIGRATION_BARRIER);
-    rewriteConfigNumericalOption(state, "cluster-replica-validity-factor",
-                                 server.cluster_slave_validity_factor,
-                                 CLUSTER_DEFAULT_SLAVE_VALIDITY);
-    rewriteConfigNumericalOption(state, "slowlog-log-slower-than",
-                                 server.slowlog_log_slower_than,
-                                 CONFIG_DEFAULT_SLOWLOG_LOG_SLOWER_THAN);
-    rewriteConfigNumericalOption(state, "latency-monitor-threshold",
-                                 server.latency_monitor_threshold,
-                                 CONFIG_DEFAULT_LATENCY_MONITOR_THRESHOLD);
-    rewriteConfigNumericalOption(state, "slowlog-max-len",
-                                 server.slowlog_max_len,
-                                 CONFIG_DEFAULT_SLOWLOG_MAX_LEN);
-    rewriteConfigNumericalOption(state, "tracking-table-max-fill",
-                                 server.tracking_table_max_fill,
-                                 CONFIG_DEFAULT_TRACKING_TABLE_MAX_FILL);
+    rewriteConfigStringOption(state,"appendfilename",server.aof_filename,CONFIG_DEFAULT_AOF_FILENAME);
+    rewriteConfigEnumOption(state,"appendfsync",server.aof_fsync,aof_fsync_enum,CONFIG_DEFAULT_AOF_FSYNC);
+    rewriteConfigNumericalOption(state,"auto-aof-rewrite-percentage",server.aof_rewrite_perc,AOF_REWRITE_PERC);
+    rewriteConfigBytesOption(state,"auto-aof-rewrite-min-size",server.aof_rewrite_min_size,AOF_REWRITE_MIN_SIZE);
+    rewriteConfigNumericalOption(state,"lua-time-limit",server.lua_time_limit,LUA_SCRIPT_TIME_LIMIT);
+    rewriteConfigYesNoOption(state,"cluster-enabled",server.cluster_enabled,0);
+    rewriteConfigStringOption(state,"cluster-config-file",server.cluster_configfile,CONFIG_DEFAULT_CLUSTER_CONFIG_FILE);
+    rewriteConfigNumericalOption(state,"cluster-node-timeout",server.cluster_node_timeout,CLUSTER_DEFAULT_NODE_TIMEOUT);
+    rewriteConfigNumericalOption(state,"cluster-migration-barrier",server.cluster_migration_barrier,CLUSTER_DEFAULT_MIGRATION_BARRIER);
+    rewriteConfigNumericalOption(state,"cluster-replica-validity-factor",server.cluster_slave_validity_factor,CLUSTER_DEFAULT_SLAVE_VALIDITY);
+    rewriteConfigNumericalOption(state,"slowlog-log-slower-than",server.slowlog_log_slower_than,CONFIG_DEFAULT_SLOWLOG_LOG_SLOWER_THAN);
+    rewriteConfigNumericalOption(state,"latency-monitor-threshold",server.latency_monitor_threshold,CONFIG_DEFAULT_LATENCY_MONITOR_THRESHOLD);
+    rewriteConfigNumericalOption(state,"slowlog-max-len",server.slowlog_max_len,CONFIG_DEFAULT_SLOWLOG_MAX_LEN);
+    rewriteConfigNumericalOption(state,"tracking-table-max-fill",server.tracking_table_max_fill,CONFIG_DEFAULT_TRACKING_TABLE_MAX_FILL);
@@ -1988,53 +1752,11 @@ void configSetCommand(client *c) {
-    rewriteConfigNumericalOption(state, "hash-max-ziplist-entries",
-                                 server.hash_max_ziplist_entries,
-                                 OBJ_HASH_MAX_ZIPLIST_ENTRIES);
-    rewriteConfigNumericalOption(state, "hash-max-ziplist-value",
-                                 server.hash_max_ziplist_value,
-                                 OBJ_HASH_MAX_ZIPLIST_VALUE);
-    rewriteConfigNumericalOption(state, "stream-node-max-bytes",
-                                 server.stream_node_max_bytes,
-                                 OBJ_STREAM_NODE_MAX_BYTES);
-    rewriteConfigNumericalOption(state, "stream-node-max-entries",
-                                 server.stream_node_max_entries,
-                                 OBJ_STREAM_NODE_MAX_ENTRIES);
-    rewriteConfigNumericalOption(state, "list-max-ziplist-size",
-                                 server.list_max_ziplist_size,
-                                 OBJ_LIST_MAX_ZIPLIST_SIZE);
-    rewriteConfigNumericalOption(state, "list-compress-depth",
-                                 server.list_compress_depth,
-                                 OBJ_LIST_COMPRESS_DEPTH);
-    rewriteConfigNumericalOption(state, "set-max-intset-entries",
-                                 server.set_max_intset_entries,
-                                 OBJ_SET_MAX_INTSET_ENTRIES);
-    rewriteConfigNumericalOption(state, "zset-max-ziplist-entries",
-                                 server.zset_max_ziplist_entries,
-                                 OBJ_ZSET_MAX_ZIPLIST_ENTRIES);
-    rewriteConfigNumericalOption(state, "zset-max-ziplist-value",
-                                 server.zset_max_ziplist_value,
-                                 OBJ_ZSET_MAX_ZIPLIST_VALUE);
-    rewriteConfigNumericalOption(state, "hll-sparse-max-bytes",
-                                 server.hll_sparse_max_bytes,
-                                 CONFIG_DEFAULT_HLL_SPARSE_MAX_BYTES);
-    rewriteConfigYesNoOption(state, "activedefrag",
-                             server.active_defrag_enabled,
-                             CONFIG_DEFAULT_ACTIVE_DEFRAG);
-<<<<<<< HEAD
-    rewriteConfigYesNoOption(state, "jemalloc-bg-thread",
-                             server.jemalloc_bg_thread, 1);
-    rewriteConfigYesNoOption(state, "protected-mode", server.protected_mode,
-                             CONFIG_DEFAULT_PROTECTED_MODE);
-    rewriteConfigYesNoOption(state, "gopher-enabled", server.gopher_enabled,
-                             CONFIG_DEFAULT_GOPHER_ENABLED);
-    rewriteConfigYesNoOption(state, "io-threads-do-reads",
-                             server.io_threads_do_reads,
-                             CONFIG_DEFAULT_IO_THREADS_DO_READS);
-|||||||
-    rewriteConfigYesNoOption(state, "protected-mode", server.protected_mode,
-                             CONFIG_DEFAULT_PROTECTED_MODE);
-    rewriteConfigYesNoOption(state, "gopher-enabled", server.gopher_enabled,
-                             CONFIG_DEFAULT_GOPHER_ENABLED);
-    rewriteConfigYesNoOption(state, "io-threads-do-reads",
-                             server.io_threads_do_reads,
-                             CONFIG_DEFAULT_IO_THREADS_DO_READS);
-=======
->>>>>>> ee1cef189fff604f165b2d20a307545840de944e
+    rewriteConfigNumericalOption(state,"hash-max-ziplist-entries",server.hash_max_ziplist_entries,OBJ_HASH_MAX_ZIPLIST_ENTRIES);
+    rewriteConfigNumericalOption(state,"hash-max-ziplist-value",server.hash_max_ziplist_value,OBJ_HASH_MAX_ZIPLIST_VALUE);
+    rewriteConfigNumericalOption(state,"stream-node-max-bytes",server.stream_node_max_bytes,OBJ_STREAM_NODE_MAX_BYTES);
+    rewriteConfigNumericalOption(state,"stream-node-max-entries",server.stream_node_max_entries,OBJ_STREAM_NODE_MAX_ENTRIES);
+    rewriteConfigNumericalOption(state,"list-max-ziplist-size",server.list_max_ziplist_size,OBJ_LIST_MAX_ZIPLIST_SIZE);
+    rewriteConfigNumericalOption(state,"list-compress-depth",server.list_compress_depth,OBJ_LIST_COMPRESS_DEPTH);
+    rewriteConfigNumericalOption(state,"set-max-intset-entries",server.set_max_intset_entries,OBJ_SET_MAX_INTSET_ENTRIES);
+    rewriteConfigNumericalOption(state,"zset-max-ziplist-entries",server.zset_max_ziplist_entries,OBJ_ZSET_MAX_ZIPLIST_ENTRIES);
+    rewriteConfigNumericalOption(state,"zset-max-ziplist-value",server.zset_max_ziplist_value,OBJ_ZSET_MAX_ZIPLIST_VALUE);
+    rewriteConfigNumericalOption(state,"hll-sparse-max-bytes",server.hll_sparse_max_bytes,CONFIG_DEFAULT_HLL_SPARSE_MAX_BYTES);
+    rewriteConfigYesNoOption(state,"activedefrag",server.active_defrag_enabled,CONFIG_DEFAULT_ACTIVE_DEFRAG);
@@ -2042,7 +1764,3 @@ void configSetCommand(client *c) {
-    rewriteConfigNumericalOption(state, "hz", server.config_hz,
-                                 CONFIG_DEFAULT_HZ);
-    rewriteConfigEnumOption(state, "supervised", server.supervised_mode,
-                            supervised_mode_enum, SUPERVISED_NONE);
-    rewriteConfigNumericalOption(state, "rdb-key-save-delay",
-                                 server.rdb_key_save_delay,
-                                 CONFIG_DEFAULT_RDB_KEY_SAVE_DELAY);
+    rewriteConfigNumericalOption(state,"hz",server.config_hz,CONFIG_DEFAULT_HZ);
+    rewriteConfigEnumOption(state,"supervised",server.supervised_mode,supervised_mode_enum,SUPERVISED_NONE);
+    rewriteConfigNumericalOption(state,"rdb-key-save-delay",server.rdb_key_save_delay,CONFIG_DEFAULT_RDB_KEY_SAVE_DELAY);
@@ -2064,2 +1782 @@ void configSetCommand(client *c) {
-          "GET <pattern> -- Return parameters matching the glob-like <pattern> "
-          "and their values.",
+"GET <pattern> -- Return parameters matching the glob-like <pattern> and their values.",
@@ -2068 +1785,3 @@ void configSetCommand(client *c) {
-          "REWRITE -- Rewrite the configuration file.", NULL};
+"REWRITE -- Rewrite the configuration file.",
+NULL
+        };
