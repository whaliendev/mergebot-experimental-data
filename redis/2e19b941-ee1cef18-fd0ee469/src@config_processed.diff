--- a/home/whalien/codebase/cpp/mergebot/eva/output/redis/2e19b941-ee1cef18-fd0ee469/src@config.no_comments_mergebot.c
+++ b/home/whalien/codebase/cpp/mergebot/eva/output/redis/2e19b941-ee1cef18-fd0ee469/src@config.no_comments_merged.c
@@ -72,38 +80,20 @@ configYesNo configs_yesno[] = {
-    {"lazyfree-lazy-eviction", NULL, &server.lazyfree_lazy_eviction, 1,
-     CONFIG_DEFAULT_LAZYFREE_LAZY_EVICTION},
-    {"lazyfree-lazy-expire", NULL, &server.lazyfree_lazy_expire, 1,
-     CONFIG_DEFAULT_LAZYFREE_LAZY_EXPIRE},
-    {"lazyfree-lazy-server-del", NULL, &server.lazyfree_lazy_server_del, 1,
-     CONFIG_DEFAULT_LAZYFREE_LAZY_SERVER_DEL},
-    {"repl-disable-tcp-nodelay", NULL, &server.repl_disable_tcp_nodelay, 1,
-     CONFIG_DEFAULT_REPL_DISABLE_TCP_NODELAY},
-    {"repl-diskless-sync", NULL, &server.repl_diskless_sync, 1,
-     CONFIG_DEFAULT_REPL_DISKLESS_SYNC},
-    {"gopher-enabled", NULL, &server.gopher_enabled, 1,
-     CONFIG_DEFAULT_GOPHER_ENABLED},
-    {"aof-rewrite-incremental-fsync", NULL,
-     &server.aof_rewrite_incremental_fsync, 1,
-     CONFIG_DEFAULT_AOF_REWRITE_INCREMENTAL_FSYNC},
-    {"no-appendfsync-on-rewrite", NULL, &server.aof_no_fsync_on_rewrite, 1,
-     CONFIG_DEFAULT_AOF_NO_FSYNC_ON_REWRITE},
-    {"cluster-require-full-coverage", NULL,
-     &server.cluster_require_full_coverage,
-     CLUSTER_DEFAULT_REQUIRE_FULL_COVERAGE},
-    {"rdb-save-incremental-fsync", NULL, &server.rdb_save_incremental_fsync, 1,
-     CONFIG_DEFAULT_RDB_SAVE_INCREMENTAL_FSYNC},
-    {"aof-load-truncated", NULL, &server.aof_load_truncated, 1,
-     CONFIG_DEFAULT_AOF_LOAD_TRUNCATED},
-    {"aof-use-rdb-preamble", NULL, &server.aof_use_rdb_preamble, 1,
-     CONFIG_DEFAULT_AOF_USE_RDB_PREAMBLE},
-    {"cluster-replica-no-failover", "cluster-slave-no-failover",
-     &server.cluster_slave_no_failover, 1, CLUSTER_DEFAULT_SLAVE_NO_FAILOVER},
-    {"replica-lazy-flush", "slave-lazy-flush", &server.repl_slave_lazy_flush, 1,
-     CONFIG_DEFAULT_SLAVE_LAZY_FLUSH},
-    {"replica-serve-stale-data", "slave-serve-stale-data",
-     &server.repl_serve_stale_data, 1, CONFIG_DEFAULT_SLAVE_SERVE_STALE_DATA},
-    {"replica-read-only", "slave-read-only", &server.repl_slave_ro, 1,
-     CONFIG_DEFAULT_SLAVE_READ_ONLY},
-    {"replica-ignore-maxmemory", "slave-ignore-maxmemory",
-     &server.repl_slave_ignore_maxmemory, 1,
-     CONFIG_DEFAULT_SLAVE_IGNORE_MAXMEMORY},
-    {NULL, NULL, 0, 0}};
+    {"lazyfree-lazy-eviction",NULL,&server.lazyfree_lazy_eviction,1,CONFIG_DEFAULT_LAZYFREE_LAZY_EVICTION},
+    {"lazyfree-lazy-expire",NULL,&server.lazyfree_lazy_expire,1,CONFIG_DEFAULT_LAZYFREE_LAZY_EXPIRE},
+    {"lazyfree-lazy-server-del",NULL,&server.lazyfree_lazy_server_del,1,CONFIG_DEFAULT_LAZYFREE_LAZY_SERVER_DEL},
+    {"repl-disable-tcp-nodelay",NULL,&server.repl_disable_tcp_nodelay,1,CONFIG_DEFAULT_REPL_DISABLE_TCP_NODELAY},
+    {"repl-diskless-sync",NULL,&server.repl_diskless_sync,1,CONFIG_DEFAULT_REPL_DISKLESS_SYNC},
+    {"gopher-enabled",NULL,&server.gopher_enabled,1,CONFIG_DEFAULT_GOPHER_ENABLED},
+    {"aof-rewrite-incremental-fsync",NULL,&server.aof_rewrite_incremental_fsync,1,CONFIG_DEFAULT_AOF_REWRITE_INCREMENTAL_FSYNC},
+    {"no-appendfsync-on-rewrite",NULL,&server.aof_no_fsync_on_rewrite,1,CONFIG_DEFAULT_AOF_NO_FSYNC_ON_REWRITE},
+    {"cluster-require-full-coverage",NULL,&server.cluster_require_full_coverage,CLUSTER_DEFAULT_REQUIRE_FULL_COVERAGE},
+    {"rdb-save-incremental-fsync",NULL,&server.rdb_save_incremental_fsync,1,CONFIG_DEFAULT_RDB_SAVE_INCREMENTAL_FSYNC},
+    {"aof-load-truncated",NULL,&server.aof_load_truncated,1,CONFIG_DEFAULT_AOF_LOAD_TRUNCATED},
+    {"aof-use-rdb-preamble",NULL,&server.aof_use_rdb_preamble,1,CONFIG_DEFAULT_AOF_USE_RDB_PREAMBLE},
+    {"cluster-replica-no-failover","cluster-slave-no-failover",&server.cluster_slave_no_failover,1,CLUSTER_DEFAULT_SLAVE_NO_FAILOVER},
+    {"replica-lazy-flush","slave-lazy-flush",&server.repl_slave_lazy_flush,1,CONFIG_DEFAULT_SLAVE_LAZY_FLUSH},
+    {"replica-serve-stale-data","slave-serve-stale-data",&server.repl_serve_stale_data,1,CONFIG_DEFAULT_SLAVE_SERVE_STALE_DATA},
+    {"replica-read-only","slave-read-only",&server.repl_slave_ro,1,CONFIG_DEFAULT_SLAVE_READ_ONLY},
+    {"replica-ignore-maxmemory","slave-ignore-maxmemory",&server.repl_slave_ignore_maxmemory,1,CONFIG_DEFAULT_SLAVE_IGNORE_MAXMEMORY},
+    {"jemalloc-bg-thread",NULL,&server.jemalloc_bg_thread,1,1},
+    {NULL, NULL, 0, 0}
+};
@@ -298,3 +275 @@ void loadServerConfigFromString(char *config) {
-        err =
-            "Invalid log facility. Must be one of USER or between "
-            "LOCAL0-LOCAL7";
+                err = "Invalid log facility. Must be one of USER or between LOCAL0-LOCAL7";
@@ -420,29 +386,0 @@ void loadServerConfigFromString(char *config) {
-<<<<<<< HEAD
-    } else if (!strcasecmp(argv[0], "jemalloc-bg-thread") && argc == 2) {
-      if ((server.jemalloc_bg_thread = yesnotoi(argv[1])) == -1) {
-        err = "argument must be 'yes' or 'no'";
-        goto loaderr;
-      }
-    } else if (!strcasecmp(argv[0], "daemonize") && argc == 2) {
-      if ((server.daemonize = yesnotoi(argv[1])) == -1) {
-        err = "argument must be 'yes' or 'no'";
-        goto loaderr;
-      }
-    } else if (!strcasecmp(argv[0], "dynamic-hz") && argc == 2) {
-      if ((server.dynamic_hz = yesnotoi(argv[1])) == -1) {
-        err = "argument must be 'yes' or 'no'";
-        goto loaderr;
-      }
-|||||||
-    } else if (!strcasecmp(argv[0], "daemonize") && argc == 2) {
-      if ((server.daemonize = yesnotoi(argv[1])) == -1) {
-        err = "argument must be 'yes' or 'no'";
-        goto loaderr;
-      }
-    } else if (!strcasecmp(argv[0], "dynamic-hz") && argc == 2) {
-      if ((server.dynamic_hz = yesnotoi(argv[1])) == -1) {
-        err = "argument must be 'yes' or 'no'";
-        goto loaderr;
-      }
-=======
->>>>>>> ee1cef189fff604f165b2d20a307545840de944e
@@ -800,3 +738,27 @@ void loadServerConfig(char *filename, char *options) {
-#define config_set_else \
-  } \
-  else
+#define config_set_bool_field(_name,_var) \
+    } else if (!strcasecmp(c->argv[2]->ptr,_name)) { \
+        int yn = yesnotoi(o->ptr); \
+        if (yn == -1) goto badfmt; \
+        _var = yn;
+#define config_set_numerical_field(_name,_var,min,max) \
+    } else if (!strcasecmp(c->argv[2]->ptr,_name)) { \
+        if (getLongLongFromObject(o,&ll) == C_ERR) goto badfmt; \
+        if (min != LLONG_MIN && ll < min) goto badfmt; \
+        if (max != LLONG_MAX && ll > max) goto badfmt; \
+        _var = ll;
+#define config_set_memory_field(_name,_var) \
+    } else if (!strcasecmp(c->argv[2]->ptr,_name)) { \
+        ll = memtoll(o->ptr,&err); \
+        if (err || ll < 0) goto badfmt; \
+        _var = ll;
+#define config_set_enum_field(_name,_var,_enumvar) \
+    } else if (!strcasecmp(c->argv[2]->ptr,_name)) { \
+        int enumval = configEnumGetValue(_enumvar,o->ptr); \
+        if (enumval == INT_MIN) goto badfmt; \
+        _var = enumval;
+#define config_set_special_field(_name) \
+    } else if (!strcasecmp(c->argv[2]->ptr,_name)) {
+#define config_set_special_field_with_alias(_name1,_name2) \
+    } else if (!strcasecmp(c->argv[2]->ptr,_name1) || \
+               !strcasecmp(c->argv[2]->ptr,_name2)) {
+#define config_set_else } else
@@ -856,4 +813 @@ void configSetCommand(client *c) {
-          addReplyErrorFormat(c,
-                              "The operating system is not able to handle the "
-                              "specified number of clients, try with %d",
-                              server.maxclients);
+                addReplyErrorFormat(c,"The operating system is not able to handle the specified number of clients, try with %d", server.maxclients);
@@ -864,6 +818,6 @@ void configSetCommand(client *c) {
-            server.maxclients + CONFIG_FDSET_INCR) {
-          if (aeResizeSetSize(
-                  server.el, server.maxclients + CONFIG_FDSET_INCR) == AE_ERR) {
-            addReplyError(c,
-                          "The event loop API used by Redis is not able to "
-                          "handle the specified number of clients");
+                server.maxclients + CONFIG_FDSET_INCR)
+            {
+                if (aeResizeSetSize(server.el,
+                    server.maxclients + CONFIG_FDSET_INCR) == AE_ERR)
+                {
+                    addReplyError(c,"The event loop API used by Redis is not able to handle the specified number of clients");
@@ -982,88 +932,50 @@ void configSetCommand(client *c) {
-      <<<<<<< HEAD
-    }
-    config_set_bool_field("jemalloc-bg-thread", server.jemalloc_bg_thread) {
-      set_jemalloc_bg_thread(server.jemalloc_bg_thread);
-    }
-    config_set_bool_field("protected-mode", server.protected_mode) {}
-    config_set_bool_field("gopher-enabled", server.gopher_enabled) {}
-    config_set_bool_field("stop-writes-on-bgsave-error",
-                          server.stop_writes_on_bgsave_err) {}
-    config_set_bool_field("lazyfree-lazy-eviction",
-                          server.lazyfree_lazy_eviction) {}
-    config_set_bool_field("lazyfree-lazy-expire", server.lazyfree_lazy_expire) {
-    }
-    config_set_bool_field("lazyfree-lazy-server-del",
-                          server.lazyfree_lazy_server_del) {}
-    config_set_bool_field("slave-lazy-flush", server.repl_slave_lazy_flush) {}
-    config_set_bool_field("replica-lazy-flush", server.repl_slave_lazy_flush) {}
-    config_set_bool_field("no-appendfsync-on-rewrite",
-                          server.aof_no_fsync_on_rewrite) {}
-    config_set_bool_field("dynamic-hz", server.dynamic_hz){
-|||||||
-    } config_set_bool_field("protected-mode", server.protected_mode) {}
-    config_set_bool_field("gopher-enabled", server.gopher_enabled) {}
-    config_set_bool_field("stop-writes-on-bgsave-error",
-                          server.stop_writes_on_bgsave_err) {}
-    config_set_bool_field("lazyfree-lazy-eviction",
-                          server.lazyfree_lazy_eviction) {}
-    config_set_bool_field("lazyfree-lazy-expire", server.lazyfree_lazy_expire) {
-    }
-    config_set_bool_field("lazyfree-lazy-server-del",
-                          server.lazyfree_lazy_server_del) {}
-    config_set_bool_field("slave-lazy-flush", server.repl_slave_lazy_flush) {}
-    config_set_bool_field("replica-lazy-flush", server.repl_slave_lazy_flush) {}
-    config_set_bool_field("no-appendfsync-on-rewrite",
-                          server.aof_no_fsync_on_rewrite) {}
-    config_set_bool_field("dynamic-hz", server.dynamic_hz){
-=======
->>>>>>> ee1cef189fff604f165b2d20a307545840de944e
-    } config_set_numerical_field("tcp-keepalive", server.tcpkeepalive, 0,
-                                 INT_MAX) {}
-    config_set_numerical_field("maxmemory-samples", server.maxmemory_samples, 1,
-                               INT_MAX) {}
-    config_set_numerical_field("lfu-log-factor", server.lfu_log_factor, 0,
-                               INT_MAX) {}
-    config_set_numerical_field("lfu-decay-time", server.lfu_decay_time, 0,
-                               INT_MAX) {}
-    config_set_numerical_field("timeout", server.maxidletime, 0, INT_MAX) {}
-    config_set_numerical_field("active-defrag-threshold-lower",
-                               server.active_defrag_threshold_lower, 0, 1000) {}
-    config_set_numerical_field("active-defrag-threshold-upper",
-                               server.active_defrag_threshold_upper, 0, 1000) {}
-    config_set_memory_field("active-defrag-ignore-bytes",
-                            server.active_defrag_ignore_bytes) {}
-    config_set_numerical_field("active-defrag-cycle-min",
-                               server.active_defrag_cycle_min, 1, 99) {}
-    config_set_numerical_field("active-defrag-cycle-max",
-                               server.active_defrag_cycle_max, 1, 99) {}
-    config_set_numerical_field("active-defrag-max-scan-fields",
-                               server.active_defrag_max_scan_fields, 1,
-                               LONG_MAX) {}
-    config_set_numerical_field("auto-aof-rewrite-percentage",
-                               server.aof_rewrite_perc, 0, INT_MAX) {}
-    config_set_numerical_field("hash-max-ziplist-entries",
-                               server.hash_max_ziplist_entries, 0, LONG_MAX) {}
-    config_set_numerical_field("hash-max-ziplist-value",
-                               server.hash_max_ziplist_value, 0, LONG_MAX) {}
-    config_set_numerical_field("stream-node-max-bytes",
-                               server.stream_node_max_bytes, 0, LONG_MAX) {}
-    config_set_numerical_field("stream-node-max-entries",
-                               server.stream_node_max_entries, 0, LLONG_MAX) {}
-    config_set_numerical_field("list-max-ziplist-size",
-                               server.list_max_ziplist_size, INT_MIN, INT_MAX) {
-    }
-    config_set_numerical_field("list-compress-depth",
-                               server.list_compress_depth, 0, INT_MAX) {}
-    config_set_numerical_field("set-max-intset-entries",
-                               server.set_max_intset_entries, 0, LONG_MAX) {}
-    config_set_numerical_field("zset-max-ziplist-entries",
-                               server.zset_max_ziplist_entries, 0, LONG_MAX) {}
-    config_set_numerical_field("zset-max-ziplist-value",
-                               server.zset_max_ziplist_value, 0, LONG_MAX) {}
-    config_set_numerical_field("hll-sparse-max-bytes",
-                               server.hll_sparse_max_bytes, 0, LONG_MAX) {}
-    config_set_numerical_field("lua-time-limit", server.lua_time_limit, 0,
-                               LONG_MAX) {}
-    config_set_numerical_field("slowlog-log-slower-than",
-                               server.slowlog_log_slower_than, -1, LLONG_MAX) {}
-    config_set_numerical_field("slowlog-max-len", ll, 0, LONG_MAX) {
+    } config_set_numerical_field(
+      "tcp-keepalive",server.tcpkeepalive,0,INT_MAX) {
+    } config_set_numerical_field(
+      "maxmemory-samples",server.maxmemory_samples,1,INT_MAX) {
+    } config_set_numerical_field(
+      "lfu-log-factor",server.lfu_log_factor,0,INT_MAX) {
+    } config_set_numerical_field(
+      "lfu-decay-time",server.lfu_decay_time,0,INT_MAX) {
+    } config_set_numerical_field(
+      "timeout",server.maxidletime,0,INT_MAX) {
+    } config_set_numerical_field(
+      "active-defrag-threshold-lower",server.active_defrag_threshold_lower,0,1000) {
+    } config_set_numerical_field(
+      "active-defrag-threshold-upper",server.active_defrag_threshold_upper,0,1000) {
+    } config_set_memory_field(
+      "active-defrag-ignore-bytes",server.active_defrag_ignore_bytes) {
+    } config_set_numerical_field(
+      "active-defrag-cycle-min",server.active_defrag_cycle_min,1,99) {
+    } config_set_numerical_field(
+      "active-defrag-cycle-max",server.active_defrag_cycle_max,1,99) {
+    } config_set_numerical_field(
+      "active-defrag-max-scan-fields",server.active_defrag_max_scan_fields,1,LONG_MAX) {
+    } config_set_numerical_field(
+      "auto-aof-rewrite-percentage",server.aof_rewrite_perc,0,INT_MAX){
+    } config_set_numerical_field(
+      "hash-max-ziplist-entries",server.hash_max_ziplist_entries,0,LONG_MAX) {
+    } config_set_numerical_field(
+      "hash-max-ziplist-value",server.hash_max_ziplist_value,0,LONG_MAX) {
+    } config_set_numerical_field(
+      "stream-node-max-bytes",server.stream_node_max_bytes,0,LONG_MAX) {
+    } config_set_numerical_field(
+      "stream-node-max-entries",server.stream_node_max_entries,0,LLONG_MAX) {
+    } config_set_numerical_field(
+      "list-max-ziplist-size",server.list_max_ziplist_size,INT_MIN,INT_MAX) {
+    } config_set_numerical_field(
+      "list-compress-depth",server.list_compress_depth,0,INT_MAX) {
+    } config_set_numerical_field(
+      "set-max-intset-entries",server.set_max_intset_entries,0,LONG_MAX) {
+    } config_set_numerical_field(
+      "zset-max-ziplist-entries",server.zset_max_ziplist_entries,0,LONG_MAX) {
+    } config_set_numerical_field(
+      "zset-max-ziplist-value",server.zset_max_ziplist_value,0,LONG_MAX) {
+    } config_set_numerical_field(
+      "hll-sparse-max-bytes",server.hll_sparse_max_bytes,0,LONG_MAX) {
+    } config_set_numerical_field(
+      "lua-time-limit",server.lua_time_limit,0,LONG_MAX) {
+    } config_set_numerical_field(
+      "slowlog-log-slower-than",server.slowlog_log_slower_than,-1,LLONG_MAX) {
+    } config_set_numerical_field(
+      "slowlog-max-len",ll,0,LONG_MAX) {
@@ -1140,5 +1044 @@ void configSetCommand(client *c) {
-          serverLog(LL_WARNING,
-                    "WARNING: the new maxmemory value set via CONFIG SET is "
-                    "smaller than the current memory usage. This will result "
-                    "in key eviction and/or the inability to accept new write "
-                    "commands depending on the maxmemory-policy.");
+                serverLog(LL_WARNING,"WARNING: the new maxmemory value set via CONFIG SET is smaller than the current memory usage. This will result in key eviction and/or the inability to accept new write commands depending on the maxmemory-policy.");
@@ -1175,0 +1076,29 @@ void configSetCommand(client *c) {
+#define config_get_string_field(_name,_var) do { \
+    if (stringmatch(pattern,_name,1)) { \
+        addReplyBulkCString(c,_name); \
+        addReplyBulkCString(c,_var ? _var : ""); \
+        matches++; \
+    } \
+} while(0);
+#define config_get_bool_field(_name,_var) do { \
+    if (stringmatch(pattern,_name,1)) { \
+        addReplyBulkCString(c,_name); \
+        addReplyBulkCString(c,_var ? "yes" : "no"); \
+        matches++; \
+    } \
+} while(0);
+#define config_get_numerical_field(_name,_var) do { \
+    if (stringmatch(pattern,_name,1)) { \
+        ll2string(buf,sizeof(buf),_var); \
+        addReplyBulkCString(c,_name); \
+        addReplyBulkCString(c,buf); \
+        matches++; \
+    } \
+} while(0);
+#define config_get_enum_field(_name,_var,_enumvar) do { \
+    if (stringmatch(pattern,_name,1)) { \
+        addReplyBulkCString(c,_name); \
+        addReplyBulkCString(c,configEnumGetNameOrUnknown(_enumvar,_var)); \
+        matches++; \
+    } \
+} while(0);
@@ -1297,55 +1202,12 @@ void configSetCommand(client *c) {
-<<<<<<< HEAD
-    config_get_bool_field("jemalloc-bg-thread", server.jemalloc_bg_thread);
-    config_get_bool_field("protected-mode", server.protected_mode);
-    config_get_bool_field("gopher-enabled", server.gopher_enabled);
-    config_get_bool_field("io-threads-do-reads", server.io_threads_do_reads);
-    config_get_bool_field("repl-disable-tcp-nodelay",
-                          server.repl_disable_tcp_nodelay);
-    config_get_bool_field("repl-diskless-sync", server.repl_diskless_sync);
-    config_get_bool_field("aof-rewrite-incremental-fsync",
-                          server.aof_rewrite_incremental_fsync);
-    config_get_bool_field("rdb-save-incremental-fsync",
-                          server.rdb_save_incremental_fsync);
-    config_get_bool_field("aof-load-truncated", server.aof_load_truncated);
-    config_get_bool_field("aof-use-rdb-preamble", server.aof_use_rdb_preamble);
-    config_get_bool_field("lazyfree-lazy-eviction",
-                          server.lazyfree_lazy_eviction);
-    config_get_bool_field("lazyfree-lazy-expire", server.lazyfree_lazy_expire);
-    config_get_bool_field("lazyfree-lazy-server-del",
-                          server.lazyfree_lazy_server_del);
-    config_get_bool_field("slave-lazy-flush", server.repl_slave_lazy_flush);
-    config_get_bool_field("replica-lazy-flush", server.repl_slave_lazy_flush);
-    config_get_bool_field("dynamic-hz", server.dynamic_hz);
-|||||||
-    config_get_bool_field("protected-mode", server.protected_mode);
-    config_get_bool_field("gopher-enabled", server.gopher_enabled);
-    config_get_bool_field("io-threads-do-reads", server.io_threads_do_reads);
-    config_get_bool_field("repl-disable-tcp-nodelay",
-                          server.repl_disable_tcp_nodelay);
-    config_get_bool_field("repl-diskless-sync", server.repl_diskless_sync);
-    config_get_bool_field("aof-rewrite-incremental-fsync",
-                          server.aof_rewrite_incremental_fsync);
-    config_get_bool_field("rdb-save-incremental-fsync",
-                          server.rdb_save_incremental_fsync);
-    config_get_bool_field("aof-load-truncated", server.aof_load_truncated);
-    config_get_bool_field("aof-use-rdb-preamble", server.aof_use_rdb_preamble);
-    config_get_bool_field("lazyfree-lazy-eviction",
-                          server.lazyfree_lazy_eviction);
-    config_get_bool_field("lazyfree-lazy-expire", server.lazyfree_lazy_expire);
-    config_get_bool_field("lazyfree-lazy-server-del",
-                          server.lazyfree_lazy_server_del);
-    config_get_bool_field("slave-lazy-flush", server.repl_slave_lazy_flush);
-    config_get_bool_field("replica-lazy-flush", server.repl_slave_lazy_flush);
-    config_get_bool_field("dynamic-hz", server.dynamic_hz);
-=======
->>>>>>> ee1cef189fff604f165b2d20a307545840de944e
-    config_get_enum_field("maxmemory-policy", server.maxmemory_policy,
-                          maxmemory_policy_enum);
-    config_get_enum_field("loglevel", server.verbosity, loglevel_enum);
-    config_get_enum_field("supervised", server.supervised_mode,
-                          supervised_mode_enum);
-    config_get_enum_field("appendfsync", server.aof_fsync, aof_fsync_enum);
-    config_get_enum_field("syslog-facility", server.syslog_facility,
-                          syslog_facility_enum);
-    config_get_enum_field("repl-diskless-load", server.repl_diskless_load,
-                          repl_diskless_load_enum);
+    config_get_enum_field("maxmemory-policy",
+            server.maxmemory_policy,maxmemory_policy_enum);
+    config_get_enum_field("loglevel",
+            server.verbosity,loglevel_enum);
+    config_get_enum_field("supervised",
+            server.supervised_mode,supervised_mode_enum);
+    config_get_enum_field("appendfsync",
+            server.aof_fsync,aof_fsync_enum);
+    config_get_enum_field("syslog-facility",
+            server.syslog_facility,syslog_facility_enum);
+    config_get_enum_field("repl-diskless-load",
+            server.repl_diskless_load,repl_diskless_load_enum);
@@ -1988,53 +1752,11 @@ void configSetCommand(client *c) {
-    rewriteConfigNumericalOption(state, "hash-max-ziplist-entries",
-                                 server.hash_max_ziplist_entries,
-                                 OBJ_HASH_MAX_ZIPLIST_ENTRIES);
-    rewriteConfigNumericalOption(state, "hash-max-ziplist-value",
-                                 server.hash_max_ziplist_value,
-                                 OBJ_HASH_MAX_ZIPLIST_VALUE);
-    rewriteConfigNumericalOption(state, "stream-node-max-bytes",
-                                 server.stream_node_max_bytes,
-                                 OBJ_STREAM_NODE_MAX_BYTES);
-    rewriteConfigNumericalOption(state, "stream-node-max-entries",
-                                 server.stream_node_max_entries,
-                                 OBJ_STREAM_NODE_MAX_ENTRIES);
-    rewriteConfigNumericalOption(state, "list-max-ziplist-size",
-                                 server.list_max_ziplist_size,
-                                 OBJ_LIST_MAX_ZIPLIST_SIZE);
-    rewriteConfigNumericalOption(state, "list-compress-depth",
-                                 server.list_compress_depth,
-                                 OBJ_LIST_COMPRESS_DEPTH);
-    rewriteConfigNumericalOption(state, "set-max-intset-entries",
-                                 server.set_max_intset_entries,
-                                 OBJ_SET_MAX_INTSET_ENTRIES);
-    rewriteConfigNumericalOption(state, "zset-max-ziplist-entries",
-                                 server.zset_max_ziplist_entries,
-                                 OBJ_ZSET_MAX_ZIPLIST_ENTRIES);
-    rewriteConfigNumericalOption(state, "zset-max-ziplist-value",
-                                 server.zset_max_ziplist_value,
-                                 OBJ_ZSET_MAX_ZIPLIST_VALUE);
-    rewriteConfigNumericalOption(state, "hll-sparse-max-bytes",
-                                 server.hll_sparse_max_bytes,
-                                 CONFIG_DEFAULT_HLL_SPARSE_MAX_BYTES);
-    rewriteConfigYesNoOption(state, "activedefrag",
-                             server.active_defrag_enabled,
-                             CONFIG_DEFAULT_ACTIVE_DEFRAG);
-<<<<<<< HEAD
-    rewriteConfigYesNoOption(state, "jemalloc-bg-thread",
-                             server.jemalloc_bg_thread, 1);
-    rewriteConfigYesNoOption(state, "protected-mode", server.protected_mode,
-                             CONFIG_DEFAULT_PROTECTED_MODE);
-    rewriteConfigYesNoOption(state, "gopher-enabled", server.gopher_enabled,
-                             CONFIG_DEFAULT_GOPHER_ENABLED);
-    rewriteConfigYesNoOption(state, "io-threads-do-reads",
-                             server.io_threads_do_reads,
-                             CONFIG_DEFAULT_IO_THREADS_DO_READS);
-|||||||
-    rewriteConfigYesNoOption(state, "protected-mode", server.protected_mode,
-                             CONFIG_DEFAULT_PROTECTED_MODE);
-    rewriteConfigYesNoOption(state, "gopher-enabled", server.gopher_enabled,
-                             CONFIG_DEFAULT_GOPHER_ENABLED);
-    rewriteConfigYesNoOption(state, "io-threads-do-reads",
-                             server.io_threads_do_reads,
-                             CONFIG_DEFAULT_IO_THREADS_DO_READS);
-=======
->>>>>>> ee1cef189fff604f165b2d20a307545840de944e
+    rewriteConfigNumericalOption(state,"hash-max-ziplist-entries",server.hash_max_ziplist_entries,OBJ_HASH_MAX_ZIPLIST_ENTRIES);
+    rewriteConfigNumericalOption(state,"hash-max-ziplist-value",server.hash_max_ziplist_value,OBJ_HASH_MAX_ZIPLIST_VALUE);
+    rewriteConfigNumericalOption(state,"stream-node-max-bytes",server.stream_node_max_bytes,OBJ_STREAM_NODE_MAX_BYTES);
+    rewriteConfigNumericalOption(state,"stream-node-max-entries",server.stream_node_max_entries,OBJ_STREAM_NODE_MAX_ENTRIES);
+    rewriteConfigNumericalOption(state,"list-max-ziplist-size",server.list_max_ziplist_size,OBJ_LIST_MAX_ZIPLIST_SIZE);
+    rewriteConfigNumericalOption(state,"list-compress-depth",server.list_compress_depth,OBJ_LIST_COMPRESS_DEPTH);
+    rewriteConfigNumericalOption(state,"set-max-intset-entries",server.set_max_intset_entries,OBJ_SET_MAX_INTSET_ENTRIES);
+    rewriteConfigNumericalOption(state,"zset-max-ziplist-entries",server.zset_max_ziplist_entries,OBJ_ZSET_MAX_ZIPLIST_ENTRIES);
+    rewriteConfigNumericalOption(state,"zset-max-ziplist-value",server.zset_max_ziplist_value,OBJ_ZSET_MAX_ZIPLIST_VALUE);
+    rewriteConfigNumericalOption(state,"hll-sparse-max-bytes",server.hll_sparse_max_bytes,CONFIG_DEFAULT_HLL_SPARSE_MAX_BYTES);
+    rewriteConfigYesNoOption(state,"activedefrag",server.active_defrag_enabled,CONFIG_DEFAULT_ACTIVE_DEFRAG);
@@ -2064,2 +1782 @@ void configSetCommand(client *c) {
-          "GET <pattern> -- Return parameters matching the glob-like <pattern> "
-          "and their values.",
+"GET <pattern> -- Return parameters matching the glob-like <pattern> and their values.",
