diff --git a/home/whalien/codebase/cpp/mergebot/eva/output/redis/440385de-cfdc800a-81008bf9/src@db.no_comments_mergebot.c b/home/whalien/codebase/cpp/mergebot/eva/output/redis/440385de-cfdc800a-81008bf9/src@db.no_comments_merged.c
index 723d0ab..c489f0d 100644
--- a/home/whalien/codebase/cpp/mergebot/eva/output/redis/440385de-cfdc800a-81008bf9/src@db.no_comments_mergebot.c
+++ b/home/whalien/codebase/cpp/mergebot/eva/output/redis/440385de-cfdc800a-81008bf9/src@db.no_comments_merged.c
@@ -16,2 +16,4 @@ robj *lookupKey(redisDb *db, robj *key, int flags) {
-    if (server.rdb_child_pid == -1 && server.aof_child_pid == -1 &&
-        !(flags & LOOKUP_NOTOUCH)) {
+        if (server.rdb_child_pid == -1 &&
+            server.aof_child_pid == -1 &&
+            !(flags & LOOKUP_NOTOUCH))
+        {
@@ -36 +38,2 @@ robj *lookupKeyReadWithFlags(redisDb *db, robj *key, int flags) {
-    if (server.current_client && server.current_client != server.master &&
+        if (server.current_client &&
+            server.current_client != server.master &&
@@ -38 +41,2 @@ robj *lookupKeyReadWithFlags(redisDb *db, robj *key, int flags) {
-        server.current_client->cmd->flags & CMD_READONLY) {
+            server.current_client->cmd->flags & CMD_READONLY)
+        {
@@ -71 +75,3 @@ void dbAdd(redisDb *db, robj *key, robj *val) {
-  if (val->type == OBJ_LIST || val->type == OBJ_ZSET) signalKeyAsReady(db, key);
+    if (val->type == OBJ_LIST ||
+        val->type == OBJ_ZSET)
+        signalKeyAsReady(db, key);
@@ -135,2 +141,2 @@ int dbDelete(redisDb *db, robj *key) {
-  return server.lazyfree_lazy_server_del ? dbAsyncDelete(db, key)
-                                         : dbSyncDelete(db, key);
+    return server.lazyfree_lazy_server_del ? dbAsyncDelete(db,key) :
+                                             dbSyncDelete(db,key);
@@ -182 +188,2 @@ int selectDb(client *c, int id) {
-  if (id < 0 || id >= server.dbnum) return C_ERR;
+    if (id < 0 || id >= server.dbnum)
+        return C_ERR;
@@ -186,2 +193,6 @@ int selectDb(client *c, int id) {
-void signalModifiedKey(redisDb *db, robj *key) { touchWatchedKey(db, key); }
-void signalFlushedDb(int dbid) { touchWatchedKeysOnFlush(dbid); }
+void signalModifiedKey(redisDb *db, robj *key) {
+    touchWatchedKey(db,key);
+}
+void signalFlushedDb(int dbid) {
+    touchWatchedKeysOnFlush(dbid);
+}
@@ -216 +226,0 @@ void flushallCommand(client *c) {
-<<<<<<< HEAD
@@ -218,2 +227,0 @@ void flushallCommand(client *c) {
-|||||||
-=======
@@ -221 +228,0 @@ void flushallCommand(client *c) {
->>>>>>> cfdc800a5ff5a2bb02ccd1e21c1c36e6cb5a474d
@@ -236,2 +243,2 @@ void delGenericCommand(client *c, int lazy) {
-    int deleted = lazy ? dbAsyncDelete(c->db, c->argv[j])
-                       : dbSyncDelete(c->db, c->argv[j]);
+        int deleted = lazy ? dbAsyncDelete(c->db,c->argv[j]) :
+                              dbSyncDelete(c->db,c->argv[j]);
@@ -240 +247,2 @@ void delGenericCommand(client *c, int lazy) {
-      notifyKeyspaceEvent(NOTIFY_GENERIC, "del", c->argv[j], c->db->id);
+            notifyKeyspaceEvent(NOTIFY_GENERIC,
+                "del",c->argv[j],c->db->id);
@@ -247,2 +255,6 @@ void delGenericCommand(client *c, int lazy) {
-void delCommand(client *c) { delGenericCommand(c, 0); }
-void unlinkCommand(client *c) { delGenericCommand(c, 1); }
+void delCommand(client *c) {
+    delGenericCommand(c,0);
+}
+void unlinkCommand(client *c) {
+    delGenericCommand(c,1);
+}
@@ -259 +271,2 @@ void selectCommand(client *c) {
-  if (getLongFromObjectOrReply(c, c->argv[1], &id, "invalid DB index") != C_OK)
+    if (getLongFromObjectOrReply(c, c->argv[1], &id,
+        "invalid DB index") != C_OK)
@@ -334 +347,2 @@ int parseScanCursorOrReply(client *c, robj *o, unsigned long *cursor) {
-  if (isspace(((char *)o->ptr)[0]) || eptr[0] != '\0' || errno == ERANGE) {
+    if (isspace(((char*)o->ptr)[0]) || eptr[0] != '\0' || errno == ERANGE)
+    {
@@ -354 +368,3 @@ void scanGenericCommand(client *c, robj *o, unsigned long cursor) {
-      if (getLongFromObjectOrReply(c, c->argv[i + 1], &count, NULL) != C_OK) {
+            if (getLongFromObjectOrReply(c, c->argv[i+1], &count, NULL)
+                != C_OK)
+            {
@@ -392 +408,2 @@ void scanGenericCommand(client *c, robj *o, unsigned long cursor) {
-    } while (cursor && maxiterations-- &&
+        } while (cursor &&
+              maxiterations-- &&
@@ -407,3 +424,3 @@ void scanGenericCommand(client *c, robj *o, unsigned long cursor) {
-      listAddNodeTail(keys, (vstr != NULL)
-                                ? createStringObject((char *)vstr, vlen)
-                                : createStringObjectFromLongLong(vll));
+            listAddNodeTail(keys,
+                (vstr != NULL) ? createStringObject((char*)vstr,vlen) :
+                                 createStringObjectFromLongLong(vll));
@@ -467,2 +484,6 @@ void scanCommand(client *c) {
-void dbsizeCommand(client *c) { addReplyLongLong(c, dictSize(c->db->dict)); }
-void lastsaveCommand(client *c) { addReplyLongLong(c, server.lastsave); }
+void dbsizeCommand(client *c) {
+    addReplyLongLong(c,dictSize(c->db->dict));
+}
+void lastsaveCommand(client *c) {
+    addReplyLongLong(c,server.lastsave);
+}
@@ -477,18 +498,6 @@ void typeCommand(client *c) {
-      case OBJ_STRING:
-        type = "string";
-        break;
-      case OBJ_LIST:
-        type = "list";
-        break;
-      case OBJ_SET:
-        type = "set";
-        break;
-      case OBJ_ZSET:
-        type = "zset";
-        break;
-      case OBJ_HASH:
-        type = "hash";
-        break;
-      case OBJ_STREAM:
-        type = "stream";
-        break;
+        case OBJ_STRING: type = "string"; break;
+        case OBJ_LIST: type = "list"; break;
+        case OBJ_SET: type = "set"; break;
+        case OBJ_ZSET: type = "zset"; break;
+        case OBJ_HASH: type = "hash"; break;
+        case OBJ_STREAM: type = "stream"; break;
@@ -499,3 +508 @@ void typeCommand(client *c) {
-      default:
-        type = "unknown";
-        break;
+        default: type = "unknown"; break;
@@ -552,2 +559,4 @@ void renameGenericCommand(client *c, int nx) {
-  notifyKeyspaceEvent(NOTIFY_GENERIC, "rename_from", c->argv[1], c->db->id);
-  notifyKeyspaceEvent(NOTIFY_GENERIC, "rename_to", c->argv[2], c->db->id);
+    notifyKeyspaceEvent(NOTIFY_GENERIC,"rename_from",
+        c->argv[1],c->db->id);
+    notifyKeyspaceEvent(NOTIFY_GENERIC,"rename_to",
+        c->argv[2],c->db->id);
@@ -557,2 +566,6 @@ void renameGenericCommand(client *c, int nx) {
-void renameCommand(client *c) { renameGenericCommand(c, 0); }
-void renamenxCommand(client *c) { renameGenericCommand(c, 1); }
+void renameCommand(client *c) {
+    renameGenericCommand(c,0);
+}
+void renamenxCommand(client *c) {
+    renameGenericCommand(c,1);
+}
@@ -570,2 +583,4 @@ void moveCommand(client *c) {
-  if (getLongLongFromObject(c->argv[2], &dbid) == C_ERR || dbid < INT_MIN ||
-      dbid > INT_MAX || selectDb(c, dbid) == C_ERR) {
+    if (getLongLongFromObject(c->argv[2],&dbid) == C_ERR ||
+        dbid < INT_MIN || dbid > INT_MAX ||
+        selectDb(c,dbid) == C_ERR)
+    {
@@ -604 +619,2 @@ void scanDatabaseForReadyLists(redisDb *db) {
-    if (value && (value->type == OBJ_LIST || value->type == OBJ_STREAM ||
+        if (value && (value->type == OBJ_LIST ||
+                      value->type == OBJ_STREAM ||
@@ -611,2 +627,2 @@ int dbSwapDatabases(int id1, int id2) {
-  if (id1 < 0 || id1 >= server.dbnum || id2 < 0 || id2 >= server.dbnum)
-    return C_ERR;
+    if (id1 < 0 || id1 >= server.dbnum ||
+        id2 < 0 || id2 >= server.dbnum) return C_ERR;
@@ -632,2 +648,2 @@ void swapdbCommand(client *c) {
-  if (getLongFromObjectOrReply(c, c->argv[1], &id1, "invalid first DB index") !=
-      C_OK)
+    if (getLongFromObjectOrReply(c, c->argv[1], &id1,
+        "invalid first DB index") != C_OK)
@@ -663,2 +679 @@ long long getExpire(redisDb *db, robj *key) {
-      (de = dictFind(db->expires, key->ptr)) == NULL)
-    return -1;
+       (de = dictFind(db->expires,key->ptr)) == NULL) return -1;
@@ -692,3 +707,4 @@ int expireIfNeeded(redisDb *db, robj *key) {
-  notifyKeyspaceEvent(NOTIFY_EXPIRED, "expired", key, db->id);
-  return server.lazyfree_lazy_expire ? dbAsyncDelete(db, key)
-                                     : dbSyncDelete(db, key);
+    notifyKeyspaceEvent(NOTIFY_EXPIRED,
+        "expired",key,db->id);
+    return server.lazyfree_lazy_expire ? dbAsyncDelete(db,key) :
+                                         dbSyncDelete(db,key);
@@ -696,2 +712 @@ int expireIfNeeded(redisDb *db, robj *key) {
-int *getKeysUsingCommandTable(struct redisCommand *cmd, robj **argv, int argc,
-                              int *numkeys) {
+int *getKeysUsingCommandTable(struct redisCommand *cmd,robj **argv, int argc, int *numkeys) {
@@ -714,3 +729 @@ int *getKeysUsingCommandTable(struct redisCommand *cmd, robj **argv, int argc,
-        serverPanic(
-            "Redis built-in command declared keys positions not matching the "
-            "arity requirements.");
+                serverPanic("Redis built-in command declared keys positions not matching the arity requirements.");
@@ -724,2 +737 @@ int *getKeysUsingCommandTable(struct redisCommand *cmd, robj **argv, int argc,
-int *getKeysFromCommand(struct redisCommand *cmd, robj **argv, int argc,
-                        int *numkeys) {
+int *getKeysFromCommand(struct redisCommand *cmd, robj **argv, int argc, int *numkeys) {
@@ -734,3 +746,4 @@ int *getKeysFromCommand(struct redisCommand *cmd, robj **argv, int argc,
-void getKeysFreeResult(int *result) { zfree(result); }
-int *zunionInterGetKeys(struct redisCommand *cmd, robj **argv, int argc,
-                        int *numkeys) {
+void getKeysFreeResult(int *result) {
+    zfree(result);
+}
+int *zunionInterGetKeys(struct redisCommand *cmd, robj **argv, int argc, int *numkeys) {
@@ -750,2 +763 @@ int *zunionInterGetKeys(struct redisCommand *cmd, robj **argv, int argc,
-int *evalGetKeys(struct redisCommand *cmd, robj **argv, int argc,
-                 int *numkeys) {
+int *evalGetKeys(struct redisCommand *cmd, robj **argv, int argc, int *numkeys) {
@@ -764,2 +776 @@ int *evalGetKeys(struct redisCommand *cmd, robj **argv, int argc,
-int *sortGetKeys(struct redisCommand *cmd, robj **argv, int argc,
-                 int *numkeys) {
+int *sortGetKeys(struct redisCommand *cmd, robj **argv, int argc, int *numkeys) {
@@ -775 +786,4 @@ int *sortGetKeys(struct redisCommand *cmd, robj **argv, int argc,
-      {"limit", 2}, {"get", 1}, {"by", 1}, {NULL, 0}
+        {"limit", 2},
+        {"get", 1},
+        {"by", 1},
+        {NULL, 0}
@@ -792,2 +806 @@ int *sortGetKeys(struct redisCommand *cmd, robj **argv, int argc,
-int *migrateGetKeys(struct redisCommand *cmd, robj **argv, int argc,
-                    int *numkeys) {
+int *migrateGetKeys(struct redisCommand *cmd, robj **argv, int argc, int *numkeys) {
@@ -800 +813,3 @@ int *migrateGetKeys(struct redisCommand *cmd, robj **argv, int argc,
-      if (!strcasecmp(argv[i]->ptr, "keys") && sdslen(argv[3]->ptr) == 0) {
+            if (!strcasecmp(argv[i]->ptr,"keys") &&
+                sdslen(argv[3]->ptr) == 0)
+            {
@@ -812,2 +827 @@ int *migrateGetKeys(struct redisCommand *cmd, robj **argv, int argc,
-int *georadiusGetKeys(struct redisCommand *cmd, robj **argv, int argc,
-                      int *numkeys) {
+int *georadiusGetKeys(struct redisCommand *cmd, robj **argv, int argc, int *numkeys) {
@@ -819,2 +833 @@ int *georadiusGetKeys(struct redisCommand *cmd, robj **argv, int argc,
-    if ((!strcasecmp(arg, "store") || !strcasecmp(arg, "storedist")) &&
-        ((i + 1) < argc)) {
+        if ((!strcasecmp(arg, "store") || !strcasecmp(arg, "storedist")) && ((i+1) < argc)) {
@@ -834,2 +847 @@ int *georadiusGetKeys(struct redisCommand *cmd, robj **argv, int argc,
-int *xreadGetKeys(struct redisCommand *cmd, robj **argv, int argc,
-                  int *numkeys) {
+int *xreadGetKeys(struct redisCommand *cmd, robj **argv, int argc, int *numkeys) {
@@ -883,2 +895,6 @@ void slotToKeyUpdateKey(robj *key, int add) {
-void slotToKeyAdd(robj *key) { slotToKeyUpdateKey(key, 1); }
-void slotToKeyDel(robj *key) { slotToKeyUpdateKey(key, 0); }
+void slotToKeyAdd(robj *key) {
+    slotToKeyUpdateKey(key,1);
+}
+void slotToKeyDel(robj *key) {
+    slotToKeyUpdateKey(key,0);
+}
@@ -891,2 +907 @@ void slotToKeyFlush(void) {
-unsigned int getKeysInSlot(unsigned int hashslot, robj **keys,
-                           unsigned int count) {
+unsigned int getKeysInSlot(unsigned int hashslot, robj **keys, unsigned int count) {
