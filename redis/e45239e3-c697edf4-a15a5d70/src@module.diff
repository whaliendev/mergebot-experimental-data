diff --git a/home/whalien/codebase/cpp/mergebot/eva/output/redis/e45239e3-c697edf4-a15a5d70/src@module.no_comments_mergebot.c b/home/whalien/codebase/cpp/mergebot/eva/output/redis/e45239e3-c697edf4-a15a5d70/src@module.no_comments_merged.c
index 4f78e6b..4ce30c3 100644
--- a/home/whalien/codebase/cpp/mergebot/eva/output/redis/e45239e3-c697edf4-a15a5d70/src@module.no_comments_mergebot.c
+++ b/home/whalien/codebase/cpp/mergebot/eva/output/redis/e45239e3-c697edf4-a15a5d70/src@module.no_comments_merged.c
@@ -14,2 +14 @@ typedef struct RedisModuleInfoCtx {
-typedef void (*RedisModuleInfoFunc)(RedisModuleInfoCtx *ctx,
-                                    int for_crash_report);
+typedef void (*RedisModuleInfoFunc)(RedisModuleInfoCtx *ctx, int for_crash_report);
@@ -75,7 +74 @@ typedef struct RedisModuleCtx RedisModuleCtx;
-#define REDISMODULE_CTX_INIT \
-  { \
-    (void *)(unsigned long)&RM_GetApi, NULL, NULL, NULL, NULL, 0, 0, 0, NULL, \
-        0, NULL, NULL, NULL, 0, NULL, { \
-      0 \
-    } \
-  }
+#define REDISMODULE_CTX_INIT {(void*)(unsigned long)&RM_GetApi, NULL, NULL, NULL, NULL, 0, 0, 0, NULL, 0, NULL, NULL, NULL, 0, NULL, {0}}
@@ -112,2 +105 @@ typedef int (*RedisModuleCmdFunc)(RedisModuleCtx *ctx, void **argv, int argc);
-typedef void (*RedisModuleDisconnectFunc)(RedisModuleCtx *ctx,
-                                          struct RedisModuleBlockedClient *bc);
+typedef void (*RedisModuleDisconnectFunc) (RedisModuleCtx *ctx, struct RedisModuleBlockedClient *bc);
@@ -122,2 +114 @@ typedef struct RedisModuleCommandProxy RedisModuleCommandProxy;
-#define REDISMODULE_REPLYFLAG_NESTED \
-  (1 << 1)
+#define REDISMODULE_REPLYFLAG_NESTED (1<<1)
@@ -143,2 +134 @@ typedef struct RedisModuleBlockedClient {
-  void (*free_privdata)(RedisModuleCtx *,
-                        void *);
+    void (*free_privdata)(RedisModuleCtx*,void*);
@@ -154,3 +144 @@ static pthread_mutex_t moduleGIL = PTHREAD_MUTEX_INITIALIZER;
-typedef int (*RedisModuleNotificationFunc)(RedisModuleCtx *ctx, int type,
-                                           const char *event,
-                                           RedisModuleString *key);
+typedef int (*RedisModuleNotificationFunc) (RedisModuleCtx *ctx, int type, const char *event, RedisModuleString *key);
@@ -176,2 +164 @@ typedef struct RedisModuleCommandFilterCtx {
-typedef void (*RedisModuleCommandFilterFunc)(
-    RedisModuleCommandFilterCtx *filter);
+typedef void (*RedisModuleCommandFilterFunc) (RedisModuleCommandFilterCtx *filter);
@@ -184,2 +171 @@ static list *moduleCommandFilters;
-typedef void (*RedisModuleForkDoneHandler)(int exitcode, int bysignal,
-                                           void *user_data);
+typedef void (*RedisModuleForkDoneHandler) (int exitcode, int bysignal, void *user_data);
@@ -192,0 +179,2 @@ static struct RedisModuleForkInfo {
+#define SHOULD_SIGNAL_MODIFIED_KEYS(ctx) \
+    ctx->module? !(ctx->module->options & REDISMODULE_OPTION_NO_IMPLICIT_SIGNAL_MODIFIED) : 1
@@ -203,2 +191 @@ void autoMemoryCollect(RedisModuleCtx *ctx);
-robj **moduleCreateArgvFromUserFormat(const char *cmdname, const char *fmt,
-                                      int *argcp, int *flags, va_list ap);
+robj **moduleCreateArgvFromUserFormat(const char *cmdname, const char *fmt, int *argcp, int *flags, va_list ap);
@@ -209,5 +196,15 @@ void RM_FreeDict(RedisModuleCtx *ctx, RedisModuleDict *d);
-void *RM_Alloc(size_t bytes) { return zmalloc(bytes); }
-void *RM_Calloc(size_t nmemb, size_t size) { return zcalloc(nmemb * size); }
-void *RM_Realloc(void *ptr, size_t bytes) { return zrealloc(ptr, bytes); }
-void RM_Free(void *ptr) { zfree(ptr); }
-char *RM_Strdup(const char *str) { return zstrdup(str); }
+void *RM_Alloc(size_t bytes) {
+    return zmalloc(bytes);
+}
+void *RM_Calloc(size_t nmemb, size_t size) {
+    return zcalloc(nmemb*size);
+}
+void* RM_Realloc(void *ptr, size_t bytes) {
+    return zrealloc(ptr,bytes);
+}
+void RM_Free(void *ptr) {
+    zfree(ptr);
+}
+char *RM_Strdup(const char *str) {
+    return zstrdup(str);
+}
@@ -230 +227,2 @@ void *RM_PoolAlloc(RedisModuleCtx *ctx, size_t bytes) {
-    if (b->used % alignment) b->used += alignment - (b->used % alignment);
+        if (b->used % alignment)
+            b->used += alignment - (b->used % alignment);
@@ -248 +246,2 @@ int moduleCreateEmptyKey(RedisModuleKey *key, int type) {
-  if (!(key->mode & REDISMODULE_WRITE) || key->value) return REDISMODULE_ERR;
+    if (!(key->mode & REDISMODULE_WRITE) || key->value)
+        return REDISMODULE_ERR;
@@ -261,2 +260 @@ int moduleCreateEmptyKey(RedisModuleKey *key, int type) {
-    default:
-      return REDISMODULE_ERR;
+    default: return REDISMODULE_ERR;
@@ -273,14 +271,5 @@ int moduleDelKeyIfEmpty(RedisModuleKey *key) {
-    case OBJ_LIST:
-      isempty = listTypeLength(o) == 0;
-      break;
-    case OBJ_SET:
-      isempty = setTypeSize(o) == 0;
-      break;
-    case OBJ_ZSET:
-      isempty = zsetLength(o) == 0;
-      break;
-    case OBJ_HASH:
-      isempty = hashTypeLength(o) == 0;
-      break;
-    default:
-      isempty = 0;
+    case OBJ_LIST: isempty = listTypeLength(o) == 0; break;
+    case OBJ_SET: isempty = setTypeSize(o) == 0; break;
+    case OBJ_ZSET: isempty = zsetLength(o) == 0; break;
+    case OBJ_HASH : isempty = hashTypeLength(o) == 0; break;
+    default: isempty = 0;
@@ -312 +301,2 @@ void moduleHandlePropagationAfterCommandCallback(RedisModuleCtx *ctx) {
-      server.also_propagate.numops) {
+        server.also_propagate.numops)
+    {
@@ -316 +306,2 @@ void moduleHandlePropagationAfterCommandCallback(RedisModuleCtx *ctx) {
-      if (target) propagate(rop->cmd, rop->dbid, rop->argv, rop->argc, target);
+            if (target)
+                propagate(rop->cmd,rop->dbid,rop->argv,rop->argc,target);
@@ -329,2 +320 @@ void moduleFreeContext(RedisModuleCtx *ctx) {
-    serverLog(
-        LL_WARNING,
+        serverLog(LL_WARNING,
@@ -348 +338,2 @@ void RedisModuleCommandDispatcher(client *c) {
-    if (c->argv[i]->refcount > 1) trimStringObjectIfNeeded(c->argv[i]);
+        if (c->argv[i]->refcount > 1)
+            trimStringObjectIfNeeded(c->argv[i]);
@@ -351,2 +342 @@ void RedisModuleCommandDispatcher(client *c) {
-int *moduleGetCommandKeysViaAPI(struct redisCommand *cmd, robj **argv, int argc,
-                                int *numkeys) {
+int *moduleGetCommandKeysViaAPI(struct redisCommand *cmd, robj **argv, int argc, int *numkeys) {
@@ -379,28 +369,14 @@ int commandFlagsFromString(char *s) {
-    if (!strcasecmp(t, "write"))
-      flags |= CMD_WRITE;
-    else if (!strcasecmp(t, "readonly"))
-      flags |= CMD_READONLY;
-    else if (!strcasecmp(t, "admin"))
-      flags |= CMD_ADMIN;
-    else if (!strcasecmp(t, "deny-oom"))
-      flags |= CMD_DENYOOM;
-    else if (!strcasecmp(t, "deny-script"))
-      flags |= CMD_NOSCRIPT;
-    else if (!strcasecmp(t, "allow-loading"))
-      flags |= CMD_LOADING;
-    else if (!strcasecmp(t, "pubsub"))
-      flags |= CMD_PUBSUB;
-    else if (!strcasecmp(t, "random"))
-      flags |= CMD_RANDOM;
-    else if (!strcasecmp(t, "allow-stale"))
-      flags |= CMD_STALE;
-    else if (!strcasecmp(t, "no-monitor"))
-      flags |= CMD_SKIP_MONITOR;
-    else if (!strcasecmp(t, "fast"))
-      flags |= CMD_FAST;
-    else if (!strcasecmp(t, "getkeys-api"))
-      flags |= CMD_MODULE_GETKEYS;
-    else if (!strcasecmp(t, "no-cluster"))
-      flags |= CMD_MODULE_NO_CLUSTER;
-    else
-      break;
+        if (!strcasecmp(t,"write")) flags |= CMD_WRITE;
+        else if (!strcasecmp(t,"readonly")) flags |= CMD_READONLY;
+        else if (!strcasecmp(t,"admin")) flags |= CMD_ADMIN;
+        else if (!strcasecmp(t,"deny-oom")) flags |= CMD_DENYOOM;
+        else if (!strcasecmp(t,"deny-script")) flags |= CMD_NOSCRIPT;
+        else if (!strcasecmp(t,"allow-loading")) flags |= CMD_LOADING;
+        else if (!strcasecmp(t,"pubsub")) flags |= CMD_PUBSUB;
+        else if (!strcasecmp(t,"random")) flags |= CMD_RANDOM;
+        else if (!strcasecmp(t,"allow-stale")) flags |= CMD_STALE;
+        else if (!strcasecmp(t,"no-monitor")) flags |= CMD_SKIP_MONITOR;
+        else if (!strcasecmp(t,"fast")) flags |= CMD_FAST;
+        else if (!strcasecmp(t,"getkeys-api")) flags |= CMD_MODULE_GETKEYS;
+        else if (!strcasecmp(t,"no-cluster")) flags |= CMD_MODULE_NO_CLUSTER;
+        else break;
@@ -412,3 +388 @@ int commandFlagsFromString(char *s) {
-int RM_CreateCommand(RedisModuleCtx *ctx, const char *name,
-                     RedisModuleCmdFunc cmdfunc, const char *strflags,
-                     int firstkey, int lastkey, int keystep) {
+int RM_CreateCommand(RedisModuleCtx *ctx, const char *name, RedisModuleCmdFunc cmdfunc, const char *strflags, int firstkey, int lastkey, int keystep) {
@@ -445,2 +419 @@ int RM_CreateCommand(RedisModuleCtx *ctx, const char *name,
-void RM_SetModuleAttribs(RedisModuleCtx *ctx, const char *name, int ver,
-                         int apiver) {
+void RM_SetModuleAttribs(RedisModuleCtx *ctx, const char *name, int ver, int apiver) {
@@ -468 +441,3 @@ int RM_IsModuleNameBusy(const char *name) {
-long long RM_Milliseconds(void) { return mstime(); }
+long long RM_Milliseconds(void) {
+    return mstime();
+}
@@ -484,2 +459 @@ void autoMemoryAdd(RedisModuleCtx *ctx, int type, void *ptr) {
-    ctx->amqueue =
-        zrealloc(ctx->amqueue, sizeof(struct AutoMemEntry) * ctx->amqueue_len);
+        ctx->amqueue = zrealloc(ctx->amqueue,sizeof(struct AutoMemEntry)*ctx->amqueue_len);
@@ -497 +471,3 @@ int autoMemoryFreed(RedisModuleCtx *ctx, int type, void *ptr) {
-      if (ctx->amqueue[i].type == type && ctx->amqueue[i].ptr == ptr) {
+            if (ctx->amqueue[i].type == type &&
+                ctx->amqueue[i].ptr == ptr)
+            {
@@ -516,12 +492,4 @@ void autoMemoryCollect(RedisModuleCtx *ctx) {
-      case REDISMODULE_AM_STRING:
-        decrRefCount(ptr);
-        break;
-      case REDISMODULE_AM_REPLY:
-        RM_FreeCallReply(ptr);
-        break;
-      case REDISMODULE_AM_KEY:
-        RM_CloseKey(ptr);
-        break;
-      case REDISMODULE_AM_DICT:
-        RM_FreeDict(NULL, ptr);
-        break;
+        case REDISMODULE_AM_STRING: decrRefCount(ptr); break;
+        case REDISMODULE_AM_REPLY: RM_FreeCallReply(ptr); break;
+        case REDISMODULE_AM_KEY: RM_CloseKey(ptr); break;
+        case REDISMODULE_AM_DICT: RM_FreeDict(NULL,ptr); break;
@@ -536,2 +504 @@ void autoMemoryCollect(RedisModuleCtx *ctx) {
-RedisModuleString *RM_CreateString(RedisModuleCtx *ctx, const char *ptr,
-                                   size_t len) {
+RedisModuleString *RM_CreateString(RedisModuleCtx *ctx, const char *ptr, size_t len) {
@@ -542,2 +509 @@ RedisModuleString *RM_CreateString(RedisModuleCtx *ctx, const char *ptr,
-RedisModuleString *RM_CreateStringPrintf(RedisModuleCtx *ctx, const char *fmt,
-                                         ...) {
+RedisModuleString *RM_CreateStringPrintf(RedisModuleCtx *ctx, const char *fmt, ...) {
@@ -553,2 +519 @@ RedisModuleString *RM_CreateStringPrintf(RedisModuleCtx *ctx, const char *fmt,
-RedisModuleString *RM_CreateStringFromLongLong(RedisModuleCtx *ctx,
-                                               long long ll) {
+RedisModuleString *RM_CreateStringFromLongLong(RedisModuleCtx *ctx, long long ll) {
@@ -559,3 +524 @@ RedisModuleString *RM_CreateStringFromLongLong(RedisModuleCtx *ctx,
-RedisModuleString *RM_CreateStringFromLongDouble(RedisModuleCtx *ctx,
-                                                 long double ld,
-                                                 int humanfriendly) {
+RedisModuleString *RM_CreateStringFromLongDouble(RedisModuleCtx *ctx, long double ld, int humanfriendly) {
@@ -567,2 +530 @@ RedisModuleString *RM_CreateStringFromLongDouble(RedisModuleCtx *ctx,
-RedisModuleString *RM_CreateStringFromString(RedisModuleCtx *ctx,
-                                             const RedisModuleString *str) {
+RedisModuleString *RM_CreateStringFromString(RedisModuleCtx *ctx, const RedisModuleString *str) {
@@ -592,2 +554,2 @@ int RM_StringToLongLong(const RedisModuleString *str, long long *ll) {
-  return string2ll(str->ptr, sdslen(str->ptr), ll) ? REDISMODULE_OK
-                                                   : REDISMODULE_ERR;
+    return string2ll(str->ptr,sdslen(str->ptr),ll) ? REDISMODULE_OK :
+                                                     REDISMODULE_ERR;
@@ -623,2 +585 @@ RedisModuleString *moduleAssertUnsharedString(RedisModuleString *str) {
-int RM_StringAppendBuffer(RedisModuleCtx *ctx, RedisModuleString *str,
-                          const char *buf, size_t len) {
+int RM_StringAppendBuffer(RedisModuleCtx *ctx, RedisModuleString *str, const char *buf, size_t len) {
@@ -632 +593,2 @@ int RM_WrongArity(RedisModuleCtx *ctx) {
-  addReplyErrorFormat(ctx->client, "wrong number of arguments for '%s' command",
+    addReplyErrorFormat(ctx->client,
+        "wrong number of arguments for '%s' command",
@@ -670,4 +632,4 @@ int RM_ReplyWithArray(RedisModuleCtx *ctx, long len) {
-    ctx->postponed_arrays =
-        zrealloc(ctx->postponed_arrays,
-                 sizeof(void *) * (ctx->postponed_arrays_count + 1));
-    ctx->postponed_arrays[ctx->postponed_arrays_count] = addReplyDeferredLen(c);
+        ctx->postponed_arrays = zrealloc(ctx->postponed_arrays,sizeof(void*)*
+                (ctx->postponed_arrays_count+1));
+        ctx->postponed_arrays[ctx->postponed_arrays_count] =
+            addReplyDeferredLen(c);
@@ -700,2 +662 @@ void RM_ReplySetArrayLength(RedisModuleCtx *ctx, long len) {
-              "call.",
-              ctx->module->name);
+            "call.", ctx->module->name);
@@ -705 +666,2 @@ void RM_ReplySetArrayLength(RedisModuleCtx *ctx, long len) {
-  setDeferredArrayLen(c, ctx->postponed_arrays[ctx->postponed_arrays_count],
+    setDeferredArrayLen(c,
+            ctx->postponed_arrays[ctx->postponed_arrays_count],
@@ -736,2 +698 @@ int RM_ReplyWithEmptyString(RedisModuleCtx *ctx) {
-int RM_ReplyWithVerbatimString(RedisModuleCtx *ctx, const char *buf,
-                               size_t len) {
+int RM_ReplyWithVerbatimString(RedisModuleCtx *ctx, const char *buf, size_t len) {
@@ -779,2 +740 @@ void moduleReplicateMultiIfNeeded(RedisModuleCtx *ctx) {
-int RM_Replicate(RedisModuleCtx *ctx, const char *cmdname, const char *fmt,
-                 ...) {
+int RM_Replicate(RedisModuleCtx *ctx, const char *cmdname, const char *fmt, ...) {
@@ -806,2 +766,3 @@ int RM_ReplicateVerbatim(RedisModuleCtx *ctx) {
-  alsoPropagate(ctx->client->cmd, ctx->client->db->id, ctx->client->argv,
-                ctx->client->argc, PROPAGATE_AOF | PROPAGATE_REPL);
+    alsoPropagate(ctx->client->cmd,ctx->client->db->id,
+        ctx->client->argv,ctx->client->argc,
+        PROPAGATE_AOF|PROPAGATE_REPL);
@@ -858,2 +819 @@ int RM_GetClientInfoById(void *ci, uint64_t id) {
-int RM_PublishMessage(RedisModuleCtx *ctx, RedisModuleString *channel,
-                      RedisModuleString *message) {
+int RM_PublishMessage(RedisModuleCtx *ctx, RedisModuleString *channel, RedisModuleString *message) {
@@ -862 +822,2 @@ int RM_PublishMessage(RedisModuleCtx *ctx, RedisModuleString *channel,
-  if (server.cluster_enabled) clusterPropagatePublish(channel, message);
+    if (server.cluster_enabled)
+        clusterPropagatePublish(channel, message);
@@ -865 +826,3 @@ int RM_PublishMessage(RedisModuleCtx *ctx, RedisModuleString *channel,
-int RM_GetSelectedDb(RedisModuleCtx *ctx) { return ctx->client->db->id; }
+int RM_GetSelectedDb(RedisModuleCtx *ctx) {
+    return ctx->client->db->id;
+}
@@ -869,2 +832,4 @@ int RM_GetContextFlags(RedisModuleCtx *ctx) {
-    if (ctx->client->flags & CLIENT_LUA) flags |= REDISMODULE_CTX_FLAGS_LUA;
-    if (ctx->client->flags & CLIENT_MULTI) flags |= REDISMODULE_CTX_FLAGS_MULTI;
+        if (ctx->client->flags & CLIENT_LUA)
+         flags |= REDISMODULE_CTX_FLAGS_LUA;
+        if (ctx->client->flags & CLIENT_MULTI)
+         flags |= REDISMODULE_CTX_FLAGS_MULTI;
@@ -874,2 +839,4 @@ int RM_GetContextFlags(RedisModuleCtx *ctx) {
-  if (server.cluster_enabled) flags |= REDISMODULE_CTX_FLAGS_CLUSTER;
-  if (server.loading) flags |= REDISMODULE_CTX_FLAGS_LOADING;
+    if (server.cluster_enabled)
+        flags |= REDISMODULE_CTX_FLAGS_CLUSTER;
+    if (server.loading)
+        flags |= REDISMODULE_CTX_FLAGS_LOADING;
@@ -881,2 +848,4 @@ int RM_GetContextFlags(RedisModuleCtx *ctx) {
-  if (server.aof_state != AOF_OFF) flags |= REDISMODULE_CTX_FLAGS_AOF;
-  if (server.saveparamslen > 0) flags |= REDISMODULE_CTX_FLAGS_RDB;
+    if (server.aof_state != AOF_OFF)
+        flags |= REDISMODULE_CTX_FLAGS_AOF;
+    if (server.saveparamslen > 0)
+        flags |= REDISMODULE_CTX_FLAGS_RDB;
@@ -887 +856,2 @@ int RM_GetContextFlags(RedisModuleCtx *ctx) {
-    if (server.repl_slave_ro) flags |= REDISMODULE_CTX_FLAGS_READONLY;
+        if (server.repl_slave_ro)
+            flags |= REDISMODULE_CTX_FLAGS_READONLY;
@@ -889 +859,2 @@ int RM_GetContextFlags(RedisModuleCtx *ctx) {
-        server.repl_state == REPL_STATE_CONNECTING) {
+            server.repl_state == REPL_STATE_CONNECTING)
+        {
@@ -910,2 +881 @@ int RM_SelectDb(RedisModuleCtx *ctx, int newid) {
-static void moduleInitKey(RedisModuleKey *kp, RedisModuleCtx *ctx,
-                          robj *keyname, robj *value, int mode) {
+static void moduleInitKey(RedisModuleKey *kp, RedisModuleCtx *ctx, robj *keyname, robj *value, int mode){
@@ -954,14 +924,7 @@ int RM_KeyType(RedisModuleKey *key) {
-    case OBJ_STRING:
-      return REDISMODULE_KEYTYPE_STRING;
-    case OBJ_LIST:
-      return REDISMODULE_KEYTYPE_LIST;
-    case OBJ_SET:
-      return REDISMODULE_KEYTYPE_SET;
-    case OBJ_ZSET:
-      return REDISMODULE_KEYTYPE_ZSET;
-    case OBJ_HASH:
-      return REDISMODULE_KEYTYPE_HASH;
-    case OBJ_MODULE:
-      return REDISMODULE_KEYTYPE_MODULE;
-    default:
-      return 0;
+    case OBJ_STRING: return REDISMODULE_KEYTYPE_STRING;
+    case OBJ_LIST: return REDISMODULE_KEYTYPE_LIST;
+    case OBJ_SET: return REDISMODULE_KEYTYPE_SET;
+    case OBJ_ZSET: return REDISMODULE_KEYTYPE_ZSET;
+    case OBJ_HASH: return REDISMODULE_KEYTYPE_HASH;
+    case OBJ_MODULE: return REDISMODULE_KEYTYPE_MODULE;
+    default: return 0;
@@ -973,12 +936,6 @@ size_t RM_ValueLength(RedisModuleKey *key) {
-    case OBJ_STRING:
-      return stringObjectLen(key->value);
-    case OBJ_LIST:
-      return listTypeLength(key->value);
-    case OBJ_SET:
-      return setTypeSize(key->value);
-    case OBJ_ZSET:
-      return zsetLength(key->value);
-    case OBJ_HASH:
-      return hashTypeLength(key->value);
-    default:
-      return 0;
+    case OBJ_STRING: return stringObjectLen(key->value);
+    case OBJ_LIST: return listTypeLength(key->value);
+    case OBJ_SET: return setTypeSize(key->value);
+    case OBJ_ZSET: return zsetLength(key->value);
+    case OBJ_HASH: return hashTypeLength(key->value);
+    default: return 0;
@@ -1079,2 +1036 @@ int RM_ListPush(RedisModuleKey *key, int where, RedisModuleString *ele) {
-  listTypePush(
-      key->value, ele,
+    listTypePush(key->value, ele,
@@ -1085,6 +1041,5 @@ RedisModuleString *RM_ListPop(RedisModuleKey *key, int where) {
-  if (!(key->mode & REDISMODULE_WRITE) || key->value == NULL ||
-      key->value->type != OBJ_LIST)
-    return NULL;
-  robj *ele = listTypePop(key->value, (where == REDISMODULE_LIST_HEAD)
-                                          ? QUICKLIST_HEAD
-                                          : QUICKLIST_TAIL);
+    if (!(key->mode & REDISMODULE_WRITE) ||
+        key->value == NULL ||
+        key->value->type != OBJ_LIST) return NULL;
+    robj *ele = listTypePop(key->value,
+        (where == REDISMODULE_LIST_HEAD) ? QUICKLIST_HEAD : QUICKLIST_TAIL);
@@ -1110,2 +1065 @@ int RM_ZsetAddFlagsFromCoreFlags(int flags) {
-int RM_ZsetAdd(RedisModuleKey *key, double score, RedisModuleString *ele,
-               int *flagsptr) {
+int RM_ZsetAdd(RedisModuleKey *key, double score, RedisModuleString *ele, int *flagsptr) {
@@ -1124,2 +1078 @@ int RM_ZsetAdd(RedisModuleKey *key, double score, RedisModuleString *ele,
-int RM_ZsetIncrby(RedisModuleKey *key, double score, RedisModuleString *ele,
-                  int *flagsptr, double *newscore) {
+int RM_ZsetIncrby(RedisModuleKey *key, double score, RedisModuleString *ele, int *flagsptr, double *newscore) {
@@ -1165 +1118,2 @@ void RM_ZsetRangeStop(RedisModuleKey *key) {
-  if (key->ztype == REDISMODULE_ZSET_RANGE_LEX) zslFreeLexRange(&key->zlrs);
+    if (key->ztype == REDISMODULE_ZSET_RANGE_LEX)
+        zslFreeLexRange(&key->zlrs);
@@ -1168,3 +1122,4 @@ void RM_ZsetRangeStop(RedisModuleKey *key) {
-int RM_ZsetRangeEndReached(RedisModuleKey *key) { return key->zer; }
-int zsetInitScoreRange(RedisModuleKey *key, double min, double max, int minex,
-                       int maxex, int first) {
+int RM_ZsetRangeEndReached(RedisModuleKey *key) {
+    return key->zer;
+}
+int zsetInitScoreRange(RedisModuleKey *key, double min, double max, int minex, int maxex, int first) {
@@ -1181,2 +1136,2 @@ int zsetInitScoreRange(RedisModuleKey *key, double min, double max, int minex,
-    key->zcurrent = first ? zzlFirstInRange(key->value->ptr, zrs)
-                          : zzlLastInRange(key->value->ptr, zrs);
+        key->zcurrent = first ? zzlFirstInRange(key->value->ptr,zrs) :
+                                zzlLastInRange(key->value->ptr,zrs);
@@ -1186,2 +1141,2 @@ int zsetInitScoreRange(RedisModuleKey *key, double min, double max, int minex,
-    key->zcurrent =
-        first ? zslFirstInRange(zsl, zrs) : zslLastInRange(zsl, zrs);
+        key->zcurrent = first ? zslFirstInRange(zsl,zrs) :
+                                zslLastInRange(zsl,zrs);
@@ -1194,2 +1149 @@ int zsetInitScoreRange(RedisModuleKey *key, double min, double max, int minex,
-int RM_ZsetFirstInScoreRange(RedisModuleKey *key, double min, double max,
-                             int minex, int maxex) {
+int RM_ZsetFirstInScoreRange(RedisModuleKey *key, double min, double max, int minex, int maxex) {
@@ -1198,2 +1152 @@ int RM_ZsetFirstInScoreRange(RedisModuleKey *key, double min, double max,
-int RM_ZsetLastInScoreRange(RedisModuleKey *key, double min, double max,
-                            int minex, int maxex) {
+int RM_ZsetLastInScoreRange(RedisModuleKey *key, double min, double max, int minex, int maxex) {
@@ -1202,2 +1155 @@ int RM_ZsetLastInScoreRange(RedisModuleKey *key, double min, double max,
-int zsetInitLexRange(RedisModuleKey *key, RedisModuleString *min,
-                     RedisModuleString *max, int first) {
+int zsetInitLexRange(RedisModuleKey *key, RedisModuleString *min, RedisModuleString *max, int first) {
@@ -1211,2 +1163,2 @@ int zsetInitLexRange(RedisModuleKey *key, RedisModuleString *min,
-    key->zcurrent = first ? zzlFirstInLexRange(key->value->ptr, zlrs)
-                          : zzlLastInLexRange(key->value->ptr, zlrs);
+        key->zcurrent = first ? zzlFirstInLexRange(key->value->ptr,zlrs) :
+                                zzlLastInLexRange(key->value->ptr,zlrs);
@@ -1216,2 +1168,2 @@ int zsetInitLexRange(RedisModuleKey *key, RedisModuleString *min,
-    key->zcurrent =
-        first ? zslFirstInLexRange(zsl, zlrs) : zslLastInLexRange(zsl, zlrs);
+        key->zcurrent = first ? zslFirstInLexRange(zsl,zlrs) :
+                                zslLastInLexRange(zsl,zlrs);
@@ -1224,2 +1176 @@ int zsetInitLexRange(RedisModuleKey *key, RedisModuleString *min,
-int RM_ZsetFirstInLexRange(RedisModuleKey *key, RedisModuleString *min,
-                           RedisModuleString *max) {
+int RM_ZsetFirstInLexRange(RedisModuleKey *key, RedisModuleString *min, RedisModuleString *max) {
@@ -1228,2 +1179 @@ int RM_ZsetFirstInLexRange(RedisModuleKey *key, RedisModuleString *min,
-int RM_ZsetLastInLexRange(RedisModuleKey *key, RedisModuleString *min,
-                          RedisModuleString *max) {
+int RM_ZsetLastInLexRange(RedisModuleKey *key, RedisModuleString *min, RedisModuleString *max) {
@@ -1232,2 +1182 @@ int RM_ZsetLastInLexRange(RedisModuleKey *key, RedisModuleString *min,
-RedisModuleString *RM_ZsetRangeCurrentElement(RedisModuleKey *key,
-                                              double *score) {
+RedisModuleString *RM_ZsetRangeCurrentElement(RedisModuleKey *key, double *score) {
@@ -1292 +1241,2 @@ int RM_ZsetRangeNext(RedisModuleKey *key) {
-          !zslValueLteMax(next->score, &key->zrs)) {
+                !zslValueLteMax(next->score,&key->zrs))
+            {
@@ -1345 +1295,2 @@ int RM_ZsetRangePrev(RedisModuleKey *key) {
-          !zslValueGteMin(prev->score, &key->zrs)) {
+                !zslValueGteMin(prev->score,&key->zrs))
+            {
@@ -1382 +1333,2 @@ int RM_HashSet(RedisModuleKey *key, int flags, ...) {
-          ((flags & REDISMODULE_HASH_NX) && exists)) {
+                ((flags & REDISMODULE_HASH_NX) && exists))
+            {
@@ -1393 +1345,2 @@ int RM_HashSet(RedisModuleKey *key, int flags, ...) {
-    if (flags & REDISMODULE_HASH_CFIELDS) low_flags |= HASH_SET_TAKE_FIELD;
+        if (flags & REDISMODULE_HASH_CFIELDS)
+            low_flags |= HASH_SET_TAKE_FIELD;
@@ -1447,2 +1400 @@ int RM_HashGet(RedisModuleKey *key, int flags, ...) {
-RedisModuleCallReply *moduleCreateCallReplyFromProto(RedisModuleCtx *ctx,
-                                                     sds proto) {
+RedisModuleCallReply *moduleCreateCallReplyFromProto(RedisModuleCtx *ctx, sds proto) {
@@ -1456,15 +1408,5 @@ RedisModuleCallReply *moduleCreateCallReplyFromProto(RedisModuleCtx *ctx,
-    case '+':
-      reply->type = REDISMODULE_REPLY_STRING;
-      break;
-    case '-':
-      reply->type = REDISMODULE_REPLY_ERROR;
-      break;
-    case ':':
-      reply->type = REDISMODULE_REPLY_INTEGER;
-      break;
-    case '*':
-      reply->type = REDISMODULE_REPLY_ARRAY;
-      break;
-    default:
-      reply->type = REDISMODULE_REPLY_UNKNOWN;
-      break;
+    case '+': reply->type = REDISMODULE_REPLY_STRING; break;
+    case '-': reply->type = REDISMODULE_REPLY_ERROR; break;
+    case ':': reply->type = REDISMODULE_REPLY_INTEGER; break;
+    case '*': reply->type = REDISMODULE_REPLY_ARRAY; break;
+    default: reply->type = REDISMODULE_REPLY_UNKNOWN; break;
@@ -1484,6 +1426,2 @@ void moduleParseCallReply(RedisModuleCallReply *reply) {
-    case ':':
-      moduleParseCallReply_Int(reply);
-      break;
-    case '$':
-      moduleParseCallReply_BulkString(reply);
-      break;
+    case ':': moduleParseCallReply_Int(reply); break;
+    case '$': moduleParseCallReply_BulkString(reply); break;
@@ -1491,6 +1429,2 @@ void moduleParseCallReply(RedisModuleCallReply *reply) {
-    case '+':
-      moduleParseCallReply_SimpleString(reply);
-      break;
-    case '*':
-      moduleParseCallReply_Array(reply);
-      break;
+    case '+': moduleParseCallReply_SimpleString(reply); break;
+    case '*': moduleParseCallReply_Array(reply); break;
@@ -1527,2 +1461,2 @@ void moduleParseCallReply_SimpleString(RedisModuleCallReply *reply) {
-  reply->type =
-      proto[0] == '+' ? REDISMODULE_REPLY_STRING : REDISMODULE_REPLY_ERROR;
+    reply->type = proto[0] == '+' ? REDISMODULE_REPLY_STRING :
+                                    REDISMODULE_REPLY_ERROR;
@@ -1545 +1479,2 @@ void moduleParseCallReply_Array(RedisModuleCallReply *reply) {
-    ele->flags = REDISMODULE_REPLYFLAG_NESTED | REDISMODULE_REPLYFLAG_TOPARSE;
+        ele->flags = REDISMODULE_REPLYFLAG_NESTED |
+                     REDISMODULE_REPLYFLAG_TOPARSE;
@@ -1589,2 +1524 @@ size_t RM_CallReplyLength(RedisModuleCallReply *reply) {
-RedisModuleCallReply *RM_CallReplyArrayElement(RedisModuleCallReply *reply,
-                                               size_t idx) {
+RedisModuleCallReply *RM_CallReplyArrayElement(RedisModuleCallReply *reply, size_t idx) {
@@ -1604,2 +1538 @@ const char *RM_CallReplyStringPtr(RedisModuleCallReply *reply, size_t *len) {
-      reply->type != REDISMODULE_REPLY_ERROR)
-    return NULL;
+        reply->type != REDISMODULE_REPLY_ERROR) return NULL;
@@ -1620,2 +1553 @@ RedisModuleString *RM_CreateStringFromCallReply(RedisModuleCallReply *reply) {
-    default:
-      return NULL;
+    default: return NULL;
@@ -1624,2 +1556 @@ RedisModuleString *RM_CreateStringFromCallReply(RedisModuleCallReply *reply) {
-robj **moduleCreateArgvFromUserFormat(const char *cmdname, const char *fmt,
-                                      int *argcp, int *flags, va_list ap) {
+robj **moduleCreateArgvFromUserFormat(const char *cmdname, const char *fmt, int *argcp, int *flags, va_list ap) {
@@ -1672 +1603,2 @@ fmterr:
-  for (j = 0; j < argc; j++) decrRefCount(argv[j]);
+    for (j = 0; j < argc; j++)
+        decrRefCount(argv[j]);
@@ -1676,2 +1608 @@ fmterr:
-RedisModuleCallReply *RM_Call(RedisModuleCtx *ctx, const char *cmdname,
-                              const char *fmt, ...) {
+RedisModuleCallReply *RM_Call(RedisModuleCtx *ctx, const char *cmdname, const char *fmt, ...) {
@@ -1715 +1646,2 @@ RedisModuleCallReply *RM_Call(RedisModuleCtx *ctx, const char *cmdname,
-        server.cluster->myself) {
+                           server.cluster->myself)
+        {
@@ -1826,2 +1758 @@ void moduleTypeNameByID(char *name, uint64_t moduleid) {
-moduleType *RM_CreateDataType(RedisModuleCtx *ctx, const char *name, int encver,
-                              void *typemethods_ptr) {
+moduleType *RM_CreateDataType(RedisModuleCtx *ctx, const char *name, int encver, void *typemethods_ptr) {
@@ -1875,3 +1806,3 @@ moduleType *RM_ModuleTypeGetType(RedisModuleKey *key) {
-  if (key == NULL || key->value == NULL ||
-      RM_KeyType(key) != REDISMODULE_KEYTYPE_MODULE)
-    return NULL;
+    if (key == NULL ||
+        key->value == NULL ||
+        RM_KeyType(key) != REDISMODULE_KEYTYPE_MODULE) return NULL;
@@ -1882,3 +1813,3 @@ void *RM_ModuleTypeGetValue(RedisModuleKey *key) {
-  if (key == NULL || key->value == NULL ||
-      RM_KeyType(key) != REDISMODULE_KEYTYPE_MODULE)
-    return NULL;
+    if (key == NULL ||
+        key->value == NULL ||
+        RM_KeyType(key) != REDISMODULE_KEYTYPE_MODULE) return NULL;
@@ -1897 +1828,2 @@ void moduleRDBLoadError(RedisModuleIO *io) {
-            io->type->module->name, io->type->name,
+        io->type->module->name,
+        io->type->name,
@@ -1907 +1839,2 @@ int moduleAllDatatypesHandleErrors() {
-        !(module->options & REDISMODULE_OPTIONS_HANDLE_IO_ERRORS)) {
+            !(module->options & REDISMODULE_OPTIONS_HANDLE_IO_ERRORS))
+        {
@@ -1915 +1848,3 @@ int moduleAllDatatypesHandleErrors() {
-int RM_IsIOError(RedisModuleIO *io) { return io->error; }
+int RM_IsIOError(RedisModuleIO *io) {
+    return io->error;
+}
@@ -1943,4 +1878 @@ void RM_SaveSigned(RedisModuleIO *io, int64_t value) {
-  union {
-    uint64_t u;
-    int64_t i;
-  } conv;
+    union {uint64_t u; int64_t i;} conv;
@@ -1951,4 +1883 @@ int64_t RM_LoadSigned(RedisModuleIO *io) {
-  union {
-    uint64_t u;
-    int64_t i;
-  } conv;
+    union {uint64_t u; int64_t i;} conv;
@@ -1988,2 +1917,2 @@ void *moduleLoadString(RedisModuleIO *io, int plain, size_t *lenptr) {
-  void *s = rdbGenericLoadStringObject(
-      io->rio, plain ? RDB_LOAD_PLAIN : RDB_LOAD_NONE, lenptr);
+    void *s = rdbGenericLoadStringObject(io->rio,
+              plain ? RDB_LOAD_PLAIN : RDB_LOAD_NONE, lenptr);
@@ -2081 +2010,2 @@ ssize_t rdbSaveModulesAux(rio *rdb, int when) {
-      if (!mt->aux_save || !(mt->aux_save_triggers & when)) continue;
+            if (!mt->aux_save || !(mt->aux_save_triggers & when))
+                continue;
@@ -2093,2 +2023 @@ ssize_t rdbSaveModulesAux(rio *rdb, int when) {
-void RM_DigestAddStringBuffer(RedisModuleDigest *md, unsigned char *ele,
-                              size_t len) {
+void RM_DigestAddStringBuffer(RedisModuleDigest *md, unsigned char *ele, size_t len) {
@@ -2106,2 +2035 @@ void RM_DigestEndSequence(RedisModuleDigest *md) {
-void *RM_LoadDataTypeFromString(const RedisModuleString *str,
-                                const moduleType *mt) {
+void *RM_LoadDataTypeFromString(const RedisModuleString *str, const moduleType *mt) {
@@ -2115,2 +2043 @@ void *RM_LoadDataTypeFromString(const RedisModuleString *str,
-RedisModuleString *RM_SaveDataTypeToString(RedisModuleCtx *ctx, void *data,
-                                           const moduleType *mt) {
+RedisModuleString *RM_SaveDataTypeToString(RedisModuleCtx *ctx, void *data, const moduleType *mt) {
@@ -2158 +2085,2 @@ void RM_EmitAOF(RedisModuleIO *io, const char *cmdname, const char *fmt, ...) {
-  if (!io->error && rioWriteBulkCount(io->rio, '*', argc) == 0) io->error = 1;
+    if (!io->error && rioWriteBulkCount(io->rio,'*',argc) == 0)
+        io->error = 1;
@@ -2160 +2088,2 @@ void RM_EmitAOF(RedisModuleIO *io, const char *cmdname, const char *fmt, ...) {
-    if (!io->error && rioWriteBulkObject(io->rio, argv[j]) == 0) io->error = 1;
+        if (!io->error && rioWriteBulkObject(io->rio,argv[j]) == 0)
+            io->error = 1;
@@ -2181,2 +2110 @@ const RedisModuleString *RM_GetKeyNameFromModuleKey(RedisModuleKey *key) {
-void RM_LogRaw(RedisModule *module, const char *levelstr, const char *fmt,
-               va_list ap) {
+void RM_LogRaw(RedisModule *module, const char *levelstr, const char *fmt, va_list ap) {
@@ -2186,10 +2114,5 @@ void RM_LogRaw(RedisModule *module, const char *levelstr, const char *fmt,
-  if (!strcasecmp(levelstr, "debug"))
-    level = LL_DEBUG;
-  else if (!strcasecmp(levelstr, "verbose"))
-    level = LL_VERBOSE;
-  else if (!strcasecmp(levelstr, "notice"))
-    level = LL_NOTICE;
-  else if (!strcasecmp(levelstr, "warning"))
-    level = LL_WARNING;
-  else
-    level = LL_VERBOSE;
+    if (!strcasecmp(levelstr,"debug")) level = LL_DEBUG;
+    else if (!strcasecmp(levelstr,"verbose")) level = LL_VERBOSE;
+    else if (!strcasecmp(levelstr,"notice")) level = LL_NOTICE;
+    else if (!strcasecmp(levelstr,"warning")) level = LL_WARNING;
+    else level = LL_VERBOSE;
@@ -2197,2 +2120 @@ void RM_LogRaw(RedisModule *module, const char *levelstr, const char *fmt,
-  name_len =
-      snprintf(msg, sizeof(msg), "<%s> ", module ? module->name : "module");
+    name_len = snprintf(msg, sizeof(msg),"<%s> ", module? module->name: "module");
@@ -2208,2 +2130 @@ void RM_Log(RedisModuleCtx *ctx, const char *levelstr, const char *fmt, ...) {
-void RM_LogIOError(RedisModuleIO *io, const char *levelstr, const char *fmt,
-                   ...) {
+void RM_LogIOError(RedisModuleIO *io, const char *levelstr, const char *fmt, ...) {
@@ -2222,2 +2143 @@ void RM_LatencyAddSample(const char *event, mstime_t latency) {
-void moduleBlockedClientPipeReadable(aeEventLoop *el, int fd, void *privdata,
-                                     int mask) {
+void moduleBlockedClientPipeReadable(aeEventLoop *el, int fd, void *privdata, int mask) {
@@ -2242,5 +2162 @@ void unblockClientFromModule(client *c) {
-RedisModuleBlockedClient *moduleBlockClient(
-    RedisModuleCtx *ctx, RedisModuleCmdFunc reply_callback,
-    RedisModuleCmdFunc timeout_callback,
-    void (*free_privdata)(RedisModuleCtx *, void *), long long timeout_ms,
-    RedisModuleString **keys, int numkeys, void *privdata) {
+RedisModuleBlockedClient *moduleBlockClient(RedisModuleCtx *ctx, RedisModuleCmdFunc reply_callback, RedisModuleCmdFunc timeout_callback, void (*free_privdata)(RedisModuleCtx*,void*), long long timeout_ms, RedisModuleString **keys, int numkeys, void *privdata) {
@@ -2269,2 +2185,3 @@ RedisModuleBlockedClient *moduleBlockClient(
-    addReplyError(c, islua ? "Blocking module command called from Lua script"
-                           : "Blocking module command called from transaction");
+        addReplyError(c, islua ?
+            "Blocking module command called from Lua script" :
+            "Blocking module command called from transaction");
@@ -2296,14 +2213,5 @@ int moduleTryServeClientBlockedOnKey(client *c, robj *key) {
-RedisModuleBlockedClient *RM_BlockClient(
-    RedisModuleCtx *ctx, RedisModuleCmdFunc reply_callback,
-    RedisModuleCmdFunc timeout_callback,
-    void (*free_privdata)(RedisModuleCtx *, void *), long long timeout_ms) {
-  return moduleBlockClient(ctx, reply_callback, timeout_callback, free_privdata,
-                           timeout_ms, NULL, 0, NULL);
-}
-RedisModuleBlockedClient *RM_BlockClientOnKeys(
-    RedisModuleCtx *ctx, RedisModuleCmdFunc reply_callback,
-    RedisModuleCmdFunc timeout_callback,
-    void (*free_privdata)(RedisModuleCtx *, void *), long long timeout_ms,
-    RedisModuleString **keys, int numkeys, void *privdata) {
-  return moduleBlockClient(ctx, reply_callback, timeout_callback, free_privdata,
-                           timeout_ms, keys, numkeys, privdata);
+RedisModuleBlockedClient *RM_BlockClient(RedisModuleCtx *ctx, RedisModuleCmdFunc reply_callback, RedisModuleCmdFunc timeout_callback, void (*free_privdata)(RedisModuleCtx*,void*), long long timeout_ms) {
+    return moduleBlockClient(ctx,reply_callback,timeout_callback,free_privdata,timeout_ms, NULL,0,NULL);
+}
+RedisModuleBlockedClient *RM_BlockClientOnKeys(RedisModuleCtx *ctx, RedisModuleCmdFunc reply_callback, RedisModuleCmdFunc timeout_callback, void (*free_privdata)(RedisModuleCtx*,void*), long long timeout_ms, RedisModuleString **keys, int numkeys, void *privdata) {
+    return moduleBlockClient(ctx,reply_callback,timeout_callback,free_privdata,timeout_ms, keys,numkeys,privdata);
@@ -2346,2 +2254 @@ int RM_AbortBlock(RedisModuleBlockedClient *bc) {
-void RM_SetDisconnectCallback(RedisModuleBlockedClient *bc,
-                              RedisModuleDisconnectFunc callback) {
+void RM_SetDisconnectCallback(RedisModuleBlockedClient *bc, RedisModuleDisconnectFunc callback) {
@@ -2355,2 +2262 @@ void moduleHandleBlockedClients(void) {
-  while (read(server.module_blocked_pipe[0], buf, 1) == 1)
-    ;
+    while (read(server.module_blocked_pipe[0],buf,1) == 1);
@@ -2376 +2282,2 @@ void moduleHandleBlockedClients(void) {
-      if (c == NULL) ctx.flags |= REDISMODULE_CTX_BLOCKED_DISCONNECTED;
+            if (c == NULL)
+                ctx.flags |= REDISMODULE_CTX_BLOCKED_DISCONNECTED;
@@ -2388 +2295,3 @@ void moduleHandleBlockedClients(void) {
-      if (clientHasPendingReplies(c) && !(c->flags & CLIENT_PENDING_WRITE)) {
+            if (clientHasPendingReplies(c) &&
+                !(c->flags & CLIENT_PENDING_WRITE))
+            {
@@ -2456,4 +2365,7 @@ void RM_ThreadSafeContextUnlock(RedisModuleCtx *ctx) {
-void moduleAcquireGIL(void) { pthread_mutex_lock(&moduleGIL); }
-void moduleReleaseGIL(void) { pthread_mutex_unlock(&moduleGIL); }
-int RM_SubscribeToKeyspaceEvents(RedisModuleCtx *ctx, int types,
-                                 RedisModuleNotificationFunc callback) {
+void moduleAcquireGIL(void) {
+    pthread_mutex_lock(&moduleGIL);
+}
+void moduleReleaseGIL(void) {
+    pthread_mutex_unlock(&moduleGIL);
+}
+int RM_SubscribeToKeyspaceEvents(RedisModuleCtx *ctx, int types, RedisModuleNotificationFunc callback) {
@@ -2468,4 +2380,6 @@ int RM_SubscribeToKeyspaceEvents(RedisModuleCtx *ctx, int types,
-int RM_GetNotifyKeyspaceEvents() { return server.notify_keyspace_events; }
-int RM_NotifyKeyspaceEvent(RedisModuleCtx *ctx, int type, const char *event,
-                           RedisModuleString *key) {
-  if (!ctx || !ctx->client) return REDISMODULE_ERR;
+int RM_GetNotifyKeyspaceEvents() {
+    return server.notify_keyspace_events;
+}
+int RM_NotifyKeyspaceEvent(RedisModuleCtx *ctx, int type, const char *event, RedisModuleString *key) {
+    if (!ctx || !ctx->client)
+        return REDISMODULE_ERR;
@@ -2475,2 +2389 @@ int RM_NotifyKeyspaceEvent(RedisModuleCtx *ctx, int type, const char *event,
-void moduleNotifyKeyspaceEvent(int type, const char *event, robj *key,
-                               int dbid) {
+void moduleNotifyKeyspaceEvent(int type, const char *event, robj *key, int dbid) {
@@ -2508,5 +2421 @@ void moduleUnsubscribeNotifications(RedisModule *module) {
-typedef void (*RedisModuleClusterMessageReceiver)(RedisModuleCtx *ctx,
-                                                  const char *sender_id,
-                                                  uint8_t type,
-                                                  const unsigned char *payload,
-                                                  uint32_t len);
+typedef void (*RedisModuleClusterMessageReceiver)(RedisModuleCtx *ctx, const char *sender_id, uint8_t type, const unsigned char *payload, uint32_t len);
@@ -2526,3 +2435 @@ static moduleClusterReceiver *clusterReceivers[UINT8_MAX];
-void moduleCallClusterReceivers(const char *sender_id, uint64_t module_id,
-                                uint8_t type, const unsigned char *payload,
-                                uint32_t len) {
+void moduleCallClusterReceivers(const char *sender_id, uint64_t module_id, uint8_t type, const unsigned char *payload, uint32_t len) {
@@ -2543,3 +2450 @@ void moduleCallClusterReceivers(const char *sender_id, uint64_t module_id,
-void RM_RegisterClusterMessageReceiver(
-    RedisModuleCtx *ctx, uint8_t type,
-    RedisModuleClusterMessageReceiver callback) {
+void RM_RegisterClusterMessageReceiver(RedisModuleCtx *ctx, uint8_t type, RedisModuleClusterMessageReceiver callback) {
@@ -2574,2 +2479 @@ void RM_RegisterClusterMessageReceiver(
-int RM_SendClusterMessage(RedisModuleCtx *ctx, char *target_id, uint8_t type,
-                          unsigned char *msg, uint32_t len) {
+int RM_SendClusterMessage(RedisModuleCtx *ctx, char *target_id, uint8_t type, unsigned char *msg, uint32_t len) {
@@ -2578,2 +2482 @@ int RM_SendClusterMessage(RedisModuleCtx *ctx, char *target_id, uint8_t type,
-  if (clusterSendModuleMessageToTarget(target_id, module_id, type, msg, len) ==
-      C_OK)
+    if (clusterSendModuleMessageToTarget(target_id,module_id,type,msg,len) == C_OK)
@@ -2617,4 +2520,2 @@ size_t RM_GetClusterSize(void) {
-clusterNode *clusterLookupNode(
-    const char *name);
-int RM_GetClusterNodeInfo(RedisModuleCtx *ctx, const char *id, char *ip,
-                          char *master_id, int *port, int *flags) {
+clusterNode *clusterLookupNode(const char *name);
+int RM_GetClusterNodeInfo(RedisModuleCtx *ctx, const char *id, char *ip, char *master_id, int *port, int *flags) {
@@ -2640,2 +2541 @@ int RM_GetClusterNodeInfo(RedisModuleCtx *ctx, const char *id, char *ip,
-    if (node->flags & CLUSTER_NODE_NOFAILOVER)
-      *flags |= REDISMODULE_NODE_NOFAILOVER;
+        if (node->flags & CLUSTER_NODE_NOFAILOVER) *flags |= REDISMODULE_NODE_NOFAILOVER;
@@ -2661,2 +2561 @@ typedef struct RedisModuleTimer {
-int moduleTimerHandler(struct aeEventLoop *eventLoop, long long id,
-                       void *clientData) {
+int moduleTimerHandler(struct aeEventLoop *eventLoop, long long id, void *clientData) {
@@ -2695,2 +2594 @@ int moduleTimerHandler(struct aeEventLoop *eventLoop, long long id,
-RedisModuleTimerID RM_CreateTimer(RedisModuleCtx *ctx, mstime_t period,
-                                  RedisModuleTimerProc callback, void *data) {
+RedisModuleTimerID RM_CreateTimer(RedisModuleCtx *ctx, mstime_t period, RedisModuleTimerProc callback, void *data) {
@@ -2725,2 +2623 @@ RedisModuleTimerID RM_CreateTimer(RedisModuleCtx *ctx, mstime_t period,
-    aeTimer =
-        aeCreateTimeEvent(server.el, period, moduleTimerHandler, NULL, NULL);
+        aeTimer = aeCreateTimeEvent(server.el,period,moduleTimerHandler,NULL,NULL);
@@ -2738,2 +2635 @@ int RM_StopTimer(RedisModuleCtx *ctx, RedisModuleTimerID id, void **data) {
-int RM_GetTimerInfo(RedisModuleCtx *ctx, RedisModuleTimerID id,
-                    uint64_t *remaining, void **data) {
+int RM_GetTimerInfo(RedisModuleCtx *ctx, RedisModuleTimerID id, uint64_t *remaining, void **data) {
@@ -2762 +2658,3 @@ void RM_FreeDict(RedisModuleCtx *ctx, RedisModuleDict *d) {
-uint64_t RM_DictSize(RedisModuleDict *d) { return raxSize(d->rax); }
+uint64_t RM_DictSize(RedisModuleDict *d) {
+    return raxSize(d->rax);
+}
@@ -2792,2 +2690 @@ int RM_DictDel(RedisModuleDict *d, RedisModuleString *key, void *oldval) {
-RedisModuleDictIter *RM_DictIteratorStartC(RedisModuleDict *d, const char *op,
-                                           void *key, size_t keylen) {
+RedisModuleDictIter *RM_DictIteratorStartC(RedisModuleDict *d, const char *op, void *key, size_t keylen) {
@@ -2800,2 +2697 @@ RedisModuleDictIter *RM_DictIteratorStartC(RedisModuleDict *d, const char *op,
-RedisModuleDictIter *RM_DictIteratorStart(RedisModuleDict *d, const char *op,
-                                          RedisModuleString *key) {
+RedisModuleDictIter *RM_DictIteratorStart(RedisModuleDict *d, const char *op, RedisModuleString *key) {
@@ -2808,2 +2704 @@ void RM_DictIteratorStop(RedisModuleDictIter *di) {
-int RM_DictIteratorReseekC(RedisModuleDictIter *di, const char *op, void *key,
-                           size_t keylen) {
+int RM_DictIteratorReseekC(RedisModuleDictIter *di, const char *op, void *key, size_t keylen) {
@@ -2812,2 +2707 @@ int RM_DictIteratorReseekC(RedisModuleDictIter *di, const char *op, void *key,
-int RM_DictIteratorReseek(RedisModuleDictIter *di, const char *op,
-                          RedisModuleString *key) {
+int RM_DictIteratorReseek(RedisModuleDictIter *di, const char *op, RedisModuleString *key) {
@@ -2828,2 +2722 @@ void *RM_DictPrevC(RedisModuleDictIter *di, size_t *keylen, void **dataptr) {
-RedisModuleString *RM_DictNext(RedisModuleCtx *ctx, RedisModuleDictIter *di,
-                               void **dataptr) {
+RedisModuleString *RM_DictNext(RedisModuleCtx *ctx, RedisModuleDictIter *di, void **dataptr) {
@@ -2835,2 +2728 @@ RedisModuleString *RM_DictNext(RedisModuleCtx *ctx, RedisModuleDictIter *di,
-RedisModuleString *RM_DictPrev(RedisModuleCtx *ctx, RedisModuleDictIter *di,
-                               void **dataptr) {
+RedisModuleString *RM_DictPrev(RedisModuleCtx *ctx, RedisModuleDictIter *di, void **dataptr) {
@@ -2842,2 +2734 @@ RedisModuleString *RM_DictPrev(RedisModuleCtx *ctx, RedisModuleDictIter *di,
-int RM_DictCompareC(RedisModuleDictIter *di, const char *op, void *key,
-                    size_t keylen) {
+int RM_DictCompareC(RedisModuleDictIter *di, const char *op, void *key, size_t keylen) {
@@ -2848,2 +2739 @@ int RM_DictCompareC(RedisModuleDictIter *di, const char *op, void *key,
-int RM_DictCompare(RedisModuleDictIter *di, const char *op,
-                   RedisModuleString *key) {
+int RM_DictCompare(RedisModuleDictIter *di, const char *op, RedisModuleString *key) {
@@ -2859 +2749,2 @@ int RM_InfoAddSection(RedisModuleInfoCtx *ctx, char *name) {
-  if (ctx->in_dict_field) RM_InfoEndDictField(ctx);
+    if (ctx->in_dict_field)
+        RM_InfoEndDictField(ctx);
@@ -2875,3 +2766,8 @@ int RM_InfoBeginDictField(RedisModuleInfoCtx *ctx, char *name) {
-  if (!ctx->in_section) return REDISMODULE_ERR;
-  if (ctx->in_dict_field) RM_InfoEndDictField(ctx);
-  ctx->info = sdscatfmt(ctx->info, "%s_%s:", ctx->module->name, name);
+    if (!ctx->in_section)
+        return REDISMODULE_ERR;
+    if (ctx->in_dict_field)
+        RM_InfoEndDictField(ctx);
+    ctx->info = sdscatfmt(ctx->info,
+        "%s_%s:",
+        ctx->module->name,
+        name);
@@ -2882,2 +2778,4 @@ int RM_InfoEndDictField(RedisModuleInfoCtx *ctx) {
-  if (!ctx->in_dict_field) return REDISMODULE_ERR;
-  if (ctx->info[sdslen(ctx->info) - 1] == ',') sdsIncrLen(ctx->info, -1);
+    if (!ctx->in_dict_field)
+        return REDISMODULE_ERR;
+    if (ctx->info[sdslen(ctx->info)-1]==',')
+        sdsIncrLen(ctx->info, -1);
@@ -2888,3 +2786,3 @@ int RM_InfoEndDictField(RedisModuleInfoCtx *ctx) {
-int RM_InfoAddFieldString(RedisModuleInfoCtx *ctx, char *field,
-                          RedisModuleString *value) {
-  if (!ctx->in_section) return REDISMODULE_ERR;
+int RM_InfoAddFieldString(RedisModuleInfoCtx *ctx, char *field, RedisModuleString *value) {
+    if (!ctx->in_section)
+        return REDISMODULE_ERR;
@@ -2892 +2790,4 @@ int RM_InfoAddFieldString(RedisModuleInfoCtx *ctx, char *field,
-    ctx->info = sdscatfmt(ctx->info, "%s=%S,", field, (sds)value->ptr);
+        ctx->info = sdscatfmt(ctx->info,
+            "%s=%S,",
+            field,
+            (sds)value->ptr);
@@ -2895 +2796,4 @@ int RM_InfoAddFieldString(RedisModuleInfoCtx *ctx, char *field,
-  ctx->info = sdscatfmt(ctx->info, "%s_%s:%S\r\n", ctx->module->name, field,
+    ctx->info = sdscatfmt(ctx->info,
+        "%s_%s:%S\r\n",
+        ctx->module->name,
+        field,
@@ -2900 +2804,2 @@ int RM_InfoAddFieldCString(RedisModuleInfoCtx *ctx, char *field, char *value) {
-  if (!ctx->in_section) return REDISMODULE_ERR;
+    if (!ctx->in_section)
+        return REDISMODULE_ERR;
@@ -2902 +2807,4 @@ int RM_InfoAddFieldCString(RedisModuleInfoCtx *ctx, char *field, char *value) {
-    ctx->info = sdscatfmt(ctx->info, "%s=%s,", field, value);
+        ctx->info = sdscatfmt(ctx->info,
+            "%s=%s,",
+            field,
+            value);
@@ -2905,2 +2813,5 @@ int RM_InfoAddFieldCString(RedisModuleInfoCtx *ctx, char *field, char *value) {
-  ctx->info =
-      sdscatfmt(ctx->info, "%s_%s:%s\r\n", ctx->module->name, field, value);
+    ctx->info = sdscatfmt(ctx->info,
+        "%s_%s:%s\r\n",
+        ctx->module->name,
+        field,
+        value);
@@ -2910 +2821,2 @@ int RM_InfoAddFieldDouble(RedisModuleInfoCtx *ctx, char *field, double value) {
-  if (!ctx->in_section) return REDISMODULE_ERR;
+    if (!ctx->in_section)
+        return REDISMODULE_ERR;
@@ -2912 +2824,4 @@ int RM_InfoAddFieldDouble(RedisModuleInfoCtx *ctx, char *field, double value) {
-    ctx->info = sdscatprintf(ctx->info, "%s=%.17g,", field, value);
+        ctx->info = sdscatprintf(ctx->info,
+            "%s=%.17g,",
+            field,
+            value);
@@ -2915,2 +2830,5 @@ int RM_InfoAddFieldDouble(RedisModuleInfoCtx *ctx, char *field, double value) {
-  ctx->info = sdscatprintf(ctx->info, "%s_%s:%.17g\r\n", ctx->module->name,
-                           field, value);
+    ctx->info = sdscatprintf(ctx->info,
+        "%s_%s:%.17g\r\n",
+        ctx->module->name,
+        field,
+        value);
@@ -2919,3 +2837,3 @@ int RM_InfoAddFieldDouble(RedisModuleInfoCtx *ctx, char *field, double value) {
-int RM_InfoAddFieldLongLong(RedisModuleInfoCtx *ctx, char *field,
-                            long long value) {
-  if (!ctx->in_section) return REDISMODULE_ERR;
+int RM_InfoAddFieldLongLong(RedisModuleInfoCtx *ctx, char *field, long long value) {
+    if (!ctx->in_section)
+        return REDISMODULE_ERR;
@@ -2923 +2841,4 @@ int RM_InfoAddFieldLongLong(RedisModuleInfoCtx *ctx, char *field,
-    ctx->info = sdscatfmt(ctx->info, "%s=%I,", field, value);
+        ctx->info = sdscatfmt(ctx->info,
+            "%s=%I,",
+            field,
+            value);
@@ -2926,2 +2847,5 @@ int RM_InfoAddFieldLongLong(RedisModuleInfoCtx *ctx, char *field,
-  ctx->info =
-      sdscatfmt(ctx->info, "%s_%s:%I\r\n", ctx->module->name, field, value);
+    ctx->info = sdscatfmt(ctx->info,
+        "%s_%s:%I\r\n",
+        ctx->module->name,
+        field,
+        value);
@@ -2930,3 +2854,3 @@ int RM_InfoAddFieldLongLong(RedisModuleInfoCtx *ctx, char *field,
-int RM_InfoAddFieldULongLong(RedisModuleInfoCtx *ctx, char *field,
-                             unsigned long long value) {
-  if (!ctx->in_section) return REDISMODULE_ERR;
+int RM_InfoAddFieldULongLong(RedisModuleInfoCtx *ctx, char *field, unsigned long long value) {
+    if (!ctx->in_section)
+        return REDISMODULE_ERR;
@@ -2934 +2858,4 @@ int RM_InfoAddFieldULongLong(RedisModuleInfoCtx *ctx, char *field,
-    ctx->info = sdscatfmt(ctx->info, "%s=%U,", field, value);
+        ctx->info = sdscatfmt(ctx->info,
+            "%s=%U,",
+            field,
+            value);
@@ -2937,2 +2864,5 @@ int RM_InfoAddFieldULongLong(RedisModuleInfoCtx *ctx, char *field,
-  ctx->info =
-      sdscatfmt(ctx->info, "%s_%s:%U\r\n", ctx->module->name, field, value);
+    ctx->info = sdscatfmt(ctx->info,
+        "%s_%s:%U\r\n",
+        ctx->module->name,
+        field,
+        value);
@@ -2945,2 +2875 @@ int RM_RegisterInfoFunc(RedisModuleCtx *ctx, RedisModuleInfoFunc cb) {
-sds modulesCollectInfo(sds info, sds section, int for_crash_report,
-                       int sections) {
+sds modulesCollectInfo(sds info, sds section, int for_crash_report, int sections) {
@@ -2951 +2880,2 @@ sds modulesCollectInfo(sds info, sds section, int for_crash_report,
-    if (!module->info_cb) continue;
+        if (!module->info_cb)
+            continue;
@@ -2954 +2884,2 @@ sds modulesCollectInfo(sds info, sds section, int for_crash_report,
-    if (info_ctx.in_dict_field) RM_InfoEndDictField(&info_ctx);
+        if (info_ctx.in_dict_field)
+            RM_InfoEndDictField(&info_ctx);
@@ -3034,2 +2965 @@ int moduleUnregisterFilters(RedisModule *module) {
-RedisModuleCommandFilter *RM_RegisterCommandFilter(
-    RedisModuleCtx *ctx, RedisModuleCommandFilterFunc callback, int flags) {
+RedisModuleCommandFilter *RM_RegisterCommandFilter(RedisModuleCtx *ctx, RedisModuleCommandFilterFunc callback, int flags) {
@@ -3044,2 +2974 @@ RedisModuleCommandFilter *RM_RegisterCommandFilter(
-int RM_UnregisterCommandFilter(RedisModuleCtx *ctx,
-                               RedisModuleCommandFilter *filter) {
+int RM_UnregisterCommandFilter(RedisModuleCtx *ctx, RedisModuleCommandFilter *filter) {
@@ -3062 +2991,4 @@ void moduleCallCommandFilters(client *c) {
-  RedisModuleCommandFilterCtx filter = {.argv = c->argv, .argc = c->argc};
+    RedisModuleCommandFilterCtx filter = {
+        .argv = c->argv,
+        .argc = c->argc
+    };
@@ -3065,2 +2997 @@ void moduleCallCommandFilters(client *c) {
-    if ((f->flags & REDISMODULE_CMDFILTER_NOSELF) && f->module->in_call)
-      continue;
+        if ((f->flags & REDISMODULE_CMDFILTER_NOSELF) && f->module->in_call) continue;
@@ -3072 +3003,2 @@ void moduleCallCommandFilters(client *c) {
-int RM_CommandFilterArgsCount(RedisModuleCommandFilterCtx *fctx) {
+int RM_CommandFilterArgsCount(RedisModuleCommandFilterCtx *fctx)
+{
@@ -3075,2 +3007,2 @@ int RM_CommandFilterArgsCount(RedisModuleCommandFilterCtx *fctx) {
-const RedisModuleString *RM_CommandFilterArgGet(
-    RedisModuleCommandFilterCtx *fctx, int pos) {
+const RedisModuleString *RM_CommandFilterArgGet(RedisModuleCommandFilterCtx *fctx, int pos)
+{
@@ -3080,2 +3012,2 @@ const RedisModuleString *RM_CommandFilterArgGet(
-int RM_CommandFilterArgInsert(RedisModuleCommandFilterCtx *fctx, int pos,
-                              RedisModuleString *arg) {
+int RM_CommandFilterArgInsert(RedisModuleCommandFilterCtx *fctx, int pos, RedisModuleString *arg)
+{
@@ -3084,2 +3016 @@ int RM_CommandFilterArgInsert(RedisModuleCommandFilterCtx *fctx, int pos,
-  fctx->argv =
-      zrealloc(fctx->argv, (fctx->argc + 1) * sizeof(RedisModuleString *));
+    fctx->argv = zrealloc(fctx->argv, (fctx->argc+1)*sizeof(RedisModuleString *));
@@ -3093,2 +3024,2 @@ int RM_CommandFilterArgInsert(RedisModuleCommandFilterCtx *fctx, int pos,
-int RM_CommandFilterArgReplace(RedisModuleCommandFilterCtx *fctx, int pos,
-                               RedisModuleString *arg) {
+int RM_CommandFilterArgReplace(RedisModuleCommandFilterCtx *fctx, int pos, RedisModuleString *arg)
+{
@@ -3100 +3031,2 @@ int RM_CommandFilterArgReplace(RedisModuleCommandFilterCtx *fctx, int pos,
-int RM_CommandFilterArgDelete(RedisModuleCommandFilterCtx *fctx, int pos) {
+int RM_CommandFilterArgDelete(RedisModuleCommandFilterCtx *fctx, int pos)
+{
@@ -3110 +3042,3 @@ int RM_CommandFilterArgDelete(RedisModuleCommandFilterCtx *fctx, int pos) {
-size_t RM_MallocSize(void *ptr) { return zmalloc_size(ptr); }
+size_t RM_MallocSize(void* ptr){
+    return zmalloc_size(ptr);
+}
@@ -3116,3 +3050 @@ float RM_GetUsedMemoryRatio() {
-typedef void (*RedisModuleScanCB)(RedisModuleCtx *ctx,
-                                  RedisModuleString *keyname,
-                                  RedisModuleKey *key, void *privdata);
+typedef void (*RedisModuleScanCB)(RedisModuleCtx *ctx, RedisModuleString *keyname, RedisModuleKey *key, void *privdata);
@@ -3149,3 +3081,4 @@ void RM_ScanCursorRestart(RedisModuleScanCursor *cursor) {
-void RM_ScanCursorDestroy(RedisModuleScanCursor *cursor) { zfree(cursor); }
-int RM_Scan(RedisModuleCtx *ctx, RedisModuleScanCursor *cursor,
-            RedisModuleScanCB fn, void *privdata) {
+void RM_ScanCursorDestroy(RedisModuleScanCursor *cursor) {
+    zfree(cursor);
+}
+int RM_Scan(RedisModuleCtx *ctx, RedisModuleScanCursor *cursor, RedisModuleScanCB fn, void *privdata) {
@@ -3158,2 +3091 @@ int RM_Scan(RedisModuleCtx *ctx, RedisModuleScanCursor *cursor,
-  cursor->cursor = dictScan(ctx->client->db->dict, cursor->cursor,
-                            moduleScanCallback, NULL, &data);
+    cursor->cursor = dictScan(ctx->client->db->dict, cursor->cursor, moduleScanCallback, NULL, &data);
@@ -3167,3 +3099 @@ int RM_Scan(RedisModuleCtx *ctx, RedisModuleScanCursor *cursor,
-typedef void (*RedisModuleScanKeyCB)(RedisModuleKey *key,
-                                     RedisModuleString *field,
-                                     RedisModuleString *value, void *privdata);
+typedef void (*RedisModuleScanKeyCB)(RedisModuleKey *key, RedisModuleString *field, RedisModuleString *value, void *privdata);
@@ -3194,2 +3124 @@ static void moduleScanKeyCallback(void *privdata, const dictEntry *de) {
-int RM_ScanKey(RedisModuleKey *key, RedisModuleScanCursor *cursor,
-               RedisModuleScanKeyCB fn, void *privdata) {
+int RM_ScanKey(RedisModuleKey *key, RedisModuleScanCursor *cursor, RedisModuleScanKeyCB fn, void *privdata) {
@@ -3203 +3132,2 @@ int RM_ScanKey(RedisModuleKey *key, RedisModuleScanCursor *cursor,
-    if (o->encoding == OBJ_ENCODING_HT) ht = o->ptr;
+        if (o->encoding == OBJ_ENCODING_HT)
+            ht = o->ptr;
@@ -3205 +3135,2 @@ int RM_ScanKey(RedisModuleKey *key, RedisModuleScanCursor *cursor,
-    if (o->encoding == OBJ_ENCODING_HT) ht = o->ptr;
+        if (o->encoding == OBJ_ENCODING_HT)
+            ht = o->ptr;
@@ -3207 +3138,2 @@ int RM_ScanKey(RedisModuleKey *key, RedisModuleScanCursor *cursor,
-    if (o->encoding == OBJ_ENCODING_SKIPLIST) ht = ((zset *)o->ptr)->dict;
+        if (o->encoding == OBJ_ENCODING_SKIPLIST)
+            ht = ((zset *)o->ptr)->dict;
@@ -3219,2 +3151 @@ int RM_ScanKey(RedisModuleKey *key, RedisModuleScanCursor *cursor,
-    cursor->cursor =
-        dictScan(ht, cursor->cursor, moduleScanKeyCallback, NULL, &data);
+        cursor->cursor = dictScan(ht, cursor->cursor, moduleScanKeyCallback, NULL, &data);
@@ -3243,2 +3174,3 @@ int RM_ScanKey(RedisModuleKey *key, RedisModuleScanCursor *cursor,
-      robj *field = (vstr != NULL) ? createStringObject((char *)vstr, vlen)
-                                   : createStringObjectFromLongLong(vll);
+            robj *field = (vstr != NULL) ?
+                createStringObject((char*)vstr,vlen) :
+                createStringObjectFromLongLong(vll);
@@ -3247,2 +3179,3 @@ int RM_ScanKey(RedisModuleKey *key, RedisModuleScanCursor *cursor,
-      robj *value = (vstr != NULL) ? createStringObject((char *)vstr, vlen)
-                                   : createStringObjectFromLongLong(vll);
+            robj *value = (vstr != NULL) ?
+                createStringObject((char*)vstr,vlen) :
+                createStringObjectFromLongLong(vll);
@@ -3286,2 +3219,2 @@ int TerminateModuleForkChild(int child_pid, int wait) {
-  if (server.module_child_pid == -1 || server.module_child_pid != child_pid)
-    return C_ERR;
+    if (server.module_child_pid == -1 ||
+        server.module_child_pid != child_pid) return C_ERR;
@@ -3293,2 +3226 @@ int TerminateModuleForkChild(int child_pid, int wait) {
-           server.module_child_pid)
-      ;
+              server.module_child_pid);
@@ -3310 +3242,2 @@ void ModuleForkDoneHandler(int exitcode, int bysignal) {
-  serverLog(LL_NOTICE, "Module fork exited pid: %d, retcode: %d, bysignal: %d",
+    serverLog(LL_NOTICE,
+        "Module fork exited pid: %d, retcode: %d, bysignal: %d",
@@ -3320,2 +3253 @@ void ModuleForkDoneHandler(int exitcode, int bysignal) {
-int RM_SubscribeToServerEvent(RedisModuleCtx *ctx, RedisModuleEvent event,
-                              RedisModuleEventCallback callback) {
+int RM_SubscribeToServerEvent(RedisModuleCtx *ctx, RedisModuleEvent event, RedisModuleEventCallback callback) {
@@ -3371 +3303,2 @@ void moduleFireServerEvent(uint64_t eid, int subid, void *data) {
-        modulePopulateClientInfoStructure(&civ1, data, el->event.dataver);
+                modulePopulateClientInfoStructure(&civ1,data,
+                                                  el->event.dataver);
@@ -3379 +3312,2 @@ void moduleFireServerEvent(uint64_t eid, int subid, void *data) {
-        if (fi->dbnum != -1) selectDb(ctx.client, fi->dbnum);
+                if (fi->dbnum != -1)
+                    selectDb(ctx.client, fi->dbnum);
@@ -3382 +3316,2 @@ void moduleFireServerEvent(uint64_t eid, int subid, void *data) {
-        if (m == el->module) continue;
+                if (m == el->module)
+                    continue;
@@ -3421,2 +3356 @@ void processModuleLoadingProgressEvent(int is_aof) {
-      progress =
-          (server.loading_total_bytes << 10) / server.loading_total_bytes;
+            progress = (server.loading_total_bytes<<10) / server.loading_total_bytes;
@@ -3424 +3358,2 @@ void processModuleLoadingProgressEvent(int is_aof) {
-                                 server.hz, progress};
+                                     server.hz,
+                                     progress};
@@ -3426,2 +3361,3 @@ void processModuleLoadingProgressEvent(int is_aof) {
-                          is_aof ? REDISMODULE_SUBEVENT_LOADING_PROGRESS_AOF
-                                 : REDISMODULE_SUBEVENT_LOADING_PROGRESS_RDB,
+                              is_aof?
+                                REDISMODULE_SUBEVENT_LOADING_PROGRESS_AOF:
+                                REDISMODULE_SUBEVENT_LOADING_PROGRESS_RDB,
@@ -3449,0 +3386,2 @@ int moduleRegisterApi(const char *funcname, void *funcptr) {
+#define REGISTER_API(name) \
+    moduleRegisterApi("RedisModule_" #name, (void *)(unsigned long)RM_ ## name)
@@ -3479,3 +3417,5 @@ void moduleLoadFromQueue(void) {
-    if (moduleLoad(loadmod->path, (void **)loadmod->argv, loadmod->argc) ==
-        C_ERR) {
-      serverLog(LL_WARNING, "Can't load module from %s: server aborting",
+        if (moduleLoad(loadmod->path,(void **)loadmod->argv,loadmod->argc)
+            == C_ERR)
+        {
+            serverLog(LL_WARNING,
+                "Can't load module from %s: server aborting",
@@ -3501 +3441,2 @@ void moduleUnregisterCommands(struct RedisModule *module) {
-      RedisModuleCommandProxy *cp = (void *)(unsigned long)cmd->getkeys_proc;
+            RedisModuleCommandProxy *cp =
+                (void*)(unsigned long)cmd->getkeys_proc;
@@ -3523,2 +3464 @@ int moduleLoad(const char *path, void **module_argv, int module_argc) {
-  onload = (int (*)(void *, void **, int))(unsigned long)dlsym(
-      handle, "RedisModule_OnLoad");
+    onload = (int (*)(void *, void **, int))(unsigned long) dlsym(handle,"RedisModule_OnLoad");
@@ -3529,2 +3469 @@ int moduleLoad(const char *path, void **module_argv, int module_argc) {
-              "symbol. Module not loaded.",
-              path);
+            "symbol. Module not loaded.",path);
@@ -3541,2 +3480,2 @@ int moduleLoad(const char *path, void **module_argv, int module_argc) {
-    serverLog(LL_WARNING, "Module %s initialization failed. Module not loaded",
-              path);
+        serverLog(LL_WARNING,
+            "Module %s initialization failed. Module not loaded",path);
@@ -3550 +3489,2 @@ int moduleLoad(const char *path, void **module_argv, int module_argc) {
-                        REDISMODULE_SUBEVENT_MODULE_LOADED, ctx.module);
+                          REDISMODULE_SUBEVENT_MODULE_LOADED,
+                          ctx.module);
@@ -3570,2 +3510 @@ int moduleUnload(sds name) {
-  onunload = (int (*)(void *))(unsigned long)dlsym(module->handle,
-                                                   "RedisModule_OnUnload");
+    onunload = (int (*)(void *))(unsigned long) dlsym(module->handle, "RedisModule_OnUnload");
@@ -3579,2 +3518 @@ int moduleUnload(sds name) {
-      serverLog(LL_WARNING, "Module %s OnUnload failed.  Unload canceled.",
-                name);
+            serverLog(LL_WARNING, "Module %s OnUnload failed.  Unload canceled.", name);
@@ -3598 +3536,2 @@ int moduleUnload(sds name) {
-                        REDISMODULE_SUBEVENT_MODULE_UNLOADED, module);
+                          REDISMODULE_SUBEVENT_MODULE_UNLOADED,
+                          module);
@@ -3668 +3607,3 @@ void moduleCommand(client *c) {
-        "UNLOAD <name> -- Unload a module.", NULL};
+"UNLOAD <name> -- Unload a module.",
+NULL
+        };
@@ -3670 +3611,2 @@ void moduleCommand(client *c) {
-  } else if (!strcasecmp(subcmd, "load") && c->argc >= 3) {
+    } else
+    if (!strcasecmp(subcmd,"load") && c->argc >= 3) {
@@ -3680,2 +3622,2 @@ void moduleCommand(client *c) {
-      addReplyError(
-          c, "Error loading the extension. Please check the server logs.");
+            addReplyError(c,
+                "Error loading the extension. Please check the server logs.");
@@ -3692,2 +3634 @@ void moduleCommand(client *c) {
-          errmsg =
-              "the module exports one or more module-side data "
+                errmsg = "the module exports one or more module-side data "
@@ -3697,2 +3638 @@ void moduleCommand(client *c) {
-          errmsg =
-              "the module exports APIs used by other modules. "
+                errmsg = "the module exports APIs used by other modules. "
@@ -3702,2 +3642 @@ void moduleCommand(client *c) {
-          errmsg =
-              "the module has blocked clients. "
+                errmsg = "the module has blocked clients. "
@@ -3719 +3658,3 @@ void moduleCommand(client *c) {
-size_t moduleCount(void) { return dictSize(modules); }
+size_t moduleCount(void) {
+    return dictSize(modules);
+}
@@ -3721,3 +3662,3 @@ int RM_SetLRU(RedisModuleKey *key, mstime_t lru_idle) {
-  if (!key->value) return REDISMODULE_ERR;
-  if (objectSetLRUOrLFU(key->value, -1, lru_idle,
-                        lru_idle >= 0 ? LRU_CLOCK() : 0, 1))
+    if (!key->value)
+        return REDISMODULE_ERR;
+    if (objectSetLRUOrLFU(key->value, -1, lru_idle, lru_idle>=0 ? LRU_CLOCK() : 0, 1))
@@ -3729,2 +3670,4 @@ int RM_GetLRU(RedisModuleKey *key, mstime_t *lru_idle) {
-  if (!key->value) return REDISMODULE_ERR;
-  if (server.maxmemory_policy & MAXMEMORY_FLAG_LFU) return REDISMODULE_OK;
+    if (!key->value)
+        return REDISMODULE_ERR;
+    if (server.maxmemory_policy & MAXMEMORY_FLAG_LFU)
+        return REDISMODULE_OK;
@@ -3735,2 +3678,4 @@ int RM_SetLFU(RedisModuleKey *key, long long lfu_freq) {
-  if (!key->value) return REDISMODULE_ERR;
-  if (objectSetLRUOrLFU(key->value, lfu_freq, -1, 0, 1)) return REDISMODULE_OK;
+    if (!key->value)
+        return REDISMODULE_ERR;
+    if (objectSetLRUOrLFU(key->value, lfu_freq, -1, 0, 1))
+        return REDISMODULE_OK;
@@ -3741 +3686,2 @@ int RM_GetLFU(RedisModuleKey *key, long long *lfu_freq) {
-  if (!key->value) return REDISMODULE_ERR;
+    if (!key->value)
+        return REDISMODULE_ERR;
@@ -3746,4 +3692,5 @@ int RM_GetLFU(RedisModuleKey *key, long long *lfu_freq) {
-void *RM_ModuleTypeReplaceValue(RedisModuleKey *key, moduleType *mt,
-                                void *new_value) {
-  if (!(key->mode & REDISMODULE_WRITE) || key->iter) return NULL;
-  if (!key->value || key->value->type != OBJ_MODULE) return NULL;
+void *RM_ModuleTypeReplaceValue(RedisModuleKey *key, moduleType *mt, void *new_value) {
+    if (!(key->mode & REDISMODULE_WRITE) || key->iter)
+        return NULL;
+    if (!key->value || key->value->type != OBJ_MODULE)
+        return NULL;
@@ -3751 +3698,2 @@ void *RM_ModuleTypeReplaceValue(RedisModuleKey *key, moduleType *mt,
-  if (mv->type != mt) return NULL;
+    if (mv->type != mt)
+        return NULL;
@@ -3965 +3912,0 @@ void moduleRegisterCoreAPI(void) {
-<<<<<<< HEAD
@@ -3968,2 +3914,0 @@ void moduleRegisterCoreAPI(void) {
-|||||||
-=======
@@ -3975 +3919,0 @@ void moduleRegisterCoreAPI(void) {
->>>>>>> c697edf4f46c853230dfda2f934631759cd8ea6b
