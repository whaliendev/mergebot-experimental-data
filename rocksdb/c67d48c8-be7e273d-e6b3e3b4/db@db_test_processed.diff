--- a/home/whalien/codebase/cpp/mergebot/eva/output/rocksdb/c67d48c8-be7e273d-e6b3e3b4/db@db_test.no_comments_mergebot.cc
+++ b/home/whalien/codebase/cpp/mergebot/eva/output/rocksdb/c67d48c8-be7e273d-e6b3e3b4/db@db_test.no_comments_merged.cc
@@ -19 +18,0 @@
-#include "rocksdb/table_properties.h"
@@ -20,0 +20 @@
+#include "rocksdb/table_properties.h"
@@ -267,6 +270,0 @@ class DBTest {
-  {
-    Close();
-    ASSERT_OK(DestroyDB(dbname_, Options()));
-    delete env_;
-    delete filter_policy_;
-  }
@@ -589,0 +594,22 @@ class DBTest {
+  int NumTableFilesAtLevel(int level, int cf = 0) {
+    std::string property;
+    if (cf == 0) {
+      ASSERT_TRUE(db_->GetProperty(
+          "rocksdb.num-files-at-level" + NumberToString(level), &property));
+    } else {
+      ASSERT_TRUE(db_->GetProperty(
+          handles_[cf], "rocksdb.num-files-at-level" + NumberToString(level),
+          &property));
+    }
+    return atoi(property.c_str());
+  }
+  int TotalTableFiles(int cf = 0, int levels = -1) {
+    if (levels == -1) {
+      levels = CurrentOptions().num_levels;
+    }
+    int result = 0;
+    for (int level = 0; level < levels; level++) {
+      result += NumTableFilesAtLevel(level, cf);
+    }
+    return result;
+  }
@@ -781,22 +805,0 @@ class DBTest {
-  int NumTableFilesAtLevel(int level, int cf = 0) {
-    std::string property;
-    if (cf == 0) {
-      ASSERT_TRUE(db_->GetProperty(
-          "rocksdb.num-files-at-level" + NumberToString(level), &property));
-    } else {
-      ASSERT_TRUE(db_->GetProperty(
-          handles_[cf], "rocksdb.num-files-at-level" + NumberToString(level),
-          &property));
-    }
-    return atoi(property.c_str());
-  }
-  int TotalTableFiles(int cf = 0, int levels = -1) {
-    if (levels == -1) {
-      levels = CurrentOptions().num_levels;
-    }
-    int result = 0;
-    for (int level = 0; level < levels; level++) {
-      result += NumTableFilesAtLevel(level, cf);
-    }
-    return result;
-  }
@@ -804,2 +807,2 @@ class DBTest {
-std::unique_ptr<const SliceTransform> DBTest::noop_transform(
-    NewNoopTransform());
+std::unique_ptr<const SliceTransform> DBTest::prefix_1_transform(
+    NewFixedPrefixTransform(1));
@@ -830,5 +833,2 @@ void VerifyTableProperties(DB* db, uint64_t expected_entries_size) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
+TEST(DBTest, Empty) {
+  do {
@@ -837,63 +837,10 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
-}
-namespace {
-static const int kColumnFamilies = 10;
-static const int kNumThreads = 10;
-static const int kTestSeconds = 10;
-static const int kNumKeys = 1000;
-struct MTState {
-  DBTest* test;
-  port::AtomicPointer stop;
-  port::AtomicPointer counter[kNumThreads];
-  port::AtomicPointer thread_done[kNumThreads];
-};
-struct MTThread {
-  MTState* state;
-  int id;
-};
-static void MTThreadBody(void* arg) {
-  MTThread* t = reinterpret_cast<MTThread*>(arg);
-  int id = t->id;
-  DB* db = t->state->test->db_;
-  uintptr_t counter = 0;
-  fprintf(stderr, "... starting thread %d\n", id);
-  Random rnd(1000 + id);
-  char valbuf[1500];
-  while (t->state->stop.Acquire_Load() == nullptr) {
-    t->state->counter[id].Release_Store(reinterpret_cast<void*>(counter));
-    int key = rnd.Uniform(kNumKeys);
-    char keybuf[20];
-    snprintf(keybuf, sizeof(keybuf), "%016d", key);
-    if (rnd.OneIn(2)) {
-      int unique_id = rnd.Uniform(1000000);
-      WriteBatch batch;
-      for (int cf = 0; cf < kColumnFamilies; ++cf) {
-        snprintf(valbuf, sizeof(valbuf), "%d.%d.%d.%d.%-1000d", key, id,
-                 static_cast<int>(counter), cf, unique_id);
-        batch.Put(cf, Slice(keybuf), Slice(valbuf));
-      }
-      ASSERT_OK(db->Write(WriteOptions(), &batch));
-    } else {
-      std::vector<Slice> keys(kColumnFamilies, Slice(keybuf));
-      std::vector<std::string> values;
-      std::vector<Status> statuses =
-          db->MultiGet(ReadOptions(), t->state->test->handles_, keys, &values);
-      Status s = statuses[0];
-      for (size_t i = 1; i < statuses.size(); ++i) {
-        ASSERT_TRUE((s.ok() && statuses[i].ok()) ||
-                    (s.IsNotFound() && statuses[i].IsNotFound()));
+    options.write_buffer_size = 100000;
+    CreateAndReopenWithCF({"pikachu"}, &options);
+    ASSERT_OK(Put(1, "foo", "v1"));
+    ASSERT_EQ("v1", Get(1, "foo"));
+    env_->delay_sstable_sync_.Release_Store(env_);
+    Put(1, "k1", std::string(100000, 'x'));
+    Put(1, "k2", std::string(100000, 'y'));
+    ASSERT_EQ("v1", Get(1, "foo"));
+    env_->delay_sstable_sync_.Release_Store(nullptr);
+  } while (ChangeOptions());
@@ -901,19 +848,14 @@ static void MTThreadBody(void* arg) {
-      if (s.IsNotFound()) {
-      } else {
-        ASSERT_OK(s);
-        int unique_id = -1;
-        for (int i = 0; i < kColumnFamilies; ++i) {
-          int k, w, c, cf, u;
-          ASSERT_EQ(5, sscanf(values[i].c_str(), "%d.%d.%d.%d.%d", &k, &w, &c,
-                              &cf, &u))
-              << values[i];
-          ASSERT_EQ(k, key);
-          ASSERT_GE(w, 0);
-          ASSERT_LT(w, kNumThreads);
-          ASSERT_LE((unsigned int)c, reinterpret_cast<uintptr_t>(
-                                         t->state->counter[w].Acquire_Load()));
-          ASSERT_EQ(cf, i);
-          if (i == 0) {
-            unique_id = u;
-          } else {
-            ASSERT_EQ(u, unique_id);
+TEST(DBTest, ReadOnlyDB) {
+  ASSERT_OK(Put("foo", "v1"));
+  ASSERT_OK(Put("bar", "v2"));
+  ASSERT_OK(Put("foo", "v3"));
+  Close();
+  Options options;
+  ASSERT_OK(ReadOnlyReopen(&options));
+  ASSERT_EQ("v3", Get("foo"));
+  ASSERT_EQ("v2", Get("bar"));
+  Iterator* iter = db_->NewIterator(ReadOptions());
+  int count = 0;
+  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
+    ASSERT_OK(iter->status());
+    ++count;
@@ -920,0 +863,2 @@ static void MTThreadBody(void* arg) {
+  ASSERT_EQ(count, 2);
+  delete iter;
@@ -921,0 +866,41 @@ static void MTThreadBody(void* arg) {
+TEST(DBTest, IndexAndFilterBlocksOfNewTableAddedToCache) {
+  Options options = CurrentOptions();
+  std::unique_ptr<const FilterPolicy> filter_policy(NewBloomFilterPolicy(20));
+  options.filter_policy = filter_policy.get();
+  options.create_if_missing = true;
+  options.statistics = rocksdb::CreateDBStatistics();
+  BlockBasedTableOptions table_options;
+  table_options.cache_index_and_filter_blocks = true;
+  options.table_factory.reset(new BlockBasedTableFactory(table_options));
+  CreateAndReopenWithCF({"pikachu"}, &options);
+  ASSERT_OK(Put(1, "key", "val"));
+  ASSERT_OK(Flush(1));
+  ASSERT_EQ(1, TestGetTickerCount(options, BLOCK_CACHE_INDEX_MISS));
+  ASSERT_EQ(1, TestGetTickerCount(options, BLOCK_CACHE_FILTER_MISS));
+  ASSERT_EQ(2,
+            TestGetTickerCount(options, BLOCK_CACHE_ADD));
+  ASSERT_EQ(0, TestGetTickerCount(options, BLOCK_CACHE_DATA_MISS));
+  std::string value;
+  ReadOptions ropt;
+  db_->KeyMayExist(ReadOptions(), handles_[1], "key", &value);
+  ASSERT_EQ(1, TestGetTickerCount(options, BLOCK_CACHE_FILTER_MISS));
+  ASSERT_EQ(1, TestGetTickerCount(options, BLOCK_CACHE_FILTER_HIT));
+  db_->KeyMayExist(ReadOptions(), handles_[1], "key", &value);
+  ASSERT_EQ(1, TestGetTickerCount(options, BLOCK_CACHE_FILTER_MISS));
+  ASSERT_EQ(2, TestGetTickerCount(options, BLOCK_CACHE_FILTER_HIT));
+  auto index_block_hit = TestGetTickerCount(options, BLOCK_CACHE_FILTER_HIT);
+  value = Get(1, "key");
+  ASSERT_EQ(1, TestGetTickerCount(options, BLOCK_CACHE_FILTER_MISS));
+  ASSERT_EQ(index_block_hit + 1,
+            TestGetTickerCount(options, BLOCK_CACHE_FILTER_HIT));
+  value = Get(1, "key");
+  ASSERT_EQ(1, TestGetTickerCount(options, BLOCK_CACHE_FILTER_MISS));
+  ASSERT_EQ(index_block_hit + 2,
+            TestGetTickerCount(options, BLOCK_CACHE_FILTER_HIT));
+}
+TEST(DBTest, GetPropertiesOfAllTablesTest) {
+  Options options = CurrentOptions();
+  Reopen(&options);
+  for (int table = 0; table < 4; ++table) {
+    for (int i = 0; i < 10 + table; ++i) {
+      db_->Put(WriteOptions(), std::to_string(table * 100 + i), "val");
@@ -922,0 +908 @@ static void MTThreadBody(void* arg) {
+    db_->Flush(FlushOptions());
@@ -924 +910,5 @@ static void MTThreadBody(void* arg) {
-    counter++;
+  Reopen(&options);
+  VerifyTableProperties(db_, 10 + 11 + 12 + 13);
+  Reopen(&options);
+  for (int i = 0; i < 2; ++i) {
+    Get(std::to_string(i * 100 + 0));
@@ -926,2 +916,4 @@ static void MTThreadBody(void* arg) {
-  t->state->thread_done[id].Release_Store(t);
-  fprintf(stderr, "... stopping thread %d after %d ops\n", id, int(counter));
+  VerifyTableProperties(db_, 10 + 11 + 12 + 13);
+  Reopen(&options);
+  for (int i = 0; i < 4; ++i) {
+    Get(std::to_string(i * 100 + 0));
@@ -928,0 +921 @@ static void MTThreadBody(void* arg) {
+  VerifyTableProperties(db_, 10 + 11 + 12 + 13);
@@ -930,5 +923 @@ static void MTThreadBody(void* arg) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
+TEST(DBTest, LevelLimitReopen) {
@@ -936,17 +925,47 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+  CreateAndReopenWithCF({"pikachu"}, &options);
+  const std::string value(1024 * 1024, ' ');
+  int i = 0;
+  while (NumTableFilesAtLevel(2, 1) == 0) {
+    ASSERT_OK(Put(1, Key(i++), value));
+  }
+  options.num_levels = 1;
+  options.max_bytes_for_level_multiplier_additional.resize(1, 1);
+  Status s = TryReopenWithColumnFamilies({"default", "pikachu"}, &options);
+  ASSERT_EQ(s.IsInvalidArgument(), true);
+  ASSERT_EQ(s.ToString(),
+            "Invalid argument: db has more levels than options.num_levels");
+  options.num_levels = 10;
+  options.max_bytes_for_level_multiplier_additional.resize(10, 1);
+  ASSERT_OK(TryReopenWithColumnFamilies({"default", "pikachu"}, &options));
+}
+TEST(DBTest, Preallocation) {
+  const std::string src = dbname_ + "/alloc_test";
+  unique_ptr<WritableFile> srcfile;
+  const EnvOptions soptions;
+  ASSERT_OK(env_->NewWritableFile(src, &srcfile, soptions));
+  srcfile->SetPreallocationBlockSize(1024 * 1024);
+  size_t block_size, last_allocated_block;
+  srcfile->GetPreallocationStatus(&block_size, &last_allocated_block);
+  ASSERT_EQ(last_allocated_block, 0UL);
+  srcfile->Append("test");
+  srcfile->GetPreallocationStatus(&block_size, &last_allocated_block);
+  ASSERT_EQ(last_allocated_block, 1UL);
+  std::string buf(block_size, ' ');
+  srcfile->Append(buf);
+  srcfile->GetPreallocationStatus(&block_size, &last_allocated_block);
+  ASSERT_EQ(last_allocated_block, 2UL);
+  buf = std::string(block_size * 5, ' ');
+  srcfile->Append(buf);
+  srcfile->GetPreallocationStatus(&block_size, &last_allocated_block);
+  ASSERT_EQ(last_allocated_block, 7UL);
+}
+TEST(DBTest, PutDeleteGet) {
+  do {
+    CreateAndReopenWithCF({"pikachu"});
+    ASSERT_OK(Put(1, "foo", "v1"));
+    ASSERT_EQ("v1", Get(1, "foo"));
+    ASSERT_OK(Put(1, "foo", "v2"));
+    ASSERT_EQ("v2", Get(1, "foo"));
+    ASSERT_OK(Delete(1, "foo"));
+    ASSERT_EQ("NOT_FOUND", Get(1, "foo"));
+  } while (ChangeOptions());
@@ -954,5 +973,2 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
+TEST(DBTest, GetFromImmutableLayer) {
+  do {
@@ -961,16 +977,11 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+    options.write_buffer_size = 100000;
+    CreateAndReopenWithCF({"pikachu"}, &options);
+    ASSERT_OK(Put(1, "foo", "v1"));
+    ASSERT_EQ("v1", Get(1, "foo"));
+    env_->delay_sstable_sync_.Release_Store(env_);
+    Put(1, "k1", std::string(100000, 'x'));
+    Put(1, "k2", std::string(100000, 'y'));
+    ASSERT_EQ("v1", Get(1, "foo"));
+    ASSERT_EQ("NOT_FOUND", Get(0, "foo"));
+    env_->delay_sstable_sync_.Release_Store(nullptr);
+  } while (ChangeOptions());
@@ -978,23 +989,8 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
-  Options options = CurrentOptions();
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+TEST(DBTest, GetFromVersions) {
+  do {
+    CreateAndReopenWithCF({"pikachu"});
+    ASSERT_OK(Put(1, "foo", "v1"));
+    ASSERT_OK(Flush(1));
+    ASSERT_EQ("v1", Get(1, "foo"));
+    ASSERT_EQ("NOT_FOUND", Get(0, "foo"));
+  } while (ChangeOptions());
@@ -1002,23 +998,14 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
-  Options options = CurrentOptions();
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+TEST(DBTest, GetSnapshot) {
+  do {
+    CreateAndReopenWithCF({"pikachu"});
+    for (int i = 0; i < 2; i++) {
+      std::string key = (i == 0) ? std::string("foo") : std::string(200, 'x');
+      ASSERT_OK(Put(1, key, "v1"));
+      const Snapshot* s1 = db_->GetSnapshot();
+      ASSERT_OK(Put(1, key, "v2"));
+      ASSERT_EQ("v2", Get(1, key));
+      ASSERT_EQ("v1", Get(1, key, s1));
+      ASSERT_OK(Flush(1));
+      ASSERT_EQ("v2", Get(1, key));
+      ASSERT_EQ("v1", Get(1, key, s1));
+      db_->ReleaseSnapshot(s1);
@@ -1026,5 +1013,65 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
+  } while (ChangeOptions());
+}
+TEST(DBTest, GetLevel0Ordering) {
+  do {
+    CreateAndReopenWithCF({"pikachu"});
+    ASSERT_OK(Put(1, "bar", "b"));
+    ASSERT_OK(Put(1, "foo", "v1"));
+    ASSERT_OK(Flush(1));
+    ASSERT_OK(Put(1, "foo", "v2"));
+    ASSERT_OK(Flush(1));
+    ASSERT_EQ("v2", Get(1, "foo"));
+  } while (ChangeOptions());
+}
+TEST(DBTest, GetOrderedByLevels) {
+  do {
+    CreateAndReopenWithCF({"pikachu"});
+    ASSERT_OK(Put(1, "foo", "v1"));
+    Compact(1, "a", "z");
+    ASSERT_EQ("v1", Get(1, "foo"));
+    ASSERT_OK(Put(1, "foo", "v2"));
+    ASSERT_EQ("v2", Get(1, "foo"));
+    ASSERT_OK(Flush(1));
+    ASSERT_EQ("v2", Get(1, "foo"));
+  } while (ChangeOptions());
+}
+TEST(DBTest, GetPicksCorrectFile) {
+  do {
+    CreateAndReopenWithCF({"pikachu"});
+    ASSERT_OK(Put(1, "a", "va"));
+    Compact(1, "a", "b");
+    ASSERT_OK(Put(1, "x", "vx"));
+    Compact(1, "x", "y");
+    ASSERT_OK(Put(1, "f", "vf"));
+    Compact(1, "f", "g");
+    ASSERT_EQ("va", Get(1, "a"));
+    ASSERT_EQ("vf", Get(1, "f"));
+    ASSERT_EQ("vx", Get(1, "x"));
+  } while (ChangeOptions());
+}
+TEST(DBTest, GetEncountersEmptyLevel) {
+  do {
+    CreateAndReopenWithCF({"pikachu"});
+    int compaction_count = 0;
+    while (NumTableFilesAtLevel(0, 1) == 0 || NumTableFilesAtLevel(2, 1) == 0) {
+      ASSERT_LE(compaction_count, 100) << "could not fill levels 0 and 2";
+      compaction_count++;
+      Put(1, "a", "begin");
+      Put(1, "z", "end");
+      ASSERT_OK(Flush(1));
+    }
+    dbfull()->TEST_CompactRange(1, nullptr, nullptr, handles_[1]);
+    ASSERT_EQ(NumTableFilesAtLevel(0, 1), 1);
+    ASSERT_EQ(NumTableFilesAtLevel(1, 1), 0);
+    ASSERT_EQ(NumTableFilesAtLevel(2, 1), 1);
+    for (int i = 0; i < 1000; i++) {
+      ASSERT_EQ("NOT_FOUND", Get(1, "missing"));
+    }
+    env_->SleepForMicroseconds(1000000);
+    ASSERT_EQ(NumTableFilesAtLevel(0, 1), 1);
+  } while (ChangeOptions(kSkipUniversalCompaction));
+}
+TEST(DBTest, KeyMayExist) {
+  do {
+    ReadOptions ropts;
+    std::string value;
@@ -1032,17 +1079,54 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+    options.filter_policy = NewBloomFilterPolicy(20);
+    options.statistics = rocksdb::CreateDBStatistics();
+    CreateAndReopenWithCF({"pikachu"}, &options);
+    ASSERT_TRUE(!db_->KeyMayExist(ropts, handles_[1], "a", &value));
+    ASSERT_OK(Put(1, "a", "b"));
+    bool value_found = false;
+    ASSERT_TRUE(
+        db_->KeyMayExist(ropts, handles_[1], "a", &value, &value_found));
+    ASSERT_TRUE(value_found);
+    ASSERT_EQ("b", value);
+    ASSERT_OK(Flush(1));
+    value.clear();
+    long numopen = TestGetTickerCount(options, NO_FILE_OPENS);
+    long cache_added = TestGetTickerCount(options, BLOCK_CACHE_ADD);
+    ASSERT_TRUE(
+        db_->KeyMayExist(ropts, handles_[1], "a", &value, &value_found));
+    ASSERT_TRUE(!value_found);
+    ASSERT_EQ(numopen, TestGetTickerCount(options, NO_FILE_OPENS));
+    ASSERT_EQ(cache_added, TestGetTickerCount(options, BLOCK_CACHE_ADD));
+    ASSERT_OK(Delete(1, "a"));
+    numopen = TestGetTickerCount(options, NO_FILE_OPENS);
+    cache_added = TestGetTickerCount(options, BLOCK_CACHE_ADD);
+    ASSERT_TRUE(!db_->KeyMayExist(ropts, handles_[1], "a", &value));
+    ASSERT_EQ(numopen, TestGetTickerCount(options, NO_FILE_OPENS));
+    ASSERT_EQ(cache_added, TestGetTickerCount(options, BLOCK_CACHE_ADD));
+    ASSERT_OK(Flush(1));
+    db_->CompactRange(handles_[1], nullptr, nullptr);
+    numopen = TestGetTickerCount(options, NO_FILE_OPENS);
+    cache_added = TestGetTickerCount(options, BLOCK_CACHE_ADD);
+    ASSERT_TRUE(!db_->KeyMayExist(ropts, handles_[1], "a", &value));
+    ASSERT_EQ(numopen, TestGetTickerCount(options, NO_FILE_OPENS));
+    ASSERT_EQ(cache_added, TestGetTickerCount(options, BLOCK_CACHE_ADD));
+    ASSERT_OK(Delete(1, "c"));
+    numopen = TestGetTickerCount(options, NO_FILE_OPENS);
+    cache_added = TestGetTickerCount(options, BLOCK_CACHE_ADD);
+    ASSERT_TRUE(!db_->KeyMayExist(ropts, handles_[1], "c", &value));
+    ASSERT_EQ(numopen, TestGetTickerCount(options, NO_FILE_OPENS));
+    ASSERT_EQ(cache_added, TestGetTickerCount(options, BLOCK_CACHE_ADD));
+    delete options.filter_policy;
+  } while (ChangeOptions(kSkipPlainTable));
+}
+TEST(DBTest, NonBlockingIteration) {
+  do {
+    ReadOptions non_blocking_opts, regular_opts;
+    Options options = CurrentOptions();
+    options.statistics = rocksdb::CreateDBStatistics();
+    non_blocking_opts.read_tier = kBlockCacheTier;
+    CreateAndReopenWithCF({"pikachu"}, &options);
+    ASSERT_OK(Put(1, "a", "b"));
+    Iterator* iter = db_->NewIterator(non_blocking_opts, handles_[1]);
+    int count = 0;
+    for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
+      ASSERT_OK(iter->status());
+      count++;
@@ -1050,5 +1134,32 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
+    ASSERT_EQ(count, 1);
+    delete iter;
+    ASSERT_OK(Flush(1));
+    long numopen = TestGetTickerCount(options, NO_FILE_OPENS);
+    long cache_added = TestGetTickerCount(options, BLOCK_CACHE_ADD);
+    iter = db_->NewIterator(non_blocking_opts, handles_[1]);
+    count = 0;
+    for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
+      count++;
+    }
+    ASSERT_EQ(count, 0);
+    ASSERT_TRUE(iter->status().IsIncomplete());
+    ASSERT_EQ(numopen, TestGetTickerCount(options, NO_FILE_OPENS));
+    ASSERT_EQ(cache_added, TestGetTickerCount(options, BLOCK_CACHE_ADD));
+    delete iter;
+    ASSERT_EQ(Get(1, "a"), "b");
+    numopen = TestGetTickerCount(options, NO_FILE_OPENS);
+    cache_added = TestGetTickerCount(options, BLOCK_CACHE_ADD);
+    iter = db_->NewIterator(non_blocking_opts, handles_[1]);
+    count = 0;
+    for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
+      ASSERT_OK(iter->status());
+      count++;
+    }
+    ASSERT_EQ(count, 1);
+    ASSERT_EQ(numopen, TestGetTickerCount(options, NO_FILE_OPENS));
+    ASSERT_EQ(cache_added, TestGetTickerCount(options, BLOCK_CACHE_ADD));
+    delete iter;
+  } while (ChangeOptions(kSkipPlainTable));
+}
+TEST(DBTest, FilterDeletes) {
+  do {
@@ -1056,15 +1167,48 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
+    options.filter_policy = NewBloomFilterPolicy(20);
+    options.filter_deletes = true;
+    CreateAndReopenWithCF({"pikachu"}, &options);
+    WriteBatch batch;
+    batch.Delete(1, "a");
+    dbfull()->Write(WriteOptions(), &batch);
+    ASSERT_EQ(AllEntriesFor("a", 1), "[ ]");
+    batch.Clear();
+    batch.Put(1, "a", "b");
+    batch.Delete(1, "a");
+    dbfull()->Write(WriteOptions(), &batch);
+    ASSERT_EQ(Get(1, "a"), "NOT_FOUND");
+    ASSERT_EQ(AllEntriesFor("a", 1), "[ DEL, b ]");
+    batch.Clear();
+    batch.Delete(1, "c");
+    batch.Put(1, "c", "d");
+    dbfull()->Write(WriteOptions(), &batch);
+    ASSERT_EQ(Get(1, "c"), "d");
+    ASSERT_EQ(AllEntriesFor("c", 1), "[ d ]");
+    batch.Clear();
+    ASSERT_OK(Flush(1));
+    batch.Delete(1, "c");
+    dbfull()->Write(WriteOptions(), &batch);
+    ASSERT_EQ(AllEntriesFor("c", 1), "[ DEL, d ]");
+    batch.Clear();
+    delete options.filter_policy;
+  } while (ChangeCompactOptions());
+}
+TEST(DBTest, IterEmpty) {
+  do {
+    CreateAndReopenWithCF({"pikachu"});
+    Iterator* iter = db_->NewIterator(ReadOptions(), handles_[1]);
+    iter->SeekToFirst();
+    ASSERT_EQ(IterStatus(iter), "(invalid)");
+    iter->SeekToLast();
+    ASSERT_EQ(IterStatus(iter), "(invalid)");
+    iter->Seek("foo");
+    ASSERT_EQ(IterStatus(iter), "(invalid)");
+    delete iter;
+  } while (ChangeCompactOptions());
+}
+TEST(DBTest, IterSingle) {
+  do {
+    CreateAndReopenWithCF({"pikachu"});
+    ASSERT_OK(Put(1, "a", "va"));
+    Iterator* iter = db_->NewIterator(ReadOptions(), handles_[1]);
+    iter->SeekToFirst();
+    ASSERT_EQ(IterStatus(iter), "a->va");
@@ -1072 +1216,25 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  ASSERT_TRUE(!iter->Valid());
+    ASSERT_EQ(IterStatus(iter), "(invalid)");
+    iter->SeekToFirst();
+    ASSERT_EQ(IterStatus(iter), "a->va");
+    iter->Prev();
+    ASSERT_EQ(IterStatus(iter), "(invalid)");
+    iter->SeekToLast();
+    ASSERT_EQ(IterStatus(iter), "a->va");
+    iter->Next();
+    ASSERT_EQ(IterStatus(iter), "(invalid)");
+    iter->SeekToLast();
+    ASSERT_EQ(IterStatus(iter), "a->va");
+    iter->Prev();
+    ASSERT_EQ(IterStatus(iter), "(invalid)");
+    iter->Seek("");
+    ASSERT_EQ(IterStatus(iter), "a->va");
+    iter->Next();
+    ASSERT_EQ(IterStatus(iter), "(invalid)");
+    iter->Seek("a");
+    ASSERT_EQ(IterStatus(iter), "a->va");
+    iter->Next();
+    ASSERT_EQ(IterStatus(iter), "(invalid)");
+    iter->Seek("b");
+    ASSERT_EQ(IterStatus(iter), "(invalid)");
+    delete iter;
+  } while (ChangeCompactOptions());
@@ -1074,21 +1242,9 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
-  Options options = CurrentOptions();
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
+TEST(DBTest, IterMulti) {
+  do {
+    CreateAndReopenWithCF({"pikachu"});
+    ASSERT_OK(Put(1, "a", "va"));
+    ASSERT_OK(Put(1, "b", "vb"));
+    ASSERT_OK(Put(1, "c", "vc"));
+    Iterator* iter = db_->NewIterator(ReadOptions(), handles_[1]);
+    iter->SeekToFirst();
+    ASSERT_EQ(IterStatus(iter), "a->va");
@@ -1096 +1252,74 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  ASSERT_TRUE(!iter->Valid());
+    ASSERT_EQ(IterStatus(iter), "b->vb");
+    iter->Next();
+    ASSERT_EQ(IterStatus(iter), "c->vc");
+    iter->Next();
+    ASSERT_EQ(IterStatus(iter), "(invalid)");
+    iter->SeekToFirst();
+    ASSERT_EQ(IterStatus(iter), "a->va");
+    iter->Prev();
+    ASSERT_EQ(IterStatus(iter), "(invalid)");
+    iter->SeekToLast();
+    ASSERT_EQ(IterStatus(iter), "c->vc");
+    iter->Prev();
+    ASSERT_EQ(IterStatus(iter), "b->vb");
+    iter->Prev();
+    ASSERT_EQ(IterStatus(iter), "a->va");
+    iter->Prev();
+    ASSERT_EQ(IterStatus(iter), "(invalid)");
+    iter->SeekToLast();
+    ASSERT_EQ(IterStatus(iter), "c->vc");
+    iter->Next();
+    ASSERT_EQ(IterStatus(iter), "(invalid)");
+    iter->Seek("");
+    ASSERT_EQ(IterStatus(iter), "a->va");
+    iter->Seek("a");
+    ASSERT_EQ(IterStatus(iter), "a->va");
+    iter->Seek("ax");
+    ASSERT_EQ(IterStatus(iter), "b->vb");
+    SetPerfLevel(kEnableTime);
+    perf_context.Reset();
+    iter->Seek("b");
+    ASSERT_TRUE((int) perf_context.seek_internal_seek_time > 0);
+    ASSERT_TRUE((int) perf_context.find_next_user_entry_time > 0);
+    SetPerfLevel(kDisable);
+    ASSERT_EQ(IterStatus(iter), "b->vb");
+    iter->Seek("z");
+    ASSERT_EQ(IterStatus(iter), "(invalid)");
+    iter->SeekToLast();
+    iter->Prev();
+    iter->Prev();
+    iter->Next();
+    ASSERT_EQ(IterStatus(iter), "b->vb");
+    iter->SeekToFirst();
+    iter->Next();
+    SetPerfLevel(kEnableTime);
+    perf_context.Reset();
+    iter->Next();
+    ASSERT_EQ(0, (int) perf_context.seek_internal_seek_time);
+    ASSERT_TRUE((int) perf_context.find_next_user_entry_time > 0);
+    SetPerfLevel(kDisable);
+    iter->Prev();
+    ASSERT_EQ(IterStatus(iter), "b->vb");
+    ASSERT_OK(Put(1, "a", "va2"));
+    ASSERT_OK(Put(1, "a2", "va3"));
+    ASSERT_OK(Put(1, "b", "vb2"));
+    ASSERT_OK(Put(1, "c", "vc2"));
+    ASSERT_OK(Delete(1, "b"));
+    iter->SeekToFirst();
+    ASSERT_EQ(IterStatus(iter), "a->va");
+    iter->Next();
+    ASSERT_EQ(IterStatus(iter), "b->vb");
+    iter->Next();
+    ASSERT_EQ(IterStatus(iter), "c->vc");
+    iter->Next();
+    ASSERT_EQ(IterStatus(iter), "(invalid)");
+    iter->SeekToLast();
+    ASSERT_EQ(IterStatus(iter), "c->vc");
+    iter->Prev();
+    ASSERT_EQ(IterStatus(iter), "b->vb");
+    iter->Prev();
+    ASSERT_EQ(IterStatus(iter), "a->va");
+    iter->Prev();
+    ASSERT_EQ(IterStatus(iter), "(invalid)");
+    delete iter;
+  } while (ChangeCompactOptions());
@@ -1098,5 +1327 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
+TEST(DBTest, IterReseek) {
@@ -1104 +1329 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.env = env_;
+  options.max_sequential_skip_in_iterations = 3;
@@ -1106,3 +1331 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
+  options.statistics = rocksdb::CreateDBStatistics();
@@ -1110,9 +1333,157 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
+  CreateAndReopenWithCF({"pikachu"}, &options);
+  ASSERT_OK(Put(1, "a", "one"));
+  ASSERT_OK(Put(1, "a", "two"));
+  ASSERT_OK(Put(1, "b", "bone"));
+  Iterator* iter = db_->NewIterator(ReadOptions(), handles_[1]);
+  iter->SeekToFirst();
+  ASSERT_EQ(TestGetTickerCount(options, NUMBER_OF_RESEEKS_IN_ITERATION), 0);
+  ASSERT_EQ(IterStatus(iter), "a->two");
+  iter->Next();
+  ASSERT_EQ(TestGetTickerCount(options, NUMBER_OF_RESEEKS_IN_ITERATION), 0);
+  ASSERT_EQ(IterStatus(iter), "b->bone");
+  delete iter;
+  ASSERT_OK(Put(1, "a", "three"));
+  iter = db_->NewIterator(ReadOptions(), handles_[1]);
+  iter->SeekToFirst();
+  ASSERT_EQ(IterStatus(iter), "a->three");
+  iter->Next();
+  ASSERT_EQ(TestGetTickerCount(options, NUMBER_OF_RESEEKS_IN_ITERATION), 0);
+  ASSERT_EQ(IterStatus(iter), "b->bone");
+  delete iter;
+  ASSERT_OK(Put(1, "a", "four"));
+  iter = db_->NewIterator(ReadOptions(), handles_[1]);
+  iter->SeekToFirst();
+  ASSERT_EQ(IterStatus(iter), "a->four");
+  ASSERT_EQ(TestGetTickerCount(options, NUMBER_OF_RESEEKS_IN_ITERATION), 0);
+  iter->Next();
+  ASSERT_EQ(TestGetTickerCount(options, NUMBER_OF_RESEEKS_IN_ITERATION), 1);
+  ASSERT_EQ(IterStatus(iter), "b->bone");
+  delete iter;
+  int num_reseeks =
+      (int)TestGetTickerCount(options, NUMBER_OF_RESEEKS_IN_ITERATION);
+  ASSERT_OK(Put(1, "b", "btwo"));
+  iter = db_->NewIterator(ReadOptions(), handles_[1]);
+  iter->SeekToLast();
+  ASSERT_EQ(IterStatus(iter), "b->btwo");
+  ASSERT_EQ(TestGetTickerCount(options, NUMBER_OF_RESEEKS_IN_ITERATION),
+            num_reseeks);
+  iter->Prev();
+  ASSERT_EQ(TestGetTickerCount(options, NUMBER_OF_RESEEKS_IN_ITERATION),
+            num_reseeks + 1);
+  ASSERT_EQ(IterStatus(iter), "a->four");
+  delete iter;
+  ASSERT_OK(Put(1, "b", "bthree"));
+  ASSERT_OK(Put(1, "b", "bfour"));
+  iter = db_->NewIterator(ReadOptions(), handles_[1]);
+  iter->SeekToLast();
+  ASSERT_EQ(IterStatus(iter), "b->bfour");
+  ASSERT_EQ(TestGetTickerCount(options, NUMBER_OF_RESEEKS_IN_ITERATION),
+            num_reseeks + 2);
+  iter->Prev();
+  ASSERT_EQ(TestGetTickerCount(options, NUMBER_OF_RESEEKS_IN_ITERATION),
+            num_reseeks + 3);
+  ASSERT_EQ(IterStatus(iter), "a->four");
+  delete iter;
+}
+TEST(DBTest, IterSmallAndLargeMix) {
+  do {
+    CreateAndReopenWithCF({"pikachu"});
+    ASSERT_OK(Put(1, "a", "va"));
+    ASSERT_OK(Put(1, "b", std::string(100000, 'b')));
+    ASSERT_OK(Put(1, "c", "vc"));
+    ASSERT_OK(Put(1, "d", std::string(100000, 'd')));
+    ASSERT_OK(Put(1, "e", std::string(100000, 'e')));
+    Iterator* iter = db_->NewIterator(ReadOptions(), handles_[1]);
+    iter->SeekToFirst();
+    ASSERT_EQ(IterStatus(iter), "a->va");
+    iter->Next();
+    ASSERT_EQ(IterStatus(iter), "b->" + std::string(100000, 'b'));
+    iter->Next();
+    ASSERT_EQ(IterStatus(iter), "c->vc");
+    iter->Next();
+    ASSERT_EQ(IterStatus(iter), "d->" + std::string(100000, 'd'));
+    iter->Next();
+    ASSERT_EQ(IterStatus(iter), "e->" + std::string(100000, 'e'));
+    iter->Next();
+    ASSERT_EQ(IterStatus(iter), "(invalid)");
+    iter->SeekToLast();
+    ASSERT_EQ(IterStatus(iter), "e->" + std::string(100000, 'e'));
+    iter->Prev();
+    ASSERT_EQ(IterStatus(iter), "d->" + std::string(100000, 'd'));
+    iter->Prev();
+    ASSERT_EQ(IterStatus(iter), "c->vc");
+    iter->Prev();
+    ASSERT_EQ(IterStatus(iter), "b->" + std::string(100000, 'b'));
+    iter->Prev();
+    ASSERT_EQ(IterStatus(iter), "a->va");
+    iter->Prev();
+    ASSERT_EQ(IterStatus(iter), "(invalid)");
+    delete iter;
+  } while (ChangeCompactOptions());
+}
+TEST(DBTest, IterMultiWithDelete) {
+  do {
+    CreateAndReopenWithCF({"pikachu"});
+    ASSERT_OK(Put(1, "a", "va"));
+    ASSERT_OK(Put(1, "b", "vb"));
+    ASSERT_OK(Put(1, "c", "vc"));
+    ASSERT_OK(Delete(1, "b"));
+    ASSERT_EQ("NOT_FOUND", Get(1, "b"));
+    Iterator* iter = db_->NewIterator(ReadOptions(), handles_[1]);
+    iter->Seek("c");
+    ASSERT_EQ(IterStatus(iter), "c->vc");
+    if (!CurrentOptions().merge_operator) {
+      iter->Prev();
+      ASSERT_EQ(IterStatus(iter), "a->va");
+    }
+    delete iter;
+  } while (ChangeOptions());
+}
+TEST(DBTest, IterPrevMaxSkip) {
+  do {
+    CreateAndReopenWithCF({"pikachu"});
+    for (int i = 0; i < 2; i++) {
+      ASSERT_OK(Put(1, "key1", "v1"));
+      ASSERT_OK(Put(1, "key2", "v2"));
+      ASSERT_OK(Put(1, "key3", "v3"));
+      ASSERT_OK(Put(1, "key4", "v4"));
+      ASSERT_OK(Put(1, "key5", "v5"));
+    }
+    VerifyIterLast("key5->v5", 1);
+    ASSERT_OK(Delete(1, "key5"));
+    VerifyIterLast("key4->v4", 1);
+    ASSERT_OK(Delete(1, "key4"));
+    VerifyIterLast("key3->v3", 1);
+    ASSERT_OK(Delete(1, "key3"));
+    VerifyIterLast("key2->v2", 1);
+    ASSERT_OK(Delete(1, "key2"));
+    VerifyIterLast("key1->v1", 1);
+    ASSERT_OK(Delete(1, "key1"));
+    VerifyIterLast("(invalid)", 1);
+  } while (ChangeOptions(kSkipMergePut));
+}
+TEST(DBTest, IterWithSnapshot) {
+  do {
+    CreateAndReopenWithCF({"pikachu"});
+    ASSERT_OK(Put(1, "key1", "val1"));
+    ASSERT_OK(Put(1, "key2", "val2"));
+    ASSERT_OK(Put(1, "key3", "val3"));
+    ASSERT_OK(Put(1, "key4", "val4"));
+    ASSERT_OK(Put(1, "key5", "val5"));
+    const Snapshot *snapshot = db_->GetSnapshot();
+    ReadOptions options;
+    options.snapshot = snapshot;
+    Iterator* iter = db_->NewIterator(options, handles_[1]);
+    ASSERT_OK(Put(1, "key100", "val100"));
+    ASSERT_OK(Put(1, "key101", "val101"));
+    iter->Seek("key5");
+    ASSERT_EQ(IterStatus(iter), "key5->val5");
+    if (!CurrentOptions().merge_operator) {
+      iter->Prev();
+      ASSERT_EQ(IterStatus(iter), "key4->val4");
+      iter->Prev();
+      ASSERT_EQ(IterStatus(iter), "key3->val3");
+      iter->Next();
+      ASSERT_EQ(IterStatus(iter), "key4->val4");
+      iter->Next();
+      ASSERT_EQ(IterStatus(iter), "key5->val5");
@@ -1122,5 +1493,25 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
+    db_->ReleaseSnapshot(snapshot);
+    delete iter;
+  } while (ChangeOptions());
+}
+TEST(DBTest, Recover) {
+  do {
+    CreateAndReopenWithCF({"pikachu"});
+    ASSERT_OK(Put(1, "foo", "v1"));
+    ASSERT_OK(Put(1, "baz", "v5"));
+    ReopenWithColumnFamilies({"default", "pikachu"});
+    ASSERT_EQ("v1", Get(1, "foo"));
+    ASSERT_EQ("v1", Get(1, "foo"));
+    ASSERT_EQ("v5", Get(1, "baz"));
+    ASSERT_OK(Put(1, "bar", "v2"));
+    ASSERT_OK(Put(1, "foo", "v3"));
+    ReopenWithColumnFamilies({"default", "pikachu"});
+    ASSERT_EQ("v3", Get(1, "foo"));
+    ASSERT_OK(Put(1, "foo", "v4"));
+    ASSERT_EQ("v4", Get(1, "foo"));
+    ASSERT_EQ("v2", Get(1, "bar"));
+    ASSERT_EQ("v5", Get(1, "baz"));
+  } while (ChangeOptions());
+}
+TEST(DBTest, RecoverWithTableHandle) {
+  do {
@@ -1128 +1518,0 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.env = env_;
@@ -1129,0 +1520 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
+    options.write_buffer_size = 100;
@@ -1131,2 +1521,0 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
@@ -1134,11 +1523,22 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+    CreateAndReopenWithCF({"pikachu"}, &options);
+    ASSERT_OK(Put(1, "foo", "v1"));
+    ASSERT_OK(Put(1, "bar", "v2"));
+    ASSERT_OK(Flush(1));
+    ASSERT_OK(Put(1, "foo", "v3"));
+    ASSERT_OK(Put(1, "bar", "v4"));
+    ASSERT_OK(Flush(1));
+    ASSERT_OK(Put(1, "big", std::string(100, 'a')));
+    ReopenWithColumnFamilies({"default", "pikachu"});
+    std::vector<std::vector<FileMetaData>> files;
+    dbfull()->TEST_GetFilesMetaData(handles_[1], &files);
+    int total_files = 0;
+    for (const auto& level : files) {
+      total_files += level.size();
+    }
+    ASSERT_EQ(total_files, 3);
+    for (const auto& level : files) {
+      for (const auto& file : level) {
+        if (kInfiniteMaxOpenFiles == option_config_) {
+          ASSERT_TRUE(file.table_reader_handle != nullptr);
+        } else {
+          ASSERT_TRUE(file.table_reader_handle == nullptr);
@@ -1146,5 +1546,15 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
+      }
+    }
+  } while (ChangeOptions());
+}
+TEST(DBTest, IgnoreRecoveredLog) {
+  std::string backup_logs = dbname_ + "/backup_logs";
+  env_->CreateDirIfMissing(backup_logs);
+  std::vector<std::string> old_files;
+  env_->GetChildren(backup_logs, &old_files);
+  for (auto& file : old_files) {
+    if (file != "." && file != "..") {
+      env_->DeleteFile(backup_logs + "/" + file);
+    }
+  }
+  do {
@@ -1152 +1561,0 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.env = env_;
@@ -1154,3 +1563,2 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
+    options.merge_operator = MergeOperators::CreateUInt64AddOperator();
+    options.wal_dir = dbname_ + "/logs";
@@ -1158,11 +1566,20 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+    std::string one, two;
+    PutFixed64(&one, 1);
+    PutFixed64(&two, 2);
+    ASSERT_OK(db_->Merge(WriteOptions(), Slice("foo"), Slice(one)));
+    ASSERT_OK(db_->Merge(WriteOptions(), Slice("foo"), Slice(one)));
+    ASSERT_OK(db_->Merge(WriteOptions(), Slice("bar"), Slice(one)));
+    std::vector<std::string> logs;
+    env_->GetChildren(options.wal_dir, &logs);
+    for (auto& log : logs) {
+      if (log != ".." && log != ".") {
+        CopyFile(options.wal_dir + "/" + log, backup_logs + "/" + log);
+      }
+    }
+    Reopen(&options);
+    ASSERT_EQ(two, Get("foo"));
+    ASSERT_EQ(one, Get("bar"));
+    Close();
+    for (auto& log : logs) {
+      if (log != ".." && log != ".") {
+        CopyFile(backup_logs + "/" + log, options.wal_dir + "/" + log);
@@ -1170,5 +1587,63 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
+    }
+    Reopen(&options);
+    ASSERT_EQ(two, Get("foo"));
+    ASSERT_EQ(one, Get("bar"));
+    Close();
+    Destroy(&options);
+    env_->CreateDirIfMissing(options.wal_dir);
+    for (auto& log : logs) {
+      if (log != ".." && log != ".") {
+        CopyFile(backup_logs + "/" + log, options.wal_dir + "/" + log);
+        env_->DeleteFile(backup_logs + "/" + log);
+      }
+    }
+    Reopen(&options);
+    ASSERT_EQ(two, Get("foo"));
+    ASSERT_EQ(one, Get("bar"));
+    Close();
+  } while (ChangeOptions());
+}
+TEST(DBTest, RollLog) {
+  do {
+    CreateAndReopenWithCF({"pikachu"});
+    ASSERT_OK(Put(1, "foo", "v1"));
+    ASSERT_OK(Put(1, "baz", "v5"));
+    ReopenWithColumnFamilies({"default", "pikachu"});
+    for (int i = 0; i < 10; i++) {
+      ReopenWithColumnFamilies({"default", "pikachu"});
+    }
+    ASSERT_OK(Put(1, "foo", "v4"));
+    for (int i = 0; i < 10; i++) {
+      ReopenWithColumnFamilies({"default", "pikachu"});
+    }
+  } while (ChangeOptions());
+}
+TEST(DBTest, WAL) {
+  do {
+    CreateAndReopenWithCF({"pikachu"});
+    WriteOptions writeOpt = WriteOptions();
+    writeOpt.disableWAL = true;
+    ASSERT_OK(dbfull()->Put(writeOpt, handles_[1], "foo", "v1"));
+    ASSERT_OK(dbfull()->Put(writeOpt, handles_[1], "bar", "v1"));
+    ReopenWithColumnFamilies({"default", "pikachu"});
+    ASSERT_EQ("v1", Get(1, "foo"));
+    ASSERT_EQ("v1", Get(1, "bar"));
+    writeOpt.disableWAL = false;
+    ASSERT_OK(dbfull()->Put(writeOpt, handles_[1], "bar", "v2"));
+    writeOpt.disableWAL = true;
+    ASSERT_OK(dbfull()->Put(writeOpt, handles_[1], "foo", "v2"));
+    ReopenWithColumnFamilies({"default", "pikachu"});
+    ASSERT_EQ("v2", Get(1, "bar"));
+    ASSERT_EQ("v2", Get(1, "foo"));
+    writeOpt.disableWAL = true;
+    ASSERT_OK(dbfull()->Put(writeOpt, handles_[1], "bar", "v3"));
+    writeOpt.disableWAL = false;
+    ASSERT_OK(dbfull()->Put(writeOpt, handles_[1], "foo", "v3"));
+    ReopenWithColumnFamilies({"default", "pikachu"});
+    ASSERT_EQ("v3", Get(1, "foo"));
+    ASSERT_EQ("v3", Get(1, "bar"));
+  } while (ChangeCompactOptions());
+}
+TEST(DBTest, CheckLock) {
+  do {
+    DB* localdb;
@@ -1176,17 +1651,3 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+    ASSERT_OK(TryReopen(&options));
+    ASSERT_TRUE(!(DB::Open(options, dbname_, &localdb)).ok());
+  } while (ChangeCompactOptions());
@@ -1194,5 +1655,2 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
+TEST(DBTest, FlushMultipleMemtable) {
+  do {
@@ -1200,17 +1658,12 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+    WriteOptions writeOpt = WriteOptions();
+    writeOpt.disableWAL = true;
+    options.max_write_buffer_number = 4;
+    options.min_write_buffer_number_to_merge = 3;
+    CreateAndReopenWithCF({"pikachu"}, &options);
+    ASSERT_OK(dbfull()->Put(writeOpt, handles_[1], "foo", "v1"));
+    ASSERT_OK(Flush(1));
+    ASSERT_OK(dbfull()->Put(writeOpt, handles_[1], "bar", "v1"));
+    ASSERT_EQ("v1", Get(1, "foo"));
+    ASSERT_EQ("v1", Get(1, "bar"));
+    ASSERT_OK(Flush(1));
+  } while (ChangeCompactOptions());
@@ -1218,5 +1671,2 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
+TEST(DBTest, NumImmutableMemTable) {
+  do {
@@ -1224,17 +1674,45 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+    WriteOptions writeOpt = WriteOptions();
+    writeOpt.disableWAL = true;
+    options.max_write_buffer_number = 4;
+    options.min_write_buffer_number_to_merge = 3;
+    options.write_buffer_size = 1000000;
+    CreateAndReopenWithCF({"pikachu"}, &options);
+    std::string big_value(1000000, 'x');
+    std::string num;
+    SetPerfLevel(kEnableTime);;
+    ASSERT_OK(dbfull()->Put(writeOpt, handles_[1], "k1", big_value));
+    ASSERT_TRUE(dbfull()->GetProperty(handles_[1],
+                                      "rocksdb.num-immutable-mem-table", &num));
+    ASSERT_EQ(num, "0");
+    perf_context.Reset();
+    Get(1, "k1");
+    ASSERT_EQ(1, (int) perf_context.get_from_memtable_count);
+    ASSERT_OK(dbfull()->Put(writeOpt, handles_[1], "k2", big_value));
+    ASSERT_TRUE(dbfull()->GetProperty(handles_[1],
+                                      "rocksdb.num-immutable-mem-table", &num));
+    ASSERT_EQ(num, "1");
+    perf_context.Reset();
+    Get(1, "k1");
+    ASSERT_EQ(2, (int) perf_context.get_from_memtable_count);
+    perf_context.Reset();
+    Get(1, "k2");
+    ASSERT_EQ(1, (int) perf_context.get_from_memtable_count);
+    ASSERT_OK(dbfull()->Put(writeOpt, handles_[1], "k3", big_value));
+    ASSERT_TRUE(dbfull()->GetProperty(handles_[1],
+                                      "rocksdb.num-immutable-mem-table", &num));
+    ASSERT_EQ(num, "2");
+    perf_context.Reset();
+    Get(1, "k2");
+    ASSERT_EQ(2, (int) perf_context.get_from_memtable_count);
+    perf_context.Reset();
+    Get(1, "k3");
+    ASSERT_EQ(1, (int) perf_context.get_from_memtable_count);
+    perf_context.Reset();
+    Get(1, "k1");
+    ASSERT_EQ(3, (int) perf_context.get_from_memtable_count);
+    ASSERT_OK(Flush(1));
+    ASSERT_TRUE(dbfull()->GetProperty(handles_[1],
+                                      "rocksdb.num-immutable-mem-table", &num));
+    ASSERT_EQ(num, "0");
+    SetPerfLevel(kDisable);
+  } while (ChangeCompactOptions());
@@ -1242,5 +1720,48 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
+TEST(DBTest, FLUSH) {
+  do {
+    CreateAndReopenWithCF({"pikachu"});
+    WriteOptions writeOpt = WriteOptions();
+    writeOpt.disableWAL = true;
+    SetPerfLevel(kEnableTime);;
+    ASSERT_OK(dbfull()->Put(writeOpt, handles_[1], "foo", "v1"));
+    ASSERT_OK(Flush(1));
+    ASSERT_OK(dbfull()->Put(writeOpt, handles_[1], "bar", "v1"));
+    perf_context.Reset();
+    Get(1, "foo");
+    ASSERT_TRUE((int) perf_context.get_from_output_files_time > 0);
+    ReopenWithColumnFamilies({"default", "pikachu"});
+    ASSERT_EQ("v1", Get(1, "foo"));
+    ASSERT_EQ("v1", Get(1, "bar"));
+    writeOpt.disableWAL = true;
+    ASSERT_OK(dbfull()->Put(writeOpt, handles_[1], "bar", "v2"));
+    ASSERT_OK(dbfull()->Put(writeOpt, handles_[1], "foo", "v2"));
+    ASSERT_OK(Flush(1));
+    ReopenWithColumnFamilies({"default", "pikachu"});
+    ASSERT_EQ("v2", Get(1, "bar"));
+    perf_context.Reset();
+    ASSERT_EQ("v2", Get(1, "foo"));
+    ASSERT_TRUE((int) perf_context.get_from_output_files_time > 0);
+    writeOpt.disableWAL = false;
+    ASSERT_OK(dbfull()->Put(writeOpt, handles_[1], "bar", "v3"));
+    ASSERT_OK(dbfull()->Put(writeOpt, handles_[1], "foo", "v3"));
+    ASSERT_OK(Flush(1));
+    ReopenWithColumnFamilies({"default", "pikachu"});
+    ASSERT_EQ("v3", Get(1, "foo"));
+    ASSERT_EQ("v3", Get(1, "bar"));
+    SetPerfLevel(kDisable);
+  } while (ChangeCompactOptions());
+}
+TEST(DBTest, RecoveryWithEmptyLog) {
+  do {
+    CreateAndReopenWithCF({"pikachu"});
+    ASSERT_OK(Put(1, "foo", "v1"));
+    ASSERT_OK(Put(1, "foo", "v2"));
+    ReopenWithColumnFamilies({"default", "pikachu"});
+    ReopenWithColumnFamilies({"default", "pikachu"});
+    ASSERT_OK(Put(1, "foo", "v3"));
+    ReopenWithColumnFamilies({"default", "pikachu"});
+    ASSERT_EQ("v3", Get(1, "foo"));
+  } while (ChangeOptions());
+}
+TEST(DBTest, RecoverDuringMemtableCompaction) {
+  do {
@@ -1249,16 +1770,12 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+    options.write_buffer_size = 1000000;
+    CreateAndReopenWithCF({"pikachu"}, &options);
+    ASSERT_OK(Put(1, "foo", "v1"));
+    ASSERT_OK(Put(1, "big1", std::string(10000000, 'x')));
+    ASSERT_OK(Put(1, "big2", std::string(1000, 'y')));
+    ASSERT_OK(Put(1, "bar", "v2"));
+    ReopenWithColumnFamilies({"default", "pikachu"}, &options);
+    ASSERT_EQ("v1", Get(1, "foo"));
+    ASSERT_EQ("v2", Get(1, "bar"));
+    ASSERT_EQ(std::string(10000000, 'x'), Get(1, "big1"));
+    ASSERT_EQ(std::string(1000, 'y'), Get(1, "big2"));
+  } while (ChangeOptions());
@@ -1266,5 +1783,2 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
+TEST(DBTest, MinorCompactionsHappen) {
+  do {
@@ -1272,17 +1786,6 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+    options.write_buffer_size = 10000;
+    CreateAndReopenWithCF({"pikachu"}, &options);
+    const int N = 500;
+    int starting_num_tables = TotalTableFiles(1);
+    for (int i = 0; i < N; i++) {
+      ASSERT_OK(Put(1, Key(i), Key(i) + std::string(1000, 'v')));
@@ -1290,5 +1793,13 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
+    int ending_num_tables = TotalTableFiles(1);
+    ASSERT_GT(ending_num_tables, starting_num_tables);
+    for (int i = 0; i < N; i++) {
+      ASSERT_EQ(Key(i) + std::string(1000, 'v'), Get(1, Key(i)));
+    }
+    ReopenWithColumnFamilies({"default", "pikachu"}, &options);
+    for (int i = 0; i < N; i++) {
+      ASSERT_EQ(Key(i) + std::string(1000, 'v'), Get(1, Key(i)));
+    }
+  } while (ChangeCompactOptions());
+}
+TEST(DBTest, ManifestRollOver) {
+  do {
@@ -1296,17 +1807,15 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+    options.max_manifest_file_size = 10 ;
+    CreateAndReopenWithCF({"pikachu"}, &options);
+    {
+      ASSERT_OK(Put(1, "manifest_key1", std::string(1000, '1')));
+      ASSERT_OK(Put(1, "manifest_key2", std::string(1000, '2')));
+      ASSERT_OK(Put(1, "manifest_key3", std::string(1000, '3')));
+      uint64_t manifest_before_flush = dbfull()->TEST_Current_Manifest_FileNo();
+      ASSERT_OK(Flush(1));
+      uint64_t manifest_after_flush = dbfull()->TEST_Current_Manifest_FileNo();
+      ASSERT_GT(manifest_after_flush, manifest_before_flush);
+      ReopenWithColumnFamilies({"default", "pikachu"}, &options);
+      ASSERT_GT(dbfull()->TEST_Current_Manifest_FileNo(), manifest_after_flush);
+      ASSERT_EQ(std::string(1000, '1'), Get(1, "manifest_key1"));
+      ASSERT_EQ(std::string(1000, '2'), Get(1, "manifest_key2"));
+      ASSERT_EQ(std::string(1000, '3'), Get(1, "manifest_key3"));
@@ -1314,5 +1823,6 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
+  } while (ChangeCompactOptions());
+}
+TEST(DBTest, IdentityAcrossRestarts) {
+  do {
+    std::string id1;
+    ASSERT_OK(db_->GetDbIdentity(id1));
@@ -1320,17 +1830,11 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+    Reopen(&options);
+    std::string id2;
+    ASSERT_OK(db_->GetDbIdentity(id2));
+    ASSERT_EQ(id1.compare(id2), 0);
+    std::string idfilename = IdentityFileName(dbname_);
+    ASSERT_OK(env_->DeleteFile(idfilename));
+    Reopen(&options);
+    std::string id3;
+    ASSERT_OK(db_->GetDbIdentity(id3));
+    ASSERT_NE(id1.compare(id3), 0);
+  } while (ChangeCompactOptions());
@@ -1338,5 +1842,3 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
+TEST(DBTest, RecoverWithLargeLog) {
+  do {
+    {
@@ -1344,17 +1846,6 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+      CreateAndReopenWithCF({"pikachu"}, &options);
+      ASSERT_OK(Put(1, "big1", std::string(200000, '1')));
+      ASSERT_OK(Put(1, "big2", std::string(200000, '2')));
+      ASSERT_OK(Put(1, "small3", std::string(10, '3')));
+      ASSERT_OK(Put(1, "small4", std::string(10, '4')));
+      ASSERT_EQ(NumTableFilesAtLevel(0, 1), 0);
@@ -1362,5 +1852,0 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
@@ -1368,17 +1854,9 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+    options.write_buffer_size = 100000;
+    ReopenWithColumnFamilies({"default", "pikachu"}, &options);
+    ASSERT_EQ(NumTableFilesAtLevel(0, 1), 3);
+    ASSERT_EQ(std::string(200000, '1'), Get(1, "big1"));
+    ASSERT_EQ(std::string(200000, '2'), Get(1, "big2"));
+    ASSERT_EQ(std::string(10, '3'), Get(1, "small3"));
+    ASSERT_EQ(std::string(10, '4'), Get(1, "small4"));
+    ASSERT_GT(NumTableFilesAtLevel(0, 1), 1);
+  } while (ChangeCompactOptions());
@@ -1386,5 +1864 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
+TEST(DBTest, CompactionsGenerateMultipleFiles) {
@@ -1392,17 +1866,8 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+  options.write_buffer_size = 100000000;
+  CreateAndReopenWithCF({"pikachu"}, &options);
+  Random rnd(301);
+  ASSERT_EQ(NumTableFilesAtLevel(0, 1), 0);
+  std::vector<std::string> values;
+  for (int i = 0; i < 80; i++) {
+    values.push_back(RandomString(&rnd, 100000));
+    ASSERT_OK(Put(1, Key(i), values[i]));
@@ -1410,23 +1875,6 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
-  Options options = CurrentOptions();
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+  ReopenWithColumnFamilies({"default", "pikachu"}, &options);
+  dbfull()->TEST_CompactRange(0, nullptr, nullptr, handles_[1]);
+  ASSERT_EQ(NumTableFilesAtLevel(0, 1), 0);
+  ASSERT_GT(NumTableFilesAtLevel(1, 1), 1);
+  for (int i = 0; i < 80; i++) {
+    ASSERT_EQ(Get(1, Key(i)), values[i]);
@@ -1434,23 +1881,0 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
-  Options options = CurrentOptions();
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
@@ -1458,5 +1883 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
+TEST(DBTest, CompactionTrigger) {
@@ -1464,17 +1885,12 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+  options.write_buffer_size = 100<<10;
+  options.num_levels = 3;
+  options.max_mem_compaction_level = 0;
+  options.level0_file_num_compaction_trigger = 3;
+  CreateAndReopenWithCF({"pikachu"}, &options);
+  Random rnd(301);
+  for (int num = 0; num < options.level0_file_num_compaction_trigger - 1;
+       num++) {
+    std::vector<std::string> values;
+    for (int i = 0; i < 12; i++) {
+      values.push_back(RandomString(&rnd, 10000));
+      ASSERT_OK(Put(1, Key(i), values[i]));
@@ -1482,5 +1898,13 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
+    dbfull()->TEST_WaitForFlushMemTable(handles_[1]);
+    ASSERT_EQ(NumTableFilesAtLevel(0, 1), num + 1);
+  }
+  std::vector<std::string> values;
+  for (int i = 0; i < 12; i++) {
+    values.push_back(RandomString(&rnd, 10000));
+    ASSERT_OK(Put(1, Key(i), values[i]));
+  }
+  dbfull()->TEST_WaitForCompact();
+  ASSERT_EQ(NumTableFilesAtLevel(0, 1), 0);
+  ASSERT_EQ(NumTableFilesAtLevel(1, 1), 1);
+}
+TEST(DBTest, UniversalCompactionTrigger) {
@@ -1488,17 +1912,11 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+  options.compaction_style = kCompactionStyleUniversal;
+  options.write_buffer_size = 100<<10;
+  options.level0_file_num_compaction_trigger = 4;
+  CreateAndReopenWithCF({"pikachu"}, &options);
+  Random rnd(301);
+  int key_idx = 0;
+  for (int num = 0; num < options.level0_file_num_compaction_trigger - 1;
+       num++) {
+    for (int i = 0; i < 12; i++) {
+      ASSERT_OK(Put(1, Key(key_idx), RandomString(&rnd, 10000)));
+      key_idx++;
@@ -1506,5 +1924,69 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
+    dbfull()->TEST_WaitForFlushMemTable(handles_[1]);
+    ASSERT_EQ(NumTableFilesAtLevel(0, 1), num + 1);
+  }
+  for (int i = 0; i < 12; i++) {
+    ASSERT_OK(Put(1, Key(key_idx), RandomString(&rnd, 10000)));
+    key_idx++;
+  }
+  dbfull()->TEST_WaitForCompact();
+  ASSERT_EQ(NumTableFilesAtLevel(0, 1), 1);
+  for (int i = 1; i < options.num_levels ; i++) {
+    ASSERT_EQ(NumTableFilesAtLevel(i, 1), 0);
+  }
+  ASSERT_OK(Flush(1));
+  for (int num = 0; num < options.level0_file_num_compaction_trigger - 3;
+       num++) {
+    for (int i = 0; i < 12; i++) {
+      ASSERT_OK(Put(1, Key(key_idx), RandomString(&rnd, 10000)));
+      key_idx++;
+    }
+    dbfull()->TEST_WaitForFlushMemTable(handles_[1]);
+    ASSERT_EQ(NumTableFilesAtLevel(0, 1), num + 3);
+  }
+  for (int i = 0; i < 12; i++) {
+    ASSERT_OK(Put(1, Key(key_idx), RandomString(&rnd, 10000)));
+    key_idx++;
+  }
+  dbfull()->TEST_WaitForCompact();
+  ASSERT_EQ(NumTableFilesAtLevel(0, 1), 2);
+  for (int i = 1; i < options.num_levels ; i++) {
+    ASSERT_EQ(NumTableFilesAtLevel(i, 1), 0);
+  }
+  for (int num = 0; num < options.level0_file_num_compaction_trigger - 3;
+       num++) {
+    for (int i = 0; i < 12; i++) {
+      ASSERT_OK(Put(1, Key(key_idx), RandomString(&rnd, 10000)));
+      key_idx++;
+    }
+    dbfull()->TEST_WaitForFlushMemTable(handles_[1]);
+    ASSERT_EQ(NumTableFilesAtLevel(0, 1), num + 3);
+  }
+  for (int i = 0; i < 12; i++) {
+    ASSERT_OK(Put(1, Key(key_idx), RandomString(&rnd, 10000)));
+    key_idx++;
+  }
+  dbfull()->TEST_WaitForCompact();
+  ASSERT_EQ(NumTableFilesAtLevel(0, 1), 3);
+  for (int i = 1; i < options.num_levels ; i++) {
+    ASSERT_EQ(NumTableFilesAtLevel(i, 1), 0);
+  }
+  for (int i = 0; i < 12; i++) {
+    ASSERT_OK(Put(1, Key(key_idx), RandomString(&rnd, 10000)));
+    key_idx++;
+  }
+  dbfull()->TEST_WaitForCompact();
+  ASSERT_EQ(NumTableFilesAtLevel(0, 1), 4);
+  for (int i = 1; i < options.num_levels ; i++) {
+    ASSERT_EQ(NumTableFilesAtLevel(i, 1), 0);
+  }
+  for (int i = 0; i < 12; i++) {
+    ASSERT_OK(Put(1, Key(key_idx), RandomString(&rnd, 10000)));
+    key_idx++;
+  }
+  dbfull()->TEST_WaitForCompact();
+  ASSERT_EQ(NumTableFilesAtLevel(0, 1), 1);
+  for (int i = 1; i < options.num_levels ; i++) {
+    ASSERT_EQ(NumTableFilesAtLevel(i, 1), 0);
+  }
+}
+TEST(DBTest, UniversalCompactionSizeAmplification) {
@@ -1512,17 +1994,13 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+  options.compaction_style = kCompactionStyleUniversal;
+  options.write_buffer_size = 100<<10;
+  options.level0_file_num_compaction_trigger = 3;
+  CreateAndReopenWithCF({"pikachu"}, &options);
+  options.compaction_options_universal.max_size_amplification_percent = 110;
+  ReopenWithColumnFamilies({"default", "pikachu"}, &options);
+  Random rnd(301);
+  int key_idx = 0;
+  for (int num = 0; num < options.level0_file_num_compaction_trigger - 1;
+       num++) {
+    for (int i = 0; i < 12; i++) {
+      ASSERT_OK(Put(1, Key(key_idx), RandomString(&rnd, 10000)));
+      key_idx++;
@@ -1530,5 +2008,9 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
+    dbfull()->TEST_WaitForFlushMemTable(handles_[1]);
+    ASSERT_EQ(NumTableFilesAtLevel(0, 1), num + 1);
+  }
+  ASSERT_EQ(NumTableFilesAtLevel(0, 1), 2);
+  ASSERT_OK(Flush(1));
+  dbfull()->TEST_WaitForCompact();
+  ASSERT_EQ(NumTableFilesAtLevel(0, 1), 1);
+}
+TEST(DBTest, UniversalCompactionOptions) {
@@ -1536,17 +2018,12 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+  options.compaction_style = kCompactionStyleUniversal;
+  options.write_buffer_size = 100<<10;
+  options.level0_file_num_compaction_trigger = 4;
+  options.num_levels = 1;
+  options.compaction_options_universal.compression_size_percent = -1;
+  CreateAndReopenWithCF({"pikachu"}, &options);
+  Random rnd(301);
+  int key_idx = 0;
+  for (int num = 0; num < options.level0_file_num_compaction_trigger; num++) {
+    for (int i = 0; i < 12; i++) {
+      ASSERT_OK(Put(1, Key(key_idx), RandomString(&rnd, 10000)));
+      key_idx++;
@@ -1554,5 +2031,15 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
+    dbfull()->TEST_WaitForFlushMemTable(handles_[1]);
+    if (num < options.level0_file_num_compaction_trigger - 1) {
+      ASSERT_EQ(NumTableFilesAtLevel(0, 1), num + 1);
+    }
+  }
+  dbfull()->TEST_WaitForCompact();
+  ASSERT_EQ(NumTableFilesAtLevel(0, 1), 1);
+  for (int i = 1; i < options.num_levels ; i++) {
+    ASSERT_EQ(NumTableFilesAtLevel(i, 1), 0);
+  }
+}
+#if defined(SNAPPY) && defined(ZLIB) && defined(BZIP2)
+TEST(DBTest, CompressedCache) {
+  int num_iter = 80;
+  for (int iter = 0; iter < 3; iter++) {
@@ -1560 +2047,51 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.env = env_;
+    options.write_buffer_size = 64*1024;
+    options.statistics = rocksdb::CreateDBStatistics();
+    switch (iter) {
+      case 0:
+        options.block_cache = NewLRUCache(8*1024);
+        options.block_cache_compressed = nullptr;
+        break;
+      case 1:
+        options.no_block_cache = true;
+        options.block_cache = nullptr;
+        options.block_cache_compressed = NewLRUCache(8*1024);
+        break;
+      case 2:
+        options.block_cache = NewLRUCache(1024);
+        options.block_cache_compressed = NewLRUCache(8*1024);
+        break;
+      default:
+        ASSERT_TRUE(false);
+    }
+    CreateAndReopenWithCF({"pikachu"}, &options);
+    Random rnd(301);
+    ASSERT_EQ(NumTableFilesAtLevel(0, 1), 0);
+    std::vector<std::string> values;
+    std::string str;
+    for (int i = 0; i < num_iter; i++) {
+      if (i % 4 == 0) {
+        str = RandomString(&rnd, 1000);
+      }
+      values.push_back(str);
+      ASSERT_OK(Put(1, Key(i), values[i]));
+    }
+    ASSERT_OK(Flush(1));
+    for (int i = 0; i < num_iter; i++) {
+      ASSERT_EQ(Get(1, Key(i)), values[i]);
+    }
+    switch (iter) {
+      case 0:
+        ASSERT_GT(TestGetTickerCount(options, BLOCK_CACHE_MISS), 0);
+        ASSERT_EQ(TestGetTickerCount(options, BLOCK_CACHE_COMPRESSED_MISS), 0);
+        break;
+      case 1:
+        ASSERT_EQ(TestGetTickerCount(options, BLOCK_CACHE_MISS), 0);
+        ASSERT_GT(TestGetTickerCount(options, BLOCK_CACHE_COMPRESSED_MISS), 0);
+        break;
+      case 2:
+        ASSERT_GT(TestGetTickerCount(options, BLOCK_CACHE_MISS), 0);
+        ASSERT_GT(TestGetTickerCount(options, BLOCK_CACHE_COMPRESSED_MISS), 0);
+        break;
+      default:
+        ASSERT_TRUE(false);
+    }
@@ -1562,3 +2098,0 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
@@ -1566,11 +2099,0 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
@@ -1578,5 +2101,7 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
+}
+static std::string CompressibleString(Random* rnd, int len) {
+  std::string r;
+  test::CompressibleString(rnd, 0.8, len, &r);
+  return r;
+}
+TEST(DBTest, UniversalCompactionCompressRatio1) {
@@ -1584,17 +2109,12 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+  options.compaction_style = kCompactionStyleUniversal;
+  options.write_buffer_size = 100<<10;
+  options.level0_file_num_compaction_trigger = 2;
+  options.num_levels = 1;
+  options.compaction_options_universal.compression_size_percent = 70;
+  Reopen(&options);
+  Random rnd(301);
+  int key_idx = 0;
+  for (int num = 0; num < 2; num++) {
+    for (int i = 0; i < 12; i++) {
+      ASSERT_OK(Put(Key(key_idx), CompressibleString(&rnd, 10000)));
+      key_idx++;
@@ -1602,5 +2122,34 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
+    dbfull()->TEST_WaitForFlushMemTable();
+    dbfull()->TEST_WaitForCompact();
+  }
+  ASSERT_LT((int ) dbfull()->TEST_GetLevel0TotalSize(), 120000 * 2 * 0.9);
+  for (int num = 0; num < 2; num++) {
+    for (int i = 0; i < 12; i++) {
+      ASSERT_OK(Put(Key(key_idx), CompressibleString(&rnd, 10000)));
+      key_idx++;
+    }
+    dbfull()->TEST_WaitForFlushMemTable();
+    dbfull()->TEST_WaitForCompact();
+  }
+  ASSERT_LT((int ) dbfull()->TEST_GetLevel0TotalSize(), 120000 * 4 * 0.9);
+  for (int num = 0; num < 2; num++) {
+    for (int i = 0; i < 12; i++) {
+      ASSERT_OK(Put(Key(key_idx), CompressibleString(&rnd, 10000)));
+      key_idx++;
+    }
+    dbfull()->TEST_WaitForFlushMemTable();
+    dbfull()->TEST_WaitForCompact();
+  }
+  ASSERT_LT((int ) dbfull()->TEST_GetLevel0TotalSize(), 120000 * 6 * 0.9);
+  for (int num = 0; num < 8; num++) {
+    for (int i = 0; i < 12; i++) {
+      ASSERT_OK(Put(Key(key_idx), CompressibleString(&rnd, 10000)));
+      key_idx++;
+    }
+    dbfull()->TEST_WaitForFlushMemTable();
+    dbfull()->TEST_WaitForCompact();
+  }
+  ASSERT_GT((int) dbfull()->TEST_GetLevel0TotalSize(),
+            120000 * 12 * 0.8 + 110000 * 2);
+}
+TEST(DBTest, UniversalCompactionCompressRatio2) {
@@ -1608,17 +2157,12 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+  options.compaction_style = kCompactionStyleUniversal;
+  options.write_buffer_size = 100<<10;
+  options.level0_file_num_compaction_trigger = 2;
+  options.num_levels = 1;
+  options.compaction_options_universal.compression_size_percent = 95;
+  Reopen(&options);
+  Random rnd(301);
+  int key_idx = 0;
+  for (int num = 0; num < 14; num++) {
+    for (int i = 0; i < 12; i++) {
+      ASSERT_OK(Put(Key(key_idx), CompressibleString(&rnd, 10000)));
+      key_idx++;
@@ -1626,5 +2170,11 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
+    dbfull()->TEST_WaitForFlushMemTable();
+    dbfull()->TEST_WaitForCompact();
+  }
+  ASSERT_LT((int ) dbfull()->TEST_GetLevel0TotalSize(),
+            120000 * 12 * 0.8 + 110000 * 2);
+}
+#endif
+TEST(DBTest, ConvertCompactionStyle) {
+  Random rnd(301);
+  int max_key_level_insert = 200;
+  int max_key_universal_insert = 600;
@@ -1632,2 +2182,24 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.env = env_;
-  options.create_if_missing = true;
+  options.write_buffer_size = 100<<10;
+  options.num_levels = 4;
+  options.level0_file_num_compaction_trigger = 3;
+  options.max_bytes_for_level_base = 500<<10;
+  options.max_bytes_for_level_multiplier = 1;
+  options.target_file_size_base = 200<<10;
+  options.target_file_size_multiplier = 1;
+  CreateAndReopenWithCF({"pikachu"}, &options);
+  for (int i = 0; i <= max_key_level_insert; i++) {
+    ASSERT_OK(Put(1, Key(i), RandomString(&rnd, 10000)));
+  }
+  ASSERT_OK(Flush(1));
+  dbfull()->TEST_WaitForCompact();
+  ASSERT_GT(TotalTableFiles(1, 4), 1);
+  int non_level0_num_files = 0;
+  for (int i = 1; i < options.num_levels; i++) {
+    non_level0_num_files += NumTableFilesAtLevel(i, 1);
+  }
+  ASSERT_GT(non_level0_num_files, 0);
+  options = CurrentOptions();
+  options.compaction_style = kCompactionStyleUniversal;
+  Status s = TryReopenWithColumnFamilies({"default", "pikachu"}, &options);
+  ASSERT_TRUE(s.IsInvalidArgument());
+  options = CurrentOptions();
@@ -1635,2 +2207,120 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
+  options.target_file_size_base = INT_MAX;
+  options.target_file_size_multiplier = 1;
+  options.max_bytes_for_level_base = INT_MAX;
+  options.max_bytes_for_level_multiplier = 1;
+  ReopenWithColumnFamilies({"default", "pikachu"}, &options);
+  dbfull()->CompactRange(handles_[1], nullptr, nullptr, true ,
+                         0 );
+  for (int i = 0; i < options.num_levels; i++) {
+    int num = NumTableFilesAtLevel(i, 1);
+    if (i == 0) {
+      ASSERT_EQ(num, 1);
+    } else {
+      ASSERT_EQ(num, 0);
+    }
+  }
+  options = CurrentOptions();
+  options.compaction_style = kCompactionStyleUniversal;
+  options.write_buffer_size = 100<<10;
+  options.level0_file_num_compaction_trigger = 3;
+  ReopenWithColumnFamilies({"default", "pikachu"}, &options);
+  for (int i = max_key_level_insert / 2; i <= max_key_universal_insert; i++) {
+    ASSERT_OK(Put(1, Key(i), RandomString(&rnd, 10000)));
+  }
+  dbfull()->Flush(FlushOptions());
+  ASSERT_OK(Flush(1));
+  dbfull()->TEST_WaitForCompact();
+  for (int i = 1; i < options.num_levels; i++) {
+    ASSERT_EQ(NumTableFilesAtLevel(i, 1), 0);
+  }
+  std::string keys_in_db;
+  Iterator* iter = dbfull()->NewIterator(ReadOptions(), handles_[1]);
+  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
+    keys_in_db.append(iter->key().ToString());
+    keys_in_db.push_back(',');
+  }
+  delete iter;
+  std::string expected_keys;
+  for (int i = 0; i <= max_key_universal_insert; i++) {
+    expected_keys.append(Key(i));
+    expected_keys.push_back(',');
+  }
+  ASSERT_EQ(keys_in_db, expected_keys);
+}
+void MinLevelHelper(DBTest* self, Options& options) {
+  Random rnd(301);
+  for (int num = 0;
+    num < options.level0_file_num_compaction_trigger - 1;
+    num++)
+  {
+    std::vector<std::string> values;
+    for (int i = 0; i < 12; i++) {
+      values.push_back(RandomString(&rnd, 10000));
+      ASSERT_OK(self->Put(Key(i), values[i]));
+    }
+    self->dbfull()->TEST_WaitForFlushMemTable();
+    ASSERT_EQ(self->NumTableFilesAtLevel(0), num + 1);
+  }
+  std::vector<std::string> values;
+  for (int i = 0; i < 12; i++) {
+    values.push_back(RandomString(&rnd, 10000));
+    ASSERT_OK(self->Put(Key(i), values[i]));
+  }
+  self->dbfull()->TEST_WaitForCompact();
+  ASSERT_EQ(self->NumTableFilesAtLevel(0), 0);
+  ASSERT_EQ(self->NumTableFilesAtLevel(1), 1);
+}
+bool MinLevelToCompress(CompressionType& type, Options& options, int wbits,
+                        int lev, int strategy) {
+  fprintf(stderr, "Test with compression options : window_bits = %d, level =  %d, strategy = %d}\n", wbits, lev, strategy);
+  options.write_buffer_size = 100<<10;
+  options.num_levels = 3;
+  options.max_mem_compaction_level = 0;
+  options.level0_file_num_compaction_trigger = 3;
+  options.create_if_missing = true;
+  if (SnappyCompressionSupported(CompressionOptions(wbits, lev, strategy))) {
+    type = kSnappyCompression;
+    fprintf(stderr, "using snappy\n");
+  } else if (ZlibCompressionSupported(
+               CompressionOptions(wbits, lev, strategy))) {
+    type = kZlibCompression;
+    fprintf(stderr, "using zlib\n");
+  } else if (BZip2CompressionSupported(
+               CompressionOptions(wbits, lev, strategy))) {
+    type = kBZip2Compression;
+    fprintf(stderr, "using bzip2\n");
+  } else if (LZ4CompressionSupported(
+                 CompressionOptions(wbits, lev, strategy))) {
+    type = kLZ4Compression;
+    fprintf(stderr, "using lz4\n");
+  } else if (LZ4HCCompressionSupported(
+                 CompressionOptions(wbits, lev, strategy))) {
+    type = kLZ4HCCompression;
+    fprintf(stderr, "using lz4hc\n");
+  } else {
+    fprintf(stderr, "skipping test, compression disabled\n");
+    return false;
+  }
+  options.compression_per_level.resize(options.num_levels);
+  for (int i = 0; i < 1; i++) {
+    options.compression_per_level[i] = kNoCompression;
+  }
+  for (int i = 1; i < options.num_levels; i++) {
+    options.compression_per_level[i] = type;
+  }
+  return true;
+}
+TEST(DBTest, MinLevelToCompress1) {
+  Options options = CurrentOptions();
+  CompressionType type;
+  if (!MinLevelToCompress(type, options, -14, -1, 0)) {
+    return;
+  }
+  Reopen(&options);
+  MinLevelHelper(this, options);
+  for (int i = 0; i < 2; i++) {
+    options.compression_per_level[i] = kNoCompression;
+  }
+  for (int i = 2; i < options.num_levels; i++) {
+    options.compression_per_level[i] = type;
+  }
@@ -1638,11 +2328 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+  MinLevelHelper(this, options);
@@ -1650,5 +2330 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
+TEST(DBTest, MinLevelToCompress2) {
@@ -1656,5 +2332,12 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
+  CompressionType type;
+  if (!MinLevelToCompress(type, options, 15, -1, 0)) {
+    return;
+  }
+  Reopen(&options);
+  MinLevelHelper(this, options);
+  for (int i = 0; i < 2; i++) {
+    options.compression_per_level[i] = kNoCompression;
+  }
+  for (int i = 2; i < options.num_levels; i++) {
+    options.compression_per_level[i] = type;
+  }
@@ -1662,11 +2345 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+  MinLevelHelper(this, options);
@@ -1674,5 +2347,2 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
+TEST(DBTest, RepeatedWritesToSameKey) {
+  do {
@@ -1680,0 +2351,15 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
+    options.write_buffer_size = 100000;
+    CreateAndReopenWithCF({"pikachu"}, &options);
+    const int kMaxFiles =
+        options.num_levels + options.level0_stop_writes_trigger;
+    Random rnd(301);
+    std::string value = RandomString(&rnd, 2 * options.write_buffer_size);
+    for (int i = 0; i < 5 * kMaxFiles; i++) {
+      ASSERT_OK(Put(1, "key", value));
+      ASSERT_LE(TotalTableFiles(1), kMaxFiles);
+    }
+  } while (ChangeCompactOptions());
+}
+TEST(DBTest, InPlaceUpdate) {
+  do {
+    Options options = CurrentOptions();
@@ -1682,15 +2367,9 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+    options.inplace_update_support = true;
+    options.env = env_;
+    options.write_buffer_size = 100000;
+    CreateAndReopenWithCF({"pikachu"}, &options);
+    int numValues = 10;
+    for (int i = numValues; i > 0; i--) {
+      std::string value = DummyString(i, 'a');
+      ASSERT_OK(Put(1, "key", value));
+      ASSERT_EQ(value, Get(1, "key"));
@@ -1698,5 +2377,5 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
+    validateNumberOfEntries(1, 1);
+  } while (ChangeCompactOptions());
+}
+TEST(DBTest, InPlaceUpdateLargeNewValue) {
+  do {
@@ -1703,0 +2383,2 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
+    options.create_if_missing = true;
+    options.inplace_update_support = true;
@@ -1704,0 +2386,14 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
+    options.write_buffer_size = 100000;
+    CreateAndReopenWithCF({"pikachu"}, &options);
+    int numValues = 10;
+    for (int i = 0; i < numValues; i++) {
+      std::string value = DummyString(i, 'a');
+      ASSERT_OK(Put(1, "key", value));
+      ASSERT_EQ(value, Get(1, "key"));
+    }
+    validateNumberOfEntries(numValues, 1);
+  } while (ChangeCompactOptions());
+}
+TEST(DBTest, InPlaceUpdateCallbackSmallerSize) {
+  do {
+    Options options = CurrentOptions();
@@ -1706,15 +2401,15 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+    options.inplace_update_support = true;
+    options.env = env_;
+    options.write_buffer_size = 100000;
+    options.inplace_callback =
+      rocksdb::DBTest::updateInPlaceSmallerSize;
+    CreateAndReopenWithCF({"pikachu"}, &options);
+    int numValues = 10;
+    ASSERT_OK(Put(1, "key", DummyString(numValues, 'a')));
+    ASSERT_EQ(DummyString(numValues, 'c'), Get(1, "key"));
+    for (int i = numValues; i > 0; i--) {
+      ASSERT_OK(Put(1, "key", DummyString(i, 'a')));
+      ASSERT_EQ(DummyString(i - 1, 'b'), Get(1, "key"));
+    }
+    validateNumberOfEntries(1, 1);
+  } while (ChangeCompactOptions());
@@ -1722,5 +2417,2 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
+TEST(DBTest, InPlaceUpdateCallbackSmallerVarintSize) {
+  do {
@@ -1727,0 +2420,2 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
+    options.create_if_missing = true;
+    options.inplace_update_support = true;
@@ -1728,0 +2423,17 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
+    options.write_buffer_size = 100000;
+    options.inplace_callback =
+      rocksdb::DBTest::updateInPlaceSmallerVarintSize;
+    CreateAndReopenWithCF({"pikachu"}, &options);
+    int numValues = 265;
+    ASSERT_OK(Put(1, "key", DummyString(numValues, 'a')));
+    ASSERT_EQ(DummyString(numValues, 'c'), Get(1, "key"));
+    for (int i = numValues; i > 0; i--) {
+      ASSERT_OK(Put(1, "key", DummyString(i, 'a')));
+      ASSERT_EQ(DummyString(1, 'b'), Get(1, "key"));
+    }
+    validateNumberOfEntries(1, 1);
+  } while (ChangeCompactOptions());
+}
+TEST(DBTest, InPlaceUpdateCallbackLargeNewValue) {
+  do {
+    Options options = CurrentOptions();
@@ -1730,46 +2441 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
-}
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
-  Options options = CurrentOptions();
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
-}
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
-  Options options = CurrentOptions();
+    options.inplace_update_support = true;
@@ -1777,16 +2443,8 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+    options.write_buffer_size = 100000;
+    options.inplace_callback =
+      rocksdb::DBTest::updateInPlaceLargerSize;
+    CreateAndReopenWithCF({"pikachu"}, &options);
+    int numValues = 10;
+    for (int i = 0; i < numValues; i++) {
+      ASSERT_OK(Put(1, "key", DummyString(i, 'a')));
+      ASSERT_EQ(DummyString(i, 'c'), Get(1, "key"));
@@ -1794,23 +2452,2 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
-  Options options = CurrentOptions();
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+    validateNumberOfEntries(numValues, 1);
+  } while (ChangeCompactOptions());
@@ -1818,5 +2455,2 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
+TEST(DBTest, InPlaceUpdateCallbackNoAction) {
+  do {
@@ -1824 +2457,0 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.env = env_;
@@ -1826,22 +2459 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
-}
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
-  Options options = CurrentOptions();
+    options.inplace_update_support = true;
@@ -1849,16 +2461,7 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+    options.write_buffer_size = 100000;
+    options.inplace_callback =
+      rocksdb::DBTest::updateInPlaceNoAction;
+    CreateAndReopenWithCF({"pikachu"}, &options);
+    ASSERT_OK(Put(1, "key", DummyString(1, 'a')));
+    ASSERT_EQ(Get(1, "key"), "NOT_FOUND");
+  } while (ChangeCompactOptions());
@@ -1866,23 +2469,9 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
-  Options options = CurrentOptions();
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+static int cfilter_count;
+static std::string NEW_VALUE = "NewValue";
+class KeepFilter : public CompactionFilter {
+ public:
+  virtual bool Filter(int level, const Slice& key,
+                      const Slice& value, std::string* new_value,
+                      bool* value_changed) const override {
+    cfilter_count++;
+    return false;
@@ -1890,23 +2479,2 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
-  Options options = CurrentOptions();
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+  virtual const char* Name() const override {
+    return "KeepFilter";
@@ -1914,23 +2482,8 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
-  Options options = CurrentOptions();
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+};
+class DeleteFilter : public CompactionFilter {
+ public:
+  virtual bool Filter(int level, const Slice& key,
+                      const Slice& value, std::string* new_value,
+                      bool* value_changed) const override {
+    cfilter_count++;
+    return true;
@@ -1938,23 +2491,2 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
-  Options options = CurrentOptions();
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+  virtual const char* Name() const override {
+    return "DeleteFilter";
@@ -1962,23 +2494,11 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
-  Options options = CurrentOptions();
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+};
+class ChangeFilter : public CompactionFilter {
+ public:
+  explicit ChangeFilter() {}
+  virtual bool Filter(int level, const Slice& key,
+                      const Slice& value, std::string* new_value,
+                      bool* value_changed) const override {
+    assert(new_value != nullptr);
+    *new_value = NEW_VALUE;
+    *value_changed = true;
+    return false;
@@ -1986,23 +2506,2 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
-  Options options = CurrentOptions();
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+  virtual const char* Name() const override {
+    return "ChangeFilter";
@@ -2010,16 +2509,6 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-void MinLevelHelper(DBTest* self, Options& options) {
-  Random rnd(301);
-  for (int num = 0; num < options.level0_file_num_compaction_trigger - 1;
-       num++) {
-    std::vector<std::string> values;
-    for (int i = 0; i < 12; i++) {
-      values.push_back(RandomString(&rnd, 10000));
-      ASSERT_OK(self->Put(Key(i), values[i]));
-    }
-    self->dbfull()->TEST_WaitForFlushMemTable();
-    ASSERT_EQ(self->NumTableFilesAtLevel(0), num + 1);
-  }
-  std::vector<std::string> values;
-  for (int i = 0; i < 12; i++) {
-    values.push_back(RandomString(&rnd, 10000));
-    ASSERT_OK(self->Put(Key(i), values[i]));
+};
+class KeepFilterFactory : public CompactionFilterFactory {
+  public:
+    virtual std::unique_ptr<CompactionFilter>
+    CreateCompactionFilter(const CompactionFilter::Context& context) override {
+      return std::unique_ptr<CompactionFilter>(new KeepFilter());
@@ -2027,3 +2516,2 @@ void MinLevelHelper(DBTest* self, Options& options) {
-  self->dbfull()->TEST_WaitForCompact();
-  ASSERT_EQ(self->NumTableFilesAtLevel(0), 0);
-  ASSERT_EQ(self->NumTableFilesAtLevel(1), 1);
+    virtual const char* Name() const override {
+      return "KeepFilterFactory";
@@ -2031,30 +2519,7 @@ void MinLevelHelper(DBTest* self, Options& options) {
-bool MinLevelToCompress(CompressionType& type, Options& options, int wbits,
-                        int lev, int strategy) {
-  fprintf(stderr,
-          "Test with compression options : window_bits = %d, level =  %d, "
-          "strategy = %d}\n",
-          wbits, lev, strategy);
-  options.write_buffer_size = 100 << 10;
-  options.num_levels = 3;
-  options.max_mem_compaction_level = 0;
-  options.level0_file_num_compaction_trigger = 3;
-  options.create_if_missing = true;
-  if (SnappyCompressionSupported(CompressionOptions(wbits, lev, strategy))) {
-    type = kSnappyCompression;
-    fprintf(stderr, "using snappy\n");
-  } else if (ZlibCompressionSupported(
-                 CompressionOptions(wbits, lev, strategy))) {
-    type = kZlibCompression;
-    fprintf(stderr, "using zlib\n");
-  } else if (BZip2CompressionSupported(
-                 CompressionOptions(wbits, lev, strategy))) {
-    type = kBZip2Compression;
-    fprintf(stderr, "using bzip2\n");
-  } else if (LZ4CompressionSupported(
-                 CompressionOptions(wbits, lev, strategy))) {
-    type = kLZ4Compression;
-    fprintf(stderr, "using lz4\n");
-  } else if (LZ4HCCompressionSupported(
-                 CompressionOptions(wbits, lev, strategy))) {
-    type = kLZ4HCCompression;
-    fprintf(stderr, "using lz4hc\n");
+};
+class DeleteFilterFactory : public CompactionFilterFactory {
+  public:
+    virtual std::unique_ptr<CompactionFilter>
+    CreateCompactionFilter(const CompactionFilter::Context& context) override {
+      if (context.is_manual_compaction) {
+        return std::unique_ptr<CompactionFilter>(new DeleteFilter());
@@ -2062,2 +2527 @@ bool MinLevelToCompress(CompressionType& type, Options& options, int wbits,
-    fprintf(stderr, "skipping test, compression disabled\n");
-    return false;
+        return std::unique_ptr<CompactionFilter>(nullptr);
@@ -2065,3 +2528,0 @@ bool MinLevelToCompress(CompressionType& type, Options& options, int wbits,
-  options.compression_per_level.resize(options.num_levels);
-  for (int i = 0; i < 1; i++) {
-    options.compression_per_level[i] = kNoCompression;
@@ -2069,2 +2530,2 @@ bool MinLevelToCompress(CompressionType& type, Options& options, int wbits,
-  for (int i = 1; i < options.num_levels; i++) {
-    options.compression_per_level[i] = type;
+    virtual const char* Name() const override {
+      return "DeleteFilterFactory";
@@ -2072 +2533,7 @@ bool MinLevelToCompress(CompressionType& type, Options& options, int wbits,
-  return true;
+};
+class ChangeFilterFactory : public CompactionFilterFactory {
+  public:
+    explicit ChangeFilterFactory() {}
+    virtual std::unique_ptr<CompactionFilter>
+    CreateCompactionFilter(const CompactionFilter::Context& context) override {
+      return std::unique_ptr<CompactionFilter>(new ChangeFilter());
@@ -2074,23 +2541,2 @@ bool MinLevelToCompress(CompressionType& type, Options& options, int wbits,
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
-  Options options = CurrentOptions();
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+    virtual const char* Name() const override {
+      return "ChangeFilterFactory";
@@ -2098,5 +2544,2 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
+};
+TEST(DBTest, CompactionFilter) {
@@ -2104,17 +2547,9 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+  options.num_levels = 3;
+  options.max_mem_compaction_level = 0;
+  options.compaction_filter_factory = std::make_shared<KeepFilterFactory>();
+  CreateAndReopenWithCF({"pikachu"}, &options);
+  const std::string value(10, 'x');
+  for (int i = 0; i < 100000; i++) {
+    char key[100];
+    snprintf(key, sizeof(key), "B%010d", i);
+    Put(1, key, value);
@@ -2122,23 +2557,23 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
-  Options options = CurrentOptions();
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+  ASSERT_OK(Flush(1));
+  cfilter_count = 0;
+  dbfull()->TEST_CompactRange(0, nullptr, nullptr, handles_[1]);
+  ASSERT_EQ(cfilter_count, 100000);
+  cfilter_count = 0;
+  dbfull()->TEST_CompactRange(1, nullptr, nullptr, handles_[1]);
+  ASSERT_EQ(cfilter_count, 100000);
+  ASSERT_EQ(NumTableFilesAtLevel(0, 1), 0);
+  ASSERT_EQ(NumTableFilesAtLevel(1, 1), 0);
+  ASSERT_NE(NumTableFilesAtLevel(2, 1), 0);
+  cfilter_count = 0;
+  int count = 0;
+  int total = 0;
+  Iterator* iter = dbfull()->TEST_NewInternalIterator(handles_[1]);
+  iter->SeekToFirst();
+  ASSERT_OK(iter->status());
+  while (iter->Valid()) {
+    ParsedInternalKey ikey(Slice(), 0, kTypeValue);
+    ikey.sequence = -1;
+    ASSERT_EQ(ParseInternalKey(iter->key(), &ikey), true);
+    total++;
+    if (ikey.sequence != 0) {
+      count++;
@@ -2146,21 +2580,0 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
-  Options options = CurrentOptions();
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
@@ -2168 +2581,0 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  ASSERT_TRUE(!iter->Valid());
@@ -2170,23 +2583,7 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
-  Options options = CurrentOptions();
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+  ASSERT_EQ(total, 100000);
+  ASSERT_EQ(count, 1);
+  delete iter;
+  for (int i = 0; i < 100000; i++) {
+    char key[100];
+    snprintf(key, sizeof(key), "B%010d", i);
+    ASSERT_OK(Put(1, key, value));
@@ -2194,7 +2591,11 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
-  Options options = CurrentOptions();
-  options.env = env_;
+  ASSERT_OK(Flush(1));
+  cfilter_count = 0;
+  dbfull()->TEST_CompactRange(0, nullptr, nullptr, handles_[1]);
+  ASSERT_EQ(cfilter_count, 100000);
+  cfilter_count = 0;
+  dbfull()->TEST_CompactRange(1, nullptr, nullptr, handles_[1]);
+  ASSERT_EQ(cfilter_count, 100000);
+  ASSERT_EQ(NumTableFilesAtLevel(0, 1), 0);
+  ASSERT_EQ(NumTableFilesAtLevel(1, 1), 0);
+  ASSERT_NE(NumTableFilesAtLevel(2, 1), 0);
+  options.compaction_filter_factory = std::make_shared<DeleteFilterFactory>();
@@ -2202,3 +2602,0 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
@@ -2206,212 +2604,5 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
-}
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
-  Options options = CurrentOptions();
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
-}
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
-  Options options = CurrentOptions();
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
-}
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
-  Options options = CurrentOptions();
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
-}
-static int cfilter_count;
-static std::string NEW_VALUE = "NewValue";
-class KeepFilter : public CompactionFilter {
- public:
-  virtual bool Filter(int level, const Slice& key, const Slice& value,
-                      std::string* new_value,
-                      bool* value_changed) const override {
-    cfilter_count++;
-    return false;
-  }
-  virtual const char* Name() const override { return "KeepFilter"; }
-};
-class DeleteFilter : public CompactionFilter {
- public:
-  virtual bool Filter(int level, const Slice& key, const Slice& value,
-                      std::string* new_value,
-                      bool* value_changed) const override {
-    cfilter_count++;
-    return true;
-  }
-  virtual const char* Name() const override { return "DeleteFilter"; }
-};
-class ChangeFilter : public CompactionFilter {
- public:
-  explicit ChangeFilter() {}
-  virtual bool Filter(int level, const Slice& key, const Slice& value,
-                      std::string* new_value,
-                      bool* value_changed) const override {
-    assert(new_value != nullptr);
-    *new_value = NEW_VALUE;
-    *value_changed = true;
-    return false;
-  }
-  virtual const char* Name() const override { return "ChangeFilter"; }
-};
-class KeepFilterFactory : public CompactionFilterFactory {
- public:
-  virtual std::unique_ptr<CompactionFilter> CreateCompactionFilter(
-      const CompactionFilter::Context& context) override {
-    return std::unique_ptr<CompactionFilter>(new KeepFilter());
-  }
-  virtual const char* Name() const override { return "KeepFilterFactory"; }
-};
-class DeleteFilterFactory : public CompactionFilterFactory {
- public:
-  virtual std::unique_ptr<CompactionFilter> CreateCompactionFilter(
-      const CompactionFilter::Context& context) override {
-    if (context.is_manual_compaction) {
-      return std::unique_ptr<CompactionFilter>(new DeleteFilter());
-    } else {
-      return std::unique_ptr<CompactionFilter>(nullptr);
-    }
-  }
-  virtual const char* Name() const override { return "DeleteFilterFactory"; }
-};
-class ChangeFilterFactory : public CompactionFilterFactory {
- public:
-  explicit ChangeFilterFactory() {}
-  virtual std::unique_ptr<CompactionFilter> CreateCompactionFilter(
-      const CompactionFilter::Context& context) override {
-    return std::unique_ptr<CompactionFilter>(new ChangeFilter());
-  }
-  virtual const char* Name() const override { return "ChangeFilterFactory"; }
-};
-TEST(DBTest, CompactionFilter) {
-  Options options = CurrentOptions();
-  options.num_levels = 3;
-  options.max_mem_compaction_level = 0;
-  options.compaction_filter_factory = std::make_shared<KeepFilterFactory>();
-  CreateAndReopenWithCF({"pikachu"}, &options);
-  const std::string value(10, 'x');
-  for (int i = 0; i < 100000; i++) {
-    char key[100];
-    snprintf(key, sizeof(key), "B%010d", i);
-    Put(1, key, value);
-  }
-  ASSERT_OK(Flush(1));
-  cfilter_count = 0;
-  dbfull()->TEST_CompactRange(0, nullptr, nullptr, handles_[1]);
-  ASSERT_EQ(cfilter_count, 100000);
-  cfilter_count = 0;
-  dbfull()->TEST_CompactRange(1, nullptr, nullptr, handles_[1]);
-  ASSERT_EQ(cfilter_count, 100000);
-  ASSERT_EQ(NumTableFilesAtLevel(0, 1), 0);
-  ASSERT_EQ(NumTableFilesAtLevel(1, 1), 0);
-  ASSERT_NE(NumTableFilesAtLevel(2, 1), 0);
-  cfilter_count = 0;
-  int count = 0;
-  int total = 0;
-  Iterator* iter = dbfull()->TEST_NewInternalIterator(handles_[1]);
-  iter->SeekToFirst();
-  ASSERT_OK(iter->status());
-  while (iter->Valid()) {
-    ParsedInternalKey ikey(Slice(), 0, kTypeValue);
-    ikey.sequence = -1;
-    ASSERT_EQ(ParseInternalKey(iter->key(), &ikey), true);
-    total++;
-    if (ikey.sequence != 0) {
-      count++;
-    }
-    iter->Next();
-  }
-  ASSERT_EQ(total, 100000);
-  ASSERT_EQ(count, 1);
-  delete iter;
-  for (int i = 0; i < 100000; i++) {
-    char key[100];
-    snprintf(key, sizeof(key), "B%010d", i);
-    ASSERT_OK(Put(1, key, value));
-  }
-  ASSERT_OK(Flush(1));
-  cfilter_count = 0;
-  dbfull()->TEST_CompactRange(0, nullptr, nullptr, handles_[1]);
-  ASSERT_EQ(cfilter_count, 100000);
-  cfilter_count = 0;
-  dbfull()->TEST_CompactRange(1, nullptr, nullptr, handles_[1]);
-  ASSERT_EQ(cfilter_count, 100000);
-  ASSERT_EQ(NumTableFilesAtLevel(0, 1), 0);
-  ASSERT_EQ(NumTableFilesAtLevel(1, 1), 0);
-  ASSERT_NE(NumTableFilesAtLevel(2, 1), 0);
-  options.compaction_filter_factory = std::make_shared<DeleteFilterFactory>();
-  options.create_if_missing = true;
-  DestroyAndReopen(&options);
-  CreateAndReopenWithCF({"pikachu"}, &options);
-  for (int i = 0; i < 100000; i++) {
-    char key[100];
-    snprintf(key, sizeof(key), "B%010d", i);
-    ASSERT_OK(Put(1, key, value));
+  CreateAndReopenWithCF({"pikachu"}, &options);
+  for (int i = 0; i < 100000; i++) {
+    char key[100];
+    snprintf(key, sizeof(key), "B%010d", i);
+    ASSERT_OK(Put(1, key, value));
@@ -2438,397 +2629,11 @@ TEST(DBTest, CompactionFilter) {
-  ASSERT_EQ(count, 0);
-  delete iter;
-  count = 0;
-  iter = dbfull()->TEST_NewInternalIterator(handles_[1]);
-  iter->SeekToFirst();
-  ASSERT_OK(iter->status());
-  while (iter->Valid()) {
-    ParsedInternalKey ikey(Slice(), 0, kTypeValue);
-    ASSERT_EQ(ParseInternalKey(iter->key(), &ikey), true);
-    ASSERT_NE(ikey.sequence, (unsigned)0);
-    count++;
-    iter->Next();
-  }
-  ASSERT_EQ(count, 0);
-  delete iter;
-}
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
-  Options options = CurrentOptions();
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
-}
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
-  Options options = CurrentOptions();
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
-}
-static bool Between(uint64_t val, uint64_t low, uint64_t high) {
-  bool result = (val >= low) && (val <= high);
-  if (!result) {
-    fprintf(stderr, "Value %llu is not in range [%llu, %llu]\n",
-            (unsigned long long)(val), (unsigned long long)(low),
-            (unsigned long long)(high));
-  }
-  return result;
-}
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
-  Options options = CurrentOptions();
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
-}
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
-  Options options = CurrentOptions();
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
-}
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
-  Options options = CurrentOptions();
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
-}
-TEST(DBTest, Snapshot) {
-  do {
-    CreateAndReopenWithCF({"pikachu"});
-    Put(0, "foo", "0v1");
-    Put(1, "foo", "1v1");
-    const Snapshot* s1 = db_->GetSnapshot();
-    Put(0, "foo", "0v2");
-    Put(1, "foo", "1v2");
-    const Snapshot* s2 = db_->GetSnapshot();
-    Put(0, "foo", "0v3");
-    Put(1, "foo", "1v3");
-    const Snapshot* s3 = db_->GetSnapshot();
-    Put(0, "foo", "0v4");
-    Put(1, "foo", "1v4");
-    ASSERT_EQ("0v1", Get(0, "foo", s1));
-    ASSERT_EQ("1v1", Get(1, "foo", s1));
-    ASSERT_EQ("0v2", Get(0, "foo", s2));
-    ASSERT_EQ("1v2", Get(1, "foo", s2));
-    ASSERT_EQ("0v3", Get(0, "foo", s3));
-    ASSERT_EQ("1v3", Get(1, "foo", s3));
-    ASSERT_EQ("0v4", Get(0, "foo"));
-    ASSERT_EQ("1v4", Get(1, "foo"));
-    db_->ReleaseSnapshot(s3);
-    ASSERT_EQ("0v1", Get(0, "foo", s1));
-    ASSERT_EQ("1v1", Get(1, "foo", s1));
-    ASSERT_EQ("0v2", Get(0, "foo", s2));
-    ASSERT_EQ("1v2", Get(1, "foo", s2));
-    ASSERT_EQ("0v4", Get(0, "foo"));
-    ASSERT_EQ("1v4", Get(1, "foo"));
-    db_->ReleaseSnapshot(s1);
-    ASSERT_EQ("0v2", Get(0, "foo", s2));
-    ASSERT_EQ("1v2", Get(1, "foo", s2));
-    ASSERT_EQ("0v4", Get(0, "foo"));
-    ASSERT_EQ("1v4", Get(1, "foo"));
-    db_->ReleaseSnapshot(s2);
-    ASSERT_EQ("0v4", Get(0, "foo"));
-    ASSERT_EQ("1v4", Get(1, "foo"));
-  } while (ChangeOptions());
-}
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
-  Options options = CurrentOptions();
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
-}
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
-  Options options = CurrentOptions();
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
-}
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
-  Options options = CurrentOptions();
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
-}
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
-  Options options = CurrentOptions();
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
-}
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
-  Options options = CurrentOptions();
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
-}
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
-  Options options = CurrentOptions();
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
-}
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
-  Options options = CurrentOptions();
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
-}
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
-  Options options = CurrentOptions();
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
-}
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
-  Options options = CurrentOptions();
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
+  ASSERT_EQ(count, 0);
+  delete iter;
+  count = 0;
+  iter = dbfull()->TEST_NewInternalIterator(handles_[1]);
+  iter->SeekToFirst();
+  ASSERT_OK(iter->status());
+  while (iter->Valid()) {
+    ParsedInternalKey ikey(Slice(), 0, kTypeValue);
+    ASSERT_EQ(ParseInternalKey(iter->key(), &ikey), true);
+    ASSERT_NE(ikey.sequence, (unsigned)0);
+    count++;
@@ -2836 +2640,0 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  ASSERT_TRUE(!iter->Valid());
@@ -2838,5 +2642,5 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
+  ASSERT_EQ(count, 0);
+  delete iter;
+}
+TEST(DBTest, CompactionFilterWithValueChange) {
+  do {
@@ -2844,17 +2648,11 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+    options.num_levels = 3;
+    options.max_mem_compaction_level = 0;
+    options.compaction_filter_factory =
+      std::make_shared<ChangeFilterFactory>();
+    Reopen(&options);
+    CreateAndReopenWithCF({"pikachu"}, &options);
+    const std::string value(10, 'x');
+    for (int i = 0; i < 100001; i++) {
+      char key[100];
+      snprintf(key, sizeof(key), "B%010d", i);
+      Put(1, key, value);
@@ -2862,5 +2660,21 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
+    ASSERT_OK(Flush(1));
+    dbfull()->TEST_CompactRange(0, nullptr, nullptr, handles_[1]);
+    dbfull()->TEST_CompactRange(1, nullptr, nullptr, handles_[1]);
+    for (int i = 0; i < 100001; i++) {
+      char key[100];
+      snprintf(key, sizeof(key), "B%010d", i);
+      Put(1, key, value);
+    }
+    ASSERT_OK(Flush(1));
+    dbfull()->TEST_CompactRange(0, nullptr, nullptr, handles_[1]);
+    dbfull()->TEST_CompactRange(1, nullptr, nullptr, handles_[1]);
+    for (int i = 0; i < 100000; i++) {
+      char key[100];
+      snprintf(key, sizeof(key), "B%010d", i);
+      std::string newvalue = Get(1, key);
+      ASSERT_EQ(newvalue.compare(NEW_VALUE), 0);
+    }
+  } while (ChangeCompactOptions());
+}
+TEST(DBTest, SparseMerge) {
+  do {
@@ -2868,17 +2682,9 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+    options.compression = kNoCompression;
+    CreateAndReopenWithCF({"pikachu"}, &options);
+    FillLevels("A", "Z", 1);
+    const std::string value(1000, 'x');
+    Put(1, "A", "va");
+    for (int i = 0; i < 100000; i++) {
+      char key[100];
+      snprintf(key, sizeof(key), "B%010d", i);
+      Put(1, key, value);
@@ -2886,5 +2692,29 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
+    Put(1, "C", "vc");
+    ASSERT_OK(Flush(1));
+    dbfull()->TEST_CompactRange(0, nullptr, nullptr, handles_[1]);
+    Put(1, "A", "va2");
+    Put(1, "B100", "bvalue2");
+    Put(1, "C", "vc2");
+    ASSERT_OK(Flush(1));
+    ASSERT_LE(dbfull()->TEST_MaxNextLevelOverlappingBytes(handles_[1]),
+              20 * 1048576);
+    dbfull()->TEST_CompactRange(0, nullptr, nullptr);
+    ASSERT_LE(dbfull()->TEST_MaxNextLevelOverlappingBytes(handles_[1]),
+              20 * 1048576);
+    dbfull()->TEST_CompactRange(1, nullptr, nullptr);
+    ASSERT_LE(dbfull()->TEST_MaxNextLevelOverlappingBytes(handles_[1]),
+              20 * 1048576);
+  } while (ChangeCompactOptions());
+}
+static bool Between(uint64_t val, uint64_t low, uint64_t high) {
+  bool result = (val >= low) && (val <= high);
+  if (!result) {
+    fprintf(stderr, "Value %llu is not in range [%llu, %llu]\n",
+            (unsigned long long)(val),
+            (unsigned long long)(low),
+            (unsigned long long)(high));
+  }
+  return result;
+}
+TEST(DBTest, ApproximateSizes) {
+  do {
@@ -2892,17 +2722,14 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+    options.write_buffer_size = 100000000;
+    options.compression = kNoCompression;
+    DestroyAndReopen();
+    CreateAndReopenWithCF({"pikachu"}, &options);
+    ASSERT_TRUE(Between(Size("", "xyz", 1), 0, 0));
+    ReopenWithColumnFamilies({"default", "pikachu"}, &options);
+    ASSERT_TRUE(Between(Size("", "xyz", 1), 0, 0));
+    ASSERT_EQ(NumTableFilesAtLevel(0, 1), 0);
+    const int N = 80;
+    static const int S1 = 100000;
+    static const int S2 = 105000;
+    Random rnd(301);
+    for (int i = 0; i < N; i++) {
+      ASSERT_OK(Put(1, Key(i), RandomString(&rnd, S1)));
@@ -2910,5 +2737,26 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
+    ASSERT_TRUE(Between(Size("", Key(50), 1), 0, 0));
+    for (int run = 0; run < 3; run++) {
+      ReopenWithColumnFamilies({"default", "pikachu"}, &options);
+      for (int compact_start = 0; compact_start < N; compact_start += 10) {
+        for (int i = 0; i < N; i += 10) {
+          ASSERT_TRUE(Between(Size("", Key(i), 1), S1 * i, S2 * i));
+          ASSERT_TRUE(Between(Size("", Key(i) + ".suffix", 1), S1 * (i + 1),
+                              S2 * (i + 1)));
+          ASSERT_TRUE(Between(Size(Key(i), Key(i + 10), 1), S1 * 10, S2 * 10));
+        }
+        ASSERT_TRUE(Between(Size("", Key(50), 1), S1 * 50, S2 * 50));
+        ASSERT_TRUE(
+            Between(Size("", Key(50) + ".suffix", 1), S1 * 50, S2 * 50));
+        std::string cstart_str = Key(compact_start);
+        std::string cend_str = Key(compact_start + 9);
+        Slice cstart = cstart_str;
+        Slice cend = cend_str;
+        dbfull()->TEST_CompactRange(0, &cstart, &cend, handles_[1]);
+      }
+      ASSERT_EQ(NumTableFilesAtLevel(0, 1), 0);
+      ASSERT_GT(NumTableFilesAtLevel(1, 1), 0);
+    }
+  } while (ChangeOptions(kSkipUniversalCompaction | kSkipPlainTable));
+}
+TEST(DBTest, ApproximateSizes_MixOfSmallAndLarge) {
+  do {
@@ -2916,13 +2764,39 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
+    options.compression = kNoCompression;
+    CreateAndReopenWithCF({"pikachu"}, &options);
+    Random rnd(301);
+    std::string big1 = RandomString(&rnd, 100000);
+    ASSERT_OK(Put(1, Key(0), RandomString(&rnd, 10000)));
+    ASSERT_OK(Put(1, Key(1), RandomString(&rnd, 10000)));
+    ASSERT_OK(Put(1, Key(2), big1));
+    ASSERT_OK(Put(1, Key(3), RandomString(&rnd, 10000)));
+    ASSERT_OK(Put(1, Key(4), big1));
+    ASSERT_OK(Put(1, Key(5), RandomString(&rnd, 10000)));
+    ASSERT_OK(Put(1, Key(6), RandomString(&rnd, 300000)));
+    ASSERT_OK(Put(1, Key(7), RandomString(&rnd, 10000)));
+    for (int run = 0; run < 3; run++) {
+      ReopenWithColumnFamilies({"default", "pikachu"}, &options);
+      ASSERT_TRUE(Between(Size("", Key(0), 1), 0, 0));
+      ASSERT_TRUE(Between(Size("", Key(1), 1), 10000, 11000));
+      ASSERT_TRUE(Between(Size("", Key(2), 1), 20000, 21000));
+      ASSERT_TRUE(Between(Size("", Key(3), 1), 120000, 121000));
+      ASSERT_TRUE(Between(Size("", Key(4), 1), 130000, 131000));
+      ASSERT_TRUE(Between(Size("", Key(5), 1), 230000, 231000));
+      ASSERT_TRUE(Between(Size("", Key(6), 1), 240000, 241000));
+      ASSERT_TRUE(Between(Size("", Key(7), 1), 540000, 541000));
+      ASSERT_TRUE(Between(Size("", Key(8), 1), 550000, 560000));
+      ASSERT_TRUE(Between(Size(Key(3), Key(5), 1), 110000, 111000));
+      dbfull()->TEST_CompactRange(0, nullptr, nullptr, handles_[1]);
+    }
+  } while (ChangeOptions(kSkipPlainTable));
+}
+TEST(DBTest, IteratorPinsRef) {
+  do {
+    CreateAndReopenWithCF({"pikachu"});
+    Put(1, "foo", "hello");
+    Iterator* iter = db_->NewIterator(ReadOptions(), handles_[1]);
+    Put(1, "foo", "newvalue1");
+    for (int i = 0; i < 100; i++) {
+      ASSERT_OK(Put(1, Key(i), Key(i) + std::string(100000, 'v')));
+    }
+    Put(1, "foo", "newvalue2");
+    iter->SeekToFirst();
@@ -2930 +2804,2 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  ASSERT_EQ(iter->key().ToString(), "0202");
+    ASSERT_EQ("foo", iter->key().ToString());
+    ASSERT_EQ("hello", iter->value().ToString());
@@ -2932,0 +2808,261 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
+    delete iter;
+  } while (ChangeCompactOptions());
+}
+TEST(DBTest, Snapshot) {
+  do {
+    CreateAndReopenWithCF({"pikachu"});
+    Put(0, "foo", "0v1");
+    Put(1, "foo", "1v1");
+    const Snapshot* s1 = db_->GetSnapshot();
+    Put(0, "foo", "0v2");
+    Put(1, "foo", "1v2");
+    const Snapshot* s2 = db_->GetSnapshot();
+    Put(0, "foo", "0v3");
+    Put(1, "foo", "1v3");
+    const Snapshot* s3 = db_->GetSnapshot();
+    Put(0, "foo", "0v4");
+    Put(1, "foo", "1v4");
+    ASSERT_EQ("0v1", Get(0, "foo", s1));
+    ASSERT_EQ("1v1", Get(1, "foo", s1));
+    ASSERT_EQ("0v2", Get(0, "foo", s2));
+    ASSERT_EQ("1v2", Get(1, "foo", s2));
+    ASSERT_EQ("0v3", Get(0, "foo", s3));
+    ASSERT_EQ("1v3", Get(1, "foo", s3));
+    ASSERT_EQ("0v4", Get(0, "foo"));
+    ASSERT_EQ("1v4", Get(1, "foo"));
+    db_->ReleaseSnapshot(s3);
+    ASSERT_EQ("0v1", Get(0, "foo", s1));
+    ASSERT_EQ("1v1", Get(1, "foo", s1));
+    ASSERT_EQ("0v2", Get(0, "foo", s2));
+    ASSERT_EQ("1v2", Get(1, "foo", s2));
+    ASSERT_EQ("0v4", Get(0, "foo"));
+    ASSERT_EQ("1v4", Get(1, "foo"));
+    db_->ReleaseSnapshot(s1);
+    ASSERT_EQ("0v2", Get(0, "foo", s2));
+    ASSERT_EQ("1v2", Get(1, "foo", s2));
+    ASSERT_EQ("0v4", Get(0, "foo"));
+    ASSERT_EQ("1v4", Get(1, "foo"));
+    db_->ReleaseSnapshot(s2);
+    ASSERT_EQ("0v4", Get(0, "foo"));
+    ASSERT_EQ("1v4", Get(1, "foo"));
+  } while (ChangeOptions());
+}
+TEST(DBTest, HiddenValuesAreRemoved) {
+  do {
+    CreateAndReopenWithCF({"pikachu"});
+    Random rnd(301);
+    FillLevels("a", "z", 1);
+    std::string big = RandomString(&rnd, 50000);
+    Put(1, "foo", big);
+    Put(1, "pastfoo", "v");
+    const Snapshot* snapshot = db_->GetSnapshot();
+    Put(1, "foo", "tiny");
+    Put(1, "pastfoo2", "v2");
+    ASSERT_OK(Flush(1));
+    ASSERT_GT(NumTableFilesAtLevel(0, 1), 0);
+    ASSERT_EQ(big, Get(1, "foo", snapshot));
+    ASSERT_TRUE(Between(Size("", "pastfoo", 1), 50000, 60000));
+    db_->ReleaseSnapshot(snapshot);
+    ASSERT_EQ(AllEntriesFor("foo", 1), "[ tiny, " + big + " ]");
+    Slice x("x");
+    dbfull()->TEST_CompactRange(0, nullptr, &x, handles_[1]);
+    ASSERT_EQ(AllEntriesFor("foo", 1), "[ tiny ]");
+    ASSERT_EQ(NumTableFilesAtLevel(0, 1), 0);
+    ASSERT_GE(NumTableFilesAtLevel(1, 1), 1);
+    dbfull()->TEST_CompactRange(1, nullptr, &x, handles_[1]);
+    ASSERT_EQ(AllEntriesFor("foo", 1), "[ tiny ]");
+    ASSERT_TRUE(Between(Size("", "pastfoo", 1), 0, 1000));
+  } while (ChangeOptions(kSkipUniversalCompaction | kSkipPlainTable));
+}
+TEST(DBTest, CompactBetweenSnapshots) {
+  do {
+    CreateAndReopenWithCF({"pikachu"});
+    Random rnd(301);
+    FillLevels("a", "z", 1);
+    Put(1, "foo", "first");
+    const Snapshot* snapshot1 = db_->GetSnapshot();
+    Put(1, "foo", "second");
+    Put(1, "foo", "third");
+    Put(1, "foo", "fourth");
+    const Snapshot* snapshot2 = db_->GetSnapshot();
+    Put(1, "foo", "fifth");
+    Put(1, "foo", "sixth");
+    ASSERT_OK(Flush(1));
+    ASSERT_EQ("sixth", Get(1, "foo"));
+    ASSERT_EQ("fourth", Get(1, "foo", snapshot2));
+    ASSERT_EQ("first", Get(1, "foo", snapshot1));
+    ASSERT_EQ(AllEntriesFor("foo", 1),
+              "[ sixth, fifth, fourth, third, second, first ]");
+    FillLevels("a", "z", 1);
+    dbfull()->CompactRange(handles_[1], nullptr, nullptr);
+    ASSERT_EQ("sixth", Get(1, "foo"));
+    ASSERT_EQ("fourth", Get(1, "foo", snapshot2));
+    ASSERT_EQ("first", Get(1, "foo", snapshot1));
+    ASSERT_EQ(AllEntriesFor("foo", 1), "[ sixth, fourth, first ]");
+    db_->ReleaseSnapshot(snapshot1);
+    FillLevels("a", "z", 1);
+    dbfull()->CompactRange(handles_[1], nullptr, nullptr);
+    ASSERT_EQ("sixth", Get(1, "foo"));
+    ASSERT_EQ("fourth", Get(1, "foo", snapshot2));
+    ASSERT_EQ(AllEntriesFor("foo", 1), "[ sixth, fourth ]");
+    db_->ReleaseSnapshot(snapshot2);
+    FillLevels("a", "z", 1);
+    dbfull()->CompactRange(handles_[1], nullptr, nullptr);
+    ASSERT_EQ("sixth", Get(1, "foo"));
+    ASSERT_EQ(AllEntriesFor("foo", 1), "[ sixth ]");
+  } while (ChangeOptions());
+}
+TEST(DBTest, DeletionMarkers1) {
+  CreateAndReopenWithCF({"pikachu"});
+  Put(1, "foo", "v1");
+  ASSERT_OK(Flush(1));
+  const int last = CurrentOptions().max_mem_compaction_level;
+  ASSERT_EQ(NumTableFilesAtLevel(last, 1), 1);
+  Put(1, "a", "begin");
+  Put(1, "z", "end");
+  Flush(1);
+  ASSERT_EQ(NumTableFilesAtLevel(last, 1), 1);
+  ASSERT_EQ(NumTableFilesAtLevel(last - 1, 1), 1);
+  Delete(1, "foo");
+  Put(1, "foo", "v2");
+  ASSERT_EQ(AllEntriesFor("foo", 1), "[ v2, DEL, v1 ]");
+  ASSERT_OK(Flush(1));
+  if (CurrentOptions().purge_redundant_kvs_while_flush) {
+    ASSERT_EQ(AllEntriesFor("foo", 1), "[ v2, v1 ]");
+  } else {
+    ASSERT_EQ(AllEntriesFor("foo", 1), "[ v2, DEL, v1 ]");
+  }
+  Slice z("z");
+  dbfull()->TEST_CompactRange(last - 2, nullptr, &z, handles_[1]);
+  ASSERT_EQ(AllEntriesFor("foo", 1), "[ v2, v1 ]");
+  dbfull()->TEST_CompactRange(last - 1, nullptr, nullptr, handles_[1]);
+  ASSERT_EQ(AllEntriesFor("foo", 1), "[ v2 ]");
+}
+TEST(DBTest, DeletionMarkers2) {
+  CreateAndReopenWithCF({"pikachu"});
+  Put(1, "foo", "v1");
+  ASSERT_OK(Flush(1));
+  const int last = CurrentOptions().max_mem_compaction_level;
+  ASSERT_EQ(NumTableFilesAtLevel(last, 1), 1);
+  Put(1, "a", "begin");
+  Put(1, "z", "end");
+  Flush(1);
+  ASSERT_EQ(NumTableFilesAtLevel(last, 1), 1);
+  ASSERT_EQ(NumTableFilesAtLevel(last - 1, 1), 1);
+  Delete(1, "foo");
+  ASSERT_EQ(AllEntriesFor("foo", 1), "[ DEL, v1 ]");
+  ASSERT_OK(Flush(1));
+  ASSERT_EQ(AllEntriesFor("foo", 1), "[ DEL, v1 ]");
+  dbfull()->TEST_CompactRange(last - 2, nullptr, nullptr, handles_[1]);
+  ASSERT_EQ(AllEntriesFor("foo", 1), "[ DEL, v1 ]");
+  dbfull()->TEST_CompactRange(last - 1, nullptr, nullptr, handles_[1]);
+  ASSERT_EQ(AllEntriesFor("foo", 1), "[ ]");
+}
+TEST(DBTest, OverlapInLevel0) {
+  do {
+    CreateAndReopenWithCF({"pikachu"});
+    int tmp = CurrentOptions().max_mem_compaction_level;
+    ASSERT_EQ(tmp, 2) << "Fix test to match config";
+    ASSERT_OK(Put(1, "100", "v100"));
+    ASSERT_OK(Put(1, "999", "v999"));
+    Flush(1);
+    ASSERT_OK(Delete(1, "100"));
+    ASSERT_OK(Delete(1, "999"));
+    Flush(1);
+    ASSERT_EQ("0,1,1", FilesPerLevel(1));
+    ASSERT_OK(Put(1, "300", "v300"));
+    ASSERT_OK(Put(1, "500", "v500"));
+    Flush(1);
+    ASSERT_OK(Put(1, "200", "v200"));
+    ASSERT_OK(Put(1, "600", "v600"));
+    ASSERT_OK(Put(1, "900", "v900"));
+    Flush(1);
+    ASSERT_EQ("2,1,1", FilesPerLevel(1));
+    dbfull()->TEST_CompactRange(1, nullptr, nullptr, handles_[1]);
+    dbfull()->TEST_CompactRange(2, nullptr, nullptr, handles_[1]);
+    ASSERT_EQ("2", FilesPerLevel(1));
+    ASSERT_OK(Delete(1, "600"));
+    Flush(1);
+    ASSERT_EQ("3", FilesPerLevel(1));
+    ASSERT_EQ("NOT_FOUND", Get(1, "600"));
+  } while (ChangeOptions(kSkipUniversalCompaction));
+}
+TEST(DBTest, L0_CompactionBug_Issue44_a) {
+  do {
+    CreateAndReopenWithCF({"pikachu"});
+    ASSERT_OK(Put(1, "b", "v"));
+    ReopenWithColumnFamilies({"default", "pikachu"});
+    ASSERT_OK(Delete(1, "b"));
+    ASSERT_OK(Delete(1, "a"));
+    ReopenWithColumnFamilies({"default", "pikachu"});
+    ASSERT_OK(Delete(1, "a"));
+    ReopenWithColumnFamilies({"default", "pikachu"});
+    ASSERT_OK(Put(1, "a", "v"));
+    ReopenWithColumnFamilies({"default", "pikachu"});
+    ReopenWithColumnFamilies({"default", "pikachu"});
+    ASSERT_EQ("(a->v)", Contents(1));
+    env_->SleepForMicroseconds(1000000);
+    ASSERT_EQ("(a->v)", Contents(1));
+  } while (ChangeCompactOptions());
+}
+TEST(DBTest, L0_CompactionBug_Issue44_b) {
+  do {
+    CreateAndReopenWithCF({"pikachu"});
+    Put(1, "", "");
+    ReopenWithColumnFamilies({"default", "pikachu"});
+    Delete(1, "e");
+    Put(1, "", "");
+    ReopenWithColumnFamilies({"default", "pikachu"});
+    Put(1, "c", "cv");
+    ReopenWithColumnFamilies({"default", "pikachu"});
+    Put(1, "", "");
+    ReopenWithColumnFamilies({"default", "pikachu"});
+    Put(1, "", "");
+    env_->SleepForMicroseconds(1000000);
+    ReopenWithColumnFamilies({"default", "pikachu"});
+    Put(1, "d", "dv");
+    ReopenWithColumnFamilies({"default", "pikachu"});
+    Put(1, "", "");
+    ReopenWithColumnFamilies({"default", "pikachu"});
+    Delete(1, "d");
+    Delete(1, "b");
+    ReopenWithColumnFamilies({"default", "pikachu"});
+    ASSERT_EQ("(->)(c->cv)", Contents(1));
+    env_->SleepForMicroseconds(1000000);
+    ASSERT_EQ("(->)(c->cv)", Contents(1));
+  } while (ChangeCompactOptions());
+}
+TEST(DBTest, ComparatorCheck) {
+  class NewComparator : public Comparator {
+   public:
+    virtual const char* Name() const { return "rocksdb.NewComparator"; }
+    virtual int Compare(const Slice& a, const Slice& b) const {
+      return BytewiseComparator()->Compare(a, b);
+    }
+    virtual void FindShortestSeparator(std::string* s, const Slice& l) const {
+      BytewiseComparator()->FindShortestSeparator(s, l);
+    }
+    virtual void FindShortSuccessor(std::string* key) const {
+      BytewiseComparator()->FindShortSuccessor(key);
+    }
+  };
+  Options new_options, options;
+  NewComparator cmp;
+  do {
+    CreateAndReopenWithCF({"pikachu"});
+    options = CurrentOptions();
+    new_options = CurrentOptions();
+    new_options.comparator = &cmp;
+    Status s = TryReopenWithColumnFamilies({"default", "pikachu"},
+                                           {&options, &new_options});
+    ASSERT_TRUE(!s.ok());
+    ASSERT_TRUE(s.ToString().find("comparator") != std::string::npos)
+        << s.ToString();
+  } while (ChangeCompactOptions(&new_options));
+}
+TEST(DBTest, CustomComparator) {
+  class NumberComparator : public Comparator {
+   public:
+    virtual const char* Name() const { return "test.NumberComparator"; }
+    virtual int Compare(const Slice& a, const Slice& b) const {
+      return ToNumber(a) - ToNumber(b);
@@ -2934,5 +3070,71 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
+    virtual void FindShortestSeparator(std::string* s, const Slice& l) const {
+      ToNumber(*s);
+      ToNumber(l);
+    }
+    virtual void FindShortSuccessor(std::string* key) const {
+      ToNumber(*key);
+    }
+   private:
+    static int ToNumber(const Slice& x) {
+      ASSERT_TRUE(x.size() >= 2 && x[0] == '[' && x[x.size()-1] == ']')
+          << EscapeString(x);
+      int val;
+      char ignored;
+      ASSERT_TRUE(sscanf(x.ToString().c_str(), "[%i]%c", &val, &ignored) == 1)
+          << EscapeString(x);
+      return val;
+    }
+  };
+  Options new_options;
+  NumberComparator cmp;
+  do {
+    new_options = CurrentOptions();
+    new_options.create_if_missing = true;
+    new_options.comparator = &cmp;
+    new_options.filter_policy = nullptr;
+    new_options.write_buffer_size = 1000;
+    DestroyAndReopen(&new_options);
+    CreateAndReopenWithCF({"pikachu"}, &new_options);
+    ASSERT_OK(Put(1, "[10]", "ten"));
+    ASSERT_OK(Put(1, "[0x14]", "twenty"));
+    for (int i = 0; i < 2; i++) {
+      ASSERT_EQ("ten", Get(1, "[10]"));
+      ASSERT_EQ("ten", Get(1, "[0xa]"));
+      ASSERT_EQ("twenty", Get(1, "[20]"));
+      ASSERT_EQ("twenty", Get(1, "[0x14]"));
+      ASSERT_EQ("NOT_FOUND", Get(1, "[15]"));
+      ASSERT_EQ("NOT_FOUND", Get(1, "[0xf]"));
+      Compact(1, "[0]", "[9999]");
+    }
+    for (int run = 0; run < 2; run++) {
+      for (int i = 0; i < 1000; i++) {
+        char buf[100];
+        snprintf(buf, sizeof(buf), "[%d]", i*10);
+        ASSERT_OK(Put(1, buf, buf));
+      }
+      Compact(1, "[0]", "[1000000]");
+    }
+  } while (ChangeCompactOptions(&new_options));
+}
+TEST(DBTest, ManualCompaction) {
+  CreateAndReopenWithCF({"pikachu"});
+  ASSERT_EQ(dbfull()->MaxMemCompactionLevel(), 2)
+      << "Need to update this test to match kMaxMemCompactLevel";
+  for (int iter = 0; iter < 2; ++iter) {
+    MakeTables(3, "p", "q", 1);
+    ASSERT_EQ("1,1,1", FilesPerLevel(1));
+    Compact(1, "", "c");
+    ASSERT_EQ("1,1,1", FilesPerLevel(1));
+    Compact(1, "r", "z");
+    ASSERT_EQ("1,1,1", FilesPerLevel(1));
+    Compact(1, "p1", "p9");
+    ASSERT_EQ("0,0,1", FilesPerLevel(1));
+    MakeTables(3, "c", "e", 1);
+    ASSERT_EQ("1,1,2", FilesPerLevel(1));
+    Compact(1, "b", "f");
+    ASSERT_EQ("0,0,2", FilesPerLevel(1));
+    MakeTables(1, "a", "z", 1);
+    ASSERT_EQ("0,1,2", FilesPerLevel(1));
+    db_->CompactRange(handles_[1], nullptr, nullptr);
+    ASSERT_EQ("0,0,1", FilesPerLevel(1));
+    if (iter == 0) {
@@ -2940 +3142 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.env = env_;
+      options.num_levels = 3;
@@ -2942,3 +3143,0 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
@@ -2946,11 +3145 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+      CreateAndReopenWithCF({"pikachu"}, &options);
@@ -2958,5 +3147,73 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
+  }
+}
+TEST(DBTest, DBOpen_Options) {
+  std::string dbname = test::TmpDir() + "/db_options_test";
+  ASSERT_OK(DestroyDB(dbname, Options()));
+  DB* db = nullptr;
+  Options opts;
+  opts.create_if_missing = false;
+  Status s = DB::Open(opts, dbname, &db);
+  ASSERT_TRUE(strstr(s.ToString().c_str(), "does not exist") != nullptr);
+  ASSERT_TRUE(db == nullptr);
+  opts.create_if_missing = true;
+  s = DB::Open(opts, dbname, &db);
+  ASSERT_OK(s);
+  ASSERT_TRUE(db != nullptr);
+  delete db;
+  db = nullptr;
+  opts.create_if_missing = false;
+  opts.error_if_exists = true;
+  s = DB::Open(opts, dbname, &db);
+  ASSERT_TRUE(strstr(s.ToString().c_str(), "exists") != nullptr);
+  ASSERT_TRUE(db == nullptr);
+  opts.create_if_missing = true;
+  opts.error_if_exists = false;
+  s = DB::Open(opts, dbname, &db);
+  ASSERT_OK(s);
+  ASSERT_TRUE(db != nullptr);
+  delete db;
+  db = nullptr;
+}
+TEST(DBTest, DBOpen_Change_NumLevels) {
+  Options opts;
+  opts.create_if_missing = true;
+  DestroyAndReopen(&opts);
+  ASSERT_TRUE(db_ != nullptr);
+  CreateAndReopenWithCF({"pikachu"}, &opts);
+  ASSERT_OK(Put(1, "a", "123"));
+  ASSERT_OK(Put(1, "b", "234"));
+  db_->CompactRange(handles_[1], nullptr, nullptr);
+  Close();
+  opts.create_if_missing = false;
+  opts.num_levels = 2;
+  Status s = TryReopenWithColumnFamilies({"default", "pikachu"}, &opts);
+  ASSERT_TRUE(strstr(s.ToString().c_str(), "Invalid argument") != nullptr);
+  ASSERT_TRUE(db_ == nullptr);
+}
+TEST(DBTest, DestroyDBMetaDatabase) {
+  std::string dbname = test::TmpDir() + "/db_meta";
+  std::string metadbname = MetaDatabaseName(dbname, 0);
+  std::string metametadbname = MetaDatabaseName(metadbname, 0);
+  ASSERT_OK(DestroyDB(metametadbname, Options()));
+  ASSERT_OK(DestroyDB(metadbname, Options()));
+  ASSERT_OK(DestroyDB(dbname, Options()));
+  Options opts;
+  opts.create_if_missing = true;
+  DB* db = nullptr;
+  ASSERT_OK(DB::Open(opts, dbname, &db));
+  delete db;
+  db = nullptr;
+  ASSERT_OK(DB::Open(opts, metadbname, &db));
+  delete db;
+  db = nullptr;
+  ASSERT_OK(DB::Open(opts, metametadbname, &db));
+  delete db;
+  db = nullptr;
+  ASSERT_OK(DestroyDB(dbname, Options()));
+  opts.create_if_missing = false;
+  ASSERT_TRUE(!(DB::Open(opts, dbname, &db)).ok());
+  ASSERT_TRUE(!(DB::Open(opts, metadbname, &db)).ok());
+  ASSERT_TRUE(!(DB::Open(opts, metametadbname, &db)).ok());
+}
+TEST(DBTest, NoSpace) {
+  do {
@@ -2965,16 +3222,16 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+    Reopen(&options);
+    ASSERT_OK(Put("foo", "v1"));
+    ASSERT_EQ("v1", Get("foo"));
+    Compact("a", "z");
+    const int num_files = CountFiles();
+    env_->no_space_.Release_Store(env_);
+    env_->sleep_counter_.Reset();
+    for (int i = 0; i < 5; i++) {
+      for (int level = 0; level < dbfull()->NumberLevels()-1; level++) {
+        dbfull()->TEST_CompactRange(level, nullptr, nullptr);
+      }
+    }
+    env_->no_space_.Release_Store(nullptr);
+    ASSERT_LT(CountFiles(), num_files + 3);
+    ASSERT_GE(env_->sleep_counter_.Read(), 5);
+  } while (ChangeCompactOptions());
@@ -2982,5 +3239,2 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
+TEST(DBTest, NonWritableFileSystem) {
+  do {
@@ -2987,0 +3242 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
+    options.write_buffer_size = 1000;
@@ -2989,16 +3244,9 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+    Reopen(&options);
+    ASSERT_OK(Put("foo", "v1"));
+    env_->non_writable_.Release_Store(env_);
+    std::string big(100000, 'x');
+    int errors = 0;
+    for (int i = 0; i < 20; i++) {
+      if (!Put("foo", big).ok()) {
+        errors++;
+        env_->SleepForMicroseconds(100000);
@@ -3006,5 +3254,10 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
+    }
+    ASSERT_GT(errors, 0);
+    env_->non_writable_.Release_Store(nullptr);
+  } while (ChangeCompactOptions());
+}
+TEST(DBTest, ManifestWriteError) {
+  for (int iter = 0; iter < 2; iter++) {
+    port::AtomicPointer* error_type = (iter == 0)
+        ? &env_->manifest_sync_error_
+        : &env_->manifest_write_error_;
@@ -3014,3 +3267 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
+    options.error_if_exists = false;
@@ -3018,17 +3269,15 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
-}
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
+    ASSERT_OK(Put("foo", "bar"));
+    ASSERT_EQ("bar", Get("foo"));
+    Flush();
+    ASSERT_EQ("bar", Get("foo"));
+    const int last = dbfull()->MaxMemCompactionLevel();
+    ASSERT_EQ(NumTableFilesAtLevel(last), 1);
+    error_type->Release_Store(env_);
+    dbfull()->TEST_CompactRange(last, nullptr, nullptr);
+    ASSERT_EQ("bar", Get("foo"));
+    error_type->Release_Store(nullptr);
+    Reopen(&options);
+    ASSERT_EQ("bar", Get("foo"));
+  }
+}
+TEST(DBTest, PutFailsParanoid) {
@@ -3038,3 +3287,2 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
+  options.error_if_exists = false;
+  options.paranoid_checks = true;
@@ -3042,11 +3290,35 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+  CreateAndReopenWithCF({"pikachu"}, &options);
+  Status s;
+  ASSERT_OK(Put(1, "foo", "bar"));
+  ASSERT_OK(Put(1, "foo1", "bar1"));
+  env_->log_write_error_.Release_Store(env_);
+  s = Put(1, "foo2", "bar2");
+  ASSERT_TRUE(!s.ok());
+  env_->log_write_error_.Release_Store(nullptr);
+  s = Put(1, "foo3", "bar3");
+  ASSERT_TRUE(!s.ok());
+  ASSERT_EQ("bar", Get(1, "foo"));
+  options.paranoid_checks = false;
+  DestroyAndReopen(&options);
+  CreateAndReopenWithCF({"pikachu"}, &options);
+  ASSERT_OK(Put(1, "foo", "bar"));
+  ASSERT_OK(Put(1, "foo1", "bar1"));
+  env_->log_write_error_.Release_Store(env_);
+  s = Put(1, "foo2", "bar2");
+  ASSERT_TRUE(!s.ok());
+  env_->log_write_error_.Release_Store(nullptr);
+  s = Put(1, "foo3", "bar3");
+  ASSERT_TRUE(s.ok());
+}
+TEST(DBTest, FilesDeletedAfterCompaction) {
+  do {
+    CreateAndReopenWithCF({"pikachu"});
+    ASSERT_OK(Put(1, "foo", "v2"));
+    Compact(1, "a", "z");
+    const int num_files = CountLiveFiles();
+    for (int i = 0; i < 10; i++) {
+      ASSERT_OK(Put(1, "foo", "v2"));
+      Compact(1, "a", "z");
+    }
+    ASSERT_EQ(CountLiveFiles(), num_files);
+  } while (ChangeCompactOptions());
@@ -3054,5 +3326,3 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
+TEST(DBTest, BloomFilter) {
+  do {
+    env_->count_random_reads_ = true;
@@ -3061,16 +3331,32 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+    options.no_block_cache = true;
+    options.filter_policy = NewBloomFilterPolicy(10);
+    CreateAndReopenWithCF({"pikachu"}, &options);
+    const int N = 10000;
+    for (int i = 0; i < N; i++) {
+      ASSERT_OK(Put(1, Key(i), Key(i)));
+    }
+    Compact(1, "a", "z");
+    for (int i = 0; i < N; i += 100) {
+      ASSERT_OK(Put(1, Key(i), Key(i)));
+    }
+    Flush(1);
+    env_->delay_sstable_sync_.Release_Store(env_);
+    env_->random_read_counter_.Reset();
+    for (int i = 0; i < N; i++) {
+      ASSERT_EQ(Key(i), Get(1, Key(i)));
+    }
+    int reads = env_->random_read_counter_.Read();
+    fprintf(stderr, "%d present => %d reads\n", N, reads);
+    ASSERT_GE(reads, N);
+    ASSERT_LE(reads, N + 2*N/100);
+    env_->random_read_counter_.Reset();
+    for (int i = 0; i < N; i++) {
+      ASSERT_EQ("NOT_FOUND", Get(1, Key(i) + ".missing"));
+    }
+    reads = env_->random_read_counter_.Read();
+    fprintf(stderr, "%d missing => %d reads\n", N, reads);
+    ASSERT_LE(reads, 3*N/100);
+    env_->delay_sstable_sync_.Release_Store(nullptr);
+    Close();
+    delete options.filter_policy;
+  } while (ChangeCompactOptions());
@@ -3078,5 +3364,2 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
+TEST(DBTest, SnapshotFiles) {
+  do {
@@ -3084,17 +3367,8 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+    options.write_buffer_size = 100000000;
+    CreateAndReopenWithCF({"pikachu"}, &options);
+    Random rnd(301);
+    ASSERT_EQ(NumTableFilesAtLevel(0, 1), 0);
+    std::vector<std::string> values;
+    for (int i = 0; i < 80; i++) {
+      values.push_back(RandomString(&rnd, 100000));
+      ASSERT_OK(Put((i < 40), Key(i), values[i]));
@@ -3102,5 +3376,80 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
+    ASSERT_EQ(NumTableFilesAtLevel(0, 1), 0);
+    uint64_t manifest_number = 0;
+    uint64_t manifest_size = 0;
+    std::vector<std::string> files;
+    dbfull()->DisableFileDeletions();
+    dbfull()->GetLiveFiles(files, &manifest_size);
+    ASSERT_EQ(files.size(), 4U);
+    uint64_t number = 0;
+    FileType type;
+    std::string snapdir = dbname_ + ".snapdir/";
+    std::string mkdir = "mkdir -p " + snapdir;
+    ASSERT_EQ(system(mkdir.c_str()), 0);
+    for (unsigned int i = 0; i < files.size(); i++) {
+      ASSERT_EQ(files[i][0], '/');
+      std::string src = dbname_ + files[i];
+      std::string dest = snapdir + files[i];
+      uint64_t size;
+      ASSERT_OK(env_->GetFileSize(src, &size));
+      if (ParseFileName(files[i].substr(1), &number, &type)) {
+        if (type == kDescriptorFile) {
+          if (number > manifest_number) {
+            manifest_number = number;
+            ASSERT_GE(size, manifest_size);
+            size = manifest_size;
+          }
+        }
+      }
+      CopyFile(src, dest, size);
+    }
+    dbfull()->DisableFileDeletions();
+    std::vector<std::string> extras;
+    for (unsigned int i = 0; i < 1; i++) {
+      extras.push_back(RandomString(&rnd, 100000));
+      ASSERT_OK(Put(0, Key(i), extras[i]));
+    }
+    std::vector<ColumnFamilyDescriptor> column_families;
+    column_families.emplace_back("default", ColumnFamilyOptions());
+    column_families.emplace_back("pikachu", ColumnFamilyOptions());
+    std::vector<ColumnFamilyHandle*> cf_handles;
+    DB* snapdb;
+    DBOptions opts;
+    opts.create_if_missing = false;
+    Status stat =
+        DB::Open(opts, snapdir, column_families, &cf_handles, &snapdb);
+    ASSERT_OK(stat);
+    ReadOptions roptions;
+    std::string val;
+    for (unsigned int i = 0; i < 80; i++) {
+      stat = snapdb->Get(roptions, cf_handles[i < 40], Key(i), &val);
+      ASSERT_EQ(values[i].compare(val), 0);
+    }
+    for (auto cfh : cf_handles) {
+      delete cfh;
+    }
+    delete snapdb;
+    uint64_t new_manifest_number = 0;
+    uint64_t new_manifest_size = 0;
+    std::vector<std::string> newfiles;
+    dbfull()->DisableFileDeletions();
+    dbfull()->GetLiveFiles(newfiles, &new_manifest_size);
+    for (unsigned int i = 0; i < newfiles.size(); i++) {
+      std::string src = dbname_ + "/" + newfiles[i];
+      if (ParseFileName(newfiles[i].substr(1), &number, &type)) {
+        if (type == kDescriptorFile) {
+          if (number > new_manifest_number) {
+            uint64_t size;
+            new_manifest_number = number;
+            ASSERT_OK(env_->GetFileSize(src, &size));
+            ASSERT_GE(size, new_manifest_size);
+          }
+        }
+      }
+    }
+    ASSERT_EQ(manifest_number, new_manifest_number);
+    ASSERT_GT(new_manifest_size, manifest_size);
+    dbfull()->DisableFileDeletions();
+  } while (ChangeCompactOptions());
+}
+TEST(DBTest, CompactOnFlush) {
+  do {
@@ -3108,2 +3457 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.env = env_;
-  options.create_if_missing = true;
+    options.purge_redundant_kvs_while_flush = true;
@@ -3111,14 +3459,54 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+    CreateAndReopenWithCF({"pikachu"}, &options);
+    Put(1, "foo", "v1");
+    ASSERT_OK(Flush(1));
+    ASSERT_EQ(AllEntriesFor("foo", 1), "[ v1 ]");
+    Put(1, "a", "begin");
+    Put(1, "z", "end");
+    Flush(1);
+    Delete(1, "foo");
+    Put(1, "foo", "v2");
+    ASSERT_EQ(AllEntriesFor("foo", 1), "[ v2, DEL, v1 ]");
+    ASSERT_OK(Flush(1));
+    ASSERT_EQ(AllEntriesFor("foo", 1), "[ v2, v1 ]");
+    dbfull()->CompactRange(handles_[1], nullptr, nullptr);
+    ASSERT_EQ(AllEntriesFor("foo", 1), "[ v2 ]");
+    Delete(1, "foo");
+    Delete(1, "foo");
+    ASSERT_EQ(AllEntriesFor("foo", 1), "[ DEL, DEL, v2 ]");
+    ASSERT_OK(Flush(1));
+    ASSERT_EQ(AllEntriesFor("foo", 1), "[ DEL, v2 ]");
+    dbfull()->CompactRange(handles_[1], nullptr, nullptr);
+    ASSERT_EQ(AllEntriesFor("foo", 1), "[ ]");
+    Put(1, "foo", "v3");
+    Delete(1, "foo");
+    ASSERT_EQ(AllEntriesFor("foo", 1), "[ DEL, v3 ]");
+    ASSERT_OK(Flush(1));
+    ASSERT_EQ(AllEntriesFor("foo", 1), "[ DEL ]");
+    dbfull()->CompactRange(handles_[1], nullptr, nullptr);
+    ASSERT_EQ(AllEntriesFor("foo", 1), "[ ]");
+    Put(1, "foo", "v4");
+    Put(1, "foo", "v5");
+    ASSERT_EQ(AllEntriesFor("foo", 1), "[ v5, v4 ]");
+    ASSERT_OK(Flush(1));
+    ASSERT_EQ(AllEntriesFor("foo", 1), "[ v5 ]");
+    dbfull()->CompactRange(handles_[1], nullptr, nullptr);
+    ASSERT_EQ(AllEntriesFor("foo", 1), "[ v5 ]");
+    Delete(1, "foo");
+    dbfull()->CompactRange(handles_[1], nullptr, nullptr);
+    ASSERT_EQ(AllEntriesFor("foo", 1), "[ ]");
+    Put(1, "foo", "v6");
+    const Snapshot* snapshot = db_->GetSnapshot();
+    Put(1, "foo", "v7");
+    ASSERT_OK(Flush(1));
+    ASSERT_EQ(AllEntriesFor("foo", 1), "[ v7, v6 ]");
+    db_->ReleaseSnapshot(snapshot);
+    Delete(1, "foo");
+    dbfull()->CompactRange(handles_[1], nullptr, nullptr);
+    ASSERT_EQ(AllEntriesFor("foo", 1), "[ ]");
+    const Snapshot* snapshot1 = db_->GetSnapshot();
+    Put(1, "foo", "v8");
+    Put(1, "foo", "v9");
+    ASSERT_OK(Flush(1));
+    ASSERT_EQ(AllEntriesFor("foo", 1), "[ v9 ]");
+    db_->ReleaseSnapshot(snapshot1);
+  } while (ChangeCompactOptions());
@@ -3141,5 +3529,2 @@ std::vector<std::uint64_t> ListLogFiles(Env* env, const std::string& path) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
+TEST(DBTest, WALArchivalTtl) {
+  do {
@@ -3147 +3531,0 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.env = env_;
@@ -3149,15 +3533,24 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+    options.WAL_ttl_seconds = 1000;
+    DestroyAndReopen(&options);
+    std::string archiveDir = ArchivalDirectory(dbname_);
+    for (int i = 0; i < 10; ++i) {
+      for (int j = 0; j < 10; ++j) {
+        ASSERT_OK(Put(Key(10 * i + j), DummyString(1024)));
+      }
+      std::vector<uint64_t> log_files = ListLogFiles(env_, dbname_);
+      options.create_if_missing = false;
+      Reopen(&options);
+      std::vector<uint64_t> logs = ListLogFiles(env_, archiveDir);
+      std::set<uint64_t> archivedFiles(logs.begin(), logs.end());
+      for (auto& log : log_files) {
+        ASSERT_TRUE(archivedFiles.find(log) != archivedFiles.end());
+      }
+    }
+    std::vector<uint64_t> log_files = ListLogFiles(env_, archiveDir);
+    ASSERT_TRUE(log_files.size() > 0);
+    options.WAL_ttl_seconds = 1;
+    env_->SleepForMicroseconds(2 * 1000 * 1000);
+    Reopen(&options);
+    log_files = ListLogFiles(env_, archiveDir);
+    ASSERT_TRUE(log_files.empty());
+  } while (ChangeCompactOptions());
@@ -3181,5 +3574,2 @@ uint64_t GetLogDirSize(std::string dir_path, SpecialEnv* env) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
+TEST(DBTest, WALArchivalSizeLimit) {
+  do {
@@ -3187 +3576,0 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.env = env_;
@@ -3189,3 +3578,2 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
+    options.WAL_ttl_seconds = 0;
+    options.WAL_size_limit_MB = 1000;
@@ -3193,11 +3581,20 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+    for (int i = 0; i < 128 * 128; ++i) {
+      ASSERT_OK(Put(Key(i), DummyString(1024)));
+    }
+    Reopen(&options);
+    std::string archive_dir = ArchivalDirectory(dbname_);
+    std::vector<std::uint64_t> log_files = ListLogFiles(env_, archive_dir);
+    ASSERT_TRUE(log_files.size() > 2);
+    options.WAL_size_limit_MB = 8;
+    Reopen(&options);
+    dbfull()->TEST_PurgeObsoleteteWAL();
+    uint64_t archive_size = GetLogDirSize(archive_dir, env_);
+    ASSERT_TRUE(archive_size <= options.WAL_size_limit_MB * 1024 * 1024);
+    options.WAL_ttl_seconds = 1;
+    dbfull()->TEST_SetDefaultTimeToCheck(1);
+    env_->SleepForMicroseconds(2 * 1000 * 1000);
+    Reopen(&options);
+    dbfull()->TEST_PurgeObsoleteteWAL();
+    log_files = ListLogFiles(env_, archive_dir);
+    ASSERT_TRUE(log_files.empty());
+  } while (ChangeCompactOptions());
@@ -3252,11 +3651,3 @@ TEST(DBTest, TransactionLogIterator) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
-  Options options = CurrentOptions();
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
+TEST(DBTest, TransactionLogIteratorMoveOverZeroFiles) {
+  do {
+    Options options = OptionsForLogIterTest();
@@ -3264,11 +3655,8 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+    CreateAndReopenWithCF({"pikachu"}, &options);
+    Put(1, "key1", DummyString(1024));
+    ReopenWithColumnFamilies({"default", "pikachu"}, &options);
+    ReopenWithColumnFamilies({"default", "pikachu"}, &options);
+    Put(1, "key2", DummyString(1024));
+    auto iter = OpenTransactionLogIter(0);
+    ExpectRecords(2, iter);
+  } while (ChangeCompactOptions());
@@ -3295,11 +3683,3 @@ TEST(DBTest, TransactionLogIteratorStallAtLastRecord) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
-  Options options = CurrentOptions();
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
+TEST(DBTest, TransactionLogIteratorJustEmptyFile) {
+  do {
+    Options options = OptionsForLogIterTest();
@@ -3307,10 +3687,2 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
+    unique_ptr<TransactionLogIterator> iter;
+    Status status = dbfull()->GetUpdatesSince(0, &iter);
@@ -3317,0 +3690 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
+  } while (ChangeCompactOptions());
@@ -3319,11 +3692,3 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
-  Options options = CurrentOptions();
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
+TEST(DBTest, TransactionLogIteratorCheckAfterRestart) {
+  do {
+    Options options = OptionsForLogIterTest();
@@ -3331,11 +3696,7 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+    Put("key1", DummyString(1024));
+    Put("key2", DummyString(1023));
+    dbfull()->Flush(FlushOptions());
+    Reopen(&options);
+    auto iter = OpenTransactionLogIter(0);
+    ExpectRecords(2, iter);
+  } while (ChangeCompactOptions());
@@ -3343,11 +3704,3 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
-  Options options = CurrentOptions();
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
+TEST(DBTest, TransactionLogIteratorCorruptedLog) {
+  do {
+    Options options = OptionsForLogIterTest();
@@ -3355,11 +3708,18 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+    for (int i = 0; i < 1024; i++) {
+      Put("key"+std::to_string(i), DummyString(10));
+    }
+    dbfull()->Flush(FlushOptions());
+    rocksdb::VectorLogPtr wal_files;
+    ASSERT_OK(dbfull()->GetSortedWalFiles(wal_files));
+    const auto logfilePath = dbname_ + "/" + wal_files.front()->PathName();
+    ASSERT_EQ(
+      0,
+      truncate(logfilePath.c_str(), wal_files.front()->SizeFileBytes() / 2));
+    Put("key1025", DummyString(10));
+    auto iter = OpenTransactionLogIter(0);
+    int count;
+    int last_sequence_read = ReadRecords(iter, count);
+    ASSERT_LT(last_sequence_read, 1025);
+    auto iter2 = OpenTransactionLogIter(last_sequence_read + 1);
+    ExpectRecords(1, iter2);
+  } while (ChangeCompactOptions());
@@ -3367,11 +3727,3 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
-  Options options = CurrentOptions();
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
+TEST(DBTest, TransactionLogIteratorBatchOperations) {
+  do {
+    Options options = OptionsForLogIterTest();
@@ -3379,11 +3731,14 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+    CreateAndReopenWithCF({"pikachu"}, &options);
+    WriteBatch batch;
+    batch.Put(1, "key1", DummyString(1024));
+    batch.Put(0, "key2", DummyString(1024));
+    batch.Put(1, "key3", DummyString(1024));
+    batch.Delete(0, "key2");
+    dbfull()->Write(WriteOptions(), &batch);
+    Flush(1);
+    Flush(0);
+    ReopenWithColumnFamilies({"default", "pikachu"}, &options);
+    Put(1, "key4", DummyString(1024));
+    auto iter = OpenTransactionLogIter(3);
+    ExpectRecords(2, iter);
+  } while (ChangeCompactOptions());
@@ -3391,11 +3746,2 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
-  Options options = CurrentOptions();
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
+TEST(DBTest, TransactionLogIteratorBlobs) {
+  Options options = OptionsForLogIterTest();
@@ -3403,11 +3749,11 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+  CreateAndReopenWithCF({"pikachu"}, &options);
+  {
+    WriteBatch batch;
+    batch.Put(1, "key1", DummyString(1024));
+    batch.Put(0, "key2", DummyString(1024));
+    batch.PutLogData(Slice("blob1"));
+    batch.Put(1, "key3", DummyString(1024));
+    batch.PutLogData(Slice("blob2"));
+    batch.Delete(0, "key2");
+    dbfull()->Write(WriteOptions(), &batch);
+    ReopenWithColumnFamilies({"default", "pikachu"}, &options);
@@ -3415,5 +3761,31 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
+  auto res = OpenTransactionLogIter(0)->GetBatch();
+  struct Handler : public WriteBatch::Handler {
+    std::string seen;
+    virtual void PutCF(uint32_t cf, const Slice& key, const Slice& value) {
+      seen += "Put(" + std::to_string(cf) + ", " + key.ToString() + ", " +
+              std::to_string(value.size()) + ")";
+    }
+    virtual void MergeCF(uint32_t cf, const Slice& key, const Slice& value) {
+      seen += "Merge(" + std::to_string(cf) + ", " + key.ToString() + ", " +
+              std::to_string(value.size()) + ")";
+    }
+    virtual void LogData(const Slice& blob) {
+      seen += "LogData(" + blob.ToString() + ")";
+    }
+    virtual void DeleteCF(uint32_t cf, const Slice& key) {
+      seen += "Delete(" + std::to_string(cf) + ", " + key.ToString() + ")";
+    }
+  } handler;
+  res.writeBatchPtr->Iterate(&handler);
+  ASSERT_EQ(
+      "Put(1, key1, 1024)"
+      "Put(0, key2, 1024)"
+      "LogData(blob1)"
+      "Put(1, key3, 1024)"
+      "LogData(blob2)"
+      "Delete(0, key2)",
+      handler.seen);
+}
+TEST(DBTest, ReadCompaction) {
+  std::string value(4096, '4');
+  {
@@ -3421 +3792,0 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.env = env_;
@@ -3423,15 +3794,38 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+    options.max_open_files = 20;
+    options.target_file_size_base = 512;
+    options.write_buffer_size = 64 * 1024;
+    options.filter_policy = nullptr;
+    options.block_size = 4096;
+    options.no_block_cache = true;
+    CreateAndReopenWithCF({"pikachu"}, &options);
+    ASSERT_EQ(NumTableFilesAtLevel(0, 1), 0);
+    std::vector<std::string> values;
+    for (int i = 0; i < 2000; i++) {
+      ASSERT_OK(Put(1, Key(i), value));
+    }
+    Flush(1);
+    dbfull()->TEST_CompactRange(0, nullptr, nullptr, handles_[1]);
+    dbfull()->TEST_CompactRange(1, nullptr, nullptr, handles_[1]);
+    ASSERT_EQ(NumTableFilesAtLevel(0, 1), 0);
+    ASSERT_EQ(NumTableFilesAtLevel(1, 1), 0);
+    for (int i = 0; i < 2000; i = i + 16) {
+      ASSERT_OK(Put(1, Key(i), value));
+    }
+    Flush(1);
+    dbfull()->TEST_WaitForCompact();
+    int l1 = NumTableFilesAtLevel(0, 1);
+    int l2 = NumTableFilesAtLevel(1, 1);
+    int l3 = NumTableFilesAtLevel(3, 1);
+    ASSERT_NE(NumTableFilesAtLevel(0, 1), 0);
+    ASSERT_NE(NumTableFilesAtLevel(1, 1), 0);
+    ASSERT_NE(NumTableFilesAtLevel(2, 1), 0);
+    for (int j = 0; j < 100; j++) {
+      for (int i = 0; i < 2000; i++) {
+        Get(1, Key(i));
+      }
+    }
+    env_->SleepForMicroseconds(1000000);
+    ASSERT_TRUE(NumTableFilesAtLevel(0, 1) < l1 ||
+                NumTableFilesAtLevel(1, 1) < l2 ||
+                NumTableFilesAtLevel(2, 1) < l3);
+  }
@@ -3439,0 +3834 @@ namespace {
+static const int kColumnFamilies = 10;
@@ -3446 +3841 @@ struct MTState {
-  port::AtomicPointer thread_done[kNumThreads];
+  port::AtomicPointer counter[kNumThreads];
@@ -3514,23 +3909,28 @@ static void MTThreadBody(void* arg) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
-  Options options = CurrentOptions();
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+TEST(DBTest, MultiThreaded) {
+  do {
+    std::vector<std::string> cfs;
+    for (int i = 1; i < kColumnFamilies; ++i) {
+      cfs.push_back(std::to_string(i));
+    }
+    CreateAndReopenWithCF(cfs);
+    MTState mt;
+    mt.test = this;
+    mt.stop.Release_Store(0);
+    for (int id = 0; id < kNumThreads; id++) {
+      mt.counter[id].Release_Store(0);
+      mt.thread_done[id].Release_Store(0);
+    }
+    MTThread thread[kNumThreads];
+    for (int id = 0; id < kNumThreads; id++) {
+      thread[id].state = &mt;
+      thread[id].id = id;
+      env_->StartThread(MTThreadBody, &thread[id]);
+    }
+    env_->SleepForMicroseconds(kTestSeconds * 1000000);
+    mt.stop.Release_Store(&mt);
+    for (int id = 0; id < kNumThreads; id++) {
+      while (mt.thread_done[id].Acquire_Load() == nullptr) {
+        env_->SleepForMicroseconds(100000);
+      }
+    }
+  } while (ChangeOptions());
@@ -3551,30 +3951,41 @@ static void GCThreadBody(void* arg) {
-  for (int i = 0; i < kGCNumKeys; ++i) {
-    std::string kv(std::to_string(i + id * kGCNumKeys));
-    ASSERT_OK(db->Put(wo, kv, kv));
-  }
-  t->done = true;
-}
-}
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
-  Options options = CurrentOptions();
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+  for (int i = 0; i < kGCNumKeys; ++i) {
+    std::string kv(std::to_string(i + id * kGCNumKeys));
+    ASSERT_OK(db->Put(wo, kv, kv));
+  }
+  t->done = true;
+}
+}
+TEST(DBTest, GroupCommitTest) {
+  do {
+    Options options = CurrentOptions();
+    options.statistics = rocksdb::CreateDBStatistics();
+    Reopen(&options);
+    GCThread thread[kGCNumThreads];
+    for (int id = 0; id < kGCNumThreads; id++) {
+      thread[id].id = id;
+      thread[id].db = db_;
+      thread[id].done = false;
+      env_->StartThread(GCThreadBody, &thread[id]);
+    }
+    for (int id = 0; id < kGCNumThreads; id++) {
+      while (thread[id].done == false) {
+        env_->SleepForMicroseconds(100000);
+      }
+    }
+    ASSERT_GT(TestGetTickerCount(options, WRITE_DONE_BY_OTHER), 0);
+    std::vector<std::string> expected_db;
+    for (int i = 0; i < kGCNumThreads * kGCNumKeys; ++i) {
+      expected_db.push_back(std::to_string(i));
+    }
+    sort(expected_db.begin(), expected_db.end());
+    Iterator* itr = db_->NewIterator(ReadOptions());
+    itr->SeekToFirst();
+    for (auto x : expected_db) {
+      ASSERT_TRUE(itr->Valid());
+      ASSERT_EQ(itr->key().ToString(), x);
+      ASSERT_EQ(itr->value().ToString(), x);
+      itr->Next();
+    }
+    ASSERT_TRUE(!itr->Valid());
+    delete itr;
+  } while (ChangeOptions());
@@ -3627 +4037,0 @@ class ModelDB : public DB {
-  using DB::KeyMayExist;
@@ -3630,0 +4041 @@ class ModelDB : public DB {
+  using DB::KeyMayExist;
@@ -3638,0 +4050,19 @@ class ModelDB : public DB {
+  using DB::NewIterator;
+  virtual Iterator* NewIterator(const ReadOptions& options,
+                                ColumnFamilyHandle* column_family) {
+    if (options.snapshot == nullptr) {
+      KVMap* saved = new KVMap;
+      *saved = map_;
+      return new ModelIter(saved, true);
+    } else {
+      const KVMap* snapshot_state =
+          &(reinterpret_cast<const ModelSnapshot*>(options.snapshot)->map_);
+      return new ModelIter(snapshot_state, false);
+    }
+  }
+  virtual Status NewIterators(
+      const ReadOptions& options,
+      const std::vector<ColumnFamilyHandle*>& column_family,
+      std::vector<Iterator*>* iterators) {
+    return Status::NotSupported("Not supported yet");
+  }
@@ -3750,20 +4198,0 @@ class ModelDB : public DB {
- public:
-  using DB::NewIterator;
-  virtual Iterator* NewIterator(const ReadOptions& options,
-                                ColumnFamilyHandle* column_family) {
-    if (options.snapshot == nullptr) {
-      KVMap* saved = new KVMap;
-      *saved = map_;
-      return new ModelIter(saved, true);
-    } else {
-      const KVMap* snapshot_state =
-          &(reinterpret_cast<const ModelSnapshot*>(options.snapshot)->map_);
-      return new ModelIter(snapshot_state, false);
-    }
-  }
-  virtual Status NewIterators(
-      const ReadOptions& options,
-      const std::vector<ColumnFamilyHandle*>& column_family,
-      std::vector<Iterator*>* iterators) {
-    return Status::NotSupported("Not supported yet");
-  }
@@ -3819,23 +4253,35 @@ static bool CompareIterators(int step, DB* model, DB* db,
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
-  Options options = CurrentOptions();
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+TEST(DBTest, Randomized) {
+  Random rnd(test::RandomSeed());
+  do {
+    ModelDB model(CurrentOptions());
+    const int N = 10000;
+    const Snapshot* model_snap = nullptr;
+    const Snapshot* db_snap = nullptr;
+    std::string k, v;
+    for (int step = 0; step < N; step++) {
+      int p = rnd.Uniform(100);
+      int minimum = 0;
+      if (option_config_ == kHashSkipList ||
+          option_config_ == kHashLinkList ||
+          option_config_ == kPlainTableFirstBytePrefix) {
+        minimum = 1;
+      }
+      if (p < 45) {
+        k = RandomKey(&rnd, minimum);
+        v = RandomString(&rnd,
+                         rnd.OneIn(20)
+                         ? 100 + rnd.Uniform(100)
+                         : rnd.Uniform(8));
+        ASSERT_OK(model.Put(WriteOptions(), k, v));
+        ASSERT_OK(db_->Put(WriteOptions(), k, v));
+      } else if (p < 90) {
+        k = RandomKey(&rnd, minimum);
+        ASSERT_OK(model.Delete(WriteOptions(), k));
+        ASSERT_OK(db_->Delete(WriteOptions(), k));
+      } else {
+        WriteBatch b;
+        const int num = rnd.Uniform(8);
+        for (int i = 0; i < num; i++) {
+          if (i == 0 || !rnd.OneIn(10)) {
+            k = RandomKey(&rnd, minimum);
+          } else {
@@ -3843,23 +4289,5 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
-  Options options = CurrentOptions();
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+          if (rnd.OneIn(2)) {
+            v = RandomString(&rnd, rnd.Uniform(10));
+            b.Put(k, v);
+          } else {
+            b.Delete(k);
@@ -3867,23 +4295,67 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
-  Options options = CurrentOptions();
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+        }
+        ASSERT_OK(model.Write(WriteOptions(), &b));
+        ASSERT_OK(db_->Write(WriteOptions(), &b));
+      }
+      if ((step % 100) == 0) {
+        ASSERT_TRUE(CompareIterators(step, &model, db_, nullptr, nullptr));
+        ASSERT_TRUE(CompareIterators(step, &model, db_, model_snap, db_snap));
+        if (model_snap != nullptr) model.ReleaseSnapshot(model_snap);
+        if (db_snap != nullptr) db_->ReleaseSnapshot(db_snap);
+        Reopen();
+        ASSERT_TRUE(CompareIterators(step, &model, db_, nullptr, nullptr));
+        model_snap = model.GetSnapshot();
+        db_snap = db_->GetSnapshot();
+      }
+    }
+    if (model_snap != nullptr) model.ReleaseSnapshot(model_snap);
+    if (db_snap != nullptr) db_->ReleaseSnapshot(db_snap);
+  } while (ChangeOptions(kSkipDeletesFilterFirst));
+}
+TEST(DBTest, MultiGetSimple) {
+  do {
+    CreateAndReopenWithCF({"pikachu"});
+    ASSERT_OK(Put(1, "k1", "v1"));
+    ASSERT_OK(Put(1, "k2", "v2"));
+    ASSERT_OK(Put(1, "k3", "v3"));
+    ASSERT_OK(Put(1, "k4", "v4"));
+    ASSERT_OK(Delete(1, "k4"));
+    ASSERT_OK(Put(1, "k5", "v5"));
+    ASSERT_OK(Delete(1, "no_key"));
+    std::vector<Slice> keys({"k1", "k2", "k3", "k4", "k5", "no_key"});
+    std::vector<std::string> values(20, "Temporary data to be overwritten");
+    std::vector<ColumnFamilyHandle*> cfs(keys.size(), handles_[1]);
+    std::vector<Status> s = db_->MultiGet(ReadOptions(), cfs, keys, &values);
+    ASSERT_EQ(values.size(), keys.size());
+    ASSERT_EQ(values[0], "v1");
+    ASSERT_EQ(values[1], "v2");
+    ASSERT_EQ(values[2], "v3");
+    ASSERT_EQ(values[4], "v5");
+    ASSERT_OK(s[0]);
+    ASSERT_OK(s[1]);
+    ASSERT_OK(s[2]);
+    ASSERT_TRUE(s[3].IsNotFound());
+    ASSERT_OK(s[4]);
+    ASSERT_TRUE(s[5].IsNotFound());
+  } while (ChangeCompactOptions());
+}
+TEST(DBTest, MultiGetEmpty) {
+  do {
+    CreateAndReopenWithCF({"pikachu"});
+    std::vector<Slice> keys;
+    std::vector<std::string> values;
+    std::vector<ColumnFamilyHandle*> cfs;
+    std::vector<Status> s = db_->MultiGet(ReadOptions(), cfs, keys, &values);
+    ASSERT_EQ(s.size(), 0U);
+    DestroyAndReopen();
+    CreateAndReopenWithCF({"pikachu"});
+    s = db_->MultiGet(ReadOptions(), cfs, keys, &values);
+    ASSERT_EQ(s.size(), 0U);
+    keys.resize(2);
+    keys[0] = "a";
+    keys[1] = "b";
+    cfs.push_back(handles_[0]);
+    cfs.push_back(handles_[1]);
+    s = db_->MultiGet(ReadOptions(), cfs, keys, &values);
+    ASSERT_EQ((int)s.size(), 2);
+    ASSERT_TRUE(s[0].IsNotFound() && s[1].IsNotFound());
+  } while (ChangeCompactOptions());
@@ -3924,5 +4397,11 @@ void PrefixScanInit(DBTest* dbtest) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
-  ReadOptions read_options;
-  read_options.tailing = true;
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
+TEST(DBTest, PrefixScan) {
+  ReadOptions ro = ReadOptions();
+  int count;
+  Slice prefix;
+  Slice key;
+  char buf[100];
+  Iterator* iter;
+  snprintf(buf, sizeof(buf), "03______:");
+  prefix = Slice(buf, 8);
+  key = Slice(buf, 9);
+  env_->count_random_reads_ = true;
@@ -3931 +4410,4 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.create_if_missing = true;
+  options.no_block_cache = true;
+  options.filter_policy = NewBloomFilterPolicy(10);
+  options.prefix_extractor = NewFixedPrefixTransform(8);
+  options.whole_key_filtering = false;
@@ -3933,2 +4415,5 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
+  options.max_background_compactions = 2;
+  options.create_if_missing = true;
+  options.disable_seek_compaction = true;
+  options.memtable_factory.reset(
+      NewHashSkipListRepFactory(options.prefix_extractor));
@@ -3936,11 +4421,44 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
-  ASSERT_TRUE(iter->Valid());
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+  PrefixScanInit(this);
+  count = 0;
+  env_->random_read_counter_.Reset();
+  ro.prefix = &prefix;
+  iter = db_->NewIterator(ro);
+  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {
+    assert(iter->key().starts_with(prefix));
+    count++;
+  }
+  ASSERT_OK(iter->status());
+  delete iter;
+  ASSERT_EQ(count, 2);
+  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
+  DestroyAndReopen(&options);
+  PrefixScanInit(this);
+  count = 0;
+  env_->random_read_counter_.Reset();
+  ro.prefix = &prefix;
+  iter = db_->NewIterator(ro);
+  for (iter->Seek(key); iter->Valid(); iter->Next()) {
+    assert(iter->key().starts_with(prefix));
+    count++;
+  }
+  ASSERT_OK(iter->status());
+  delete iter;
+  ASSERT_EQ(count, 2);
+  ASSERT_EQ(env_->random_read_counter_.Read(), 2);
+  DestroyAndReopen(&options);
+  PrefixScanInit(this);
+  count = 0;
+  env_->random_read_counter_.Reset();
+  iter = db_->NewIterator(ReadOptions());
+  for (iter->Seek(prefix); iter->Valid(); iter->Next()) {
+    if (! iter->key().starts_with(prefix)) {
+      break;
+    }
+    count++;
+  }
+  ASSERT_OK(iter->status());
+  delete iter;
+  ASSERT_EQ(count, 2);
+  ASSERT_EQ(env_->random_read_counter_.Read(), 11);
+  Close();
+  delete options.filter_policy;
@@ -3999 +4517 @@ void BM_LogAndApply(int iters, int num_base_files) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
+TEST(DBTest, TailingIteratorSingle) {
@@ -4002,9 +4519,0 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
-  Options options = CurrentOptions();
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
@@ -4012,4 +4521 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
+  iter->SeekToFirst();
@@ -4017 +4523,2 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  iter->Seek("0202");
+  ASSERT_OK(db_->Put(WriteOptions(), "mirko", "fodor"));
+  iter->SeekToFirst();
@@ -4019 +4526 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  ASSERT_EQ(iter->key().ToString(), "0202");
+  ASSERT_EQ(iter->key().ToString(), "mirko");
@@ -4023 +4530,2 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
+TEST(DBTest, TailingIteratorKeepAdding) {
+  CreateAndReopenWithCF({"pikachu"});
@@ -4026,16 +4534,9 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
-  Options options = CurrentOptions();
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
+  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options, handles_[1]));
+  std::string value(1024, 'a');
+  const int num_records = 10000;
+  for (int i = 0; i < num_records; ++i) {
+    char buf[32];
+    snprintf(buf, sizeof(buf), "%016d", i);
+    Slice key(buf, 16);
+    ASSERT_OK(Put(1, key, value));
+    iter->Seek(key);
@@ -4043,3 +4544 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  ASSERT_EQ(iter->key().ToString(), "0202");
-  iter->Next();
-  ASSERT_TRUE(!iter->Valid());
+    ASSERT_EQ(iter->key().compare(key), 0);
@@ -4047 +4546,3 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-TEST(DBTest, TailingIteratorPrefixSeek) {
+}
+TEST(DBTest, TailingIteratorDeletes) {
+  CreateAndReopenWithCF({"pikachu"});
@@ -4050,16 +4551,3 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  read_options.prefix_seek = true;
-  auto prefix_extractor = NewFixedPrefixTransform(2);
-  Options options = CurrentOptions();
-  options.env = env_;
-  options.create_if_missing = true;
-  options.disable_auto_compactions = true;
-  options.prefix_extractor = prefix_extractor;
-  options.memtable_factory.reset(NewHashSkipListRepFactory(prefix_extractor));
-  DestroyAndReopen(&options);
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
-  iter->Seek("0102");
-  ASSERT_TRUE(!iter->Valid());
-  iter->Seek("0202");
+  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options, handles_[1]));
+  ASSERT_OK(Put(1, "0test", "test"));
+  iter->SeekToFirst();
@@ -4067 +4555,11 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  ASSERT_EQ(iter->key().ToString(), "0202");
+  ASSERT_EQ(iter->key().ToString(), "0test");
+  ASSERT_OK(Delete(1, "0test"));
+  const int num_records = 10000;
+  std::string value(1024, 'A');
+  for (int i = 0; i < num_records; ++i) {
+    char buf[32];
+    snprintf(buf, sizeof(buf), "1%015d", i);
+    Slice key(buf, 16);
+    ASSERT_OK(Put(1, key, value));
+  }
+  ASSERT_OK(Flush(1));
@@ -4069 +4567,3 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  ASSERT_TRUE(!iter->Valid());
+  int count = 0;
+  for (; iter->Valid(); iter->Next(), ++count) ;
+  ASSERT_EQ(count, num_records);
@@ -4083,4 +4583,5 @@ TEST(DBTest, TailingIteratorPrefixSeek) {
-  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options));
-  ASSERT_OK(db_->Put(WriteOptions(), "0101", "test"));
-  dbfull()->TEST_FlushMemTable();
-  ASSERT_OK(db_->Put(WriteOptions(), "0202", "test"));
+  CreateAndReopenWithCF({"pikachu"}, &options);
+  std::unique_ptr<Iterator> iter(db_->NewIterator(read_options, handles_[1]));
+  ASSERT_OK(Put(1, "0101", "test"));
+  ASSERT_OK(Flush(1));
+  ASSERT_OK(Put(1, "0202", "test"));
