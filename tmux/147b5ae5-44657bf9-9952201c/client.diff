diff --git a/home/whalien/codebase/cpp/mergebot/eva/output/tmux/147b5ae5-44657bf9-9952201c/client.no_comments_mergebot.c b/home/whalien/codebase/cpp/mergebot/eva/output/tmux/147b5ae5-44657bf9-9952201c/client.no_comments_merged.c
index 7598643..db13f26 100644
--- a/home/whalien/codebase/cpp/mergebot/eva/output/tmux/147b5ae5-44657bf9-9952201c/client.no_comments_mergebot.c
+++ b/home/whalien/codebase/cpp/mergebot/eva/output/tmux/147b5ae5-44657bf9-9952201c/client.no_comments_merged.c
@@ -10 +9,0 @@
-#include <imsg.h>
@@ -45 +44,3 @@ const char *client_exit_message(void);
-int client_get_lock(char *lockfile) {
+int
+client_get_lock(char *lockfile)
+{
@@ -52,2 +53,4 @@ int client_get_lock(char *lockfile) {
-    if (errno != EAGAIN) return (lockfd);
-    while (flock(lockfd, LOCK_EX) == -1 && errno == EINTR) ;
+  if (errno != EAGAIN)
+   return (lockfd);
+  while (flock(lockfd, LOCK_EX) == -1 && errno == EINTR)
+                ;
@@ -60 +63,3 @@ int client_get_lock(char *lockfile) {
-int client_connect(struct event_base *base, char *path, int start_server) {
+int
+client_connect(struct event_base *base, char *path, int start_server)
+{
@@ -74 +79,2 @@ retry:
-  if ((fd = socket(AF_UNIX, SOCK_STREAM, 0)) == -1) fatal("socket failed");
+ if ((fd = socket(AF_UNIX, SOCK_STREAM, 0)) == -1)
+  fatal("socket failed");
@@ -78,2 +84,4 @@ retry:
-    if (errno != ECONNREFUSED && errno != ENOENT) goto failed;
-    if (!start_server) goto failed;
+  if (errno != ECONNREFUSED && errno != ENOENT)
+   goto failed;
+  if (!start_server)
+   goto failed;
@@ -113 +121,3 @@ failed:
-const char *client_exit_message(void) {
+const char *
+client_exit_message(void)
+{
@@ -120,4 +130,2 @@ const char *client_exit_message(void) {
-        xsnprintf(msg, sizeof msg,
-                  "detached "
-                  "(from session %s)",
-                  client_exitsession);
+   xsnprintf(msg, sizeof msg, "detached "
+       "(from session %s)", client_exitsession);
@@ -129,4 +137,2 @@ const char *client_exit_message(void) {
-        xsnprintf(msg, sizeof msg,
-                  "detached and SIGHUP "
-                  "(from session %s)",
-                  client_exitsession);
+   xsnprintf(msg, sizeof msg, "detached and SIGHUP "
+       "(from session %s)", client_exitsession);
@@ -149 +155,3 @@ const char *client_exit_message(void) {
-int client_main(struct event_base *base, int argc, char **argv, int flags) {
+int
+client_main(struct event_base *base, int argc, char **argv, int flags)
+{
@@ -178 +186,2 @@ int client_main(struct event_base *base, int argc, char **argv, int flags) {
-      if (cmd->entry->flags & CMD_STARTSERVER) cmdflags |= CMD_STARTSERVER;
+   if (cmd->entry->flags & CMD_STARTSERVER)
+    cmdflags |= CMD_STARTSERVER;
@@ -182,8 +190,0 @@ int client_main(struct event_base *base, int argc, char **argv, int flags) {
-<<<<<<< HEAD
-  set_signals(client_signal);
-|||||||
-  setproctitle("client (%s)", socket_path);
-  logfile("client");
-  set_signals(client_signal);
-=======
->>>>>>> 44657bf932b068aff5ce1019a4e8a2e7b00b5321
@@ -193 +194,2 @@ int client_main(struct event_base *base, int argc, char **argv, int flags) {
-      fprintf(stderr, "no server running on %s\n", socket_path);
+   fprintf(stderr, "no server running on %s\n",
+       socket_path);
@@ -195,2 +197,2 @@ int client_main(struct event_base *base, int argc, char **argv, int flags) {
-      fprintf(stderr, "error connecting to %s (%s)\n", socket_path,
-              strerror(errno));
+   fprintf(stderr, "error connecting to %s (%s)\n",
+       socket_path, strerror(errno));
@@ -202,2 +204,4 @@ int client_main(struct event_base *base, int argc, char **argv, int flags) {
-  if ((cwd = getcwd(path, sizeof path)) == NULL) cwd = "/";
-  if ((ttynam = ttyname(STDIN_FILENO)) == NULL) ttynam = "";
+ if ((cwd = getcwd(path, sizeof path)) == NULL)
+  cwd = "/";
+ if ((ttynam = ttyname(STDIN_FILENO)) == NULL)
+  ttynam = "";
@@ -212,12 +215,0 @@ int client_main(struct event_base *base, int argc, char **argv, int flags) {
-<<<<<<< HEAD
-#ifdef HAVE_SETPROCTITLE
-  setproctitle("client (%s)", socket_path);
-#endif
-  logfile("client");
-  imsg_init(&client_ibuf, fd);
-  event_set(&client_event, fd, EV_READ, client_callback, NULL);
-|||||||
-  imsg_init(&client_ibuf, fd);
-  event_set(&client_event, fd, EV_READ, client_callback, NULL);
-=======
->>>>>>> 44657bf932b068aff5ce1019a4e8a2e7b00b5321
@@ -229 +221,2 @@ int client_main(struct event_base *base, int argc, char **argv, int flags) {
-      fprintf(stderr, "tcgetattr failed: %s\n", strerror(errno));
+   fprintf(stderr, "tcgetattr failed: %s\n",
+       strerror(errno));
@@ -248 +241,2 @@ int client_main(struct event_base *base, int argc, char **argv, int flags) {
-    for (i = 0; i < argc; i++) size += strlen(argv[i]) + 1;
+  for (i = 0; i < argc; i++)
+   size += strlen(argv[i]) + 1;
@@ -270 +264,2 @@ int client_main(struct event_base *base, int argc, char **argv, int flags) {
-    if (client_exittype == MSG_DETACHKILL && ppid > 1) kill(ppid, SIGHUP);
+  if (client_exittype == MSG_DETACHKILL && ppid > 1)
+   kill(ppid, SIGHUP);
@@ -282 +277,3 @@ int client_main(struct event_base *base, int argc, char **argv, int flags) {
-void client_send_identify(const char *ttynam, const char *cwd) {
+void
+client_send_identify(const char *ttynam, const char *cwd)
+{
@@ -289 +286,2 @@ void client_send_identify(const char *ttynam, const char *cwd) {
-  if ((s = getenv("TERM")) == NULL) s = "";
+ if ((s = getenv("TERM")) == NULL)
+  s = "";
@@ -293 +291,2 @@ void client_send_identify(const char *ttynam, const char *cwd) {
-  if ((fd = dup(STDIN_FILENO)) == -1) fatal("dup failed");
+ if ((fd = dup(STDIN_FILENO)) == -1)
+  fatal("dup failed");
@@ -304,2 +303,3 @@ void client_send_identify(const char *ttynam, const char *cwd) {
-void client_stdin_callback(unused int fd, unused short events,
-                           unused void *arg) {
+void
+client_stdin_callback(unused int fd, unused short events, unused void *arg)
+{
@@ -308 +308,2 @@ void client_stdin_callback(unused int fd, unused short events,
-  if (data.size < 0 && (errno == EINTR || errno == EAGAIN)) return;
+ if (data.size < 0 && (errno == EINTR || errno == EAGAIN))
+  return;
@@ -310 +311,2 @@ void client_stdin_callback(unused int fd, unused short events,
-  if (data.size <= 0) event_del(&client_stdin);
+ if (data.size <= 0)
+  event_del(&client_stdin);
@@ -312 +314,3 @@ void client_stdin_callback(unused int fd, unused short events,
-void client_write(int fd, const char *data, size_t size) {
+void
+client_write(int fd, const char *data, size_t size)
+{
@@ -317 +321,2 @@ void client_write(int fd, const char *data, size_t size) {
-      if (errno == EINTR || errno == EAGAIN) continue;
+   if (errno == EINTR || errno == EAGAIN)
+    continue;
@@ -324 +329,3 @@ void client_write(int fd, const char *data, size_t size) {
-__dead void client_exec(const char *shell) {
+__dead void
+client_exec(const char *shell)
+{
@@ -345 +352,3 @@ __dead void client_exec(const char *shell) {
-void client_signal(int sig) {
+void
+client_signal(int sig)
+{
@@ -351 +360,2 @@ void client_signal(int sig) {
-    if (sig == SIGTERM) proc_exit(client_proc);
+  if (sig == SIGTERM)
+   proc_exit(client_proc);
@@ -372 +382,2 @@ void client_signal(int sig) {
-        if (sigaction(SIGTSTP, &sigact, NULL) != 0) fatal("sigaction failed");
+   if (sigaction(SIGTSTP, &sigact, NULL) != 0)
+    fatal("sigaction failed");
@@ -378 +389,3 @@ void client_signal(int sig) {
-voidclient_dispatch(struct imsg *imsg, unused void *arg) {
+void
+client_dispatch(struct imsg *imsg, unused void *arg)
+{
@@ -387 +400,3 @@ voidclient_dispatch(struct imsg *imsg, unused void *arg) {
-void client_dispatch_wait(struct imsg *imsg) {
+void
+client_dispatch_wait(struct imsg *imsg)
+{
@@ -396 +411,2 @@ void client_dispatch_wait(struct imsg *imsg) {
-    if (pledge("stdio unix proc exec tty", NULL) != 0) fatal("pledge failed");
+  if (pledge("stdio unix proc exec tty", NULL) != 0)
+   fatal("pledge failed");
@@ -405 +421,2 @@ void client_dispatch_wait(struct imsg *imsg) {
-      if (datalen != sizeof retval && datalen != 0) fatalx("bad MSG_EXIT size");
+  if (datalen != sizeof retval && datalen != 0)
+   fatalx("bad MSG_EXIT size");
@@ -413 +430,2 @@ void client_dispatch_wait(struct imsg *imsg) {
-      if (datalen != 0) fatalx("bad MSG_READY size");
+  if (datalen != 0)
+   fatalx("bad MSG_READY size");
@@ -419 +437,2 @@ void client_dispatch_wait(struct imsg *imsg) {
-      if (datalen != 0) fatalx("bad MSG_STDIN size");
+  if (datalen != 0)
+   fatalx("bad MSG_STDIN size");
@@ -423 +442,2 @@ void client_dispatch_wait(struct imsg *imsg) {
-      if (datalen != sizeof stdoutdata) fatalx("bad MSG_STDOUT size");
+  if (datalen != sizeof stdoutdata)
+   fatalx("bad MSG_STDOUT size");
@@ -425 +445,2 @@ void client_dispatch_wait(struct imsg *imsg) {
-      client_write(STDOUT_FILENO, stdoutdata.data, stdoutdata.size);
+  client_write(STDOUT_FILENO, stdoutdata.data,
+      stdoutdata.size);
@@ -428 +449,2 @@ void client_dispatch_wait(struct imsg *imsg) {
-      if (datalen != sizeof stderrdata) fatalx("bad MSG_STDERR size");
+  if (datalen != sizeof stderrdata)
+   fatalx("bad MSG_STDERR size");
@@ -430 +452,2 @@ void client_dispatch_wait(struct imsg *imsg) {
-      client_write(STDERR_FILENO, stderrdata.data, stderrdata.size);
+  client_write(STDERR_FILENO, stderrdata.data,
+      stderrdata.size);
@@ -433,5 +456,5 @@ void client_dispatch_wait(struct imsg *imsg) {
-      if (datalen != 0) fatalx("bad MSG_VERSION size");
-      fprintf(stderr,
-              "protocol version mismatch "
-              "(client %d, server %u)\n",
-              PROTOCOL_VERSION, imsg->hdr.peerid);
+  if (datalen != 0)
+   fatalx("bad MSG_VERSION size");
+  fprintf(stderr, "protocol version mismatch "
+      "(client %d, server %u)\n", PROTOCOL_VERSION,
+      imsg->hdr.peerid);
@@ -455 +478,3 @@ void client_dispatch_wait(struct imsg *imsg) {
-void client_dispatch_attached(struct imsg *imsg) {
+void
+client_dispatch_attached(struct imsg *imsg)
+{
@@ -475 +500,2 @@ void client_dispatch_attached(struct imsg *imsg) {
-      if (datalen != 0 && datalen != sizeof(int)) fatalx("bad MSG_EXIT size");
+  if (datalen != 0 && datalen != sizeof (int))
+   fatalx("bad MSG_EXIT size");
@@ -480 +506,2 @@ void client_dispatch_attached(struct imsg *imsg) {
-      if (datalen != 0) fatalx("bad MSG_EXITED size");
+  if (datalen != 0)
+   fatalx("bad MSG_EXITED size");
@@ -484 +511,2 @@ void client_dispatch_attached(struct imsg *imsg) {
-      if (datalen != 0) fatalx("bad MSG_SHUTDOWN size");
+  if (datalen != 0)
+   fatalx("bad MSG_SHUTDOWN size");
@@ -490 +518,2 @@ void client_dispatch_attached(struct imsg *imsg) {
-      if (datalen != 0) fatalx("bad MSG_SUSPEND size");
+  if (datalen != 0)
+   fatalx("bad MSG_SUSPEND size");
@@ -495 +524,2 @@ void client_dispatch_attached(struct imsg *imsg) {
-      if (sigaction(SIGTSTP, &sigact, NULL) != 0) fatal("sigaction failed");
+  if (sigaction(SIGTSTP, &sigact, NULL) != 0)
+   fatal("sigaction failed");
