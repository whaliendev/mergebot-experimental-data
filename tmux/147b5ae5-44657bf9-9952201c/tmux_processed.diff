--- a/home/whalien/codebase/cpp/mergebot/eva/output/tmux/147b5ae5-44657bf9-9952201c/tmux.no_comments_mergebot.h
+++ b/home/whalien/codebase/cpp/mergebot/eva/output/tmux/147b5ae5-44657bf9-9952201c/tmux.no_comments_merged.h
@@ -5,5 +4,0 @@
-#include <sys/queue.h>
-#include <sys/tree.h>
-#include <bitstring.h>
-#include <stdint.h>
-#include <imsg.h>
@@ -28,0 +24,2 @@ extern char **environ;
+#define fatal(msg) log_fatal("%s: %s", __func__, msg);
+#define fatalx(msg) log_fatalx("%s: %s", __func__, msg);
@@ -29,0 +27 @@ extern char **environ;
+#define printflike(a,b) __attribute__ ((format (printf, a, b)))
@@ -43,0 +42,10 @@ extern char **environ;
+#define KEYC_IS_MOUSE(key) (((key) & KEYC_MASK_KEY) >= KEYC_MOUSE && \
+    ((key) & KEYC_MASK_KEY) < KEYC_BSPACE)
+#define KEYC_MOUSE_KEY(name) \
+ KEYC_ ## name ## _PANE, \
+ KEYC_ ## name ## _STATUS, \
+ KEYC_ ## name ## _BORDER
+#define KEYC_MOUSE_STRING(name,s) \
+ { #s "Pane", KEYC_ ## name ## _PANE }, \
+ { #s "Status", KEYC_ ## name ## _STATUS }, \
+ { #s "Border", KEYC_ ## name ## _BORDER }
@@ -459,0 +468 @@ struct mode_key_binding {
+RB_HEAD(mode_key_tree, mode_key_binding);
@@ -502,9 +511,7 @@ struct utf8_data {
-struct grid_line {
-  u_int cellsize;
-  struct grid_cell *celldata;
-  int flags;
-} __packed;
-struct grid_line {
-  u_int cellsize;
-  struct grid_cell *celldata;
-  int flags;
+struct grid_cell {
+ u_char attr;
+ u_char flags;
+ u_char fg;
+ u_char bg;
+ u_char xstate;
+ u_char xdata[UTF8_SIZE];
@@ -545,0 +561 @@ struct job {
+LIST_HEAD(joblist, job);
@@ -577,0 +594,4 @@ struct screen_write_ctx {
+#define screen_size_x(s) ((s)->grid->sx)
+#define screen_size_y(s) ((s)->grid->sy)
+#define screen_hsize(s) ((s)->grid->hsize)
+#define screen_hlimit(s) ((s)->grid->hlimit)
@@ -645,4 +665,2 @@ struct window_pane {
-  RB_ENTRY(window_pane)
-  tree_entry;
-  RB_ENTRY(window_pane)
-  RB_ENTRY(window_pane)
+ TAILQ_ENTRY(window_pane) entry;
+ RB_ENTRY(window_pane) tree_entry;
@@ -649,0 +668,2 @@ struct window_pane {
+TAILQ_HEAD(window_panes, window_pane);
+RB_HEAD(window_pane_tree, window_pane);
@@ -679,0 +700 @@ struct window {
+RB_HEAD(windows, window);
@@ -694 +715,8 @@ struct winlink {
-enum layout_type { LAYOUT_LEFTRIGHT, LAYOUT_TOPBOTTOM, LAYOUT_WINDOWPANE };
+RB_HEAD(winlinks, winlink);
+TAILQ_HEAD(winlink_stack, winlink);
+enum layout_type {
+ LAYOUT_LEFTRIGHT,
+ LAYOUT_TOPBOTTOM,
+ LAYOUT_WINDOWPANE
+};
+TAILQ_HEAD(layout_cells, layout_cell);
@@ -709,3 +737 @@ struct environ_entry {
-  entry;
-  entry;
-  entry;
+ RB_ENTRY(environ_entry) entry;
@@ -712,0 +739 @@ struct environ_entry {
+RB_HEAD(environ, environ_entry);
@@ -716,0 +744 @@ struct session_group {
+TAILQ_HEAD(session_groups, session_group);
@@ -738,2 +766 @@ struct session {
-  RB_ENTRY(session) entry;
-  RB_ENTRY(session) entry;
+ TAILQ_ENTRY(session) gentry;
@@ -741,0 +769 @@ struct session {
+RB_HEAD(sessions, session);
@@ -749,0 +778,4 @@ struct session {
+#define MOUSE_BUTTONS(b) ((b) & MOUSE_MASK_BUTTONS)
+#define MOUSE_WHEEL(b) ((b) & MOUSE_MASK_WHEEL)
+#define MOUSE_DRAG(b) ((b) & MOUSE_MASK_DRAG)
+#define MOUSE_RELEASE(b) (((b) & MOUSE_MASK_BUTTONS) == 3)
@@ -777 +809 @@ struct tty_term {
-  LIST_ENTRY(tty_term) entry;
+ char acs[UCHAR_MAX + 1][2];
@@ -783,0 +816 @@ struct tty_term {
+LIST_HEAD(tty_terms, tty_term);
@@ -906,0 +942 @@ struct client {
+TAILQ_HEAD(clients, client);
@@ -907,0 +944 @@ struct args_entry;
+RB_HEAD(args_tree, args_entry);
@@ -924,0 +962 @@ struct cmd_list {
+};
@@ -935,0 +974 @@ struct cmd_list {
+TAILQ_HEAD(cmd_q_items, cmd_q_item);
@@ -967,3 +1006 @@ struct cmd_list {
-    entry;
-    entry;
-    entry;
+ RB_ENTRY(key_binding) entry;
@@ -970,0 +1008 @@ struct cmd_list {
+RB_HEAD(key_bindings, key_binding);
@@ -976,0 +1015 @@ struct cmd_list {
+RB_HEAD(key_tables, key_table);
@@ -1006,8 +1045,8 @@ struct cmd_list {
-  struct options *global_options;
-  struct options *global_s_options;
-  struct options *global_w_options;
-  struct environ global_environ;
-  char *shell_cmd;
-  int debug_level;
-  time_t start_time;
-  char socket_path[PATH_MAX];
+extern struct options *global_options;
+extern struct options *global_s_options;
+extern struct options *global_w_options;
+extern struct environ global_environ;
+extern char *shell_cmd;
+extern int debug_level;
+extern time_t start_time;
+extern char socket_path[PATH_MAX];
@@ -1074,0 +1115 @@ struct cmd_list {
+RB_PROTOTYPE(mode_key_tree, mode_key_binding, entry, mode_key_cmp);
@@ -1124,0 +1166 @@ struct cmd_list {
+RB_PROTOTYPE(environ, environ_entry, entry, environ_cmp);
@@ -1208,0 +1252 @@ struct cmd_list {
+RB_PROTOTYPE(args_tree, args_entry, entry, args_cmp);
@@ -1261,0 +1309,2 @@ struct cmd_list {
+RB_PROTOTYPE(key_bindings, key_binding, entry, key_bindings_cmp);
+RB_PROTOTYPE(key_tables, key_table, entry, key_table_cmp);
@@ -1278,4 +1327,4 @@ struct cmd_list {
-  struct clients clients;
-  struct session *marked_session;
-  struct winlink *marked_winlink;
-  struct window_pane *marked_window_pane;
+extern struct clients clients;
+extern struct session *marked_session;
+extern struct winlink *marked_winlink;
+extern struct window_pane *marked_window_pane;
@@ -1466,0 +1513 @@ struct cmd_list {
+RB_PROTOTYPE(windows, window, entry, window_cmp);
@@ -1467,0 +1515 @@ struct cmd_list {
+RB_PROTOTYPE(winlinks, winlink, entry, winlink_cmp);
@@ -1468,0 +1517 @@ struct cmd_list {
+RB_PROTOTYPE(window_pane_tree, window_pane, tree_entry, window_pane_cmp);
@@ -1616,0 +1673 @@ struct cmd_list {
+RB_PROTOTYPE(sessions, session, entry, session_cmp);
