diff --git a/home/whalien/codebase/cpp/mergebot/eva/output/tmux/7b189f1a-253f1395-42272dfb/cmd.no_comments_mergebot.c b/home/whalien/codebase/cpp/mergebot/eva/output/tmux/7b189f1a-253f1395-42272dfb/cmd.no_comments_merged.c
index e4f5012..6beef2a 100644
--- a/home/whalien/codebase/cpp/mergebot/eva/output/tmux/7b189f1a-253f1395-42272dfb/cmd.no_comments_mergebot.c
+++ b/home/whalien/codebase/cpp/mergebot/eva/output/tmux/7b189f1a-253f1395-42272dfb/cmd.no_comments_merged.c
@@ -4 +3,0 @@
-#include <paths.h>
@@ -10 +9,2 @@
-const struct cmd_entry *cmd_table[] = {&cmd_attach_session_entry,
+const struct cmd_entry *cmd_table[] = {
+ &cmd_attach_session_entry,
@@ -94 +94,2 @@ const struct cmd_entry *cmd_table[] = {&cmd_attach_session_entry,
-                                       NULL};
+ NULL
+};
@@ -105,2 +106,2 @@ struct window *cmd_lookup_windowid(const char *);
-struct session *cmd_window_session(struct cmd_ctx *, struct window *,
-                                   struct winlink **);
+struct session *cmd_window_session(struct cmd_ctx *,
+      struct window *, struct winlink **);
@@ -110 +111,3 @@ struct window_pane *cmd_find_pane_offset(const char *, struct winlink *);
-int cmd_pack_argv(int argc, char **argv, char *buf, size_t len) {
+int
+cmd_pack_argv(int argc, char **argv, char *buf, size_t len)
+{
@@ -115 +118,2 @@ int cmd_pack_argv(int argc, char **argv, char *buf, size_t len) {
-    if (strlcpy(buf, argv[i], len) >= len) return (-1);
+  if (strlcpy(buf, argv[i], len) >= len)
+   return (-1);
@@ -122 +126,3 @@ int cmd_pack_argv(int argc, char **argv, char *buf, size_t len) {
-int cmd_unpack_argv(char *buf, size_t len, int argc, char ***argv) {
+int
+cmd_unpack_argv(char *buf, size_t len, int argc, char ***argv)
+{
@@ -125 +131,2 @@ int cmd_unpack_argv(char *buf, size_t len, int argc, char ***argv) {
-  if (argc == 0) return (0);
+ if (argc == 0)
+  return (0);
@@ -140 +147,3 @@ int cmd_unpack_argv(char *buf, size_t len, int argc, char ***argv) {
-char **cmd_copy_argv(int argc, char *const *argv) {
+char **
+cmd_copy_argv(int argc, char *const *argv)
+{
@@ -143 +152,2 @@ char **cmd_copy_argv(int argc, char *const *argv) {
-  if (argc == 0) return (NULL);
+ if (argc == 0)
+  return (NULL);
@@ -146 +156,2 @@ char **cmd_copy_argv(int argc, char *const *argv) {
-    if (argv[i] != NULL) new_argv[i] = xstrdup(argv[i]);
+  if (argv[i] != NULL)
+   new_argv[i] = xstrdup(argv[i]);
@@ -150 +161,3 @@ char **cmd_copy_argv(int argc, char *const *argv) {
-void cmd_free_argv(int argc, char **argv) {
+void
+cmd_free_argv(int argc, char **argv)
+{
@@ -152,2 +165,4 @@ void cmd_free_argv(int argc, char **argv) {
-  if (argc == 0) return;
-  for (i = 0; i < argc; i++) free(argv[i]);
+ if (argc == 0)
+  return;
+ for (i = 0; i < argc; i++)
+  free(argv[i]);
@@ -156 +171,3 @@ void cmd_free_argv(int argc, char **argv) {
-struct cmd *cmd_parse(int argc, char **argv, char **cause) {
+struct cmd *
+cmd_parse(int argc, char **argv, char **cause)
+{
@@ -169 +186,2 @@ struct cmd *cmd_parse(int argc, char **argv, char **cause) {
-    if ((*entryp)->alias != NULL && strcmp((*entryp)->alias, argv[0]) == 0) {
+  if ((*entryp)->alias != NULL &&
+      strcmp((*entryp)->alias, argv[0]) == 0) {
@@ -174,2 +192,4 @@ struct cmd *cmd_parse(int argc, char **argv, char **cause) {
-    if (strncmp((*entryp)->name, argv[0], strlen(argv[0])) != 0) continue;
-    if (entry != NULL) ambiguous = 1;
+  if (strncmp((*entryp)->name, argv[0], strlen(argv[0])) != 0)
+   continue;
+  if (entry != NULL)
+   ambiguous = 1;
@@ -177 +197,2 @@ struct cmd *cmd_parse(int argc, char **argv, char **cause) {
-    if (strcmp(entry->name, argv[0]) == 0) break;
+  if (strcmp(entry->name, argv[0]) == 0)
+   break;
@@ -179 +200,2 @@ struct cmd *cmd_parse(int argc, char **argv, char **cause) {
-  if (ambiguous) goto ambiguous;
+ if (ambiguous)
+  goto ambiguous;
@@ -185,4 +207,8 @@ struct cmd *cmd_parse(int argc, char **argv, char **cause) {
-  if (args == NULL) goto usage;
-  if (entry->args_lower != -1 && args->argc < entry->args_lower) goto usage;
-  if (entry->args_upper != -1 && args->argc > entry->args_upper) goto usage;
-  if (entry->check != NULL && entry->check(args) != 0) goto usage;
+ if (args == NULL)
+  goto usage;
+ if (entry->args_lower != -1 && args->argc < entry->args_lower)
+  goto usage;
+ if (entry->args_upper != -1 && args->argc > entry->args_upper)
+  goto usage;
+ if (entry->check != NULL && entry->check(args) != 0)
+  goto usage;
@@ -196,3 +222,6 @@ ambiguous:
-    if (strncmp((*entryp)->name, argv[0], strlen(argv[0])) != 0) continue;
-    if (strlcat(s, (*entryp)->name, sizeof s) >= sizeof s) break;
-    if (strlcat(s, ", ", sizeof s) >= sizeof s) break;
+  if (strncmp((*entryp)->name, argv[0], strlen(argv[0])) != 0)
+   continue;
+  if (strlcat(s, (*entryp)->name, sizeof s) >= sizeof s)
+   break;
+  if (strlcat(s, ", ", sizeof s) >= sizeof s)
+   break;
@@ -204 +233,2 @@ usage:
-  if (args != NULL) args_free(args);
+ if (args != NULL)
+  args_free(args);
@@ -208 +238,3 @@ usage:
-enum cmd_retval cmd_exec(struct cmd *cmd, struct cmd_ctx *ctx) {
+enum cmd_retval
+cmd_exec(struct cmd *cmd, struct cmd_ctx *ctx)
+{
@@ -211 +243,3 @@ enum cmd_retval cmd_exec(struct cmd *cmd, struct cmd_ctx *ctx) {
-void cmd_free(struct cmd *cmd) {
+void
+cmd_free(struct cmd *cmd)
+{
@@ -215 +249,3 @@ void cmd_free(struct cmd *cmd) {
-size_t cmd_print(struct cmd *cmd, char *buf, size_t len) {
+size_t
+cmd_print(struct cmd *cmd, char *buf, size_t len)
+{
@@ -228,2 +264,3 @@ size_t cmd_print(struct cmd *cmd, char *buf, size_t len) {
-struct session *cmd_current_session(struct cmd_ctx *ctx,
-                                    int prefer_unattached) {
+struct session *
+cmd_current_session(struct cmd_ctx *ctx, int prefer_unattached)
+{
@@ -250 +287,2 @@ struct session *cmd_current_session(struct cmd_ctx *ctx,
-        if (found) break;
+    if (found)
+     break;
@@ -252 +290,2 @@ struct session *cmd_current_session(struct cmd_ctx *ctx,
-      if (found) ARRAY_ADD(&ss, s);
+   if (found)
+    ARRAY_ADD(&ss, s);
@@ -256 +295,2 @@ struct session *cmd_current_session(struct cmd_ctx *ctx,
-    if (s != NULL) return (s);
+  if (s != NULL)
+   return (s);
@@ -260 +300,2 @@ struct session *cmd_current_session(struct cmd_ctx *ctx,
-    if (s != NULL) return (s);
+  if (s != NULL)
+   return (s);
@@ -264 +305,3 @@ struct session *cmd_current_session(struct cmd_ctx *ctx,
-struct session *cmd_choose_session(int prefer_unattached) {
+struct session *
+cmd_choose_session(int prefer_unattached)
+{
@@ -270 +313,2 @@ struct session *cmd_choose_session(int prefer_unattached) {
-        (prefer_unattached && !(sbest->flags & SESSION_UNATTACHED) &&
+      (prefer_unattached &&
+      !(sbest->flags & SESSION_UNATTACHED) &&
@@ -278 +322,3 @@ struct session *cmd_choose_session(int prefer_unattached) {
-struct session *cmd_choose_session_list(struct sessionslist *ss) {
+struct session *
+cmd_choose_session_list(struct sessionslist *ss)
+{
@@ -284 +330,2 @@ struct session *cmd_choose_session_list(struct sessionslist *ss) {
-    if ((s = ARRAY_ITEM(ss, i)) == NULL) continue;
+  if ((s = ARRAY_ITEM(ss, i)) == NULL)
+   continue;
@@ -292 +339,3 @@ struct session *cmd_choose_session_list(struct sessionslist *ss) {
-struct client *cmd_current_client(struct cmd_ctx *ctx) {
+struct client *
+cmd_current_client(struct cmd_ctx *ctx)
+{
@@ -297 +346,2 @@ struct client *cmd_current_client(struct cmd_ctx *ctx) {
-  if (ctx->curclient != NULL) return (ctx->curclient);
+ if (ctx->curclient != NULL)
+  return (ctx->curclient);
@@ -302,2 +352,4 @@ struct client *cmd_current_client(struct cmd_ctx *ctx) {
-      if ((c = ARRAY_ITEM(&clients, i)) == NULL) continue;
-      if (s == c->session) ARRAY_ADD(&cc, c);
+   if ((c = ARRAY_ITEM(&clients, i)) == NULL)
+    continue;
+   if (s == c->session)
+    ARRAY_ADD(&cc, c);
@@ -307 +359,2 @@ struct client *cmd_current_client(struct cmd_ctx *ctx) {
-    if (c != NULL) return (c);
+  if (c != NULL)
+   return (c);
@@ -311 +364,3 @@ struct client *cmd_current_client(struct cmd_ctx *ctx) {
-struct client *cmd_choose_client(struct clients *cc) {
+struct client *
+cmd_choose_client(struct clients *cc)
+{
@@ -317,2 +372,4 @@ struct client *cmd_choose_client(struct clients *cc) {
-    if ((c = ARRAY_ITEM(cc, i)) == NULL) continue;
-    if (c->session == NULL) continue;
+  if ((c = ARRAY_ITEM(cc, i)) == NULL)
+   continue;
+  if (c->session == NULL)
+   continue;
@@ -326 +383,3 @@ struct client *cmd_choose_client(struct clients *cc) {
-struct client *cmd_find_client(struct cmd_ctx *ctx, const char *arg) {
+struct client *
+cmd_find_client(struct cmd_ctx *ctx, const char *arg)
+{
@@ -330 +389,2 @@ struct client *cmd_find_client(struct cmd_ctx *ctx, const char *arg) {
-  if (arg == NULL) return (cmd_current_client(ctx));
+ if (arg == NULL)
+  return (cmd_current_client(ctx));
@@ -333 +393,2 @@ struct client *cmd_find_client(struct cmd_ctx *ctx, const char *arg) {
-  if (arglen != 0 && tmparg[arglen - 1] == ':') tmparg[arglen - 1] = '\0';
+ if (arglen != 0 && tmparg[arglen - 1] == ':')
+  tmparg[arglen - 1] = '\0';
@@ -335 +396,2 @@ struct client *cmd_find_client(struct cmd_ctx *ctx, const char *arg) {
-  if (c == NULL) ctx->error(ctx, "client not found: %s", tmparg);
+ if (c == NULL)
+  ctx->error(ctx, "client not found: %s", tmparg);
@@ -339 +401,3 @@ struct client *cmd_find_client(struct cmd_ctx *ctx, const char *arg) {
-struct client *cmd_lookup_client(const char *name) {
+struct client *
+cmd_lookup_client(const char *name)
+{
@@ -345 +409,2 @@ struct client *cmd_lookup_client(const char *name) {
-    if (c == NULL || c->session == NULL) continue;
+  if (c == NULL || c->session == NULL)
+   continue;
@@ -347,3 +412,6 @@ struct client *cmd_lookup_client(const char *name) {
-    if (strcmp(name, path) == 0) return (c);
-    if (strncmp(path, _PATH_DEV, (sizeof _PATH_DEV) - 1) != 0) continue;
-    if (strcmp(name, path + (sizeof _PATH_DEV) - 1) == 0) return (c);
+  if (strcmp(name, path) == 0)
+   return (c);
+  if (strncmp(path, _PATH_DEV, (sizeof _PATH_DEV) - 1) != 0)
+   continue;
+  if (strcmp(name, path + (sizeof _PATH_DEV) - 1) == 0)
+   return (c);
@@ -353 +421,3 @@ struct client *cmd_lookup_client(const char *name) {
-struct session *cmd_lookup_session(const char *name, int *ambiguous) {
+struct session *
+cmd_lookup_session(const char *name, int *ambiguous)
+{
@@ -356 +426,2 @@ struct session *cmd_lookup_session(const char *name, int *ambiguous) {
-  if ((s = session_find(name)) != NULL) return (s);
+ if ((s = session_find(name)) != NULL)
+  return (s);
@@ -370,2 +441,3 @@ struct session *cmd_lookup_session(const char *name, int *ambiguous) {
-struct winlink *cmd_lookup_window(struct session *s, const char *name,
-                                  int *ambiguous) {
+struct winlink *
+cmd_lookup_window(struct session *s, const char *name, int *ambiguous)
+{
@@ -376 +448,2 @@ struct winlink *cmd_lookup_window(struct session *s, const char *name,
-  if ((wl = cmd_lookup_winlink_windowid(s, name)) != NULL) return (wl);
+ if ((wl = cmd_lookup_winlink_windowid(s, name)) != NULL)
+     return (wl);
@@ -379 +452,2 @@ struct winlink *cmd_lookup_window(struct session *s, const char *name,
-    if ((wl = winlink_find_by_index(&s->windows, idx)) != NULL) return (wl);
+  if ((wl = winlink_find_by_index(&s->windows, idx)) != NULL)
+   return (wl);
@@ -391 +465,2 @@ struct winlink *cmd_lookup_window(struct session *s, const char *name,
-  if (wlfound != NULL) return (wlfound);
+ if (wlfound != NULL)
+  return (wlfound);
@@ -403 +478,2 @@ struct winlink *cmd_lookup_window(struct session *s, const char *name,
-  if (wlfound != NULL) return (wlfound);
+ if (wlfound != NULL)
+  return (wlfound);
@@ -406 +482,3 @@ struct winlink *cmd_lookup_window(struct session *s, const char *name,
-int cmd_lookup_index(struct session *s, const char *name, int *ambiguous) {
+int
+cmd_lookup_index(struct session *s, const char *name, int *ambiguous)
+{
@@ -410,2 +488,4 @@ int cmd_lookup_index(struct session *s, const char *name, int *ambiguous) {
-  if ((wl = cmd_lookup_window(s, name, ambiguous)) != NULL) return (wl->idx);
-  if (*ambiguous) return (-1);
+ if ((wl = cmd_lookup_window(s, name, ambiguous)) != NULL)
+  return (wl->idx);
+ if (*ambiguous)
+  return (-1);
@@ -413 +493,2 @@ int cmd_lookup_index(struct session *s, const char *name, int *ambiguous) {
-  if (errstr == NULL) return (idx);
+ if (errstr == NULL)
+  return (idx);
@@ -416 +497,3 @@ int cmd_lookup_index(struct session *s, const char *name, int *ambiguous) {
-struct window_pane *cmd_lookup_paneid(const char *arg) {
+struct window_pane *
+cmd_lookup_paneid(const char *arg)
+{
@@ -419 +502,2 @@ struct window_pane *cmd_lookup_paneid(const char *arg) {
-  if (*arg != '%') return (NULL);
+ if (*arg != '%')
+  return (NULL);
@@ -421 +505,2 @@ struct window_pane *cmd_lookup_paneid(const char *arg) {
-  if (errstr != NULL) return (NULL);
+ if (errstr != NULL)
+  return (NULL);
@@ -424,2 +509,3 @@ struct window_pane *cmd_lookup_paneid(const char *arg) {
-struct winlink *cmd_lookup_winlink_windowid(struct session *s,
-                                            const char *arg) {
+struct winlink *
+cmd_lookup_winlink_windowid(struct session *s, const char *arg)
+{
@@ -428 +514,2 @@ struct winlink *cmd_lookup_winlink_windowid(struct session *s,
-  if (*arg != '@') return (NULL);
+ if (*arg != '@')
+  return (NULL);
@@ -430 +517,2 @@ struct winlink *cmd_lookup_winlink_windowid(struct session *s,
-  if (errstr != NULL) return (NULL);
+ if (errstr != NULL)
+  return (NULL);
@@ -433 +521,3 @@ struct winlink *cmd_lookup_winlink_windowid(struct session *s,
-struct window *cmd_lookup_windowid(const char *arg) {
+struct window *
+cmd_lookup_windowid(const char *arg)
+{
@@ -436 +526,2 @@ struct window *cmd_lookup_windowid(const char *arg) {
-  if (*arg != '@') return (NULL);
+ if (*arg != '@')
+  return (NULL);
@@ -438 +529,2 @@ struct window *cmd_lookup_windowid(const char *arg) {
-  if (errstr != NULL) return (NULL);
+ if (errstr != NULL)
+  return (NULL);
@@ -441,2 +533,3 @@ struct window *cmd_lookup_windowid(const char *arg) {
-struct session *cmd_window_session(struct cmd_ctx *ctx, struct window *w,
-                                   struct winlink **wlp) {
+struct session *
+cmd_window_session(struct cmd_ctx *ctx, struct window *w, struct winlink **wlp)
+{
@@ -450 +543,2 @@ struct session *cmd_window_session(struct cmd_ctx *ctx, struct window *w,
-      if (wlp != NULL) *wlp = wl;
+   if (wlp != NULL)
+    *wlp = wl;
@@ -456 +550,2 @@ struct session *cmd_window_session(struct cmd_ctx *ctx, struct window *w,
-    if (winlink_find_by_window(&s->windows, w) != NULL) ARRAY_ADD(&ss, s);
+  if (winlink_find_by_window(&s->windows, w) != NULL)
+   ARRAY_ADD(&ss, s);
@@ -460 +555,2 @@ struct session *cmd_window_session(struct cmd_ctx *ctx, struct window *w,
-  if (wlp != NULL) *wlp = winlink_find_by_window(&s->windows, w);
+ if (wlp != NULL)
+  *wlp = winlink_find_by_window(&s->windows, w);
@@ -463,2 +559,3 @@ struct session *cmd_window_session(struct cmd_ctx *ctx, struct window *w,
-struct session *cmd_find_session(struct cmd_ctx *ctx, const char *arg,
-                                 int prefer_unattached) {
+struct session *
+cmd_find_session(struct cmd_ctx *ctx, const char *arg, int prefer_unattached)
+{
@@ -472 +569,2 @@ struct session *cmd_find_session(struct cmd_ctx *ctx, const char *arg,
-  if (arg == NULL) return (cmd_current_session(ctx, prefer_unattached));
+ if (arg == NULL)
+  return (cmd_current_session(ctx, prefer_unattached));
@@ -479 +577,2 @@ struct session *cmd_find_session(struct cmd_ctx *ctx, const char *arg,
-  if (arglen != 0 && tmparg[arglen - 1] == ':') tmparg[arglen - 1] = '\0';
+ if (arglen != 0 && tmparg[arglen - 1] == ':')
+  tmparg[arglen - 1] = '\0';
@@ -485 +584,2 @@ struct session *cmd_find_session(struct cmd_ctx *ctx, const char *arg,
-  if (s == NULL && (c = cmd_lookup_client(tmparg)) != NULL) s = c->session;
+ if (s == NULL && (c = cmd_lookup_client(tmparg)) != NULL)
+  s = c->session;
@@ -495,2 +595,3 @@ struct session *cmd_find_session(struct cmd_ctx *ctx, const char *arg,
-struct winlink *cmd_find_window(struct cmd_ctx *ctx, const char *arg,
-                                struct session **sp) {
+struct winlink *
+cmd_find_window(struct cmd_ctx *ctx, const char *arg, struct session **sp)
+{
@@ -508 +609,2 @@ struct winlink *cmd_find_window(struct cmd_ctx *ctx, const char *arg,
-    if (sp != NULL) *sp = s;
+  if (sp != NULL)
+   *sp = s;
@@ -513 +615,2 @@ struct winlink *cmd_find_window(struct cmd_ctx *ctx, const char *arg,
-    if (sp != NULL) *sp = s;
+  if (sp != NULL)
+   *sp = s;
@@ -516 +619,2 @@ struct winlink *cmd_find_window(struct cmd_ctx *ctx, const char *arg,
-  if (*arg == '\0') goto not_found;
+ if (*arg == '\0')
+  goto not_found;
@@ -518 +622,2 @@ struct winlink *cmd_find_window(struct cmd_ctx *ctx, const char *arg,
-  if (winptr == NULL) goto no_colon;
+ if (winptr == NULL)
+  goto no_colon;
@@ -523 +628,2 @@ struct winlink *cmd_find_window(struct cmd_ctx *ctx, const char *arg,
-    if ((s = cmd_lookup_session(sessptr, &ambiguous)) == NULL) goto no_session;
+  if ((s = cmd_lookup_session(sessptr, &ambiguous)) == NULL)
+   goto no_session;
@@ -525 +631,2 @@ struct winlink *cmd_find_window(struct cmd_ctx *ctx, const char *arg,
-  if (sp != NULL) *sp = s;
+ if (sp != NULL)
+  *sp = s;
@@ -534,2 +641,4 @@ struct winlink *cmd_find_window(struct cmd_ctx *ctx, const char *arg,
-  if (wl == NULL) goto not_found;
-  if (sessptr != NULL) free(sessptr);
+ if (wl == NULL)
+  goto not_found;
+ if (sessptr != NULL)
+  free(sessptr);
@@ -539 +648,2 @@ no_colon:
-    if ((wl = TAILQ_FIRST(&s->lastw)) == NULL) goto not_found;
+  if ((wl = TAILQ_FIRST(&s->lastw)) == NULL)
+   goto not_found;
@@ -545 +655,2 @@ no_colon:
-  if (sp != NULL) *sp = s;
+ if (sp != NULL)
+  *sp = s;
@@ -548 +659,2 @@ lookup_session:
-  if (ambiguous) goto not_found;
+ if (ambiguous)
+  goto not_found;
@@ -551 +663,2 @@ lookup_session:
-  if (sp != NULL) *sp = s;
+ if (sp != NULL)
+  *sp = s;
@@ -568,2 +681,3 @@ not_found:
-struct winlink *cmd_find_window_offset(const char *winptr, struct session *s,
-                                       int *ambiguous) {
+struct winlink *
+cmd_find_window_offset(const char *winptr, struct session *s, int *ambiguous)
+{
@@ -572 +686,2 @@ struct winlink *cmd_find_window_offset(const char *winptr, struct session *s,
-  if (winptr[1] != '\0') offset = strtonum(winptr + 1, 1, INT_MAX, NULL);
+ if (winptr[1] != '\0')
+  offset = strtonum(winptr + 1, 1, INT_MAX, NULL);
@@ -583 +698,3 @@ struct winlink *cmd_find_window_offset(const char *winptr, struct session *s,
-int cmd_find_index(struct cmd_ctx *ctx, const char *arg, struct session **sp) {
+int
+cmd_find_index(struct cmd_ctx *ctx, const char *arg, struct session **sp)
+{
@@ -594 +711,2 @@ int cmd_find_index(struct cmd_ctx *ctx, const char *arg, struct session **sp) {
-    if (sp != NULL) *sp = s;
+  if (sp != NULL)
+   *sp = s;
@@ -597 +715,2 @@ int cmd_find_index(struct cmd_ctx *ctx, const char *arg, struct session **sp) {
-  if (*arg == '\0') goto not_found;
+ if (*arg == '\0')
+  goto not_found;
@@ -599 +718,2 @@ int cmd_find_index(struct cmd_ctx *ctx, const char *arg, struct session **sp) {
-  if (winptr == NULL) goto no_colon;
+ if (winptr == NULL)
+  goto no_colon;
@@ -604 +724,2 @@ int cmd_find_index(struct cmd_ctx *ctx, const char *arg, struct session **sp) {
-    if ((s = cmd_lookup_session(sessptr, &ambiguous)) == NULL) goto no_session;
+  if ((s = cmd_lookup_session(sessptr, &ambiguous)) == NULL)
+   goto no_session;
@@ -606 +727,2 @@ int cmd_find_index(struct cmd_ctx *ctx, const char *arg, struct session **sp) {
-  if (sp != NULL) *sp = s;
+ if (sp != NULL)
+  *sp = s;
@@ -610 +732,2 @@ int cmd_find_index(struct cmd_ctx *ctx, const char *arg, struct session **sp) {
-    if ((wl = TAILQ_FIRST(&s->lastw)) == NULL) goto not_found;
+  if ((wl = TAILQ_FIRST(&s->lastw)) == NULL)
+   goto not_found;
@@ -621 +744,2 @@ no_colon:
-    if ((wl = TAILQ_FIRST(&s->lastw)) == NULL) goto not_found;
+  if ((wl = TAILQ_FIRST(&s->lastw)) == NULL)
+   goto not_found;
@@ -628 +752,2 @@ no_colon:
-  if (sp != NULL) *sp = s;
+ if (sp != NULL)
+  *sp = s;
@@ -631 +756,2 @@ lookup_session:
-  if (ambiguous) goto not_found;
+ if (ambiguous)
+  goto not_found;
@@ -634 +760,2 @@ lookup_session:
-  if (sp != NULL) *sp = s;
+ if (sp != NULL)
+  *sp = s;
@@ -644 +771,2 @@ invalid_index:
-  if (ambiguous) goto not_found;
+ if (ambiguous)
+  goto not_found;
@@ -656,2 +784,3 @@ not_found:
-int cmd_find_index_offset(const char *winptr, struct session *s,
-                          int *ambiguous) {
+int
+cmd_find_index_offset(const char *winptr, struct session *s, int *ambiguous)
+{
@@ -659 +788,2 @@ int cmd_find_index_offset(const char *winptr, struct session *s,
-  if (winptr[1] != '\0') offset = strtonum(winptr + 1, 1, INT_MAX, NULL);
+ if (winptr[1] != '\0')
+  offset = strtonum(winptr + 1, 1, INT_MAX, NULL);
@@ -677,2 +807,4 @@ int cmd_find_index_offset(const char *winptr, struct session *s,
-struct winlink *cmd_find_pane(struct cmd_ctx *ctx, const char *arg,
-                              struct session **sp, struct window_pane **wpp) {
+struct winlink *
+cmd_find_pane(struct cmd_ctx *ctx,
+    const char *arg, struct session **sp, struct window_pane **wpp)
+{
@@ -688 +820,2 @@ struct winlink *cmd_find_pane(struct cmd_ctx *ctx, const char *arg,
-  if (sp != NULL) *sp = s;
+ if (sp != NULL)
+  *sp = s;
@@ -695 +828,2 @@ struct winlink *cmd_find_pane(struct cmd_ctx *ctx, const char *arg,
-    if (sp != NULL) *sp = s;
+  if (sp != NULL)
+   *sp = s;
@@ -698 +832,2 @@ struct winlink *cmd_find_pane(struct cmd_ctx *ctx, const char *arg,
-  if ((period = strrchr(arg, '.')) == NULL) goto no_period;
+ if ((period = strrchr(arg, '.')) == NULL)
+  goto no_period;
@@ -712 +847,2 @@ struct winlink *cmd_find_pane(struct cmd_ctx *ctx, const char *arg,
-    if (errstr != NULL) goto lookup_string;
+  if (errstr != NULL)
+   goto lookup_string;
@@ -714 +850,2 @@ struct winlink *cmd_find_pane(struct cmd_ctx *ctx, const char *arg,
-    if (*wpp == NULL) goto lookup_string;
+  if (*wpp == NULL)
+   goto lookup_string;
@@ -727 +864,2 @@ no_period:
-  if (errstr != NULL) goto lookup_window;
+ if (errstr != NULL)
+  goto lookup_window;
@@ -734 +872,2 @@ lookup_window:
-  if ((wl = cmd_find_window(ctx, arg, sp)) != NULL) *wpp = wl->window->active;
+ if ((wl = cmd_find_window(ctx, arg, sp)) != NULL)
+  *wpp = wl->window->active;
@@ -740,2 +879,3 @@ error:
-struct window_pane *cmd_find_pane_offset(const char *paneptr,
-                                         struct winlink *wl) {
+struct window_pane *
+cmd_find_pane_offset(const char *paneptr, struct winlink *wl)
+{
@@ -745 +885,2 @@ struct window_pane *cmd_find_pane_offset(const char *paneptr,
-  if (paneptr[1] != '\0') offset = strtonum(paneptr + 1, 1, INT_MAX, NULL);
+ if (paneptr[1] != '\0')
+  offset = strtonum(paneptr + 1, 1, INT_MAX, NULL);
@@ -754 +895,3 @@ struct window_pane *cmd_find_pane_offset(const char *paneptr,
-char *cmd_template_replace(char *template, const char *s, int idx) {
+char *
+cmd_template_replace(char *template, const char *s, int idx)
+{
@@ -759 +902,2 @@ char *cmd_template_replace(char *template, const char *s, int idx) {
-  if (strstr(template, "%") == NULL) return (xstrdup(template));
+ if (strstr(template, "%") == NULL)
+  return (xstrdup(template));
@@ -769 +913,2 @@ char *cmd_template_replace(char *template, const char *s, int idx) {
-          if (*ptr != '%' || replaced) break;
+    if (*ptr != '%' || replaced)
+     break;
@@ -784 +929,3 @@ char *cmd_template_replace(char *template, const char *s, int idx) {
-const char *cmd_get_default_path(struct cmd_ctx *ctx, const char *cwd) {
+const char *
+cmd_get_default_path(struct cmd_ctx *ctx, const char *cwd)
+{
@@ -793,2 +940,4 @@ const char *cmd_get_default_path(struct cmd_ctx *ctx, const char *cwd) {
-  if ((s = cmd_current_session(ctx, 0)) == NULL) return (NULL);
-  if (cwd == NULL) cwd = options_get_string(&s->options, "default-path");
+ if ((s = cmd_current_session(ctx, 0)) == NULL)
+  return (NULL);
+ if (cwd == NULL)
+  cwd = options_get_string(&s->options, "default-path");
@@ -816 +964,0 @@ const char *cmd_get_default_path(struct cmd_ctx *ctx, const char *cwd) {
-<<<<<<< HEAD
@@ -818,5 +965,0 @@ const char *cmd_get_default_path(struct cmd_ctx *ctx, const char *cwd) {
-|||||||
-      root = get_proc_cwd(s->curw->window->active->fd);
-=======
-      root = osdep_get_cwd(s->curw->window->active->pid);
->>>>>>> 253f1395a03b7b3371799055a7e3a442a8fa7ba6
@@ -826 +969,2 @@ const char *cmd_get_default_path(struct cmd_ctx *ctx, const char *cwd) {
-    if (root != NULL) goto complete_path;
+  if (root != NULL)
+   goto complete_path;
@@ -843 +987,2 @@ complete_path:
-  if (n > 0 && (size_t)n < sizeof path) return (path);
+ if (n > 0 && (size_t)n < sizeof path)
+  return (path);
