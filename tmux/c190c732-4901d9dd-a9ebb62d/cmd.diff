diff --git a/home/whalien/codebase/cpp/mergebot/eva/output/tmux/c190c732-4901d9dd-a9ebb62d/cmd.no_comments_mergebot.c b/home/whalien/codebase/cpp/mergebot/eva/output/tmux/c190c732-4901d9dd-a9ebb62d/cmd.no_comments_merged.c
index 8ac6004..fb7e178 100644
--- a/home/whalien/codebase/cpp/mergebot/eva/output/tmux/c190c732-4901d9dd-a9ebb62d/cmd.no_comments_mergebot.c
+++ b/home/whalien/codebase/cpp/mergebot/eva/output/tmux/c190c732-4901d9dd-a9ebb62d/cmd.no_comments_merged.c
@@ -4 +3,0 @@
-#include <paths.h>
@@ -10 +9,2 @@
-const struct cmd_entry *cmd_table[] = {&cmd_attach_session_entry,
+const struct cmd_entry *cmd_table[] = {
+ &cmd_attach_session_entry,
@@ -95 +95,2 @@ const struct cmd_entry *cmd_table[] = {&cmd_attach_session_entry,
-                                       NULL};
+ NULL
+};
@@ -113 +114,3 @@ struct window_pane *cmd_find_pane_offset(const char *, struct winlink *);
-int cmd_pack_argv(int argc, char **argv, char *buf, size_t len) {
+int
+cmd_pack_argv(int argc, char **argv, char *buf, size_t len)
+{
@@ -118 +121,2 @@ int cmd_pack_argv(int argc, char **argv, char *buf, size_t len) {
-    if (strlcpy(buf, argv[i], len) >= len) return (-1);
+  if (strlcpy(buf, argv[i], len) >= len)
+   return (-1);
@@ -125 +129,3 @@ int cmd_pack_argv(int argc, char **argv, char *buf, size_t len) {
-int cmd_unpack_argv(char *buf, size_t len, int argc, char ***argv) {
+int
+cmd_unpack_argv(char *buf, size_t len, int argc, char ***argv)
+{
@@ -128 +134,2 @@ int cmd_unpack_argv(char *buf, size_t len, int argc, char ***argv) {
-  if (argc == 0) return (0);
+ if (argc == 0)
+  return (0);
@@ -143 +150,3 @@ int cmd_unpack_argv(char *buf, size_t len, int argc, char ***argv) {
-char **cmd_copy_argv(int argc, char *const *argv) {
+char **
+cmd_copy_argv(int argc, char *const *argv)
+{
@@ -146 +155,2 @@ char **cmd_copy_argv(int argc, char *const *argv) {
-  if (argc == 0) return (NULL);
+ if (argc == 0)
+  return (NULL);
@@ -149 +159,2 @@ char **cmd_copy_argv(int argc, char *const *argv) {
-    if (argv[i] != NULL) new_argv[i] = xstrdup(argv[i]);
+  if (argv[i] != NULL)
+   new_argv[i] = xstrdup(argv[i]);
@@ -153 +164,3 @@ char **cmd_copy_argv(int argc, char *const *argv) {
-void cmd_free_argv(int argc, char **argv) {
+void
+cmd_free_argv(int argc, char **argv)
+{
@@ -155,2 +168,4 @@ void cmd_free_argv(int argc, char **argv) {
-  if (argc == 0) return;
-  for (i = 0; i < argc; i++) free(argv[i]);
+ if (argc == 0)
+  return;
+ for (i = 0; i < argc; i++)
+  free(argv[i]);
@@ -159,2 +174,3 @@ void cmd_free_argv(int argc, char **argv) {
-struct cmd *cmd_parse(int argc, char **argv, const char *file, u_int line,
-                      char **cause) {
+struct cmd *
+cmd_parse(int argc, char **argv, const char *file, u_int line, char **cause)
+{
@@ -173 +189,2 @@ struct cmd *cmd_parse(int argc, char **argv, const char *file, u_int line,
-    if ((*entryp)->alias != NULL && strcmp((*entryp)->alias, argv[0]) == 0) {
+  if ((*entryp)->alias != NULL &&
+      strcmp((*entryp)->alias, argv[0]) == 0) {
@@ -178,2 +195,4 @@ struct cmd *cmd_parse(int argc, char **argv, const char *file, u_int line,
-    if (strncmp((*entryp)->name, argv[0], strlen(argv[0])) != 0) continue;
-    if (entry != NULL) ambiguous = 1;
+  if (strncmp((*entryp)->name, argv[0], strlen(argv[0])) != 0)
+   continue;
+  if (entry != NULL)
+   ambiguous = 1;
@@ -181 +200,2 @@ struct cmd *cmd_parse(int argc, char **argv, const char *file, u_int line,
-    if (strcmp(entry->name, argv[0]) == 0) break;
+  if (strcmp(entry->name, argv[0]) == 0)
+   break;
@@ -183 +203,2 @@ struct cmd *cmd_parse(int argc, char **argv, const char *file, u_int line,
-  if (ambiguous) goto ambiguous;
+ if (ambiguous)
+  goto ambiguous;
@@ -189,3 +210,6 @@ struct cmd *cmd_parse(int argc, char **argv, const char *file, u_int line,
-  if (args == NULL) goto usage;
-  if (entry->args_lower != -1 && args->argc < entry->args_lower) goto usage;
-  if (entry->args_upper != -1 && args->argc > entry->args_upper) goto usage;
+ if (args == NULL)
+  goto usage;
+ if (entry->args_lower != -1 && args->argc < entry->args_lower)
+  goto usage;
+ if (entry->args_upper != -1 && args->argc > entry->args_upper)
+  goto usage;
@@ -195 +219,2 @@ struct cmd *cmd_parse(int argc, char **argv, const char *file, u_int line,
-  if (file != NULL) cmd->file = xstrdup(file);
+ if (file != NULL)
+  cmd->file = xstrdup(file);
@@ -201,3 +226,6 @@ ambiguous:
-    if (strncmp((*entryp)->name, argv[0], strlen(argv[0])) != 0) continue;
-    if (strlcat(s, (*entryp)->name, sizeof s) >= sizeof s) break;
-    if (strlcat(s, ", ", sizeof s) >= sizeof s) break;
+  if (strncmp((*entryp)->name, argv[0], strlen(argv[0])) != 0)
+   continue;
+  if (strlcat(s, (*entryp)->name, sizeof s) >= sizeof s)
+   break;
+  if (strlcat(s, ", ", sizeof s) >= sizeof s)
+   break;
@@ -209 +237,2 @@ usage:
-  if (args != NULL) args_free(args);
+ if (args != NULL)
+  args_free(args);
@@ -213 +242,3 @@ usage:
-size_t cmd_print(struct cmd *cmd, char *buf, size_t len) {
+size_t
+cmd_print(struct cmd *cmd, char *buf, size_t len)
+{
@@ -226 +257,3 @@ size_t cmd_print(struct cmd *cmd, char *buf, size_t len) {
-struct session *cmd_current_session(struct cmd_q *cmdq, int prefer_unattached) {
+struct session *
+cmd_current_session(struct cmd_q *cmdq, int prefer_unattached)
+{
@@ -234 +267,2 @@ struct session *cmd_current_session(struct cmd_q *cmdq, int prefer_unattached) {
-  if (c != NULL && c->session != NULL) return (c->session);
+ if (c != NULL && c->session != NULL)
+  return (c->session);
@@ -247 +281,2 @@ struct session *cmd_current_session(struct cmd_q *cmdq, int prefer_unattached) {
-        if (found) break;
+    if (found)
+     break;
@@ -249 +284,2 @@ struct session *cmd_current_session(struct cmd_q *cmdq, int prefer_unattached) {
-      if (found) ARRAY_ADD(&ss, s);
+   if (found)
+    ARRAY_ADD(&ss, s);
@@ -253 +289,2 @@ struct session *cmd_current_session(struct cmd_q *cmdq, int prefer_unattached) {
-    if (s != NULL) return (s);
+  if (s != NULL)
+   return (s);
@@ -257,3 +294,6 @@ struct session *cmd_current_session(struct cmd_q *cmdq, int prefer_unattached) {
-int cmd_session_better(struct session *s, struct session *best,
-                       int prefer_unattached) {
-  if (best == NULL) return (1);
+int
+cmd_session_better(struct session *s, struct session *best,
+    int prefer_unattached)
+{
+ if (best == NULL)
+  return (1);
@@ -261 +301,2 @@ int cmd_session_better(struct session *s, struct session *best,
-    if (!(best->flags & SESSION_UNATTACHED) && (s->flags & SESSION_UNATTACHED))
+  if (!(best->flags & SESSION_UNATTACHED) &&
+      (s->flags & SESSION_UNATTACHED))
@@ -269 +310,3 @@ int cmd_session_better(struct session *s, struct session *best,
-struct session *cmd_choose_session(int prefer_unattached) {
+struct session *
+cmd_choose_session(int prefer_unattached)
+{
@@ -273 +316,2 @@ struct session *cmd_choose_session(int prefer_unattached) {
-    if (cmd_session_better(s, best, prefer_unattached)) best = s;
+  if (cmd_session_better(s, best, prefer_unattached))
+   best = s;
@@ -277 +321,3 @@ struct session *cmd_choose_session(int prefer_unattached) {
-struct session *cmd_choose_session_list(struct sessionslist *ss) {
+struct session *
+cmd_choose_session_list(struct sessionslist *ss)
+{
@@ -283 +329,2 @@ struct session *cmd_choose_session_list(struct sessionslist *ss) {
-    if ((s = ARRAY_ITEM(ss, i)) == NULL) continue;
+  if ((s = ARRAY_ITEM(ss, i)) == NULL)
+   continue;
@@ -291 +338,3 @@ struct session *cmd_choose_session_list(struct sessionslist *ss) {
-struct client *cmd_current_client(struct cmd_q *cmdq) {
+struct client *
+cmd_current_client(struct cmd_q *cmdq)
+{
@@ -302,2 +351,4 @@ struct client *cmd_current_client(struct cmd_q *cmdq) {
-      if ((c = ARRAY_ITEM(&clients, i)) == NULL) continue;
-      if (s == c->session) ARRAY_ADD(&cc, c);
+   if ((c = ARRAY_ITEM(&clients, i)) == NULL)
+    continue;
+   if (s == c->session)
+    ARRAY_ADD(&cc, c);
@@ -307 +358,2 @@ struct client *cmd_current_client(struct cmd_q *cmdq) {
-    if (c != NULL) return (c);
+  if (c != NULL)
+   return (c);
@@ -311 +363,3 @@ struct client *cmd_current_client(struct cmd_q *cmdq) {
-struct client *cmd_choose_client(struct clients *cc) {
+struct client *
+cmd_choose_client(struct clients *cc)
+{
@@ -317,2 +371,4 @@ struct client *cmd_choose_client(struct clients *cc) {
-    if ((c = ARRAY_ITEM(cc, i)) == NULL) continue;
-    if (c->session == NULL) continue;
+  if ((c = ARRAY_ITEM(cc, i)) == NULL)
+   continue;
+  if (c->session == NULL)
+   continue;
@@ -326 +382,3 @@ struct client *cmd_choose_client(struct clients *cc) {
-struct client *cmd_find_client(struct cmd_q *cmdq, const char *arg, int quiet) {
+struct client *
+cmd_find_client(struct cmd_q *cmdq, const char *arg, int quiet)
+{
@@ -332 +390,2 @@ struct client *cmd_find_client(struct cmd_q *cmdq, const char *arg, int quiet) {
-    if (c == NULL && !quiet) cmdq_error(cmdq, "no clients");
+  if (c == NULL && !quiet)
+   cmdq_error(cmdq, "no clients");
@@ -337 +396,2 @@ struct client *cmd_find_client(struct cmd_q *cmdq, const char *arg, int quiet) {
-  if (arglen != 0 && tmparg[arglen - 1] == ':') tmparg[arglen - 1] = '\0';
+ if (arglen != 0 && tmparg[arglen - 1] == ':')
+  tmparg[arglen - 1] = '\0';
@@ -339 +399,2 @@ struct client *cmd_find_client(struct cmd_q *cmdq, const char *arg, int quiet) {
-  if (c == NULL && !quiet) cmdq_error(cmdq, "client not found: %s", tmparg);
+ if (c == NULL && !quiet)
+  cmdq_error(cmdq, "client not found: %s", tmparg);
@@ -343 +404,3 @@ struct client *cmd_find_client(struct cmd_q *cmdq, const char *arg, int quiet) {
-struct client *cmd_lookup_client(const char *name) {
+struct client *
+cmd_lookup_client(const char *name)
+{
@@ -349 +412,2 @@ struct client *cmd_lookup_client(const char *name) {
-    if (c == NULL || c->session == NULL || c->tty.path == NULL) continue;
+  if (c == NULL || c->session == NULL || c->tty.path == NULL)
+   continue;
@@ -351,3 +415,6 @@ struct client *cmd_lookup_client(const char *name) {
-    if (strcmp(name, path) == 0) return (c);
-    if (strncmp(path, _PATH_DEV, (sizeof _PATH_DEV) - 1) != 0) continue;
-    if (strcmp(name, path + (sizeof _PATH_DEV) - 1) == 0) return (c);
+  if (strcmp(name, path) == 0)
+   return (c);
+  if (strncmp(path, _PATH_DEV, (sizeof _PATH_DEV) - 1) != 0)
+   continue;
+  if (strcmp(name, path + (sizeof _PATH_DEV) - 1) == 0)
+   return (c);
@@ -357 +424,3 @@ struct client *cmd_lookup_client(const char *name) {
-struct session *cmd_lookup_session_id(const char *arg) {
+struct session *
+cmd_lookup_session_id(const char *arg)
+{
@@ -360 +429,2 @@ struct session *cmd_lookup_session_id(const char *arg) {
-  if (arg[0] != '$') return (NULL);
+ if (arg[0] != '$')
+  return (NULL);
@@ -362 +432,2 @@ struct session *cmd_lookup_session_id(const char *arg) {
-  if (arg[1] != '\0' && *endptr == '\0') return (session_find_by_id(id));
+ if (arg[1] != '\0' && *endptr == '\0')
+  return (session_find_by_id(id));
@@ -365 +436,3 @@ struct session *cmd_lookup_session_id(const char *arg) {
-struct session *cmd_lookup_session(const char *name, int *ambiguous) {
+struct session *
+cmd_lookup_session(const char *name, int *ambiguous)
+{
@@ -368,2 +441,4 @@ struct session *cmd_lookup_session(const char *name, int *ambiguous) {
-  if ((s = cmd_lookup_session_id(name)) != NULL) return (s);
-  if ((s = session_find(name)) != NULL) return (s);
+ if ((s = cmd_lookup_session_id(name)) != NULL)
+  return (s);
+ if ((s = session_find(name)) != NULL)
+  return (s);
@@ -383,2 +458,3 @@ struct session *cmd_lookup_session(const char *name, int *ambiguous) {
-struct winlink *cmd_lookup_window(struct session *s, const char *name,
-                                  int *ambiguous) {
+struct winlink *
+cmd_lookup_window(struct session *s, const char *name, int *ambiguous)
+{
@@ -389 +465,2 @@ struct winlink *cmd_lookup_window(struct session *s, const char *name,
-  if ((wl = cmd_lookup_winlink_windowid(s, name)) != NULL) return (wl);
+ if ((wl = cmd_lookup_winlink_windowid(s, name)) != NULL)
+     return (wl);
@@ -392 +469,2 @@ struct winlink *cmd_lookup_window(struct session *s, const char *name,
-    if ((wl = winlink_find_by_index(&s->windows, idx)) != NULL) return (wl);
+  if ((wl = winlink_find_by_index(&s->windows, idx)) != NULL)
+   return (wl);
@@ -404 +482,2 @@ struct winlink *cmd_lookup_window(struct session *s, const char *name,
-  if (wlfound != NULL) return (wlfound);
+ if (wlfound != NULL)
+  return (wlfound);
@@ -416 +495,2 @@ struct winlink *cmd_lookup_window(struct session *s, const char *name,
-  if (wlfound != NULL) return (wlfound);
+ if (wlfound != NULL)
+  return (wlfound);
@@ -419 +499,3 @@ struct winlink *cmd_lookup_window(struct session *s, const char *name,
-int cmd_lookup_index(struct session *s, const char *name, int *ambiguous) {
+int
+cmd_lookup_index(struct session *s, const char *name, int *ambiguous)
+{
@@ -423,2 +505,4 @@ int cmd_lookup_index(struct session *s, const char *name, int *ambiguous) {
-  if ((wl = cmd_lookup_window(s, name, ambiguous)) != NULL) return (wl->idx);
-  if (*ambiguous) return (-1);
+ if ((wl = cmd_lookup_window(s, name, ambiguous)) != NULL)
+  return (wl->idx);
+ if (*ambiguous)
+  return (-1);
@@ -426 +510,2 @@ int cmd_lookup_index(struct session *s, const char *name, int *ambiguous) {
-  if (errstr == NULL) return (idx);
+ if (errstr == NULL)
+  return (idx);
@@ -429 +514,3 @@ int cmd_lookup_index(struct session *s, const char *name, int *ambiguous) {
-struct window_pane *cmd_lookup_paneid(const char *arg) {
+struct window_pane *
+cmd_lookup_paneid(const char *arg)
+{
@@ -432 +519,2 @@ struct window_pane *cmd_lookup_paneid(const char *arg) {
-  if (*arg != '%') return (NULL);
+ if (*arg != '%')
+  return (NULL);
@@ -434 +522,2 @@ struct window_pane *cmd_lookup_paneid(const char *arg) {
-  if (errstr != NULL) return (NULL);
+ if (errstr != NULL)
+  return (NULL);
@@ -437,2 +526,3 @@ struct window_pane *cmd_lookup_paneid(const char *arg) {
-struct winlink *cmd_lookup_winlink_windowid(struct session *s,
-                                            const char *arg) {
+struct winlink *
+cmd_lookup_winlink_windowid(struct session *s, const char *arg)
+{
@@ -441 +531,2 @@ struct winlink *cmd_lookup_winlink_windowid(struct session *s,
-  if (*arg != '@') return (NULL);
+ if (*arg != '@')
+  return (NULL);
@@ -443 +534,2 @@ struct winlink *cmd_lookup_winlink_windowid(struct session *s,
-  if (errstr != NULL) return (NULL);
+ if (errstr != NULL)
+  return (NULL);
@@ -446 +538,3 @@ struct winlink *cmd_lookup_winlink_windowid(struct session *s,
-struct window *cmd_lookup_windowid(const char *arg) {
+struct window *
+cmd_lookup_windowid(const char *arg)
+{
@@ -449 +543,2 @@ struct window *cmd_lookup_windowid(const char *arg) {
-  if (*arg != '@') return (NULL);
+ if (*arg != '@')
+  return (NULL);
@@ -451 +546,2 @@ struct window *cmd_lookup_windowid(const char *arg) {
-  if (errstr != NULL) return (NULL);
+ if (errstr != NULL)
+  return (NULL);
@@ -454,2 +550,3 @@ struct window *cmd_lookup_windowid(const char *arg) {
-struct session *cmd_window_session(struct cmd_q *cmdq, struct window *w,
-                                   struct winlink **wlp) {
+struct session *
+cmd_window_session(struct cmd_q *cmdq, struct window *w, struct winlink **wlp)
+{
@@ -463 +560,2 @@ struct session *cmd_window_session(struct cmd_q *cmdq, struct window *w,
-      if (wlp != NULL) *wlp = wl;
+   if (wlp != NULL)
+    *wlp = wl;
@@ -469 +567,2 @@ struct session *cmd_window_session(struct cmd_q *cmdq, struct window *w,
-    if (winlink_find_by_window(&s->windows, w) != NULL) ARRAY_ADD(&ss, s);
+  if (winlink_find_by_window(&s->windows, w) != NULL)
+   ARRAY_ADD(&ss, s);
@@ -473 +572,2 @@ struct session *cmd_window_session(struct cmd_q *cmdq, struct window *w,
-  if (wlp != NULL) *wlp = winlink_find_by_window(&s->windows, w);
+ if (wlp != NULL)
+  *wlp = winlink_find_by_window(&s->windows, w);
@@ -476,2 +576,3 @@ struct session *cmd_window_session(struct cmd_q *cmdq, struct window *w,
-struct session *cmd_find_session(struct cmd_q *cmdq, const char *arg,
-                                 int prefer_unattached) {
+struct session *
+cmd_find_session(struct cmd_q *cmdq, const char *arg, int prefer_unattached)
+{
@@ -485 +586,2 @@ struct session *cmd_find_session(struct cmd_q *cmdq, const char *arg,
-  if (arg == NULL) return (cmd_current_session(cmdq, prefer_unattached));
+ if (arg == NULL)
+  return (cmd_current_session(cmdq, prefer_unattached));
@@ -492 +594,2 @@ struct session *cmd_find_session(struct cmd_q *cmdq, const char *arg,
-  if (arglen != 0 && tmparg[arglen - 1] == ':') tmparg[arglen - 1] = '\0';
+ if (arglen != 0 && tmparg[arglen - 1] == ':')
+  tmparg[arglen - 1] = '\0';
@@ -498 +601,2 @@ struct session *cmd_find_session(struct cmd_q *cmdq, const char *arg,
-  if (s == NULL && (c = cmd_lookup_client(tmparg)) != NULL) s = c->session;
+ if (s == NULL && (c = cmd_lookup_client(tmparg)) != NULL)
+  s = c->session;
@@ -508,2 +612,3 @@ struct session *cmd_find_session(struct cmd_q *cmdq, const char *arg,
-struct winlink *cmd_find_window(struct cmd_q *cmdq, const char *arg,
-                                struct session **sp) {
+struct winlink *
+cmd_find_window(struct cmd_q *cmdq, const char *arg, struct session **sp)
+{
@@ -521 +626,2 @@ struct winlink *cmd_find_window(struct cmd_q *cmdq, const char *arg,
-    if (sp != NULL) *sp = s;
+  if (sp != NULL)
+   *sp = s;
@@ -526 +632,2 @@ struct winlink *cmd_find_window(struct cmd_q *cmdq, const char *arg,
-    if (sp != NULL) *sp = s;
+  if (sp != NULL)
+   *sp = s;
@@ -529 +636,2 @@ struct winlink *cmd_find_window(struct cmd_q *cmdq, const char *arg,
-  if (*arg == '\0') goto not_found;
+ if (*arg == '\0')
+  goto not_found;
@@ -531 +639,2 @@ struct winlink *cmd_find_window(struct cmd_q *cmdq, const char *arg,
-  if (winptr == NULL) goto no_colon;
+ if (winptr == NULL)
+  goto no_colon;
@@ -536 +645,2 @@ struct winlink *cmd_find_window(struct cmd_q *cmdq, const char *arg,
-    if ((s = cmd_lookup_session(sessptr, &ambiguous)) == NULL) goto no_session;
+  if ((s = cmd_lookup_session(sessptr, &ambiguous)) == NULL)
+   goto no_session;
@@ -538 +648,2 @@ struct winlink *cmd_find_window(struct cmd_q *cmdq, const char *arg,
-  if (sp != NULL) *sp = s;
+ if (sp != NULL)
+  *sp = s;
@@ -551,2 +662,4 @@ struct winlink *cmd_find_window(struct cmd_q *cmdq, const char *arg,
-  if (wl == NULL) goto not_found;
-  if (sessptr != NULL) free(sessptr);
+ if (wl == NULL)
+  goto not_found;
+ if (sessptr != NULL)
+  free(sessptr);
@@ -556 +669,2 @@ no_colon:
-    if ((wl = TAILQ_FIRST(&s->lastw)) == NULL) goto not_found;
+  if ((wl = TAILQ_FIRST(&s->lastw)) == NULL)
+   goto not_found;
@@ -562 +676,2 @@ no_colon:
-  if (sp != NULL) *sp = s;
+ if (sp != NULL)
+  *sp = s;
@@ -565 +680,2 @@ lookup_session:
-  if (ambiguous) goto not_found;
+ if (ambiguous)
+  goto not_found;
@@ -568 +684,2 @@ lookup_session:
-  if (sp != NULL) *sp = s;
+ if (sp != NULL)
+  *sp = s;
@@ -585,2 +702,3 @@ not_found:
-struct winlink *cmd_find_window_offset(const char *winptr, struct session *s,
-                                       int *ambiguous) {
+struct winlink *
+cmd_find_window_offset(const char *winptr, struct session *s, int *ambiguous)
+{
@@ -589 +707,2 @@ struct winlink *cmd_find_window_offset(const char *winptr, struct session *s,
-  if (winptr[1] != '\0') offset = strtonum(winptr + 1, 1, INT_MAX, NULL);
+ if (winptr[1] != '\0')
+  offset = strtonum(winptr + 1, 1, INT_MAX, NULL);
@@ -600 +719,3 @@ struct winlink *cmd_find_window_offset(const char *winptr, struct session *s,
-int cmd_find_index(struct cmd_q *cmdq, const char *arg, struct session **sp) {
+int
+cmd_find_index(struct cmd_q *cmdq, const char *arg, struct session **sp)
+{
@@ -611 +732,2 @@ int cmd_find_index(struct cmd_q *cmdq, const char *arg, struct session **sp) {
-    if (sp != NULL) *sp = s;
+  if (sp != NULL)
+   *sp = s;
@@ -614 +736,2 @@ int cmd_find_index(struct cmd_q *cmdq, const char *arg, struct session **sp) {
-  if (*arg == '\0') goto not_found;
+ if (*arg == '\0')
+  goto not_found;
@@ -616 +739,2 @@ int cmd_find_index(struct cmd_q *cmdq, const char *arg, struct session **sp) {
-  if (winptr == NULL) goto no_colon;
+ if (winptr == NULL)
+  goto no_colon;
@@ -621 +745,2 @@ int cmd_find_index(struct cmd_q *cmdq, const char *arg, struct session **sp) {
-    if ((s = cmd_lookup_session(sessptr, &ambiguous)) == NULL) goto no_session;
+  if ((s = cmd_lookup_session(sessptr, &ambiguous)) == NULL)
+   goto no_session;
@@ -623 +748,2 @@ int cmd_find_index(struct cmd_q *cmdq, const char *arg, struct session **sp) {
-  if (sp != NULL) *sp = s;
+ if (sp != NULL)
+  *sp = s;
@@ -627 +753,2 @@ int cmd_find_index(struct cmd_q *cmdq, const char *arg, struct session **sp) {
-    if ((wl = TAILQ_FIRST(&s->lastw)) == NULL) goto not_found;
+  if ((wl = TAILQ_FIRST(&s->lastw)) == NULL)
+   goto not_found;
@@ -638 +765,2 @@ no_colon:
-    if ((wl = TAILQ_FIRST(&s->lastw)) == NULL) goto not_found;
+  if ((wl = TAILQ_FIRST(&s->lastw)) == NULL)
+   goto not_found;
@@ -645 +773,2 @@ no_colon:
-  if (sp != NULL) *sp = s;
+ if (sp != NULL)
+  *sp = s;
@@ -648 +777,2 @@ lookup_session:
-  if (ambiguous) goto not_found;
+ if (ambiguous)
+  goto not_found;
@@ -651 +781,2 @@ lookup_session:
-  if (sp != NULL) *sp = s;
+ if (sp != NULL)
+  *sp = s;
@@ -661 +792,2 @@ invalid_index:
-  if (ambiguous) goto not_found;
+ if (ambiguous)
+  goto not_found;
@@ -673,2 +805,3 @@ not_found:
-int cmd_find_index_offset(const char *winptr, struct session *s,
-                          int *ambiguous) {
+int
+cmd_find_index_offset(const char *winptr, struct session *s, int *ambiguous)
+{
@@ -676 +809,2 @@ int cmd_find_index_offset(const char *winptr, struct session *s,
-  if (winptr[1] != '\0') offset = strtonum(winptr + 1, 1, INT_MAX, NULL);
+ if (winptr[1] != '\0')
+  offset = strtonum(winptr + 1, 1, INT_MAX, NULL);
@@ -694,2 +828,4 @@ int cmd_find_index_offset(const char *winptr, struct session *s,
-struct winlink *cmd_find_pane(struct cmd_q *cmdq, const char *arg,
-                              struct session **sp, struct window_pane **wpp) {
+struct winlink *
+cmd_find_pane(struct cmd_q *cmdq,
+    const char *arg, struct session **sp, struct window_pane **wpp)
+{
@@ -705 +841,2 @@ struct winlink *cmd_find_pane(struct cmd_q *cmdq, const char *arg,
-  if (sp != NULL) *sp = s;
+ if (sp != NULL)
+  *sp = s;
@@ -712 +849,2 @@ struct winlink *cmd_find_pane(struct cmd_q *cmdq, const char *arg,
-    if (sp != NULL) *sp = s;
+  if (sp != NULL)
+   *sp = s;
@@ -715 +853,2 @@ struct winlink *cmd_find_pane(struct cmd_q *cmdq, const char *arg,
-  if ((period = strrchr(arg, '.')) == NULL) goto no_period;
+ if ((period = strrchr(arg, '.')) == NULL)
+  goto no_period;
@@ -729 +868,2 @@ struct winlink *cmd_find_pane(struct cmd_q *cmdq, const char *arg,
-    if (errstr != NULL) goto lookup_string;
+  if (errstr != NULL)
+   goto lookup_string;
@@ -731 +871,2 @@ struct winlink *cmd_find_pane(struct cmd_q *cmdq, const char *arg,
-    if (*wpp == NULL) goto lookup_string;
+  if (*wpp == NULL)
+   goto lookup_string;
@@ -744 +885,2 @@ no_period:
-  if (errstr != NULL) goto lookup_window;
+ if (errstr != NULL)
+  goto lookup_window;
@@ -751 +893,2 @@ lookup_window:
-  if ((wl = cmd_find_window(cmdq, arg, sp)) != NULL) *wpp = wl->window->active;
+ if ((wl = cmd_find_window(cmdq, arg, sp)) != NULL)
+  *wpp = wl->window->active;
@@ -757,2 +900,3 @@ error:
-struct window_pane *cmd_find_pane_offset(const char *paneptr,
-                                         struct winlink *wl) {
+struct window_pane *
+cmd_find_pane_offset(const char *paneptr, struct winlink *wl)
+{
@@ -762 +906,2 @@ struct window_pane *cmd_find_pane_offset(const char *paneptr,
-  if (paneptr[1] != '\0') offset = strtonum(paneptr + 1, 1, INT_MAX, NULL);
+ if (paneptr[1] != '\0')
+  offset = strtonum(paneptr + 1, 1, INT_MAX, NULL);
@@ -771 +916,3 @@ struct window_pane *cmd_find_pane_offset(const char *paneptr,
-char *cmd_template_replace(const char *template, const char *s, int idx) {
+char *
+cmd_template_replace(const char *template, const char *s, int idx)
+{
@@ -776 +923,2 @@ char *cmd_template_replace(const char *template, const char *s, int idx) {
-  if (strchr(template, '%') == NULL) return (xstrdup(template));
+ if (strchr(template, '%') == NULL)
+  return (xstrdup(template));
@@ -786 +934,2 @@ char *cmd_template_replace(const char *template, const char *s, int idx) {
-          if (*ptr != '%' || replaced) break;
+    if (*ptr != '%' || replaced)
+     break;
