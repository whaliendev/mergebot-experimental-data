diff --git a/home/whalien/codebase/cpp/mergebot/eva/output/tmux/e304673c-a011b67f-e9d369a0/utf8.no_comments_mergebot.c b/home/whalien/codebase/cpp/mergebot/eva/output/tmux/e304673c-a011b67f-e9d369a0/utf8.no_comments_merged.c
index 8fb8d61..cfebdb1 100644
--- a/home/whalien/codebase/cpp/mergebot/eva/output/tmux/e304673c-a011b67f-e9d369a0/utf8.no_comments_mergebot.c
+++ b/home/whalien/codebase/cpp/mergebot/eva/output/tmux/e304673c-a011b67f-e9d369a0/utf8.no_comments_merged.c
@@ -4 +3,0 @@
-#include <wchar.h>
@@ -7 +6,3 @@ static int utf8_width(wchar_t);
-void utf8_set(struct utf8_data *ud, u_char ch) {
+void
+utf8_set(struct utf8_data *ud, u_char ch)
+{
@@ -13 +14,2 @@ void utf8_set(struct utf8_data *ud, u_char ch) {
-  for (i = ud->size; i < sizeof ud->data; i++) ud->data[i] = '\0';
+ for (i = ud->size; i < sizeof ud->data; i++)
+  ud->data[i] = '\0';
@@ -15 +17,3 @@ void utf8_set(struct utf8_data *ud, u_char ch) {
-void utf8_copy(struct utf8_data *to, const struct utf8_data *from) {
+void
+utf8_copy(struct utf8_data *to, const struct utf8_data *from)
+{
@@ -18 +22,2 @@ void utf8_copy(struct utf8_data *to, const struct utf8_data *from) {
-  for (i = to->size; i < sizeof to->data; i++) to->data[i] = '\0';
+ for (i = to->size; i < sizeof to->data; i++)
+  to->data[i] = '\0';
@@ -20 +25,3 @@ void utf8_copy(struct utf8_data *to, const struct utf8_data *from) {
-enum utf8_state utf8_open(struct utf8_data *ud, u_char ch) {
+enum utf8_state
+utf8_open(struct utf8_data *ud, u_char ch)
+{
@@ -33 +40,3 @@ enum utf8_state utf8_open(struct utf8_data *ud, u_char ch) {
-enum utf8_state utf8_append(struct utf8_data *ud, u_char ch) {
+enum utf8_state
+utf8_append(struct utf8_data *ud, u_char ch)
+{
@@ -36,3 +45,6 @@ enum utf8_state utf8_append(struct utf8_data *ud, u_char ch) {
-  if (ud->have >= ud->size) fatalx("UTF-8 character overflow");
-  if (ud->size > sizeof ud->data) fatalx("UTF-8 character size too large");
-  if (ud->have != 0 && (ch & 0xc0) != 0x80) ud->width = 0xff;
+ if (ud->have >= ud->size)
+  fatalx("UTF-8 character overflow");
+ if (ud->size > sizeof ud->data)
+  fatalx("UTF-8 character size too large");
+ if (ud->have != 0 && (ch & 0xc0) != 0x80)
+  ud->width = 0xff;
@@ -40,4 +52,8 @@ enum utf8_state utf8_append(struct utf8_data *ud, u_char ch) {
-  if (ud->have != ud->size) return (UTF8_MORE);
-  if (ud->width == 0xff) return (UTF8_ERROR);
-  if (utf8_combine(ud, &wc) != UTF8_DONE) return (UTF8_ERROR);
-  if ((width = utf8_width(wc)) < 0) return (UTF8_ERROR);
+ if (ud->have != ud->size)
+  return (UTF8_MORE);
+ if (ud->width == 0xff)
+  return (UTF8_ERROR);
+ if (utf8_combine(ud, &wc) != UTF8_DONE)
+  return (UTF8_ERROR);
+ if ((width = utf8_width(wc)) < 0)
+  return (UTF8_ERROR);
@@ -47 +63,3 @@ enum utf8_state utf8_append(struct utf8_data *ud, u_char ch) {
-static intutf8_width(wchar_t wc) {
+static int
+utf8_width(wchar_t wc)
+{
@@ -50 +68,2 @@ static intutf8_width(wchar_t wc) {
-  if (width < 0 || width > 0xff) return (-1);
+ if (width < 0 || width > 0xff)
+  return (-1);
@@ -53 +71,0 @@ static intutf8_width(wchar_t wc) {
-<<<<<<< HEAD
@@ -55,7 +73,2 @@ enum utf8_state
-|||||||
-u_int
-=======
-wchar_t
->>>>>>> a011b67f56448b38e251418f0af67ff12411a0a0
-utf8_combine(const struct utf8_data *ud, wchar_t *wc) {
-<<<<<<< HEAD
+utf8_combine(const struct utf8_data *ud, wchar_t *wc)
+{
@@ -71,22 +83,0 @@ utf8_combine(const struct utf8_data *ud, wchar_t *wc) {
-|||||||
-  u_int uc;
-  uc = 0xfffd;
-  switch (ud->size) {
-    case 1:
-      uc = ud->data[0];
-      break;
-    case 2:
-      uc = ud->data[1] & 0x3f;
-      uc |= (ud->data[0] & 0x1f) << 6;
-      break;
-    case 3:
-      uc = ud->data[2] & 0x3f;
-      uc |= (ud->data[1] & 0x3f) << 6;
-      uc |= (ud->data[0] & 0xf) << 12;
-      break;
-    case 4:
-      uc = ud->data[3] & 0x3f;
-      uc |= (ud->data[2] & 0x3f) << 6;
-      uc |= (ud->data[1] & 0x3f) << 12;
-      uc |= (ud->data[0] & 0x7) << 18;
-      break;
@@ -94,35 +85,5 @@ utf8_combine(const struct utf8_data *ud, wchar_t *wc) {
-  return (uc);
-=======
-  wchar_t wc;
-  if (mbtowc(&wc, ud->data, ud->size) <= 0) return (0xfffd);
-  return (wc);
->>>>>>> a011b67f56448b38e251418f0af67ff12411a0a0
-}
-enum utf8_stateutf8_split(u_int uc, wchar_t wc, struct utf8_data *ud) {
-<<<<<<< HEAD
-  char s[MB_LEN_MAX]; int slen;
-  slen = wctomb(s, wc);
-  if (slen <= 0 || slen > (int)sizeof ud->data)
-|||||||
-  if (uc < 0x7f){ud->size = 1; ud->data[0] = uc;}
-else if (uc < 0x7ff) {
-  ud->size = 2;
-  ud->data[0] = 0xc0 | ((uc >> 6) & 0x1f);
-  ud->data[1] = 0x80 | (uc & 0x3f);
-}
-else if (uc < 0xffff) {
-  ud->size = 3;
-  ud->data[0] = 0xe0 | ((uc >> 12) & 0xf);
-  ud->data[1] = 0x80 | ((uc >> 6) & 0x3f);
-  ud->data[2] = 0x80 | (uc & 0x3f);
-}
-else if (uc < 0x1fffff) {
-  ud->size = 4;
-  ud->data[0] = 0xf0 | ((uc >> 18) & 0x7);
-  ud->data[1] = 0x80 | ((uc >> 12) & 0x3f);
-  ud->data[2] = 0x80 | ((uc >> 6) & 0x3f);
-  ud->data[3] = 0x80 | (uc & 0x3f);
-}
-else
-=======
-  char s[MB_CUR_MAX]; int slen;
+enum utf8_state
+utf8_split(wchar_t wc, struct utf8_data *ud)
+{
+ char s[MB_LEN_MAX];
+ int slen;
@@ -131 +91,0 @@ else
->>>>>>> a011b67f56448b38e251418f0af67ff12411a0a0
@@ -138 +98,3 @@ else
-int utf8_strvis(char *dst, const char *src, size_t len, int flag) {
+int
+utf8_strvis(char *dst, const char *src, size_t len, int flag)
+{
@@ -147 +109,2 @@ int utf8_strvis(char *dst, const char *src, size_t len, int flag) {
-      while (++src < end && more == UTF8_MORE) more = utf8_append(&ud, *src);
+   while (++src < end && more == UTF8_MORE)
+    more = utf8_append(&ud, *src);
@@ -149 +112,2 @@ int utf8_strvis(char *dst, const char *src, size_t len, int flag) {
-        for (i = 0; i < ud.size; i++) *dst++ = ud.data[i];
+    for (i = 0; i < ud.size; i++)
+     *dst++ = ud.data[i];
@@ -163 +127,3 @@ int utf8_strvis(char *dst, const char *src, size_t len, int flag) {
-char *utf8_sanitize(const char *src) {
+char *
+utf8_sanitize(const char *src)
+{
@@ -174 +140,2 @@ char *utf8_sanitize(const char *src) {
-      while (*++src != '\0' && more == UTF8_MORE) more = utf8_append(&ud, *src);
+   while (*++src != '\0' && more == UTF8_MORE)
+    more = utf8_append(&ud, *src);
@@ -176,2 +143,4 @@ char *utf8_sanitize(const char *src) {
-        dst = xreallocarray(dst, n + ud.width, sizeof *dst);
-        for (i = 0; i < ud.width; i++) dst[n++] = '_';
+    dst = xreallocarray(dst, n + ud.width,
+        sizeof *dst);
+    for (i = 0; i < ud.width; i++)
+     dst[n++] = '_';
@@ -192 +161,3 @@ char *utf8_sanitize(const char *src) {
-struct utf8_data *utf8_fromcstr(const char *src) {
+struct utf8_data *
+utf8_fromcstr(const char *src)
+{
@@ -217 +188,3 @@ struct utf8_data *utf8_fromcstr(const char *src) {
-char *utf8_tocstr(struct utf8_data *src) {
+char *
+utf8_tocstr(struct utf8_data *src)
+{
@@ -231 +204,3 @@ char *utf8_tocstr(struct utf8_data *src) {
-u_int utf8_cstrwidth(const char *s) {
+u_int
+utf8_cstrwidth(const char *s)
+{
@@ -238 +213,2 @@ u_int utf8_cstrwidth(const char *s) {
-      while (*++s != '\0' && more == UTF8_MORE) more = utf8_append(&tmp, *s);
+   while (*++s != '\0' && more == UTF8_MORE)
+    more = utf8_append(&tmp, *s);
@@ -245 +221,2 @@ u_int utf8_cstrwidth(const char *s) {
-    if (*s > 0x1f && *s != 0x7f) width++;
+  if (*s > 0x1f && *s != 0x7f)
+   width++;
@@ -250 +227,3 @@ u_int utf8_cstrwidth(const char *s) {
-char *utf8_trimcstr(const char *s, u_int width) {
+char *
+utf8_trimcstr(const char *s, u_int width)
+{
@@ -267 +246,3 @@ char *utf8_trimcstr(const char *s, u_int width) {
-char *utf8_rtrimcstr(const char *s, u_int width) {
+char *
+utf8_rtrimcstr(const char *s, u_int width)
+{
@@ -272 +253,2 @@ char *utf8_rtrimcstr(const char *s, u_int width) {
-  for (end = tmp; end->size != 0; end++) ;
+ for (end = tmp; end->size != 0; end++)
+               ;
@@ -279 +261,2 @@ char *utf8_rtrimcstr(const char *s, u_int width) {
-  for (;;) {
+ for (;;)
+ {
@@ -285 +268,2 @@ char *utf8_rtrimcstr(const char *s, u_int width) {
-    if (next == tmp) break;
+  if (next == tmp)
+   break;
@@ -292 +276,3 @@ char *utf8_rtrimcstr(const char *s, u_int width) {
-char *utf8_padcstr(const char *s, u_int width) {
+char *
+utf8_padcstr(const char *s, u_int width)
+{
@@ -297 +283,2 @@ char *utf8_padcstr(const char *s, u_int width) {
-  if (n >= width) return (xstrdup(s));
+ if (n >= width)
+  return (xstrdup(s));
@@ -301 +288,2 @@ char *utf8_padcstr(const char *s, u_int width) {
-  for (i = n; i < width; i++) out[slen++] = ' ';
+ for (i = n; i < width; i++)
+  out[slen++] = ' ';
